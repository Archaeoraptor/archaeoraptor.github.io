<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>止息的博客</title>
  
  <subtitle>唯见月寒日暖，来煎人寿</subtitle>
  <link href="https://zhangjk98.xyz/atom.xml" rel="self"/>
  
  <link href="https://zhangjk98.xyz/"/>
  <updated>2021-10-30T04:00:01.000Z</updated>
  <id>https://zhangjk98.xyz/</id>
  
  <author>
    <name>Zhang.j.k</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hackergame 2021 (中科大信安赛) Write Up</title>
    <link href="https://zhangjk98.xyz/hackergame-2021-write-up/"/>
    <id>https://zhangjk98.xyz/hackergame-2021-write-up/</id>
    <published>2021-10-30T04:00:01.000Z</published>
    <updated>2021-10-30T04:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>对，今年这个就是UTF-8比赛（确信<br>周二还在想今年中科大信安赛是不是要开始了，结果一看已经进行一半了，来划个水吧。由于太菜加上懒，math零蛋，只能流下数理基础不扎实的泪水。  </p><p>作为一个纯萌新和老废物，第一次参加Hackergame，以前看到他们中科大LUG办的，就想着下次举办去参加一下玩。以前看到好多Web题和有意思的小题目，虽然我js也特别菜，好歹还能挣扎一下。结果几年一打开就是一堆binary糊脸，二进制和逆向pwm之类的完全不懂，罢了，就做点General吧</p><span id="more"></span><p>很意外自己能挤进200名的，事前完全没有准备，也没接触过CTF之类的东西，甚至比赛开始3天，进行到一半了我才突然发现这比赛ta开始liao， p😭q</p><p>看来Hackergame真的是萌新友好，明年一定再来玩。</p><p><img src="/hackergame-2021-write-up/image-20211030121230343.png" alt="image-20211030121230343"></p><h2 id="做出了来的的小题目"><a href="#做出了来的的小题目" class="headerlink" title="做出了来的的小题目"></a>做出了来的的小题目</h2><p>还是有不少对我很友好的题目的</p><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p></blockquote><p>打开题目，秒是从1970年开始计算的，这就是UNIX时间戳呗。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> +%s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到<code>1635213339</code>，修改URL后缀，得到<code>flag&#123;HappyHacking2021-b0e5f6c9af&#125;</code>签到成功</p><h3 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h3><p>首先我们OCR识别一下</p><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个好办，打开Bless Hex Editor之类的Hex编辑器, flag的16进制是<code>66 6C 61 67</code>, 找到相应位置，得到flag为<code>flag&#123;Y0U_SH0U1D_kn0w_H0W_t0_C0nv3rt_HEX_to_TexT&#125;</code></p><h3 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h3><p>F12想直接修改放瓜数量为负是不可以的，我们没有办法放上一个负数或者小数的瓜</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;放上 6 斤的瓜 &lt;input type&#x3D;&quot;number&quot; class&#x3D;&quot;number&quot; name&#x3D;&quot;b6&quot; value&#x3D;&quot;0&quot; min&#x3D;&quot;0&quot;&gt; 个&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始填一个很大的数尝试溢出，果然。</p><p><img src="/hackergame-2021-write-up/image-20211026131723641-16352255218271.png" alt="image-20211026131723641"></p><p>然后就是打开WolframAlpha, 一边算一边试，试出了一个正好二十。</p><h3 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h3><p>一开始没什么头绪，但是看到左下角那个彩色方块的小房子实在是太显眼了，可能是什么地标建筑。我们以图搜图找一下呗。</p><p>Google搜图没有结果，TineEye也没有。算了算了，打开我最讨厌的百度（毕竟这可能是一个国内的位置）</p><p><span class="exturl" data-url="aHR0cHM6Ly9ncmFwaC5iYWlkdS5jb20vcGNwYWdlL3NpbWlsYXI/b3JpZ2luU2lnbj0xMjZjMGQ1YjgyZjIzMmYzMDY5YjkwMTYzNTMxMTc1OSZzcmNwPWNyc19wY19zaW1pbGFyJnRuPXBjJmlkY3RhZz1neiZzaWRzPTEwMDA3XzEwNTEyXzEwNTIxXzEwOTE0XzEwOTEzXzExMDA2XzEwOTI0XzEwOTA1XzEwMDE4XzEwOTAxXzEwOTQyXzEwOTA3XzExMDEyXzEwOTcwXzEwOTY4XzEwOTc0XzExMDMyXzE3ODUxXzE3MDcwXzE4MDEzXzE4MTAxXzE3MjAwXzE3MjAyXzE4MzAxXzE4MzExXzE4MzMwXzE5MzAwXzE5MTkxXzE5MTYyXzE5MjIwXzE5MjEwXzE5MjEyXzE5MjE0XzE5MjE3XzE5MjE5XzE5MjU2XzE5MjMwXzE5MjY4XzE5MjgwXzE5NTUwXzE5NjcwXzEwMDAwJmxvZ2lkPTI0Mzg0MjcwMDgmZW50cmFuY2U9Z2VuZXJhbCZ0cGxfZnJvbT1wYyZwYWdlRnJvbT1ncmFwaF91cGxvYWRfcGNzaGl0dSZpbWFnZT1odHRwOi8vaW1nMS5iYWlkdS5jb20vaXQvdT0zODI1MzQwMjIwLDkyNzYwNTA0NiZmbT0yNTMmYXBwPTEzOCZmPUpQRUc/dz02NDAmaD00ODAmY2Fyb3VzZWw9NTAzJmluZGV4PTEmcGFnZT0xJnNoaXR1VG9rZW49YzkyM2Qz">百度搜图的结果<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ncmFwaC5iYWlkdS5jb20vcGNwYWdlL3NpbWlsYXI/b3JpZ2luU2lnbj0xMjZjMGQ1YjgyZjIzMmYzMDY5YjkwMTYzNTMxMTc1OSZzcmNwPWNyc19wY19zaW1pbGFyJnRuPXBjJmlkY3RhZz1neiZzaWRzPTEwMDA3XzEwNTEyXzEwNTIxXzEwOTE0XzEwOTEzXzExMDA2XzEwOTI0XzEwOTA1XzEwMDE4XzEwOTAxXzEwOTQyXzEwOTA3XzExMDEyXzEwOTcwXzEwOTY4XzEwOTc0XzExMDMyXzE3ODUxXzE3MDcwXzE4MDEzXzE4MTAxXzE3MjAwXzE3MjAyXzE4MzAxXzE4MzExXzE4MzMwXzE5MzAwXzE5MTkxXzE5MTYyXzE5MjIwXzE5MjEwXzE5MjEyXzE5MjE0XzE5MjE3XzE5MjE5XzE5MjU2XzE5MjMwXzE5MjY4XzE5MjgwXzE5NTUwXzE5NjcwXzEwMDAwJmxvZ2lkPTI0Mzg0MjcwMDgmZW50cmFuY2U9Z2VuZXJhbCZ0cGxfZnJvbT1wYyZwYWdlRnJvbT1ncmFwaF91cGxvYWRfcGNzaGl0dSZpbWFnZT1odHRwOi8vaW1nMi5iYWlkdS5jb20vaXQvdT0zMjUxMjkwNzY1LDE0NjUyMzc0ODkmZm09MjUzJmFwcD0xMzgmZj1KUEVHP3c9MjQ5Jmg9MjQ5JmNhcm91c2VsPTUwMyZpbmRleD01JnBhZ2U9MSZzaGl0dVRva2VuPTlkMDk3OA==">百度搜图的结果<i class="fa fa-external-link-alt"></i></span></p><p>搜到了，是秦皇岛西浴场。这个彩色方块的小房子是海边的救助亭。</p><p>秦皇岛西沙滩，附近有酒店和KFC，而且旁边就是海，应该就是这里了。</p><p>旁边甚至还有一个停车场。和一个秦皇岛国际大酒店（最后根据位置发现酒店应该不是这个）</p><p>然后查找一下周围的KFC（这种事情应该让馒狗来），果不其然有一个网红Tiffany KFC,一群人在小红书打卡。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueGlhb2hvbmdzaHUuY29tL2Rpc2NvdmVyeS9pdGVtLzVlOTZjOTE5MDAwMDAwMDAwMTAwNTdjMQ==">https://www.xiaohongshu.com/discovery/item/5e96c91900000000010057c1<i class="fa fa-external-link-alt"></i></span></p><p>高德地图上可以找到电话：0335-7168800</p><p>大众点评的照片上可以看到左侧建筑的三个字为：<strong>海豚馆</strong></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5kaWFucGluZy5jb20vc2hvcC8yNDQzNDA4Nw==">http://www.dianping.com/shop/24434087<i class="fa fa-external-link-alt"></i></span></p><p>从地图上看可能是东南方向，从阳光照射方向看可能是傍晚。</p><p>然后就剩下了楼层数，大概有15、16层左右的样子，随便试几个。结果是16，好的，得到flag</p><h3 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h3><p>这个是我精通八门乐器的室友秒掉的。mp3用foobar2000这个软件保存成wav文件然后修改采样率（大概从48000调到了18000的样子），然后保存回mp3，就可以听到声音了。</p><p>是一串北约音标字母。</p><h3 id="喵咪问答-Pro-Max"><a href="#喵咪问答-Pro-Max" class="headerlink" title="喵咪问答 Pro Max"></a>喵咪问答 Pro Max</h3><p>这个没啥好说的，Google搜就完事了</p><h3 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h3><p>graphql查询</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    user(id<span class="token operator">:</span><span class="token number">1</span>)<span class="token punctuation">&#123;</span>        username        privateEmail    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url接口是<code>/graphql?query=&#123;.....&#125;</code>, 会得到一个：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"privateEmail"</span><span class="token operator">:</span><span class="token string">"flag&#123;dont_let_graphql_l3ak_data_dad4053dd4@hackergame.ustc&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>收工。。。</p><h3 id="Amnesia-轻度失忆（第一个flag）"><a href="#Amnesia-轻度失忆（第一个flag）" class="headerlink" title="Amnesia 轻度失忆（第一个flag）"></a>Amnesia 轻度失忆（第一个flag）</h3><blockquote><p>编译后 ELF 文件的 .data 和 .rodata 段会被清零。</p></blockquote><p>唯一整出来的binary题目（避免了binary和math双双爆零的惨状），虽然这个好像也不算binary，更像是在考我编译原理。使劲浑身解数。。。。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span></span><span class="token keyword">char</span> <span class="token operator">*</span> hello<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>    <span class="token string">"mov $4,%eax;"</span>    <span class="token string">"mov $1,%ebx;"</span>    <span class="token string">"mov hello ,%ecx;"</span>    <span class="token string">"mov $13,%edx;"</span>    <span class="token string">"int $0x80"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free(hello);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有个小问题是它会内存泄漏，但是想不出什么更好的解答了。</p><h3 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h3><p>level0 简单，level1 也简单，就是实现一个循环呗。</p><p>剩下两个给我整不会了，人都傻了。</p><h3 id="p😭q"><a href="#p😭q" class="headerlink" title="p😭q"></a>p😭q</h3><p>我也不知道这道题何德何能排在倒数第三个，甚至还有400分的分值。在学了信号与系统、数字信号处理、数字图像处理、生物医学信号处理的我看来，这应该属于送分题。（不过之前都是用matlab做的，python的库都没用过）</p><p>先将gif每一帧转成图像再转成numpy的array再转成一维数组得到功率谱，傅立叶反变换回去得到音频信号……</p><p>等等。。。。它只有功率谱的幅度没有相位信息我可怎么恢复。难道要我猜一个相位吗？</p><p>搜了一下librosa，有一个自带的恢复库，用的是一个迭代估计的算法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageSequence<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> librosa<span class="token keyword">import</span> soundfile <span class="token keyword">as</span> sfsample_rate <span class="token operator">=</span> <span class="token number">22050</span>num_freqs <span class="token operator">=</span> <span class="token number">32</span>quantize <span class="token operator">=</span> <span class="token number">2</span>min_db <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">60</span>max_db <span class="token operator">=</span> <span class="token number">30</span>fft_window_size <span class="token operator">=</span> <span class="token number">2048</span>frame_step_size <span class="token operator">=</span> <span class="token number">512</span>window_function_type <span class="token operator">=</span> <span class="token string">'hann'</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.gif'</span><span class="token punctuation">)</span><span class="token builtin">iter</span> <span class="token operator">=</span> ImageSequence<span class="token punctuation">.</span>Iterator<span class="token punctuation">(</span>im<span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">1</span>spec <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> frame <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">:</span>    <span class="token comment"># print("image %d: mode %s, size %s" % (index, frame.mode, frame.size))</span>    frame<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./imgs/frame%d.png"</span> <span class="token operator">%</span> index<span class="token punctuation">)</span>    index <span class="token operator">+=</span> <span class="token number">1</span>    image_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>    image_list <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>image_arr<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># print(image_list)</span>    image_list <span class="token operator">=</span> image_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token comment"># print(image_list)</span>    <span class="token comment"># print(image_list.shape)</span>    spec <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'output1.txt'</span><span class="token punctuation">,</span> spec<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%d"</span><span class="token punctuation">)</span>spec <span class="token operator">=</span> np<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>spec<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>melspectrogram <span class="token operator">=</span> librosa<span class="token punctuation">.</span>db_to_power<span class="token punctuation">(</span>spec<span class="token punctuation">.</span>T<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token comment"># print(melspectrogram.shape)</span>audio_signal <span class="token operator">=</span> librosa<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>inverse<span class="token punctuation">.</span>mel_to_audio<span class="token punctuation">(</span>    melspectrogram<span class="token punctuation">,</span>    n_iter<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>    sr<span class="token operator">=</span>sample_rate<span class="token punctuation">,</span>    n_fft<span class="token operator">=</span>fft_window_size<span class="token punctuation">,</span>    hop_length<span class="token operator">=</span>frame_step_size<span class="token punctuation">,</span>    window<span class="token operator">=</span>window_function_type<span class="token punctuation">)</span><span class="token comment"># print(audio_signal, audio_signal.shape)</span>sf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test.wav'</span><span class="token punctuation">,</span> audio_signal<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好的，秒了。（怎么有种回到本科写课堂作业的感觉）</p><p>声音是有了，但是这个相位好像还是不太对的样子。我超，回声不绝于耳。。。</p><p>调一下参数，让他多迭代几轮<code>n_iter=8192,</code>，行了，现在清晰度有个高中大喇叭放英语早读听力的样子。</p><p><strong>衬衫的价格是九磅十五便士，现在你有十秒钟时间，将Flag填到输入框上</strong>…….</p><h2 id="看起来有点头绪但是没做的题目"><a href="#看起来有点头绪但是没做的题目" class="headerlink" title="看起来有点头绪但是没做的题目"></a>看起来有点头绪但是没做的题目</h2><p>懒癌又犯了，周六休息一会，周五天气太好了，还有其他事情要做，算了</p><h3 id="ESA-rsa"><a href="#ESA-rsa" class="headerlink" title="ESA rsa"></a>ESA rsa</h3><p>由于我找不到中科大少年班的神通，而我自己的数论还停留在高中水平（当年数竞还过了校队选拔，然后上来就听了好几节数论和组合，直接退出了（后悔，现在就是非常后悔））</p><p>只能找山大网安的大二学弟来帮帮我看看这个密码学的问题，问问这种形式该怎么解(已知n, p, q, c)</p><p>$$<br>a^n mod(p*q) = c<br>$$</p><p>他当场就给我秒了，还随手写了3页。</p><p>然后问题是怎么跑出这个p来，这次学弟也没什么好办法了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>    y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span>    value_p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span>                              x<span class="token punctuation">)</span>  <span class="token comment"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span>    <span class="token keyword">return</span> value_p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始我是这样跑的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> x    <span class="token comment"># print(sum)</span>    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum的值是"</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum的值是"</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果一跑就是一天，看到我的5600g只有1个CPU在跑，我决定整个multiprocessing（本来想用Golang整一个，但是Golang的数值计算库不太行，还得去用那个难用的<code>math/big</code>包）</p><p>结果再次发现，甚至上了multiprocessing，反而更慢了。</p><p>于是我决定搜一下，结果就找到了这个网站的两种算法：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvY29tcHV0ZS1uLXVuZGVyLW1vZHVsby1wLw==">Compute n! under modulo p<i class="fa fa-external-link-alt"></i></span></p><p>哦，有个复杂度$O((p-n)*Logn)$的算法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Python3 program to comput</span><span class="token comment"># n! % p using Wilson's Theorem</span><span class="token comment"># Utility function to do modular</span><span class="token comment"># exponentiation. It returns (x^y) % p</span><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># Initialize result</span>    x <span class="token operator">=</span> x <span class="token operator">%</span> p  <span class="token comment"># Update x if it is more</span>    <span class="token comment"># than or equal to p</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If y is odd, multiply</span>        <span class="token comment"># x with result</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p        <span class="token comment"># y must be even now</span>        y <span class="token operator">=</span> y <span class="token operator">>></span> <span class="token number">1</span>  <span class="token comment"># y = y/2</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p    <span class="token keyword">return</span> res<span class="token comment"># Function to find modular inverse</span><span class="token comment"># of a under modulo p using Fermat's</span><span class="token comment"># method. Assumption: p is prime</span><span class="token keyword">def</span> <span class="token function">modInverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> power<span class="token punctuation">(</span>a<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token comment"># Returns n! % p using</span><span class="token comment"># Wilson's Theorem</span><span class="token keyword">def</span> <span class="token function">modFact</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># n! % p is 0 if n >= p</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment"># Initialize result as (p-1)!</span>    <span class="token comment"># which is -1 or (p-1)</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># Multiply modulo inverse of</span>    <span class="token comment"># all numbers from (n+1) to p</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> modInverse<span class="token punctuation">(</span>i<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> p    <span class="token keyword">return</span> res<span class="token comment"># Driver code</span>x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span><span class="token comment"># y = 10</span>n <span class="token operator">=</span> yp <span class="token operator">=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>modFact<span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># This code is contributed by ihritik</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>只用了1分钟</strong>就跑了出来。这算法好强！</p><p>我把这个做法发给学弟，学弟表示：</p><p>“可以，回头我看看”<br>“<strong>我比较关心这个是怎么构造出来和怎么证明的</strong>”<br>“<strong>初等数论比较巧妙</strong>”<br>“<strong>可以看一下</strong>”  </p><p>听完学弟的话，接下来的内容我不太想做了。<br>我这样数理基础不扎实的菜狗（尤其是数论，一窍不通），做出来也<strong>改变不了我是个数论白痴的事实</strong>。都是些trival的东西了，<strong>有这个时间折腾这些应该去系统的补习一下数论</strong>。</p><h3 id="拼多多砍一刀"><a href="#拼多多砍一刀" class="headerlink" title="拼多多砍一刀"></a>拼多多砍一刀</h3><p>FLAG 助力大红包，这个东西应该挂一个爬虫代理池能做。但是这个方法好像太暴力了点，而且我不想再爬东西了，免费的那几个IP池都不太好用，要钱的又不想掏钱。</p><h3 id="minecraft"><a href="#minecraft" class="headerlink" title="minecraft"></a>minecraft</h3><p>随便乱走亮了两盏灯，还有一盏。看起来应该F12找找线索，有一个flag.js的东西，但是它一堆16进制的变量和函数名，看起来挺费劲，算了，不看了。</p><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>应该就是根据奇偶校验和他给的打码过程的那个python文件。上一次做二维码和奇偶校验的东西还是大二上数字电路的时候。算了，numpy二维数组转置心累了了，不想弄了，懒得处理array。</p><p>看起来像是第十版二维码，结果打开qrazybox想手动修复一下最高只有ver.9</p><p>周五周六天气真好，不做了。</p><h2 id="完全没头绪被乱杀到怀疑人生的题"><a href="#完全没头绪被乱杀到怀疑人生的题" class="headerlink" title="完全没头绪被乱杀到怀疑人生的题"></a>完全没头绪被乱杀到怀疑人生的题</h2><h3 id="Amnsia记忆清除"><a href="#Amnsia记忆清除" class="headerlink" title="Amnsia记忆清除"></a>Amnsia记忆清除</h3><p>抹除掉ELF文件的<code>.text</code>段，完全不会</p><h3 id="LUKS"><a href="#LUKS" class="headerlink" title="LUKS"></a>LUKS</h3><p>就觉得我这么长时间的Linux白用了，整不出来。我只会hashcat爆破，Hashcat爆破又没啥意思，算了，放弃。</p><h3 id="RAID修复"><a href="#RAID修复" class="headerlink" title="RAID修复"></a>RAID修复</h3><p>文件系统白学了，直接不会，白给。RAID-0做不出来，RAID-5也做不出来。</p><h3 id="赛博厨房后两问"><a href="#赛博厨房后两问" class="headerlink" title="赛博厨房后两问"></a>赛博厨房后两问</h3><p>直接人都傻了，找不到规律，根本找不到。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在是周六中午12点，总排名187/2679，很幸运没有掉出200名。</p><blockquote><p>当前分数：1600， 总排名：187 / 2679<br>binary：150 ， general：1050 ， math：0 ， web：400</p></blockquote><p>今年是第一次参见Hackergame，玩的很开心。binary的题比往年多了很多，不过我一个都不会，好在有个打印<code>Hello, world!</code>的题，很幸运没有爆零。  </p><p>当然，general和web题还是给了我一点信心，让我又找回了“世上英雄本无主”的感觉，不过打开排行榜看到mcfx乱秒的样子，嗯，我是傻逼。</p><p>主要感想就是数理基础太差，分析还能吃点老本，代数是真的太菜了，这几个月正好有空，准备去恶补一下数学。    </p><p>当然进前100名和CTF师傅们以及天神下凡的mcfx合影留念是无望了，明年再来玩耍吧。欢度周末去了，再见。   </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对，今年这个就是UTF-8比赛（确信&lt;br&gt;周二还在想今年中科大信安赛是不是要开始了，结果一看已经进行一半了，来划个水吧。由于太菜加上懒，math零蛋，只能流下数理基础不扎实的泪水。  &lt;/p&gt;
&lt;p&gt;作为一个纯萌新和老废物，第一次参加Hackergame，以前看到他们中科大LUG办的，就想着下次举办去参加一下玩。以前看到好多Web题和有意思的小题目，虽然我js也特别菜，好歹还能挣扎一下。结果几年一打开就是一堆binary糊脸，二进制和逆向pwm之类的完全不懂，罢了，就做点General吧&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hackergame" scheme="https://zhangjk98.xyz/tags/hackergame/"/>
    
    <category term="UTF-8" scheme="https://zhangjk98.xyz/tags/UTF-8/"/>
    
  </entry>
  
  <entry>
    <title>将VSCode作为Neovim的GUI客户端——VSCode Neovim插件配置</title>
    <link href="https://zhangjk98.xyz/systemd-homed/"/>
    <id>https://zhangjk98.xyz/systemd-homed/</id>
    <published>2021-10-06T16:00:00.000Z</published>
    <updated>2021-10-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来不报希望的试了试这套不伦不类的缝合怪配置，结果缝合出了很好的效果，可以拿这套配置在VSCode下养老了。</p><span id="more"></span><p>VSCodevim这个插件和原生Vim的体验差距很大，Vim的很多操作都不支持，而且大文件会特别卡。VSCode Neovim这个插件是在Insert模式几乎和正常的VSCode编辑一样，在Normal模式有满血的Vim体验（不像VSCodevim那样是体验是残血的，只是一个Vim键位和操作的模拟器）</p><p>这个插件直接将Neovim作为后端，在Normal模式下由Neovim控制（直接将内容缓存发往Neovim处理），可以使用Vim的各种键位操作<br>在Insert模式下，操作和渲染由VSCode处理，编辑体验几乎和VSCode完全一致。色彩高亮和代码补全等都由VSCode实现（所以不要装Neovim的LSP等插件，没用，而且可能影响速度）当你保存的时候更改会从VSCode同步到Neovim。  </p><p>VSCode在编辑模式下的舒服体验和插件、Vim在Normal模式下的操作，同时得到了保留，而且性能和速度还可以接受。</p><p>与其说这是VSCode的一个Vim键位插件，不如说是将VSCode直接改造成了Neovim的一个GUI客户端。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>VSCode插件市场装VSCode Neovim，Archlinux安装neovim<code>sudo pacman -S neovim</code><br>然后在设置里面填上路径</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"vscode-neovim.neovimExecutablePaths.linux"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/nvim"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以用了</p><h2 id="中文输入法和Neovim插件Normal模式下冲突"><a href="#中文输入法和Neovim插件Normal模式下冲突" class="headerlink" title="中文输入法和Neovim插件Normal模式下冲突"></a>中文输入法和Neovim插件Normal模式下冲突</h2><p>VSCode的Neovim插件在Normal模式下，如果fcitx5等输入法处于中文模式，那么输入的字符会被输入法全部捕获（就像平时在VSCode里打字一样）</p><p>ArchWiki 给出了下面这种方法，试了一下速度比较慢</p><pre class="line-numbers language-vimrc" data-language="vimrc"><code class="language-vimrc">autocmd InsertLeave * :silent !fcitx5-remote -c &quot; 退出插入模式时禁用输入法autocmd BufCreate *  :silent !fcitx5-remote -c &quot; 创建 Buf 时禁用输入法autocmd BufEnter *  :silent !fcitx5-remote -c &quot; 进入 Buf 时禁用输入法autocmd BufLeave *  :silent !fcitx5-remote -c &quot; 离开 Buf 时禁用输入法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比较快的方法是装插件，比如依云的fcitx.vim插件，但是这个插件在neovim下面好像没有效果。</p><p>本来想自己移植一个neovim的插件的，但是看了一下已经有人干了：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2gtaGcvZmNpdHgubnZpbS5naXQ=">fcitx.nvim<i class="fa fa-external-link-alt"></i></span></p><p>我用的vim-plug管理插件，放到<code>~/.config/nvim/init.vim</code>下面就可以了</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">call</span> plug#<span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Plug <span class="token string">'https://github.com/h-hg/fcitx.nvim.git'</span><span class="token keyword">call</span> plug#<span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一些按键绑定设置"><a href="#一些按键绑定设置" class="headerlink" title="一些按键绑定设置"></a>一些按键绑定设置</h2><p>首先我们不要hjkl这几个上下左右键（根本无法接受，我的肌肉记忆明明是键盘上上下左右四个经典方向键，玩空洞骑士和Ballance用的极其熟练，其次是WASD这个4399键位，其次是鼠标，我鼠标可熟练了）<br>我知道hjkl移动距离短而且移动后方便按距离近的i键进入Insert模式，但是我的肌肉记忆是上下左右，你再给我十年我也改不过来。</p><p>然后我将Casplock映射为ESC，这个万年不用的键放在这么重要的位置还有一个比Tab键还大的键帽，简直浪费。编辑<code>～/Xmodmap</code>修改键盘映射就可以了。</p><p>然后是VSCode里面正常的<code>Ctrl+F</code>当前搜索，这个我们找回来（<code>Ctrl+F</code>在Vim里是向上翻页，我完全用不到，我用PgDn和PgUp）</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>之前只在编辑小文件的时候临时用Vim, 这两年内Vim使用次数逐渐增多，Vim也逐渐熟练，一度产生过将主力编辑器从VSCode换成Vim的想法。VSCode在Linux平台上频繁内存泄漏、VSCode的渲染速度比Vim慢很多（尤其是打开大文件的时候），这些原因导致VSCode在某些时候的体验比Vim差了好多。</p><p>但是Vim我没有找到合适的GUI界面来打造一个对我而言比较舒服的编辑器，gvim在当年上嵌入式课的时候在Ubuntu下就试过一次了，感觉体验和</p><p>SpaceVim试过，装了一堆插件之后太卡，性能不是太好，性能表现几乎和VSCode不相上下，在我的超低配七年老电脑上失去了Vim流畅的优势，而且这一套界面的颜值和使用体验远不如VSCode。</p><p>Neovim的GUI界面有<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FraXlvc2kvZ29uZW92aW0=">goneovim<i class="fa fa-external-link-alt"></i></span>和neovide，体验也不如VSCode。（go居然能拿来写Qt还写成这种样子，哇偶）</p><p>最舒服的Vim体验还是在Alacritty里面，GPU加速渲染速度很快，非常丝滑。</p><p>而且VSCode在我从18年开始使用它的三年内，肉眼可见的进步。未来的前景也很光明，微软掏钱养着也不用担心倒闭的问题，除非微软倒闭（真倒闭了那不是更好吗，还有这种好事，苏联笑话.jpg）<br>现在我除了要写一万行以上的屎山项目才会打开Goland等全家桶IDE，编辑100行以下的配置文件等会打开vim。<br>剩下的绝大多数编辑都是用VSCode,用VSCode来写Go、C、Python、shell，用VSCode来写Markdown和LaTeX, 逐渐抛弃了typora和Word，也放弃了曾经很喜欢的sublime text（纯粹是因为好看和启动速度比vscode快一点）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWhvbm4ubWUvYmxvZy90aGUtdmltLWd1aWRlLWZvci12cy1jb2RlLXVzZXJz">从VSCode到Vim到……两个都用？<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhaXBlaWh1c3QvaW0tc2VsZWN0I2luc3RhbGxhdGlvbg==">https://github.com/daipeihust/im-select#installation<i class="fa fa-external-link-alt"></i></span> Windows和Mac以及使用vscodevim插件用户可以用这个解决中文输入法冲突的问题<br><span class="exturl" data-url="aHR0cHM6Ly9kZGFkYWFsLm1lL2FydGljbGVzL2Zyb20tdnNjb2RlLXRvLXZpbS10by1ib3Ro">https://ddadaal.me/articles/from-vscode-to-vim-to-both<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qZGhhby5naXRodWIuaW8vMjAyMC8wMS8xMi92aW1fbnZpbV9oaXN0b3J5X2RldmVsb3BtZW50Lw==">Vim 和 Neovim 的前世今生<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hYzczOWM2ZWE1NDE=">vscode 集成 Neovim<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1nNGRYWjBSUVdkdw==">VSCode with embedded Neovim<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来不报希望的试了试这套不伦不类的缝合怪配置，结果缝合出了很好的效果，可以拿这套配置在VSCode下养老了。&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="homectl" scheme="https://zhangjk98.xyz/tags/homectl/"/>
    
    <category term="systemd-homed" scheme="https://zhangjk98.xyz/tags/systemd-homed/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux下VSCode+Latex+Zotero的论文写作方案</title>
    <link href="https://zhangjk98.xyz/paper-with-latex-zotero-vscode/"/>
    <id>https://zhangjk98.xyz/paper-with-latex-zotero-vscode/</id>
    <published>2021-09-24T10:44:24.000Z</published>
    <updated>2021-09-24T10:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>开源拖拉机将就着用吧，又不是不能用，再见Word、EndNote和Windows。顺便说一下你电的LaTeX模板怎么用。不定期更新到毕业。</p><span id="more"></span><p>又遇到了Lamport老爷子的东西，上一次看到Lamport<del>还是上次</del>还是看Paxos算法的时候。</p><p>Office很强，但是微软不给Linux开发桌面版（好吧，我有在线的教育版，在线版写写文档还行，但是排版有一些捉襟见肘）。好吧，虚拟机或者wine是可以的但是我不想用。wps的Linux版倒是很不错，但是调格式放到office上又乱了，对数学公式的支持也不是特别好。<br>另一个让我放弃word和wps的重要原因是我想要用git做版本控制，手动命名一个个v0.0.8、v0.2.1版本的论文初稿实在是太蠢了。<br>最近放弃WPS的原因是新版本实在太糊了，我在Archlinux上试图降级旧版又失败了。本来以为新版WPS字体模糊是因为没有配适4k分辨率的屏幕，这个文章<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTU5OTM1NzY=">WPS For Linux个人版更新（Qt5版本）<i class="fa fa-external-link-alt"></i></span>的评论去也确实是这么说的。结果我打开1080p的笔记本，发现字体更糊了。<br>overleaf应该是我用过最好用的Latex在线编辑，但是我对在线的东西不是很信得过。TexStudio又不是太好看，高分屏下还比较糊，键位也不习惯，放弃了。lyx是很好用，但是我不太喜欢所见即所得，还是习惯左边源码右边编辑结果pdf这种。  </p><p>最终又回到了VSCode，目前的方案是ArchLinux下Zotero+textlive+VSCode（LaTeX Workshop插件）</p><h2 id="安装texlive"><a href="#安装texlive" class="headerlink" title="安装texlive"></a>安装texlive</h2><p>我用对中文支持比较好的xelatex，在Arch下我们装texlive的包就可以了。pdflatex也包含在里面，但是这个对中文支持没有那么好，一般用xelatex生成中文pdf。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S texlive-core texlive-langchinese  texlive-fontsextra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>texlive的不少宏包在Arch上都有系统的包，你可以用<code>yay</code>等AUR helper装，如果想用<code>tlmgr</code>装，那就用<span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy90bGxvY2FsbWdyLWdpdC8=">tllocalmgr-git<i class="fa fa-external-link-alt"></i></span>这个AUR包。</p><h2 id="Zotero配置"><a href="#Zotero配置" class="headerlink" title="Zotero配置"></a>Zotero配置</h2><h3 id="参考文献抓取和管理"><a href="#参考文献抓取和管理" class="headerlink" title="参考文献抓取和管理"></a>参考文献抓取和管理</h3><p>首先是中文论文网站引用和pdf抓取的问题，可以用下面这个插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2wwbzAvdHJhbnNsYXRvcnNfQ04=">Zotero translators 中文维护小组<i class="fa fa-external-link-alt"></i></span></p><p>知网文献可以用这个插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2wwbzAvamFzbWludW0=">jasminum<i class="fa fa-external-link-alt"></i></span></p><p>下载并放到translater文件夹中(Linux下默认应该是<code>~/Zotero/translators</code>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/l0o0/translators_CN.git <span class="token function">cp</span> -r translators_CN/translators/* ~/Zotero/translators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参照README更新插件的translater就行了。</p><p>VSCode有一个Zotero LaTeX插件，可以用快捷键直接插入文献。安装后报错<code>Error adding citation: HTTPError: Response code 404 (Not Found)</code>，见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ibG9kZS92c2NvZGUtem90ZXJvL2lzc3Vlcy8y">Zotero Citations: could not connect to<i class="fa fa-external-link-alt"></i></span>。安装beta版本后成功解决。<code>yay -S zotero-beta</code></p><p>使用这个插件需要安装zotero插件<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JldG9ycXVlcmUvem90ZXJvLWJldHRlci1iaWJ0ZXg=">zotero-better-bibtex<i class="fa fa-external-link-alt"></i></span></p><p>具体使用请参考：<span class="exturl" data-url="aHR0cDovL3h1Z2VlLmNvbS9pbWFnZXMvMy8zYS9WU2NvZGUlRTQlQkQlQkYlRTclOTQlQTglRTglQUYlQjQlRTYlOTglOEUucGRm">VScode使用说明(Zotero插件) 刘再华<i class="fa fa-external-link-alt"></i></span></p><p>安装好之后按<code>Alt+z</code>就可以方便的插入参考文献了。</p><p>然后要插入GB/T 7714格式化的参考文献，可以参考<span class="exturl" data-url="aHR0cHM6Ly9jdGFuLm1hdGguaWxsaW5vaXMuZWR1L21hY3Jvcy9sYXRleC9jb250cmliL2JpYmxhdGV4LWNvbnRyaWIvYmlibGF0ZXgtZ2I3NzE0LTIwMTUvYmlibGF0ZXgtZ2I3NzE0LTIwMTUucGRm">符合 GB/T 7714-2015 标准的 biblatex 参考文献样式<i class="fa fa-external-link-alt"></i></span></p><p>有模板可以直接套模板，模板应该会处理参考文献格式。没有特殊喜好可以用 等支持GB/T格式的模板。</p><p>ps：如果单纯为了插入GB/T格式的参考文献可以用一点脏办法: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDE4MDU3MDQ=">电子科技大学LaTeX模板参考文献问题解决<i class="fa fa-external-link-alt"></i></span> (不得已的办法)</p><h3 id="自建同步"><a href="#自建同步" class="headerlink" title="自建同步"></a>自建同步</h3><p>Zotero的文件同步免费的只有300M，而且很慢。</p><p>我们可以自建文件同步，只要支持WebDAV协议就行了。这个好办，Nginx就能做到。</p><h2 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h2><h3 id="LaTex插件选择"><a href="#LaTex插件选择" class="headerlink" title="LaTex插件选择"></a>LaTex插件选择</h3><p>通常推荐装Latex Workshop这个插件。配置可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2k=">官方文档<i class="fa fa-external-link-alt"></i></span>, wiki写的很全。功能当然没有TeXStudio全，但是已经满足我的日常需求了（一般只装这一个插件就够了）</p><p>另一个插件叫LaTeX。LaTeX Workshop功能比LaTeX插件多一点，如果只想把VSCode当一个普通的文本编辑器不想要额外的snippet等功能的话，装LaTeX这个插件就可以了。</p><h4 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h4><p>编译配置推荐使用<code>latexmk</code>的方案，可以省去xelatex-bibtex-xelatex*2的多次编译。  </p><p>比如你电的毕业论文模板，完整的编译需要</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xelatex main.texbibtex main.auxbibtex accomplish.auxxelatex main.texxelatex main.tex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译的时候需要先latexmk编译一遍，再bibtex编译一遍，再latexmk编译一遍，见<a href="https://liam.page/2016/01/23/using-bibtex-to-generate-reference/"></a></p><p>或者参考这篇文章：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjk5MzgwMDc=">我们该如何优雅地使用LaTeX in 2020<i class="fa fa-external-link-alt"></i></span></p><p>编辑<code>settings.json</code>, 加上能够编译参考文献的配置，就可以在左侧边栏点击运行了。（其实我还是喜欢在命令行里<code>alias</code>将这三个命令指定一个短命令）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xelatex -> bibtex -> xelatex*2"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"bibtex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这样需要编译四次，有一个更好的方法是<code>latexmk</code>增量编译</strong></p><p>我们将<code>settings.json</code><strong>改成这个样子</strong>（方案来自<span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAyMC8wNC8yNC91c2luZy1MYVRlWG1rLXdpdGgtTGFUZVh3b3Jrc2hvcC13aXRoLVZTQ29kZS8=">在 VSCode 的 LaTeXworkshop 插件中使用 LaTeXmk<i class="fa fa-external-link-alt"></i></span>）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.latex.tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>            <span class="token string">"-shell-escape"</span><span class="token punctuation">,</span>            <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>            <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>            <span class="token string">"%DOC%"</span><span class="token punctuation">,</span>            <span class="token string">"-outdir=%OUTDIR%"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"XeLaTeXmk"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只需要<code>latexmk</code>一个编译命令，<code>latexmk</code>的增量编译也比原来快了。</p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>LaTeX Workshop 左侧边栏可以查看字数统计<br>可以自定义snippest快捷命令<br>可以插入参考文献（需要手打`\cite{}，支持搜索bib文件里的文献（可以用zotero导出并开启同步））, 这样就不用装zotero latex插件了。</p><h3 id="json配置"><a href="#json配置" class="headerlink" title="json配置"></a>json配置</h3><p>这是我的<code>settings.json</code>配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//双向搜索</span><span class="token property">"latex-workshop.view.pdf.viewer"</span><span class="token operator">:</span> <span class="token string">"tab"</span><span class="token punctuation">,</span><span class="token comment">//将编译生成的文件放到build文件夹</span><span class="token property">"latex-workshop.latex.outDir"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span><span class="token comment">//使用latexmk解决插入文献bibtex需要多次编译的问题</span><span class="token property">"latex-workshop.latex.tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>            <span class="token string">"-shell-escape"</span><span class="token punctuation">,</span>            <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>            <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>            <span class="token string">"%DOC%"</span><span class="token punctuation">,</span>            <span class="token string">"-outdir=%OUTDIR%"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"XeLaTeXmk"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//去掉右下角烦人的警告</span><span class="token property">"latex-workshop.message.error.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.message.warning.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.clean.fileTypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//设定清理文件的类型(ctrl+alt+c：清除辅助文件)</span>    <span class="token string">"*.aux"</span><span class="token punctuation">,</span>    <span class="token string">"*.bbl"</span><span class="token punctuation">,</span>    <span class="token string">"*.blg"</span><span class="token punctuation">,</span>    <span class="token string">"*.idx"</span><span class="token punctuation">,</span>    <span class="token string">"*.ind"</span><span class="token punctuation">,</span>    <span class="token string">"*.lof"</span><span class="token punctuation">,</span>    <span class="token string">"*.lot"</span><span class="token punctuation">,</span>    <span class="token string">"*.out"</span><span class="token punctuation">,</span>    <span class="token string">"*.toc"</span><span class="token punctuation">,</span>    <span class="token string">"*.acn"</span><span class="token punctuation">,</span>    <span class="token string">"*.acr"</span><span class="token punctuation">,</span>    <span class="token string">"*.alg"</span><span class="token punctuation">,</span>    <span class="token string">"*.glg"</span><span class="token punctuation">,</span>    <span class="token string">"*.glo"</span><span class="token punctuation">,</span>    <span class="token string">"*.gls"</span><span class="token punctuation">,</span>    <span class="token string">"*.ist"</span><span class="token punctuation">,</span>    <span class="token string">"*.fls"</span><span class="token punctuation">,</span>    <span class="token string">"*.log"</span><span class="token punctuation">,</span>    <span class="token string">"*.fdb_latexmk"</span><span class="token punctuation">,</span>    <span class="token string">"*.nav"</span><span class="token punctuation">,</span>    <span class="token string">"*.snm"</span><span class="token punctuation">,</span>    <span class="token string">"*.bcf"</span><span class="token punctuation">,</span>    <span class="token string">"*.run.xml"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"extensions.ignoreRecommendations"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"zotero.latexCommand"</span><span class="token operator">:</span> <span class="token string">"cite"</span><span class="token punctuation">,</span><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"recentlyUsedByPrefix"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="电子科技大学论文模板"><a href="#电子科技大学论文模板" class="headerlink" title="电子科技大学论文模板"></a>电子科技大学论文模板</h2><p>Github上有一个不错的模板是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoaWZ1anVuL1VFU1RDdGhlc2lz">shifujun/UESTCthesis<i class="fa fa-external-link-alt"></i></span>，但是时老师的这个模板很久没更新了。<br>另一个是还在一直更新的模板，本硕博都有，直接clone下来改一下就好了（你电图书馆推荐的，勉强算是半官方的吧）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/x-magus/ThesisUESTC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网上有一些教程，包括：<br>知乎上的一篇文章<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjY3MTI5ODI=">UESTC 本科Latex毕设论文模板 无痛上手指南<i class="fa fa-external-link-alt"></i></span>，这个我本科写毕设的时候就看到同学在朋友圈转过。这个教程我不是很推荐，因为：</p><blockquote><p>但是这里为了减少小伙伴们的学习成本达到“快速无痛上手”的目的（同时考虑到有些小伙伴用word写的很熟练），这里引用电子科大图书馆嵇灵老师的方法：用mathtype编辑，然后转化为latex代码。</p></blockquote><p>河畔现任站长的介绍帖子：<span class="exturl" data-url="aHR0cHM6Ly9iYnMudWVzdGMuZWR1LmNuL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9MTc4NjIzMSZleHRyYT0mcGFnZT0x">LaTeX 学校官方模板-2019年11月发<i class="fa fa-external-link-alt"></i></span> （需要登陆查看）<br>以及上一个帖子附件中嵇灵老师的PPT： 使用Latex模板撰写毕业论文（2019)<br>ps：个人不推荐这个PPT，里面推荐使用被思杰克马丁代理的Mathtype，推荐直接使用Office 2019的<code>Alt+=</code>手打公式（比LaTeX的公式甚至还舒服一点，也直接支持LaTeX的公式），实在想用图形界面输入公式就用AxMath吧，正版30多，还算良心不。  </p><p>上面那些教程的安装和使用几乎都是Windows环境，编辑器是overleaf和texstudio，而且操作偏向图形化界面点点点（Linux用户应该不会喜欢连LaTeX打公式都要点点点再粘贴上去）</p><p>注意要安装下面这些额外的包，不然会报<code>! LaTeX Error: File &#39;multirow.sty&#39; not found</code>等错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S texlive-latexextra texlive-science texlive-bibtexextra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Archlinux下字体问题"><a href="#Archlinux下字体问题" class="headerlink" title="Archlinux下字体问题"></a>Archlinux下字体问题</h3><p>一种选择是装win10字体，然后修改<code>thesis-uestc.cls</code>的Default字体设置。AUR有个包<code>ttf-ms-win10-auto-zh_cn</code>，但是这个包由于再分发的版权原因要下载整个win10的iso，然后解压只保留ttf字体文件。身边有win10的建议直接将ttf文件拷贝过来（只要<code>simhei.ttf</code>，<code>simsong.ttf</code>，<code>simkai.ttf</code>就可以了）。<br>或者安装方正字体（默认的），AUR有个包<code>ttf-fangzheng</code>由于版权原因，也不能直接yay安装，只提供PKGBUILD，需要到官网下载ttf然后手动<code>makepkg</code></p><p>另一种选择是找到模板的字体设置，直接修改<code>thesis-uestc.cls</code>文件（反正毕业论文只要求宋体和黑体，又没说什么宋体和黑体，用系统默认的黑体和宋体就行了）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\else</span><span class="token function selector">\iflinux</span>  <span class="token function selector">\setCJKmainfont</span><span class="token punctuation">[</span>BoldFont=FandolSong-Bold.otf,ItalicFont=FandolKai-Regular.otf<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>FandolSong-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\newCJKfontfamily</span><span class="token punctuation">&#123;</span><span class="token function selector">\heiti</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>FandolHei-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\newfontfamily</span><span class="token punctuation">&#123;</span><span class="token function selector">\heiti</span>@letter<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>FandolHei-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\setallmainfonts</span><span class="token punctuation">&#123;</span>Times New Roman<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了中文字体还需要一个Times New Roman罗马字体，这个AUR的包可以直接装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S ttf-times-new-roman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>直接运行<code>latexmk main.tex</code>就可以了。</p><p>在VSCode里面装了LaTeX Workshop可以点击左上角那个绿色的运行按钮。会弹出一个pdf，将pdf放到右边一栏</p><h3 id="关于你电的一些问题"><a href="#关于你电的一些问题" class="headerlink" title="关于你电的一些问题"></a>关于你电的一些问题</h3><p>什么？教务处非要收word怎么办？要不妥协用Word，要不用pdf转图片转Word随便交一个上去，要不就pandoc顶着格式乱掉硬转一个，反正这个就是规定留档，没人看。<br>（隔壁西电早都支持提交LaTeX论文呢，不会有的985连这都不支持吧，非要冒着被制裁的风险用微软家的Word？不会吧？）</p><p>老板要用Word批注功能怎么办？这个没办法，回去用Word吧。<br>推荐你畔现任站长的一篇文章：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0N1aWFDdWlTaGEvVXNlV29yZEluVGhlc2lz">适用于毕业论文的word排版技巧<i class="fa fa-external-link-alt"></i></span> 之前本科毕设论文排版就看的这个，比你电图书馆的讲座教程和PPT好多了。</p><p>知网查重LaTeX会查公式，查重率高怎么办？不好意思这个没办法。</p><h2 id="LaTeX教程和模板推荐"><a href="#LaTeX教程和模板推荐" class="headerlink" title="LaTeX教程和模板推荐"></a>LaTeX教程和模板推荐</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>LaTeX本来就是用于排版的专业排版工具，能做出很多相当漂亮和复杂的效果。LaTeX能做到什么程度可以看StackExchange上的这个问题：<span class="exturl" data-url="aHR0cHM6Ly90ZXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzEzMTkvc2hvd2Nhc2UtJTIwJTIwb2YtYmVhdXRpZnVsLXR5cG9ncmFwaHktZG9uZS1pbi10ZXgtZnJpZW5kcw==">Showcase of beautiful typography done in TeX &amp; friends<i class="fa fa-external-link-alt"></i></span></p><p>想要自己从0设计排版成这样的效果是需要肝的。而我用LaTeX是因为不想花太多精力在排版上，想把它当成Markdown一样的东西用。所以我需要模板。</p><p>模板可以来这里找：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXhzdHVkaW8ubmV0Lw==">LaTeXStudio<i class="fa fa-external-link-alt"></i></span> 不过这个网站最近突然换了前端页面还多了不少广告（有种不详的预感）  </p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>教程这个不同人适合不同的教程，下面是我比较喜欢的一个：</p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNC8wOS8wOC9sYXRleC1pbnRyb2R1Y3Rpb24v">一份其实很短的 LaTeX 入门文档<i class="fa fa-external-link-alt"></i></span></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="关闭LaTeX-Workshop右下角的烦人通知"><a href="#关闭LaTeX-Workshop右下角的烦人通知" class="headerlink" title="关闭LaTeX Workshop右下角的烦人通知"></a>关闭LaTeX Workshop右下角的烦人通知</h3><p>LaTeX WorkShop插件每次保存都会弹出通知<code>Formatting failed. Please refer to LaTeX Workshop Output for details.</code></p><p>关闭右下角每次都弹出的烦人提示</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.message.error.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.message.warning.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="双向跳转"><a href="#双向跳转" class="headerlink" title="双向跳转"></a>双向跳转</h3><p><del>双向奔赴了属于是</del></p><p>目前最新的LaTeX Workshop插件是无需配置可以直接跳转的。（插件内置的PDF.js，在VSCode内预览）<br>网上很多教程已经过时了，直接看官方文档。官方文档写的很清楚：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvVmlldyNzeW5jdGV4">https://github.com/James-Yu/LaTeX-Workshop/wiki/View#synctex<i class="fa fa-external-link-alt"></i></span></p><p>从pdf跳转到tex文件使用<code>Ctrl+鼠标左键</code><br>从tex文件定位到pdf相应位置<code>Ctrl+Alt+J</code>  </p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>插入图片可以放到相应位置然后手写<code>\includegraphics&#123;example.jpg&#125;</code>。<br>如果想从剪切板自动粘贴，和Markdown一样，用paste image插件就行了。我Markdown的paste image配置和latex的不一样，所以放到workspace的json文件里</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.defaultName"</span><span class="token operator">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.encodePath"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.path"</span><span class="token operator">:</span> <span class="token string">"$&#123;currentFileDir&#125;/pic"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.showFilePathConfirmInputBox"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> <span class="token string">"\\includegraphics[scale =]&#123;$&#123;imageSyntaxPrefix&#125;$&#123;imageFilePath&#125;$&#123;imageSyntaxSuffix&#125;&#125;"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者我们在user的<code>settings.json</code>里加上</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> .......<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表示只对latex生效。</p><p>insertPattern选项请根据模板自己修改，比如你电的学位论文模板改成这样就可以了。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> <span class="token string">"\\begin&#123;figure&#125;[h]\n\t\\includegraphics[width= 6cm]&#123;$&#123;imageFileName&#125;&#125;\n\t\\caption&#123;$&#123;imageFileNameWithoutExt&#125;&#125;\n\t\\label&#123;fig:$&#123;imageFileNameWithoutExt&#125;&#125;\n\\end&#123;figure&#125;"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外需要注意的是paste image插件的快捷键<code>ctrl+alt+v</code>和LaTeX Workshop冲突，要在<code>Keyboard Shortcuts</code>里面换掉一个，不然快捷键粘贴图片不起作用。</p><h3 id="参考文献报错"><a href="#参考文献报错" class="headerlink" title="参考文献报错"></a>参考文献报错</h3><p>设置参考文献这两行要放在<code>\end&#123;document&#125;</code>前面</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\bibliography</span><span class="token punctuation">&#123;</span>export.bib<span class="token punctuation">&#125;</span><span class="token function selector">\bibliographystyle</span><span class="token punctuation">&#123;</span>plain<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不然会报错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">I found no \bibdata command<span class="token separator comment">---</span>while reading file <span class="token domain constant">test.aux</span>I found no \bibstyle command<span class="token separator comment">---</span>while reading file test<span class="token punctuation">.</span>aux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="某些知网文献bibtex编译报错"><a href="#某些知网文献bibtex编译报错" class="headerlink" title="某些知网文献bibtex编译报错"></a>某些知网文献bibtex编译报错</h3><p>垃圾知网不仅弄出了天价查重、caj格式这些天怒人怨的东西，中文文献的引用格式也挺乱的，经常缺这个少那个，而且不支持bibtex。如果用zotero转出来也会因为缺少各种字段而报错。查了一下没什么太好的解决办法。<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2Mzk4OTA5L2Fuc3dlci8zMjY0Mzc4OA==">如何使用BibTeX引用中文参考文献？ - 刘海洋的回答 - 知乎<i class="fa fa-external-link-alt"></i></span> 刘海洋老师推荐自己写bibtex，但是我给这些东西写这些，我用LaTeX就是因为不想在word的排版上纠缠过多。  </p><p>百度好歹干了点人事，能导出bibtex格式。但是有很多学位论文，百度学术也没有万方也没有，就知网有。  </p><p>之前说过，如果单纯为了插入GB/T格式的参考文献可以用一点脏办法: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDE4MDU3MDQ=">电子科技大学LaTeX模板参考文献问题解决<i class="fa fa-external-link-alt"></i></span> (不得已的办法)。比如插入知网文献的时候可以用这个。<strong>一开始觉得这是不太好的脏办法</strong>，在被知网的一些参考文献格式整麻了以后，觉得<strong>这才是最好的方法</strong>。直接粘贴纯文本，反正最后排版效果一样就行了。bibtex的理念不适合处理脏东西，脏东西要用脏办法。</p><p>编辑<code>thesis-uestc.bst</code>, 新建一个参看文献格式</p><pre class="line-numbers language-bst" data-language="bst"><code class="language-bst">FUNCTION &#123;biaoti&#125;&#123;    bibitem.begin    title write$    newline$&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>reference.bib</code>里面粘贴复制粘贴的文本就可以了，相当于引用纯文本</p><h3 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h3><p>只对Latex开启自动换行</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="电子科技大学论文模板识别不了linux环境"><a href="#电子科技大学论文模板识别不了linux环境" class="headerlink" title="电子科技大学论文模板识别不了linux环境"></a>电子科技大学论文模板识别不了linux环境</h4><p>编译的时候加参数<code>-shell-escape</code>。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p1aWN5L1VFU1RDX3JlcG9ydF9sYXRleC90cmVlL21hc3Rlci9VRVNUQ19yZXBvcnQ=">https://github.com/zuicy/UESTC_report_latex/tree/master/UESTC_report<i class="fa fa-external-link-alt"></i></span> 电子科技大学实验报告的LaTeX模板，是你电信软学院的同学做的，看起来似乎全校通用（改一下学院名字就好了）。<br>LaTeXStudio上那个是比较老的模板：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXhzdHVkaW8ubmV0L2FyY2hpdmVzLzUxNTQxLmh0bWw=">电子科大的实验报告 LaTeX 模板 - 用户投稿<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTE4ODkyNTI=">Linux 下的 LaTex 写作工具链（1）<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3h1Z2VlLmNvbS9pbWFnZXMvMy8zYS9WU2NvZGUlRTQlQkQlQkYlRTclOTQlQTglRTglQUYlQjQlRTYlOTglOEUucGRm">VScode使用说明(Zotero插件) 刘再华<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ibG9kZS92c2NvZGUtem90ZXJv">https://github.com/mblode/vscode-zotero<i class="fa fa-external-link-alt"></i></span> vscode zotero的Markdown引用文献插件。  </p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNi8wMS8yMy91c2luZy1iaWJ0ZXgtdG8tZ2VuZXJhdGUtcmVmZXJlbmNlLw==">使用 BibTeX 生成参考文献列表<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvTGFUZVg=">https://en.wikibooks.org/wiki/LaTeX<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1c2hpZG9uZy9iaWJsYXRleC16aC1jbg==">https://github.com/hushidong/biblatex-zh-cn<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1c2hpZG9uZy9iaWJsYXRleC1zb2x1dGlvbi10by1sYXRleC1iaWJsaW9ncmFwaHk=">https://github.com/hushidong/biblatex-solution-to-latex-bibliography<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAyMC8wNC8yNC91c2luZy1MYVRlWG1rLXdpdGgtTGFUZVh3b3Jrc2hvcC13aXRoLVZTQ29kZS8=">https://liam.page/2020/04/24/using-LaTeXmk-with-LaTeXworkshop-with-VSCode/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2Rkc3dodS5tZS9wb3N0cy8yMDE4LTA0L3ZzLWNvZGUtZm9yLWxhdGV4Lw==">http://ddswhu.me/posts/2018-04/vs-code-for-latex/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHVnLm9yZy90ZXhsaXZlL2RvYy90ZXhsaXZlLXpoLWNuL3RleGxpdmUtemgtY24ucGRm">https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开源拖拉机将就着用吧，又不是不能用，再见Word、EndNote和Windows。顺便说一下你电的LaTeX模板怎么用。不定期更新到毕业。&lt;/p&gt;</summary>
    
    
    
    
    <category term="LaTeX" scheme="https://zhangjk98.xyz/tags/LaTeX/"/>
    
    <category term="Zotero" scheme="https://zhangjk98.xyz/tags/Zotero/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 Lab Syscall 笔记</title>
    <link href="https://zhangjk98.xyz/6.s081-lab-syscall/"/>
    <id>https://zhangjk98.xyz/6.s081-lab-syscall/</id>
    <published>2021-09-15T12:01:25.000Z</published>
    <updated>2021-09-15T12:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>暑假摸了一个月的鱼，回来接着做Lab。2021 spring 的6.S081已经开始了，直接做2021的吧（看了一下好像没有太大变化）。而且xv6-labs-2021这个repo貌似修复了Archlinux上新版gdb不兼容的问题，不用再降级包或者去用Ubuntu 20了。</p><span id="more"></span><p>注：目前现在2021的repo由于进度原因只有riscv、util和syscall三个分支，没有master分支，所以会报警告：<code>warning: remote HEAD refers to nonexistent ref, unable to checkout.</code>这个不用管。</p><h2 id="关于syscall"><a href="#关于syscall" class="headerlink" title="关于syscall"></a>关于syscall</h2><p>syscall一般很少直接用，用c语言写东西的时候大部分都是通过wrapper函数间接调用syscall。其他语言里用到系统调用的就更少了，我就只在某次用golang的网络库实现traceroute的时候调用过一次。</p><p>之前对syscall的印象是x86下<code>int 80</code>中断，从用户空间切到内核空间。常用的比如read, write, open, close啊，以及mmap等等。</p><p>6.S081改用risc-v, 不太一样。<br>risc-v中有三种模式：<br>User-mode，用户模式。普通应用会在这个模式下运行。<br>Supervisor-mode， 特权模式。<br>Machine-mode，机器模式，需要的权限比supervisor模式还要高。一些嵌入式几乎整个都运行在这种模式下，完整的操作系统就只有bootloader等是在M模式下，大部分任务都在U和S模式下。<br>关于risc-v的特权模式可以参考手册：The RISC-V Instruction Set Manual<br>Volume II: Privileged Architecture</p><p>进入syscall是通过ecall（环境调用）指令，大部分都是从u模式进入s模式，结束后使用<code>sret</code>指令返回。</p><p>还有就是讲义中将异常（exception）和中断（interrupt）都算做陷阱（trap），一开始看讲义的时候一直以为这是三个不同的东西。后来发现涉及到supervisor和machine模式的都算做trap。</p><h2 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h2><p>Lab2就两个，简单熟悉一下系统调用，不难。</p><h3 id="System-call-tracing-moderate"><a href="#System-call-tracing-moderate" class="headerlink" title="System call tracing (moderate)"></a>System call tracing (moderate)</h3><p>这个不是很难，不过要改的东西很多，按照提示一点一点做就行了。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9zeXNjYWxscy4yLmh0bWw=">https://man7.org/linux/man-pages/man2/syscalls.2.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9maWxpcHBvLmlvL2xpbnV4LXN5c2NhbGwtdGFibGUv">https://filippo.io/linux-syscall-table/<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;暑假摸了一个月的鱼，回来接着做Lab。2021 spring 的6.S081已经开始了，直接做2021的吧（看了一下好像没有太大变化）。而且xv6-labs-2021这个repo貌似修复了Archlinux上新版gdb不兼容的问题，不用再降级包或者去用Ubuntu 20了。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="syscalls" scheme="https://zhangjk98.xyz/tags/syscalls/"/>
    
  </entry>
  
  <entry>
    <title>Earlyoom和oomd使用，解决Linux内存耗尽的一点尝试</title>
    <link href="https://zhangjk98.xyz/early-oom-and-oomd-for-out-of-memory/"/>
    <id>https://zhangjk98.xyz/early-oom-and-oomd-for-out-of-memory/</id>
    <published>2021-09-14T08:08:11.000Z</published>
    <updated>2021-09-14T08:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>太长不看：就是把原来内核的OOM killer挪到用户空间（userspace）去，这样就可以在系统卡住之前（通常桌面卡住的时候OOM killer认为还不用kill）提前kill掉占内存最大的一个，让桌面和鼠标可以正常工作。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先来看phoronix的一个报道：<span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PUxpbnV4LURvZXMtQmFkLUxvdy1SQU0=">Yes, Linux Does Bad In Low RAM / Memory Pressure Situations On The Desktop<i class="fa fa-external-link-alt"></i></span>  </p><p>Linux桌面在小内存、内存紧张的情况下表现很差。（用过Linux现在桌面的相信都有这种感受）</p><p>解决内存不足、内存耗尽的<strong>最好办法还是加钱多装几根内存条</strong>，什么swap、zram还有本文的earlyoom和oomd都是权宜之计。 </p><h2 id="OOM简介"><a href="#OOM简介" class="headerlink" title="OOM简介"></a>OOM简介</h2><p>OOM很多人应该都很熟悉了，服务器上跑的任务申请内存超过了可用内存就会发生OOM（其实是可以Overcommit的，这个以后再说）</p><p>为了避免内存耗尽（Out of Memory，OOM），OOM-killer在内存将要耗尽的时候杀掉<code>oom_score</code>最大的进程。（如果连OOM-killer都没能及时kill掉，那就会触发kernel panic）</p><p>但是内核默认的OOM策略比较保守，如果你是桌面用户，那么还没等到OOM killer工作，图形界面就已经卡死（handling， 有的时候也被称为freeze）了。Earlyoom和oomd等工具运行在用户空间，让一些任务提前崩溃，让图形界面还能正常工作。</p><p>OOM killer和Overcommit等更详细的介绍我写到<a href="https://zhangjk98.xyz/linux-out-of-memory">这里</a>, 这里不多说了。</p><h2 id="Earlyoom"><a href="#Earlyoom" class="headerlink" title="Earlyoom"></a>Earlyoom</h2><p>EarlyOOM</p><p>Earlyoom在桌面系统的表现比较成功，Fedora 32 已经默认启用了EarlyOOM。</p><h2 id="oomds"><a href="#oomds" class="headerlink" title="oomds"></a>oomds</h2><p>oomd是Facebook做的，后来和systemd一起做了一个sysytemd-oomd守护进程，现已加入systemd全家桶。</p><h2 id="在Archlinux上安装和使用"><a href="#在Archlinux上安装和使用" class="headerlink" title="在Archlinux上安装和使用"></a>在Archlinux上安装和使用</h2><p>Earlyoom已经在community源里了。oomd这个包目前是orphand，我们用Earlyoom就好了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S earlyoom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接terminal里执行<code>earlyoom</code>就可以了。（可能需要root权限，不然会报<code>Could not lock memory - continuing anyway: Cannot allocate memory</code>）</p><p>或者使用systemd守护进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> earlyoom --now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后又到了调参环节，编辑<code>/etc/default/earlyoom</code>，根据你的机器配置和使用习惯改改参数。</p><p>默认10秒检查一次，当可用内存小于10%和swap小于10的时候执行<code>SIGTERM</code>，当可用内存小于5%和swap小于5%的时候执行<code>SIGKILL</code>。</p><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>一开始我笔记本和台式机都8G内存，当时那个版本的VSCode有严重的内存泄漏，经常泄漏到我桌面连鼠标都动不了了。只能切到tty杀掉VSCode的进程或者魔术键重启，烦的我一度想投奔vim。<br>后来买了两根16G的笔记本内存条，又把教研室的台式内存（拆了4根8G ddr3的杂牌内存条下来）加到了32G，开着一个虚拟机好多Docker一个Goland还有Chrome，再也没遇到过内存不够用的问题。<br>最近要在另一个8G内存的电脑上和只有2g内存的VPS上面干点活，又回到了当初只有8G内存的时候vscode频繁内存泄漏导致整个桌面直接卡死的拮据状态。Ubuntu 16.04 那个版本的GNOME内存泄漏和内部错误也相当讨厌。换了lxde好了一点。然后试了试swap，效果不好。然后用了zram, 效果比swap好不少。  </p><p>最后用了Earlyoom，好多了，不用频繁手动处理桌面卡死了。（注意4G以下这种小内存不推荐用这些，会浪费不少可用内存）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JmamFrb2IvZWFybHlvb20=">https://github.com/rfjakob/earlyoom<i class="fa fa-external-link-alt"></i></span>  </p><p>Fedora默认启用Earlyoom的一些讨论：</p><p><span class="exturl" data-url="aHR0cHM6Ly9mZWRvcmFwcm9qZWN0Lm9yZy93aWtpL0NoYW5nZXMvRW5hYmxlRWFybHlvb20jRW5hYmxlX0Vhcmx5T09N">https://fedoraproject.org/wiki/Changes/EnableEarlyoom#Enable_EarlyOOM<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9wYWd1cmUuaW8vZmVkb3JhLXdvcmtzdGF0aW9uL2lzc3VlLzExOQ==">https://pagure.io/fedora-workstation/issue/119<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PUZlZG9yYS0zMi1EZWZhdWx0LUVhcmx5T09N">https://www.phoronix.com/scan.php?page=news_item&amp;px=Fedora-32-Default-EarlyOOM<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cDovL3d3dy53b3dvdGVjaC5uZXQvbWVtb3J5X21hbmFnZW1lbnQvb29tLmh0bWw=">Linux vm运行参数之（二）：OOM相关的参数<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;太长不看：就是把原来内核的OOM killer挪到用户空间（userspace）去，这样就可以在系统卡住之前（通常桌面卡住的时候OOM killer认为还不用kill）提前kill掉占内存最大的一个，让桌面和鼠标可以正常工作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OOM" scheme="https://zhangjk98.xyz/tags/OOM/"/>
    
    <category term="earlyoom" scheme="https://zhangjk98.xyz/tags/earlyoom/"/>
    
    <category term="oomd" scheme="https://zhangjk98.xyz/tags/oomd/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程调度，从服务器到桌面</title>
    <link href="https://zhangjk98.xyz/linux-processing-scheduling/"/>
    <id>https://zhangjk98.xyz/linux-processing-scheduling/</id>
    <published>2021-08-30T03:26:55.000Z</published>
    <updated>2021-08-30T03:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了一周linux-ck和MuQSS，发现没有想象中的那么好。哦，这还要从一个麻醉师说起。</p><span id="more"></span><p>没仔细看调度器之前我以为Linux进程调度都是和内存管理一样很复杂的东西。实现比较简单的进程调度就几十行代码。CFS这种比较复杂的就不仔细说了、多核和分布式调度这些比较复杂的下面也不会多讲。（主要是我水平太菜了，怕讲错）</p><h2 id="进程调度简介"><a href="#进程调度简介" class="headerlink" title="进程调度简介"></a>进程调度简介</h2><p>进程是操作系统虚拟化出来的东西，</p><p>Linux里面基本不区分进程和线程，统称为task（任务）。下面的进程等词都指task。</p><p>CPU的资源是有限的，进程之间需要一个调度器来分配资源使用。最常见的调度器是Linux内核主线默认采用的CFS。</p><p>注：不要只盯着复杂度O(n), O(1), O(log n), 效果还是得看实测。引用一下cauche调度器readme里的一段话</p><p>O(n) sounds scary, but usually for a machine with 4 CPUS where it is used for desktop or mobile jobs, the maximum number of runnable tasks might not exceeds 10 (at the pick next run time) - the idle tasks are excluded since they are dequeued when sleeping and enqueued when they wake up.</p><p>在电脑桌面和手机、4核CPU使用场景，最多运行任务不超过10个。所以复杂度O(n)不一定比O(1)调度速度快。</p><h3 id="关于进程"><a href="#关于进程" class="headerlink" title="关于进程"></a>关于进程</h3><p>在<code>include/linux/sched.h</code>头文件里面有进程的定义（一个结构体来表示的task）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Linux系统在启动的时候会首先执行<code>start_kernel()</code>函数<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvdjUuNy1yYzEvc291cmNlL2luaXQvbWFpbi5j">init/main.c<i class="fa fa-external-link-alt"></i></span>。</p><p>首先是<code>set_task_stack_end_magic(&amp;init_task)</code>创建一个叫<code>init_task</code>的进程，一般管它叫0号进程（也就是后面的idle进程）。</p><p>然后调用<code>sched_init();</code>函数初始化进程调度。</p><p>然后在<code>start_kernel()</code>函数最后调用<code>rest_init</code>, 两个<code>kernel_thread</code>分别创建了一号进程（<code>init</code>）和二号进程(<code>kthreadd</code>)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">noinline <span class="token keyword">void</span> __ref <span class="token function">rest_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">;</span><span class="token keyword">int</span> pid<span class="token punctuation">;</span><span class="token function">rcu_scheduler_starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">kernel_thread</span><span class="token punctuation">(</span>kernel_init<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> CLONE_FS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">kernel_thread</span><span class="token punctuation">(</span>kthreadd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> CLONE_FS <span class="token operator">|</span> CLONE_FILES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般1号进程是用户态进程，整个用户态的进程树都是它<code>fork</code>出来的。关于1号进程的介绍可以看看systemd作者写的<a href="http://0pointer.de/blog/projects/systemd.html"><span class="exturl" data-url="aHR0cDovLzBwb2ludGVyLm5ldC9ibG9nL3Byb2plY3RzL3N5c3RlbWQuaHRtbA==">Rethinking PID 1<i class="fa fa-external-link-alt"></i></span></a> 中文翻译: <span class="exturl" data-url="aHR0cDovL2thaXdhbmdjaGVuLmdpdGh1Yi5pby8yMDE0LzEwLzA4L3N5c3RlbWQuaHRtbA==">重新思考 1 号进程<i class="fa fa-external-link-alt"></i></span></p><p>2号进程是内核进程，负责管理和调度内核线程。</p><p>进程描述符里面有一些调度需要的信息，比如。</p><h3 id="初代调度器"><a href="#初代调度器" class="headerlink" title="初代调度器"></a>初代调度器</h3><p>初代调度器非常简单，就是一个runqueue（运行队列），源码在<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvMC4xMS9zb3VyY2Uva2VybmVsL3NjaGVkLmM=">kernel/sched.c<i class="fa fa-external-link-alt"></i></span>,   我们忽略掉系统调用和printk日志以及floppy之类的，只看调度部分：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* *  'schedule()' is the scheduler function. This is GOOD CODE! There * probably won't be any reason to change this, as it should work well * in all circumstances (ie gives IO-bound processes good response etc). * The one thing you might take a look at is the signal-handler code here. * *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other * tasks can run. It can not be killed, and it cannot sleep. The 'state' * information in task[0] is never used. */</span><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* this is the scheduler proper: */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">></span> c<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>priority<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就只有这么几行。也没有nice值和多核，甚至没有生命周期，还是很容易理解的。</p><p>jiffies是系统开机以来tick的次数（alarm&gt;jiffies说明过期了，重置为0）</p><p>counter是时间片，单位是tick（时钟滴答），调度器根据couter大小决定优先级（couter越大优先级越高）</p><p>NR_TASKS是task（进程）总数。</p><p>第一个循环是检查一遍<span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9hbGFybS4yLmh0bWw=">alarm()<i class="fa fa-external-link-alt"></i></span>函数，唤醒任何收到alarm传来的signal的没有被阻塞的tasks，将<code>TASK_INTERRUPTIBLE</code>（挂起）改为<code>TASK_RUNNING</code>可执行。</p><p>然后<code>while(1)</code> 这个死循环一直执行到关机，每次循环先<code>while (--i)</code>找出counter（时间片）最大的task。（couter越大说明）</p><p><code>if (c) break;</code>和下面的这些是说如果c为0（所有进程的counter用完了），就重新分配counter。</p><p>最后调用<code>switch_to(next)</code>切换进程。（切换到counter最大的一个）</p><p>然后还有几个函数，是几个状态的转换，也很简单。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>小tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p<span class="token operator">=</span>current<span class="token punctuation">;</span>repeat<span class="token operator">:</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">goto</span> repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个调度器复杂度是O(n)的（复杂度没啥用，因为NR_TASKS早期特别小）。只有分配的counter值作为调度优先级</p><p>0号进程的优先级是最低的（最后被调度）。在后面的调度器中0号进程根本不参与调度。</p><h3 id="O-n-调度器"><a href="#O-n-调度器" class="headerlink" title="O(n)调度器"></a>O(n)调度器</h3><p>早期的调度器是和UNIX的差不多，就是O(n)调度器。</p><p>O(n)调度器是用runqueue（运行队列），和初代调度器不同的是CPU每个核都有一个runqueue。</p><h3 id="O-1-调度器"><a href="#O-1-调度器" class="headerlink" title="O(1)调度器"></a>O(1)调度器</h3><p>2.6版本</p><p>O(1)调度器比较适合服务器，基本上做到了将I/O利用率最大化。</p><p>静态优先级（一般叫nice值）</p><h3 id="CFS"><a href="#CFS" class="headerlink" title="CFS"></a>CFS</h3><p>CFS调度器（Completely Fair Scheduler），用的最广的一个（从2.6开始Linux内核主线默认就是他）。CFS的意思是完全公平调度器，完全公平是说每一个进程在一个周期时间内运行相同的时间。在一个生命周期<code>T</code>内，<code>N</code>个task占用CPU的时间均为$T/N$</p><p>CFS是一个红黑树实现的。是几种调度器中实现很复杂的一个调度器，源码在这里：<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvbGF0ZXN0L3NvdXJjZS9rZXJuZWwvc2NoZWQvZmFpci5j">sched_fair.c Linux Kernel Source<i class="fa fa-external-link-alt"></i></span></p><p>文档在这里：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9zY2hlZHVsZXIvc2NoZWQtZGVzaWduLUNGUy50eHQ=">https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt<i class="fa fa-external-link-alt"></i></span></p><p>调度实体sched_entity，虚拟运行时间vruntime</p><h3 id="RT调度器"><a href="#RT调度器" class="headerlink" title="RT调度器"></a>RT调度器</h3><p>实时调度器，Real Time Scheduler。一般使用优先级队列（priority queue）实现的</p><p>进程根据优先级（priority）</p><p>实时调度器调度的实时进程的优先级通常很高（优先级0-99，不同内核可能不太一样）</p><p>非实时的进程优先级在100-139</p><p>执行<code>ps</code>命令可以查看优先级，PRI这一列是优先级（priority），NI这一列是NICE值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ps</span> -elF S   <span class="token environment constant">UID</span>     PID    <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD<span class="token number">4</span> R     <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">25249</span> -      ?        00:00:07 systemd<span class="token number">1</span> S     <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 kthreadd<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_gp<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_par_gp<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">6</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 kworker/0:0H-events_highpri<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 mm_percpu_wq<span class="token number">1</span> S     <span class="token number">0</span>       <span class="token number">9</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 rcu_tasks_rude_<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">10</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 rcu_tasks_trace<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">11</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:08 ksoftirqd/0<span class="token number">1</span> I     <span class="token number">0</span>      <span class="token number">12</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:18 rcu_sched<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">13</span>       <span class="token number">2</span>  <span class="token number">0</span> -40   - -     <span class="token number">0</span> -      ?        00:00:00 migration/0<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">14</span>       <span class="token number">2</span>  <span class="token number">0</span>   <span class="token number">9</span>   - -     <span class="token number">0</span> -      ?        00:00:00 idle_inject/0<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">16</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 cpuhp/0<span class="token number">5</span> S     <span class="token number">0</span>      <span class="token number">17</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 cpuhp/1<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">18</span>       <span class="token number">2</span>  <span class="token number">0</span>   <span class="token number">9</span>   - -     <span class="token number">0</span> -      ?        00:00:00 idle_inject/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多核"><a href="#多核" class="headerlink" title="多核"></a>多核</h3><p>CPU的每个核都有一个runqueue</p><h3 id="组调度"><a href="#组调度" class="headerlink" title="组调度"></a>组调度</h3><p>本来打算先跳过这一部分的，以后写cgroup的时候再说。但是这个东西对桌面的优化很重要，比如这个很老的补丁。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9YXJ0aWNsZSZpdGVtPWxpbnV4XzI2MzdfdmlkZW8mbnVtPTE=">The ~200 Line Linux Kernel Patch That Does Wonders<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJjLmluZm8vP2w9bGludXgta2VybmVsJm09MTI4OTc4MzYxNzAwODk4Jnc9Mg==">Re: [RFC/RFT PATCH v3] sched: automated per tty task groups<i class="fa fa-external-link-alt"></i></span> </p><p>现在Linux的调度策略比较多，不同用户通过组调度进行资源的分配和隔离。说到这里你是不是想起了cgroup，对，这个东西就是用cgroup实现的。</p><h3 id="其他的调度器"><a href="#其他的调度器" class="headerlink" title="其他的调度器"></a>其他的调度器</h3><p>官方不支持调度器像kernel module一样做成可插拔的，所以其他魔改的调度策略通常单独做一个内核。</p><h2 id="适合桌面的进程调度"><a href="#适合桌面的进程调度" class="headerlink" title="适合桌面的进程调度"></a>适合桌面的进程调度</h2><p>Linux的一些设计和参数偏向服务器、嵌入式设备等用途，毕竟普通桌面用户的意见加起来都比不上半个红帽。<br>IO调度没关系，反正有个SSD就完全够了，用NOOP调度甚至直接不要IO调度都没关系。<br>进程调度就不太行了，默认的CFS (Completely Fair Scheduler)调度非常不适合日常桌面使用。<br>通常服务器多是I/O密集型任务，而桌面（Desktop Enviroment，比如KDE和GNOME这种）需要快速响应（低延迟）和不断切换任务，CFS就不适合了（没法做到不断的切换优先级和抢占）。</p><p>比如编译、看视频CPU硬解码、玩游戏，负载高了之后，如果用CFS调度桌面会非常卡，极大影响体验。</p><p>好吧这不太符合Unix哲学，你在terminal里面用管道</p><p>麻醉师Con Kolivas针对桌面系统做的BFS（后来改名叫MuQSS了）</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXgtbWFnYXppbmUuY29tL3Zhci9saW51eF9tYWdhemluL3N0b3JhZ2UvaW1hZ2VzL21lZGlhL2xpbnV4LW1hZ2F6aW5lLWVuZy11cy9pbWFnZXMvbmV3cy1pbWFnZXMvY2FydG9vbi1mZWF0dXJlcy8zNjc5MDgtMS1lbmctVVMvQ2FydG9vbi1GZWF0dXJlc19tZWRpdW0ucG5n">https://www.linux-magazine.com/var/linux_magazin/storage/images/media/linux-magazine-eng-us/images/news-images/cartoon-features/367908-1-eng-US/Cartoon-Features_medium.png<i class="fa fa-external-link-alt"></i></span></p><h2 id="服务器进程调度"><a href="#服务器进程调度" class="headerlink" title="服务器进程调度"></a>服务器进程调度</h2><p>大多数服务器默认的CFS以及足够合适了。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvVGVuY2VudE9TLWtlcm5lbCMlRTclQTYlQkIlRTclQkElQkYlRTglQjAlODMlRTUlQkElQTYlRTclQUUlOTclRTYlQjMlOTVidA==">https://github.com/Tencent/TencentOS-kernel#离线调度算法bt<i class="fa fa-external-link-alt"></i></span></p><h2 id="更改进程调度"><a href="#更改进程调度" class="headerlink" title="更改进程调度"></a>更改进程调度</h2><h3 id="chrt更改调度策略"><a href="#chrt更改调度策略" class="headerlink" title="chrt更改调度策略"></a>chrt更改调度策略</h3><p>使用见<span class="exturl" data-url="aHR0cDovL2Jsb2cubHVqdW45OTcyLndpbi9ibG9nLzIwMTgvMDgvMjgvJUU0JUJEJUJGJUU3JTk0JUE4Y2hydCVFNCVCRiVBRSVFNiU5NCVCOSVFOCVCRiU5QiVFNyVBOCU4QiVFOCVCMCU4MyVFNSVCQSVBNiVFNyVBRCU5NiVFNyU5NSVBNSVFNSU4RiU4QSVFNCVCQyU5OCVFNSU4NSU4OCVFNyVCQSVBNy9pbmRleC5odG1s">使用chrt修改进程调度策略及优先级<i class="fa fa-external-link-alt"></i></span></p><h3 id="内核选择"><a href="#内核选择" class="headerlink" title="内核选择"></a>内核选择</h3><p><em>选择非官方支持的内核请谨慎，因为可能有很多不兼容的问题。</em>没有特别需求和强迫症还是推荐使用有官方支持的内核，比如Archlinux官方源支持维护``linux<code>（没啥特殊偏好就这个呗），</code>linux-lts<code>（lts版，不想天天更新内核就用这个）， </code>linux-zen<code>（跟AMD的zen关系不太大，主要是针对桌面的），</code>linux-harended`（有安全加固，会牺牲一定性能）</p><p><code>linux</code>这个包的调度器是CFS，大多数情况下表现都不差。（lts当然也是喽）</p><p>如果你是桌面用户，对性能和延迟有需求，可以试试linux-ck、linux-zen、linux-xanmod、linux-tgk等一堆针对桌面和性能优化的内核。<code>linux-ck</code>的调度器是MuQSS。xanmod的调度器可以选cauche。</p><p>我个人体验是xanmod内核的延迟最低（直接拯救了我玩空洞骑士时肉眼可见的延迟）。玩OSU音游的喜欢用linux-zen，这个包是官方维护，比较省心，xanmod延迟虽然跑分上比这个低，对延迟要求不苛刻、反应慢的，可能体验不出来太大区别。</p><p>（音游在Linux上的声音延迟应该是PulseAudio的锅，但是现在Pipewire又不稳，实际效果还不如PulseAudio,等pipewire稳定下来不知道要多久，只有打点补丁才能维持的了生活的样子。感谢这位玩家给wine-osu打的补丁<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRoZXBvb24uZnIvb3N1TGludXhBdWRpb0xhdGVuY3kv">Low-latency osu! on Linux<i class="fa fa-external-link-alt"></i></span>）<br><em>关于游戏的题外话</em><br>Archlinux可以装gamemode和performance-tweaks（这个在chaotic-aur里面）。</p><p>xanmod实测见：<span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9YXJ0aWNsZSZpdGVtPXhhbm1vZC1saXF1b3JpeC01MTA=">XanMod’s Linux 5.10 Kernel Helping Tap Extra Performance With The AMD Ryzen 9 5900X<i class="fa fa-external-link-alt"></i></span><br>cuache相关讨论：<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5lbmRlYXZvdXJvcy5jb20vdC9pbnRyb2R1Y2luZy10aGUtY2FjdWxlLXNjaGVkdWxlci1hLWNmcy1yZXBsYWNlbWVudC8xMzY0NA==">https://forum.endeavouros.com/t/introducing-the-cacule-scheduler-a-cfs-replacement/13644<i class="fa fa-external-link-alt"></i></span></p><p>如果要用btrfs或者cgroups，请注意MuQSS兼容性不太好。</p><p>Archlinux直接AUR编译就行了。不过很多人换ck内核是因为老机器性能不好，找一个编译好的源（比如repo-ck）或者在别的机子上编译一个吧。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzcyMDIyNy8=">https://lwn.net/Articles/720227/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXgtbWFnYXppbmUuY29tL09ubGluZS9OZXdzL0Nvbi1Lb2xpdmFzLUludHJvZHVjZXMtTmV3LUJGUy1TY2hlZHVsZXI=">https://www.linux-magazine.com/Online/News/Con-Kolivas-Introduces-New-BFS-Scheduler<i class="fa fa-external-link-alt"></i></span></p><p>为什么Linux CFS调度器没有带来惊艳的碾压效果<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MC9hcnRpY2xlL2RldGFpbHMvOTY1MDAxODY=">Linux桌面GUI系统的调度器应该怎么做才不卡顿呢？<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MC9hcnRpY2xlL2RldGFpbHMvOTYzNjI3ODk=">为什么Windows/iOS操作很流畅而Linux/Android却很卡顿呢<i class="fa fa-external-link-alt"></i></span> dog250这位博主在CSDN上从2009年开始，一直在写，文章还不错（不要因为CSDN就不看啊，这是早期良心用户）。这样的稀有博主是我一直没舍得狠下心屏蔽CSDN的原因（颇有一种在垃圾坑里淘宝的感觉）</p><p><span class="exturl" data-url="aHR0cHM6Ly9kcmF2ZW5lc3MubWUvc3lzdGVtLWRlc2lnbi1zY2hlZHVsZXIv">调度系统设计精要 - 面向信仰编程<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2NrLmtvbGl2YXMub3JnLw==">http://ck.kolivas.org/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9saXF1b3JpeC5uZXQv">https://liquorix.net/<i class="fa fa-external-link-alt"></i></span> 这个内核是基于zen内核加了一些其他的补丁和改动（有ck补丁，但是没有MuQSS，原因<code>I&#39;m severely prejudiced against MuQSS, so it will continue &quot;giving a null&quot;.</code>, 见这里<span class="exturl" data-url="aHR0cHM6Ly9idWdzLmFyY2hsaW51eC5vcmcvdGFzay81NjMxMiVFRiVCQyU4OQ==">https://bugs.archlinux.org/task/56312）<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9wZW9wbGUuZWNlLnViYy5jYS9zYXNoYS9wYXBlcnMvZXVyb3N5czE2LWZpbmFsMjkucGRm">The Linux Scheduler: a Decade of Wasted Cores<i class="fa fa-external-link-alt"></i></span> 讲多核的</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmloeXBvLm5ldC8xNTI3OTU1NzcwOTY4NS5odG1s">https://blog.ihypo.net/15279557709685.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2xpbnV4cGVyZi5jb20vP3A9NDI=">http://linuxperf.com/?p=42<i class="fa fa-external-link-alt"></i></span></p><!-- https://blog.csdn.net/XD_hebuters/article/details/79623130https://cloud.tencent.com/developer/article/1603970https://cloud.tencent.com/developer/article/1603974 --><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGVsbG9raXR0eTIvcC8xNDE5OTc0MS5odG1s">https://www.cnblogs.com/hellokitty2/p/14199741.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZWFuYXJraC9yZWFkLWxpbnV4LTAuMTE=">https://github.com/theanarkh/read-linux-0.11<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy53b3dvdGVjaC5uZXQvcHJvY2Vzc19tYW5hZ2VtZW50LzQ0OS5odG1s">http://www.wowotech.net/process_management/449.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTG95ZW5XYW5nL3AvMTI0NTkwMDAuaHRtbA==">Linux进程调度-组调度及带宽控制<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用了一周linux-ck和MuQSS，发现没有想象中的那么好。哦，这还要从一个麻醉师说起。&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="scheduler" scheme="https://zhangjk98.xyz/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab1 Util</title>
    <link href="https://zhangjk98.xyz/6.s081-lab-util/"/>
    <id>https://zhangjk98.xyz/6.s081-lab-util/</id>
    <published>2021-06-30T14:43:08.000Z</published>
    <updated>2021-06-30T14:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>6.S081是原6.828 lab的简单重置版（萌新青春版），以RISC-V和xv6为例讲OS，Lab还挺有意思的。 </p><span id="more"></span><p>之前都是学的ARM，之前自己看csapp的时候x86汇编那几章全跳过去了。正好最近刚考完最后一门课，老板留我们7月在学校里打黑工（其实完全没啥事干），可以闲下来做点一直想做但没空的Lab了。</p><h2 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h2><p>第一个Lab,都很简单，帮你熟悉一下xv6和系统调用。</p><p>直接照着提示做就好了。</p><p>测试可以用<code>make grade</code>测试全部成绩。测试单个成绩可以用<code>./grade-lab-util xxx</code> 或者<code>make GRADEFLAGS=xxx grade</code></p><p>有的时候需要测试打印</p><h3 id="Boot-xv6"><a href="#Boot-xv6" class="headerlink" title="Boot xv6"></a>Boot xv6</h3><p>先下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://g.csail.mit.edu/xv6-labs-2020<span class="token builtin class-name">cd</span> xv6-labs-2020<span class="token function">git</span> switch util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编译运行xv6。</p><h3 id="sleep-easy"><a href="#sleep-easy" class="headerlink" title="sleep(easy)"></a>sleep(easy)</h3><blockquote><p>Implement the UNIX program <code>sleep</code> for xv6; your <code>sleep</code> should pause  for a user-specified number of ticks.  A tick is a notion of time  defined by the xv6 kernel, namely the time between two interrupts  from the timer chip.  Your solution should be in the file  <code>user/sleep.c</code>.</p></blockquote><p>这个也没有什么好说的，让你熟悉一下系统调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"usage: sleep &lt;n>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后看一下测试（grade），一次通过，简单。</p><p><img src="/6.s081-lab-util/image-20210702153759549.png" alt="image-20210702153759549"></p><h3 id="pingpong-easy"><a href="#pingpong-easy" class="headerlink" title="pingpong(easy)"></a>pingpong(easy)</h3><blockquote><p>Write a program that uses UNIX system calls to ‘’ping-pong’’ a  byte between two processes over a pair of pipes, one for each  direction.  The parent should send a byte to the child;  the child should print “<pid>: received ping”,  where <pid> is its process ID,  write the byte on the pipe to the parent,  and exit;  the parent should read the byte from the child,  print “<pid>: received pong”,  and exit.  Your  solution should be in the file <code>user/pingpong.c</code>.</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> parent<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child process, fork = 0</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of child</span>    <span class="token function">read</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of child</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//parent process, fork > 0</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of parent</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close write of child</span>    <span class="token function">write</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>    <span class="token function">read</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>熟悉一下fork和管道呗。</p><p>一开始传的是”ping”, “pong”，各占四个byte，又读了一遍题发现这里只让用1个byte，注意到ping和pong只差一个字母，那就传i和o好了。</p><p>这个小玩意本身没什么难的，已经对c完全手生的我愣是做了一个多小时。pipe的0是读，1是写，一开始我搞反了，下午上一个水课的时候又困又饿，调了半个小时百思不得其解。这个Lab几个作业里面做的最失败的一个（没想到竟然栽在一个easy上了），写了一点注释整理了好几次思路才pass。</p><p><img src="/6.s081-lab-util/1625234931.png"></p><h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><blockquote><p>Write a concurrent version of prime sieve using pipes. This idea is due to Doug McIlroy, inventor of Unix pipes. The picture halfway down <span class="exturl" data-url="aHR0cDovL3N3dGNoLmNvbS9+cnNjL3RocmVhZC8=">this page<i class="fa fa-external-link-alt"></i></span> and the surrounding text explain how to do it. Your solution should be in the file <code>user/primes.c</code>.</p></blockquote><p>素数筛，这个之前看go语言圣经的经典例子。 扔给你的这篇论文<span class="exturl" data-url="aHR0cHM6Ly9zd3RjaC5jb20vfnJzYy90aHJlYWQv">Bell Labs and CSP Threads<i class="fa fa-external-link-alt"></i></span> 扯了一下CSP模型的，你看这作者Russ Cox，霍，这不是go的…..再一看素数筛、共享内存、CSP模型介绍、  后面还提了一嘴go，引用里一堆Robe Pike等熟悉的名字。写过go的孩子是不是有一股我们在哪里见过的感觉……</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// char prime[MAXN];</span>  <span class="token comment">// menset(prime, 1, sizeof(prime));</span>  <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//children process</span>  <span class="token punctuation">&#123;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fork error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sieve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token comment">//p process</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">write</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//write numbers into pipe</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close wiring of parent</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//wait for all child process to end</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token function">sieve</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//exit </span>  <span class="token punctuation">&#125;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child is not prime</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sieve</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start a new child process</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prime <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span>prime <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close writing of parent</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始觉得这有什么难的，仿照go版本写一个不就完事了。也没看提示，在我本机上明明是好的扔到qemu的xv6上就开始乱了，调了半天。然后又读了一遍看到提示<code>Be careful to close file descriptors that a process doesn&#39;t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.</code></p><p>然后发现打印出来有时是正确的，有时是乱序的。</p><p><img src="/6.s081-lab-util/image-20210703170414708.png" alt="image-20210703170414708"></p><p>最后又搜了一下， <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MuZGFydG1vdXRoLmVkdS9+ZG91Zy9zaWV2ZS9zaWV2ZS5wZGY=">Coroutine prime number sieve<i class="fa fa-external-link-alt"></i></span>, Douglas McIlroy在这里面给了一个c的例子，用dup来复制文件描述符，然后关闭管道。对照着这个我检查了一下，是少了一个<code>    close(p[0]);</code></p><p>比go麻烦好多……..</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file <code>user/find.c</code>.</p></blockquote><p>这个不难，处理细节有点繁琐，注意递归的时候不要把<code>.</code>和<code>..</code>算进去就好了。可以参考<code>ls.c</code>和<code>grep.c</code>（选做正则匹配）。照抄ls的代码然后写一个简单的DFS或者BFS就可以了（目录是个树，如果不考虑软链接）。</p><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>实现xarg命令，就用fork和exec实现就好了。这些碰到问题可以直接参考（抄 袭）一下xv6的源码或者gnu coreutils的实现。代码略长，不贴了。<strong>注意</strong>这里每次调试的时候要<code>make clean</code>清除编译缓存。</p><p>贴一个xargs用法的比较好的文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuanVubWFqaW5sb25nLmNvbS9zaGVsbC94YXJncy8=">Linux xargs命令详解<i class="fa fa-external-link-alt"></i></span> 为数不多的对这个命令的用心介绍。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>大三的时候学的微嵌（ARM的），当时讲的也水，大作业和实验也水（什么跑马灯驱动啊、ARM汇编啊，c内联汇编啊，还有一点FPGA），考试全都是抄书抄PPT写概念。深感当时学的太水了，走马观花看了一堆概念，实际上根本不会。</p><p>现在在实验室基本除了划水就是做一些CRUD的垃圾项目，什么XX管理系统，什么XX网站，什么基于机器学习的论文灌水；偶尔维护一下师兄师姐乱七八糟的祖传代码，感觉再这样虚度时光就要变成一个废人了，现在连c都生疏了。暂时打算从6.828和6.824开始，后面可能会做一点数据库的。</p><p>Verilog和VHDL这些暂时不打算再碰了，现在只想用c写。现在实验室有没有FPGA的板子，现在对RTL那些几乎也忘得差不多了，逻辑综合那些更别提了，本科那基本verilog的书当时疫情毕业也都送人了。</p><p>实验室已经两三年没人搞硬件了，堆在角落里的示波器和焊台也已经蒙了一层灰尘，罪过罪过。估计以后也没什么焊板子调运放的机会了…….</p><p>突然发现用go已经用习惯了，甚至感觉写go还挺舒服。。。用习惯了go的管道defer写close，写这个的时候老忘了close。<strong>而且我至少不下十次忘记末尾加分号<code>；</code>了</strong>，完了，写go写出肌肉记忆了。</p><p>（说起来Go写多了真是有点被惯坏了，现在再回去写c，手动管理内存和指针都觉得好麻烦，管道和进程也觉得不顺手。另一个非常非常难受的地方是，习惯了go很快的编译速度，现在每次等编译都好难受啊）</p><h2 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC9zY2hlZHVsZS5odG1s">https://pdos.csail.mit.edu/6.828/2020/schedule.html<i class="fa fa-external-link-alt"></i></span></p><!-- https://www.cnblogs.com/fatsheep9146/p/5216681.htmlhttps://www.cnblogs.com/fatsheep9146/category/769143.htmlhttps://clownote.github.io/about/ --><p>xv6的资料</p><p><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC94djYvYm9vay1yaXNjdi1yZXYxLnBkZg==">https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf<i class="fa fa-external-link-alt"></i></span></p><p>哈工大的课，跟6.S081前面几个lab差不多。</p><p><span class="exturl" data-url="aHR0cHM6Ly9oaXRzei1sYWIuZ2l0ZWUuaW8vb3NfbGFiLw==">https://hitsz-lab.gitee.io/os_lab/<i class="fa fa-external-link-alt"></i></span></p><p>risc-v 资料</p><p><span class="exturl" data-url="aHR0cDovL2NydmEuaWN0LmFjLmNuL2RvY3VtZW50cy9SSVNDLVYtUmVhZGVyLUNoaW5lc2UtdjJwMS5wZGY=">http://crva.ict.ac.cn/documents/RISC-V-Reader-Chinese-v2p1.pdf<i class="fa fa-external-link-alt"></i></span></p><p>调试：</p><p><span class="exturl" data-url="aHR0cHM6Ly90d2RsbGwuZ2l0aHViLmlvLzIwMjAvMTEvMTAvNi5TMDgxLTIv">https://twdlll.github.io/2020/11/10/6.S081-2/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjY0MTM2MDQ=">https://zhuanlan.zhihu.com/p/166413604<i class="fa fa-external-link-alt"></i></span> clion调试</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vS2F0eXVNYXJpc2FCbG9nL3AvMTM3Mjc1NjUuaHRtbA==">https://www.cnblogs.com/KatyuMarisaBlog/p/13727565.html<i class="fa fa-external-link-alt"></i></span> vscode调试</p><h3 id="其他的一些推荐"><a href="#其他的一些推荐" class="headerlink" title="其他的一些推荐"></a>其他的一些推荐</h3><p><em>The Linux Programming Interface: A Linux and UNIX System Programming Handbook</em>（中文版：《Linux/Unix系统编程手册》上下两册，下册翻译的很烂），相当不错的工具书，可以放在手边当参考书和工具书用。</p><p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvaW5kZXguaHRtbA==">Linux man pages online<i class="fa fa-external-link-alt"></i></span> 在线参考手册，必备</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NJLVJJU0NWL2UyMDBfb3BlbnNvdXJjZQ==">https://github.com/SI-RISCV/e200_opensource<i class="fa fa-external-link-alt"></i></span> 没看过，据说还行。</p><p>现代操作系统</p><p><span class="exturl" data-url="aHR0cHM6Ly9pcGFkcy5zZS5zanR1LmVkdS5jbi9tb3NwaS8=">《现代操作系统：原理与实现》<i class="fa fa-external-link-alt"></i></span> 上交IPADS的，我还没买。据说相当不错。（这本我自己一点也没看过，）</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>c语言， 大概弄懂k&amp;r那本<em>The C Programming Language</em>就可以开工了。当然，懂得越多越好，多多益善。</p><p><strong>菊巨可以用Rust哦，贵清<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jjb3JlLW9zL3JDb3Jl">rCore<i class="fa fa-external-link-alt"></i></span>那边的课据说挺好的</strong>（群友们人均Rust, 就只本菜不会Rust了）</p><p>gdb等调试手段要熟， 没法调试等着两眼抓瞎吧。</p><p>熟悉链接库和编译那一套，Makefile什么的会用就行了。不熟悉编译的去编译个LFS（Linux from Scratch）就差不多了。</p><p>一些基础的书和知识，比如csapp等书可以先看看。</p><p>参考手册和工具书先备着，RISC-V的资料也备着。xv6有很多可以参考的地方。</p><p>xv6的资料在这里：<span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC94djYuaHRtbA==">https://pdos.csail.mit.edu/6.828/2020/xv6.html<i class="fa fa-external-link-alt"></i></span><br>这有一个中文的翻译：（版本略老，是x86的）<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JhbnhpYW4veHY2LWNoaW5lc2U=">https://github.com/ranxian/xv6-chinese<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;6.S081是原6.828 lab的简单重置版（萌新青春版），以RISC-V和xv6为例讲OS，Lab还挺有意思的。 &lt;/p&gt;</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="xv6" scheme="https://zhangjk98.xyz/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统的抢救和维护（桌面篇）</title>
    <link href="https://zhangjk98.xyz/linux-rescue/"/>
    <id>https://zhangjk98.xyz/linux-rescue/</id>
    <published>2021-04-09T12:31:56.000Z</published>
    <updated>2021-04-09T12:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇水文主要是写给桌面玩家看的，如果您的服务器打出了GG/被黑了/库被删了，可能不适合来这里找答案。</p><span id="more"></span><p>由于这篇水文是写给普通玩家的，所以尽量简单易懂、适合萌新操作。所以像eBPF、Systemtap这样的神兵利器几乎不会多讲 （这还是我在《性能之巅》这本书看到作者传教DTrace才了解的，这些东西对于一般路过普通用户大概就像vim和emacs, 很强，但是学习成本太高）<br>这里面有一些systemd的内容，openrc用户请跳过（相信这年头还在坚守openrc和其他非systemd的用户水平应该不用看我博客）。<br>由于本人水平有限，而且这篇写的比较仓促，文中可能有不少错误，光临我博客的大佬们发现了请告诉我。<br>暂时先写这么多，还有很多有意思的、重要的、不好写的没有写，以后再更新。</p><h2 id="通常的卡死解决流程"><a href="#通常的卡死解决流程" class="headerlink" title="通常的卡死解决流程"></a>通常的卡死解决流程</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>此处的“卡死”，指鼠标动不了或某个应用、进程没有响应了</li><li>以下流程展示以KDE和Archlinux为例</li><li>如果你想问ubuntu内部错误等，那我只能说无可奉告</li></ol><h3 id="通用流程"><a href="#通用流程" class="headerlink" title="通用流程"></a>通用流程</h3><p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是常事，各种小bug就更多了，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong></p><p>虽然KDE、GNOME都有图形化的系统监视器，看起来还不错。然鹅，有点鸡肋：<strong>鼠标经常随着图形界面在x11、wayland罢工后一起没了，键盘几乎能战斗到最后一刻</strong>（除非 kernel panic 或者 usb等外设的kernel module出问题了）。请适应并熟悉终端模拟器、tty、vim等键盘操作。</p><p>首先尝试<code>ctl+alt+t</code>呼出终端，如果能，那问题应该不大，然后用<code>htop</code>、<code>glances</code>之类的东西看一下罪魁祸首是谁。</p><p>找到那个进程的pid，试试杀掉它。比如vscode内存泄漏动不了了，那就<code>pkill code</code>(相当于<code>ps -ef | grep vscode | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code>)。<br>如果你不知道具体叫什么，但是它在屏幕前能看到，可以用<code>xkill</code>命令终止它（如果你还能动鼠标）</p><p>如果程序或应用是systemd守护进程，用systemctl停掉或重启（openrc、crontab、pm2等同理），比如<code>systemctl disable neo4j --now</code>禁用并停止neo4j数据库的daemon；<code>systemctl daemon-reload &amp;&amp; systemctl restart kubelet</code>刷新配置并重启kubelet（咦，好像没有桌面玩家在自己电脑上跑kubelet进程…一时没想起更好的例子）</p><p>提供了禁用命令的优先用自带命令，比如禁用KDE自带的文件搜索baloo，<code>balooctl stop &amp;&amp; balooctl disable</code></p><p>如果怀疑是KDE桌面及其组件的问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">plasmashell --replace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常退出不行就试试killall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者重启一下SDDM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还不行就杀掉tty1，然后重启xorg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启。或者这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> xstartx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那如果你连tty都切不过去，就用魔术键重启。（如果你提前设置开启了魔术键SysRq的话，这个下面再讲）<br>按住<code>Alt+Shift+SysRq</code>，依次按<code>REISUB</code>这几个键。（每按一个键停几秒钟）（如果你内核出了kernel panic之类的问题，那魔术键也没用）</p><p>再不行直接<code>reboot</code>，<code>shutdown -r now</code>就好了</p><p>以上的命令如果桌面经常卡死建议绑定到你喜爱的快捷键上（在动不了鼠标和快捷键调不出终端模拟器的时候能用上）</p><p>再不行就直接尝试长按电源关机了（一般长按电源键5-10秒，这取决于你的主板BIOS设置，这会发送一个<code>RESET</code>信号）。如果你的主板有复位键，就按复位键重启。实在实在没办法那就拔电源吧。（做好丢失所有未保存数据的准备）</p><p>ps: 如果你用的ext4，那恭喜你，中奖了。异常掉电可能不是丢失数据这么简单了，你的文件系统可能已经出了小问题。（这个后面再说）</p><h3 id="如何终止-重启进程"><a href="#如何终止-重启进程" class="headerlink" title="如何终止/重启进程"></a>如何终止/重启进程</h3><h4 id="首先找到它"><a href="#首先找到它" class="headerlink" title="首先找到它"></a>首先找到它</h4><p>以vscode为例：<code>ps aux | grep vscode</code>或<code>pgrep -fl vscode</code>（<code>-f</code>参数表示<code>use full process name to match</code>，如果不加<code>-f</code>是找不到vscode的，只有<code>grep code</code>能找到进程（因为这个进程名字叫code））</p><p><img src="/linux-rescue/1618143574.png"></p><p>如果不想让<code>ps aux | grep xx</code>的时候每次都显示他自己，再加上<code>|grep -v &quot;grep&quot;</code><br>如果能在屏幕上看到它就直接<code>xkill</code></p><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>kill的方式大概有这些</p><pre class="line-numbers language-none"><code class="language-none">HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较常用的有HUP(通常在关闭终端模拟器的时候，调用SIGHUP，可以用<code>nohup</code>等命令让终端模拟器关闭后进程继续)、QUIT（退出，调用SIGQUIT，<code>Ctrl+\</code>）、KILL（调用SIGKILL，使用<code>kill -9 就是这个</code>）。此外还有TERM（软中断），开发板常用，桌面用户可能用的不多。 </p><p><code>Ctrl+z</code>调用的就是SIGTSTP，这是最温和的一种，挂起的进程可以用<code>fg</code>恢复;<code>Ctrl+c</code>调用的就是SIGINT，会终止进程。</p><p>这部分内容可以去阅读《UNIX高级编程》等书，或者看看维基词条<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVW5peCVFNCVCRiVBMSVFNSU4RiVCNw==">Unix信号<i class="fa fa-external-link-alt"></i></span></p><h2 id="碰到比较严重情况的抢救"><a href="#碰到比较严重情况的抢救" class="headerlink" title="碰到比较严重情况的抢救"></a>碰到比较严重情况的抢救</h2><p>这种情况包括但不限于不小心卸载了系统自带的python、卸载了iptables、卸载了桌面环境（DE）或者卸载了什么重要的库，或者你改了什么<code>kernel parameter</code>直接黑屏进不去了，又或者你执行了危险的<code>dd</code>命令。</p><p>有或者显卡驱动有问题了</p><p>或者双系统Windows更新把你grub整没了（不要双系统就没这么多事，直接上<code>systemd-boot</code>之类的东西）</p><p>反正，开机直接黑屏了。或者你运气好，能进grub界面，还能抢救一下。或者运气更好，进了grub界面然后在DM那里黑屏了（这种可能是显卡驱动的问题）</p><p>你可能需要一个LiveUSB用来抢救。如果你没设置加密，那就挂载<code>\</code>, <code>\home</code>, <code>\boot</code>等目录然后chroot进去修。</p><p>试试重装重要的包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S base base-devel linux linux-firmware linux-headers xorg plasma kde-applications<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件系统损坏"><a href="#文件系统损坏" class="headerlink" title="文件系统损坏"></a>文件系统损坏</h3><p>比如，ext4断电。</p><p>如果你的电脑要经常面对断电等恶劣情况，那建议去用ZFS等文件系统，不要用ext4</p><h3 id="kernel-panic-等"><a href="#kernel-panic-等" class="headerlink" title="kernel panic 等"></a>kernel panic 等</h3><p>Kernel panic之类的问题通常比较严重</p><p>kernel panic segmentation fault core dump</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0NvcmVfZHVtcCNFeGFtaW5pbmdfYV9jb3JlX2R1bXA=">https://wiki.archlinux.org/index.php/Core_dump#Examining_a_core_dump<i class="fa fa-external-link-alt"></i></span></p><h3 id="看看是不是硬件坏了"><a href="#看看是不是硬件坏了" class="headerlink" title="看看是不是硬件坏了"></a>看看是不是硬件坏了</h3><p>内存条没插紧、硬盘坏了、电源没插好、主板受潮了。。。。</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>排查问题和调试比较需要经验，而且要花费不少时间。调试并修好，很有可能比直接重装所花费的时间、精力多得多。<strong>如果你赶时间，我建议做好备份，随时重装。不要将有限的时间浪费在排查问题上。</strong></p><!-- ![do you have a life?](/linux-rescue/1618281436.png)图源[reddit u/sovietarmyfan](https://www.reddit.com/r/linuxmemes/comments/ejdkaj/choosing_an_os_my_own_version/) --><p><strong>但是，追根溯源找到问题并修好它，很有意思，不是吗？</strong></p><p>网上充斥着性能优化的教程，好多都盗了下面这张图，不仅不标注<span class="exturl" data-url="aHR0cDovL3d3dy5icmVuZGFuZ3JlZ2cuY29tL2Jsb2cvMjAxOS0wNy0xNS9icGYtcGVyZm9ybWFuY2UtdG9vbHMtYm9vay5odG1s">来源<i class="fa fa-external-link-alt"></i></span>还把右下角来源抹去（而且还是17年版的老图传来传去）<br><img src="/linux-rescue/1618031552.png"><br>本来想仿照这个做一个调试的图，但是想到指不定又被盗了。算了，随便写点大家将就着看吧。</p><h3 id="查看报错和日志"><a href="#查看报错和日志" class="headerlink" title="查看报错和日志"></a>查看报错和日志</h3><p>遇到解决不了的问题先把报错和版本信息记下来，然后去谷歌一下，搜不到的就去拿着详细的报错去相应的地方请教大佬（希望您提问之前已经阅读了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYW53dS9Ib3ctVG8tQXNrLVF1ZXN0aW9ucy1UaGUtU21hcnQtV2F5L2JsbyUyMGIvbWFpbi9SRUFETUUtemhfQ04ubWQ=">《提问的智慧》<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA4MDQuaHRtbA==">X-Y Problem<i class="fa fa-external-link-alt"></i></span>等）</p><p>进入急救模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl rescuesystemctl emergency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl -x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如何调试内核"><a href="#如何调试内核" class="headerlink" title="如何调试内核"></a>如何调试内核</h3><p>用户态的问题都还比较好调试，总不至于崩了连个报错信息和崩溃日志都保存不下来。内核相关的问题比较麻烦，不过好在除非自己各种折腾或者用Arch这种内核经常滚动升级的，一般碰不到这些问题。</p><p>我调试内核的经验也不多，为数不多的几次几乎都是当年在开发板上。sniper写得那个《Linux内核调试指南》写得挺好，然而不太适合普通的桌面玩家，而且有一点年头了。gdb调试，printk在桌面发型版kernel panic的时候几乎都失效了。对于普通的桌面玩家，遇到了 kernel panic 等严重问题，发现自己解决不了，不妨去论坛/群里提问，找有空的大佬帮你看看（有些小白尝试debug的时候可能越折腾问题越严重）。桌面玩家检查一下自己最近干了什么或者最近系统更新了什么应该就能找到问题了。</p><p>常见的调试方式包括：</p><ol><li>Kdump+crash</li><li>Serial Console</li></ol><p>用kdump捕获错误（kdump会在内核崩溃的时候用kexec运行捕获内核然后转储），然后用crash看一下。使用之前Kdump你可能需要自己编译内核，在内核参数里面设置参数，然后还要设置systemd守护进程。<br>ArchLinux玩家可以参考ArchWiki的<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tkdW1w">Kump<i class="fa fa-external-link-alt"></i></span>条目设置（Archlinux默认没装需要的包，Wiki也没说，要装一下<code>sudo pacman -S kexec-tools crash</code>。）</p><p>Serial Console 串口调试这个折腾过嵌入式的应该也很熟悉了，需要在bootloader设置一下。<br>Arch用户也可以参照ArchWiki词条<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1dvcmtpbmdfd2l0aF90aGVfc2VyaWFsX2NvbnNvbGU=">Working with the serial console<i class="fa fa-external-link-alt"></i></span>设置（我只在树莓派上的archarm试过串口，并没有用这种方法调试过内核）<br>大部分桌面用户的笔记本和台式机上可能已经没有串口了（仅存不多的可能也就给个针脚），搞一个USB转串口才能愉快的调试。</p><p>一般桌面用户出现内核问题用journalctl看一下日至或者拍一下屏幕上的错误然后到群里/论坛请教就行了。见：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNSU4NiU4NSVFNiVBMCVCOCVFNSVCNCVBOSVFNiVCQSU4M18oS2VybmVsX3Bhbmljcyk=">ArchWiki: General_troubleshooting_(简体中文)#内核崩溃_(Kernel_panics)<i class="fa fa-external-link-alt"></i></span></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>Go mod 命名导致的问题：<span class="exturl" data-url="aHR0cHM6Ly94dWFud28uaW8vMjAyMC8xNC1idWctaW50cm9kdWNlZC1ieS1iaW5hcnktbmFtZS8=">记一次二进制乱起名字引发的翻车<i class="fa fa-external-link-alt"></i></span></p><p>我几个月前被和漩涡这个翻车一模一样的问题坑了。</p><h3 id="调试驱动问题"><a href="#调试驱动问题" class="headerlink" title="调试驱动问题"></a>调试驱动问题</h3><p>驱动这个我单独讲一下。因为网上搜“驱动调试”都是嵌入式开发（几年前我）需要的（会叫你用strace、gdb、printk）,对于桌面用户（现在的我）应该去搜关键词：“型号+Linux”。不过如果你不用螃蟹网卡、Nvidia双显卡、某些阴间网卡、不支持Linux的BIOS，应该不用担心。用的XPS、Thinkpad系列等对Linux支持比较好的笔记本应该也不用担心。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>我用一个PS\2键盘(P口键盘)为例演示一下:</p><p>OS：Archlinux<br>主板：b85<br>Kernel：Linux-lts 5.10<br>CPU：intel i5-4590<br>键盘：PS2口的老键盘<br>症状：PS\2键盘插上去用不了</p><ol><li>首先用<code>dmesg</code>等工具检查一下，没啥问题。然后重启（PS\2不支持热插拔，保险期间重启试试）</li><li>除了通用驱动会被合并到kernel主线，大部分驱动是<code>kernel module</code>的形式。所以我们先<code>lsmod</code>看一下有没有PS\2相关的东西。只找到了<code>psmouse</code>（先假装不知道i8042是干嘛的）</li><li>然后去找相关的驱动呗。搜一下“PS\2键盘 驱动”，搜出来第一条是微软的文档，不过没关系，它告诉我们是i8042了。再<code>lsmod</code>看一下，它有。再<code>modprobe i8042</code>看一下，也是好的。</li><li>再搜一下启动参数就发现PS\2和atkbd这个模块有关，然后就顺手搜到这个：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Y24ub3JnL2xpbnV4LTMxMy13YXJuaW5nLXBzMi1rZXlib2FyZC1zdXBwb3J0LWlzLW5vdy1tb2R1bGFyLw==">Linux 3.13 警告：PS/2 键盘支持现已模块化<i class="fa fa-external-link-alt"></i></span>。</li><li>然而高兴早了，还是不行, 但是搜到了一个和我一样的<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zNTQ4MDIvcHMtMi1rZXlib2FyZC1vbmx5LXdvcmtzLXVwLXRvLWdydWItbm90LWFmdGVyLW9zLWZ1bGx5LWJvb3RlZD9ub3JlZGlyZWN0PTEmbHE9MQ==">PS/2 keyboard only works up to GRUB, not after OS fully booted<i class="fa fa-external-link-alt"></i></span> 没有得到解决</li><li>这个问题没有解决，但是有上面那个提问告诉我一个重要的信息：直到GRUB都还是工作的（works up to GRUB）。于是我在GRUB界面试了试，上下和回车都能用、NumLock也是亮的。</li><li>那就简单了，是GRUB启动参数哪里有问题喽。搜索“GRUB i8042”发现很多触控板的问题（touchpad），GRUB加上启动参数<code>i8042.reset i8042.nomux i8042.nopnp i8042.noloop</code>问题立刻解决了</li><li>还看到下面<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yODczNi93aGF0LWRvZXMtdGhlLWk4MDQyLW5vbXV4LTEta2VybmVsLW9wdGlvbi1kby1kdXJpbmctYm9vdGluZy1vZi11YnVudHU=">这个链接<i class="fa fa-external-link-alt"></i></span>回答为什么添加<code>i8042.nomux</code>参数能解决触控板的问题（自动检测是否多工（Multiplexing）的默认配置有问题，改成禁用就好了）。</li><li>去<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9hZG1pbi1ndWlkZS9rZXJuZWwtcGFyYW1ldGVycy50eHQ=">内核文档<i class="fa fa-external-link-alt"></i></span>里查一下, 其他几个选项分别是<pre class="line-numbers language-none"><code class="language-none">i8042.nopnp[HW] Don&#39;t use ACPIPnP &#x2F; PnPBIOS to discover KBD&#x2F;AUX具体     controllers        不使用ACPIPNP或可插拔BIOS模式发现KBD&#x2F;AUX（Keyboard input driver，键盘输入驱动，Auxiliary，音频）可能是这个意思，我猜的i8042.notimeout[HW] Ignore timeout condition signalled by controller        忽略超时i8042.reset[HW] Reset the controller during init, cleanup and     suspend-to-ram transitions, only during s2r     transitions, or never reset        就是reset重置呗i8042.noloop[HW] Disable the AUX Loopback command while probing     for the AUX port        禁用AUX回环？音频相关的东西，应该跟这个参数没关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>看起来起作用的应该是nopnp这个参数起作用了，去掉其他3个参数，试了一下就是它。</li><li>  进一步查找根源问题和报告BUG的环节了。先去报BUG的那几个地方（Google搜出来都是launchpad怎么设置）用<code>nopnp</code>和<code>PnPBIOS</code>搜一下有没有相关的 Bug Report。在LKML邮件列表上可以找到这个：<span class="exturl" data-url="aHR0cHM6Ly9sa21sLm9yZy9sa21sLzIwMjAvMTAvMTMvNTU4">PS/2 mouse not detected with ACPIPnP/PnPBIOS<i class="fa fa-external-link-alt"></i></span> 这一串邮件已经找到了问题。<br>并且在2020.10.13在bugzilla已经发了<span class="exturl" data-url="aHR0cHM6Ly9idWd6aWxsYS5rZXJuZWwub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDk2NTc=">PnP unable to detect connected PS/2 mouse on Asus F2A85-M PRO<i class="fa fa-external-link-alt"></i></span><br>今年3月份的时候还给出了Patch，就等合并了。（更新，4月14号这个patched被defer）<br>行了，<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMzMjM0NzYzMi9hbnN3ZXIvNzMyMzA3MDY4">我修了Linux内核的一个小bug，应该如何把它推进主线呢？ - 醉卧沙场的回答<i class="fa fa-external-link-alt"></i></span>教的东西也用不上了，就等合并吧…..</li></ol><h2 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><blockquote><p>备份，然后重装</p></blockquote><p>如果硬盘或者u盘够大，推荐使用rsync或timeshift（其实也是调用的rsync或btrfs snapshot）<br>btrfs用户可以使用btrfs snapshots</p><p>备份硬盘不够大就只备份dotfiles等配置文件和个人资料就好了。</p><h3 id="谨慎进行危险操作"><a href="#谨慎进行危险操作" class="headerlink" title="谨慎进行危险操作"></a>谨慎进行危险操作</h3><p>一些可能会带来的操作尽量现在虚拟机、容器里面试一下。然而，能够意识到危险的东西一般不会把你坑了。</p><h3 id="dotfiles和脚本"><a href="#dotfiles和脚本" class="headerlink" title="dotfiles和脚本"></a>dotfiles和脚本</h3><p>经常换电脑或重装可以准备dotfiles和快速安装脚本</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>桌面发行版如果没有暴露在外的公网IP和端口，应该不用担心。（毕竟桌面玩家大部分连个独显都没有，挖矿都榨不出油水（而且我简单不少Linux万家有钱了都叛逃Mac了））<br>不放心就用iptables/nftables设置一下防火墙，设置一下用户和文件的权限；还不放心可以用clamav等工具扫一扫rookit。<br>虽然x11不少安全问题，桌面版sandbox隔离做的不好，可是这都不重要，你要小心的是流氓软件而不是所谓的CVE、0day。</p><p>Archlinux用户可以按照这个配置: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vVGgzV2hpdDNXb2xmLzJmMjRiMjkxODNiZTdmOGU5YzBiMDUxMTVhZWZiNjkz">Arch Secure Laptop Install<i class="fa fa-external-link-alt"></i></span> 对于一个桌面用户已经差不多了</p><h2 id="不想重启怎么办"><a href="#不想重启怎么办" class="headerlink" title="不想重启怎么办"></a>不想重启怎么办</h2><p>如果你用的是ArchLinux等滚动发行版，有不少更新是要重启后生效的。普通用户还是更新后重启一下比较好（这可能是最省心省力的）。<br>如果你不想重启，那也没问题。<br><strong>可能唯一不得不重启的就是内核更新了。</strong></p><h3 id="安装更新发生了什么"><a href="#安装更新发生了什么" class="headerlink" title="安装更新发生了什么"></a>安装更新发生了什么</h3><p>你可能听过这样的说法，Linux更新后的旧程序仍然跑在内存里，重启后才生效。可是内存不才一共就那么点？（啊，还有swap等交换区，那加起来也而不多）怎么装得下？ 实际上这些安装文件是（通常是）通过mmap建立虚拟地址映射，还在硬盘里。</p><p>在安装脚本和编译命令里面你会看到<code>install</code>这个命令，它跟<code>cp</code>命令最大的区别不是权限管理，而是更改前<code>unlink</code>。<br><code>cp</code>会把指定目录原有的文件删掉然后再将新的拷贝到指定目录，而当你有二进制文件在运行的时候，用<code>cp</code>更改这个二进制文件直接删会出错（可能<code>cp</code>命令报错<code>device or resource busy</code>执行失败，或<code>cp</code>执行成功但是导致正在运行的东西出现问题）。<br>而<code>install</code>会先<code>unlink</code>拷贝一个副本，很像Btrfs的COW（Copy on Write）机制，如果在用，原文件暂时保留（inode），新文件用新的inode，如果有程序在使用这个文件，在mmap映射中依然可以找到原文件（的inode）。虽然这个时候看起来你在安装目录原来的文件已经没了（<code>ls</code>命令查看<code>/usr/bin/XXX</code>、<code>/usr/lib/XXX</code>已经找不到旧文件了，只能看到新安装的），但是实际上在硬盘里还有副本（inode还在）。等到旧文件没有进程在用（refer,引用）之后（inode引用计数为0），旧文件才会被真正删掉；下次再引用的时候，就是新文件了。<br>（可以用<code>lsof /usr/bin/ssh</code>查看哪个进程在引用或读写<code>/usr/bin/ssh</code>这个文件）</p><p>普通的更新，无需重启整个系统。关闭应用或<code>kill</code>相关进程再打开应该就是新的了。</p><p>ps：不同文件系统的<code>cp</code>行为可能不一样（比如有COW的Btrfs和ZFS, 如果你启用了<code>reflink</code>参数）。不同<code>install</code>命令的实现可能也不一样。有些不太靠谱的安装使用<code>cp</code>命令更新二进制文件（比如Archlinux的AUR里某些野包），所以我喜欢刚开机的时候更新。</p><p>见：</p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Nzg5NDg3OA==">Linux中的mmap映射 [一]<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDkwNjI0MTA0NDQxL2h0dHA6Ly9lbi5jaHlzLmluZm8vMjAwOS8wNS9pbnN0YWxsLXZzLWNwLWFuZC1tbWFwLw==">install vs. cp; and mmap<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29weS1vbi13cml0ZQ==">Copy-on-write<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi91bmxpbmsuMi5odG1s">unlink(2) — Linux manual page<i class="fa fa-external-link-alt"></i></span> 里的这段话：<br>If the name was the last link to a file but any processes still have the file open, the file will remain in existence until the last file descriptor referring to it is closed.</p><h3 id="不重启整个系统让更新生效"><a href="#不重启整个系统让更新生效" class="headerlink" title="不重启整个系统让更新生效"></a>不重启整个系统让更新生效</h3><p>普通的用户态的程序，直接重启这个程序就完了。<br>涉及到systemd daemon，<code>systemctl restart XXX</code><br>如果更新了<code>glibc</code>，那稍微麻烦一点, 这个东西影响比较多。至少要重启DE（Desktop Enviroment, 比如KDE）、systemd（已经你正在跑的daemon）、以及systemd依赖的dbus等等。（不推荐萌新尝试，很容易搞出问题，直接重启整个系统简单粗暴好用）<br>如果更新了<code>kernel module</code>，如果没生效试试手动<code>modprobe XXX</code>一下。</p><h3 id="内核更新不重启（暂时）"><a href="#内核更新不重启（暂时）" class="headerlink" title="内核更新不重启（暂时）"></a>内核更新不重启（暂时）</h3><p>这个括号里的<strong>暂时</strong>的意思是说，现在并没有很好的真·更新内核后不重启的办法（特别是Archlinux等滚动发行版）。下面要说到的<code>kexec</code>、<code>livepatch</code>等热更新都是用来修安全问题打补丁的（狂刷版本号的滚动更新请老老实实挑个空闲时间重启）。<br>如果想避免频繁更新内核之后的重启，请换用更新频率低的lts内核，比如非滚动升级的发行版（比如RH）。Arch可以用依云仙子的<code>linux-lily</code>，基本上半年更新一次（Arch的lts内核的更新频率并不低，甚至有些时候<code>linux-lts</code>比<code>linux</code>包版本号还高（前一段时间 5.10 lts 那会））。<br>如果你使用定制内核，部分模块（比如显卡驱动）推荐使用<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0R5bmFtaWNfS2VybmVsX01vZHVsZV9TdXBwb3J0">DKMS<i class="fa fa-external-link-alt"></i></span></p><p>一些给内核打热补丁的新技术，比如<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvbGl2ZXBhdGNoL2xpdmVwYXRjaC5odG1s">livepatch<i class="fa fa-external-link-alt"></i></span>在<span class="exturl" data-url="aHR0cHM6Ly91YnVudHUuY29tL3NlY3VyaXR5L2xpdmVwYXRjaA==">Ubuntu等发行版已经支持了<i class="fa fa-external-link-alt"></i></span>，一定程度上减小了内核更新频率。很可惜更新内核频繁的Archlinux并没有默认启用，如果想自己打patch可以参考<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tlcm5lbF9saXZlX3BhdGNoaW5n">wiki<i class="fa fa-external-link-alt"></i></span>。很可惜Arch默认也不会像Debian/Ubuntu的apt更新之后提示你是否应该重启，不过有个叫<code>needrestart</code>的包，会帮你在更新之后检查哪个 systemd daemon 需要更新。</p><p>之前讲调试kernel panic的时候提过<code>kexec</code>用于切换内核, 临时应付一下到下次关机可以用这个。如果嫌<code>kexec</code>麻烦可以试试下面这个：</p><p>在Archlinux上如果想在更新内核后临时使用旧内核到关机，可以用<code>kernel-modules-hook</code>这个包。注意，这个包会保留你原来的kernel在<code>/usr/lib/modules/</code>里面，要在重启时自动清理旧内核需要启动 systemd daemon： <code>systemctl enable linux-modules-cleanup</code></p><p>reddit版块有一个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy9kMWxqMGEvaG93X2NvbWVfYXJjaF9saW51eF9jYW5fdXBncmFkZV90aGVfa2VybmVsLw==">讨论贴<i class="fa fa-external-link-alt"></i></span></p><h2 id="个人体验和想说的话"><a href="#个人体验和想说的话" class="headerlink" title="个人体验和想说的话"></a>个人体验和想说的话</h2><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p>混成器（compositer）有OpenGL2、OpenGL3.1、xrender三个选项，混成器和显卡驱动设置不当经常会出一些小问题，比如Kwin屏幕撕裂、黑屏、卡死。如果你的鼠标卡住动不了了，可以在重启plasma之前禁用混成试试（默认的快捷键是Alt+Shift+F12）</p><p><img src="/linux-rescue/1618028977.png"></p><p>对于混成器感兴趣可以看看fc老师的这篇博客：<span class="exturl" data-url="aHR0cHM6Ly9mYXJzZWVyZmMubWUvemhzL2JyaWVmLWhpc3Rvcnktb2YtY29tcG9zaXRvcnMtaW4tZGVza3RvcC1vcy5odG1s">桌面系统的混成器简史<i class="fa fa-external-link-alt"></i></span>，不过现在2021年了，wayland还是。。。</p><p>如果你用Nivida，或者KDE，或者除了gdm以外的其他dm,不太推荐wayland。如果你喜欢触控板和GNOME,可以试试。<br>KDE用户可以考虑关闭baloo（这是一个搜索工具，然而经常出现内存占用飙升、CPU 100%）</p><blockquote><p>如果你使用 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPXF0NWN0">qt5ct<i class="fa fa-external-link-alt"></i></span> 包，Qt5 设置工具将有可能覆盖系用设置内的字体设置。</p></blockquote><p>小白用户可能还是适合Windows，如果用Linux就老老实实默认设置，不要为了好看去照着不知道哪来的教程做一些自己也不知道干了什么的美化。<br>如果真想入坑定制和美化，不妨去reddit的 Unix Porn 看看。<br>休眠设置不当经常导致很多问题，swap和zram要仔细配置<br>显卡驱动是万恶之源，Nvidia Fuck you！<br>使用wayland基本就是灵车漂移<br>使用pipewire也是<br>btrfs曾经是灵车，现在不是生产环境个人使用感觉还行（请善用snapshots备份）<br>虽然只用过2个月的Manjaro，然而出问题的次数比我用了一年Arch还多。<br>用CentOS是不可能用CentOS的，用windows都不可能用CentOS的。</p><h3 id="一些闲话"><a href="#一些闲话" class="headerlink" title="一些闲话"></a>一些闲话</h3><p>Linux用户包括Linux做主力的桌面玩家，靠这个吃饭的服务器运维或者网管，驱动和嵌入式开发们、红帽和Canonical…..当然更多的人只是偶尔连上去服务器的或者有一台不常用的桌面系统（一般是Ubuntu，还是wsl、跑在虚拟机里的那种）。最早我接触Linux的时候，是本科那会，基本都是arm的板子，调试串口写点驱动…桌面发行版就一个Ubuntu16扔在虚拟机里除了干活没打开过几次。当时还要频繁的用protel画pcb、stm32套件，用word应付乱七八糟的实验报告，根本没想到有一天会将Linux作为主力桌面系统。<br>余生也晚，据说曾经的Linux中文论坛和社区人声鼎沸，现在都随着irc、bbs时代一起没落了；然而现在Linux等话题下面充斥着活跃的是营销号、卖书的、卖课的、忽悠考证的，还有Linux中国之类的垃圾机翻，以及无数的伸手党。<br>ps：最近老男孩抄袭spug运维的事又闹得沸沸扬扬的，某些卖课培训班的德行，啧啧。本来是想兼谈服务器的，毕竟在大多数人眼里这才是“正事”，“桌面”那属于不务正业浪费时间瞎折腾。让他们卖课噶韭菜用CentOS的人看抄了无数遍的N手老资料去吧。<br>都说到这了，<span class="exturl" data-url="aHR0cHM6Ly9jZW50b3MucmlwLw==">给CentOS上个香<i class="fa fa-external-link-alt"></i></span>再走吧。</p><p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是司空见惯的事，，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong>（或者你可以去用wm或者在termial下面用Vim等终端工具生活）</p><p>现在的Linux桌面和软件已经比以前完善、漂亮、稳定多了，我个人比较看好KDE，当然。<br>大部分情况下导致桌面卡死的就那么几个东西，比如vscode内存泄漏，比如baloo，比如pipewire和pulseaudio，比如某些Wine的软件。</p><h2 id="参考和推荐阅读"><a href="#参考和推荐阅读" class="headerlink" title="参考和推荐阅读"></a>参考和推荐阅读</h2><p><span class="exturl" data-url="aHR0cHM6Ly94aWFveWVzaGl5dS5naXRodWIuaW8vbGludXgvZmFlLzIwMTcvMDUvMTEvJUU1JUFFJTlFJUU0JUJFJThCJUU0JUJEJUJGJUU3JTk0JUE4Y3Jhc2glRTUlODglODYlRTYlOUUlOTBLZHVtcCVFOCVCRCVBQyVFNSU4MiVBOGtlcm5lbCVFNSVCNCVBOSVFNiVCQSU4MyVFNSU4NiU4NSVFNiVBMCVCOC8=">https://xiaoyeshiyu.github.io/linux/fae/2017/05/11/实例使用crash分析Kdump转储kernel崩溃内核/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly90aG9tYXNrLnNkZi5vcmcvYmxvZy8yMDE5LzExLzA5L3Rha2UtY2FyZS1lZGl0aW5nLWJhc2gtc2NyaXB0cy5odG1s">https://thomask.sdf.org/blog/2019/11/09/take-care-editing-bash-scripts.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIzMDg3MzA4">https://news.ycombinator.com/item?id=23087308<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTIyNjA5NTY1NzAz">https://juejin.cn/post/6844904122609565703<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tkdW1w">https://wiki.archlinux.org/index.php/Kdump<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5icmVuZGFuZ3JlZ2cuY29tL2xpbnV4cGVyZi5odG1s">http://www.brendangregg.com/linuxperf.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFnaWNfU3lzUnFfa2V5">https://en.wikipedia.org/wiki/Magic_SysRq_key<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5n">https://wiki.archlinux.org/index.php/General_troubleshooting<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3Qv">The Linux Kernel documentation<i class="fa fa-external-link-alt"></i></span> 网上搜不到的解决办法时候再去查文档</p><p>ArchLinux相关：</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy9HZW5lcmFsX3JlY29tbWVuZGF0aW9uc18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KQ==">ArchWiki: General recommendations (简体中文)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5n">ArchWiki: General troubleshooting<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RlYnVnXy1fR2V0dGluZ19UcmFjZXM=">ArchWiki Debug - Getting Traces<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0J1Z19yZXBvcnRpbmdfZ3VpZGVsaW5lcw==">ArchWiki Bug reporting guidelines<i class="fa fa-external-link-alt"></i></span>  </p><p>安全相关：</p><p><span class="exturl" data-url="aHR0cHM6Ly9tYWRhaWRhbnMtaW5zZWN1cml0aWVzLmdpdGh1Yi5pby9ndWlkZXMvbGludXgtaGFyZGVuaW5nLmh0bWwjY2hvb3NpbmctdGhlLXJpZ2h0LWRpc3Rybw==">https://madaidans-insecurities.github.io/guides/linux-hardening.html#choosing-the-right-distro<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvU2VjdXJpdHlfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">https://wiki.archlinux.org/title/Security_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltdGhlbmFjaG9tYW4vSG93LVRvLVNlY3VyZS1BLUxpbnV4LVNlcnZlciNkaXNhYmxlLXJvb3QtbG9naW4=">https://github.com/imthenachoman/How-To-Secure-A-Linux-Server#disable-root-login<i class="fa fa-external-link-alt"></i></span></p><h3 id="喜欢折腾且有时间可以看看这些"><a href="#喜欢折腾且有时间可以看看这些" class="headerlink" title="喜欢折腾且有时间可以看看这些"></a>喜欢折腾且有时间可以看看这些</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGZyb21zY3JhdGNoLm9yZy9sZnMvdmlldy9zdGFibGUv">Linux From Scratch<i class="fa fa-external-link-alt"></i></span> 著名的LFS，教你从头编译，照着教程来不难，需要一点耐心和性能足够好的机器用来编译。这有个<span class="exturl" data-url="aHR0cHM6Ly9sY3R0LmdpdGh1Yi5pby9MRlMtQk9PSy9sZnMtc3lzdi9MRlMtQk9PSy5odG1s">中文翻译<i class="fa fa-external-link-alt"></i></span>可以参考。<br><span class="exturl" data-url="aHR0cHM6Ly9ib290bGluLmNvbS9kb2MvbGVnYWN5L2VsZnMvZW1iZWRkZWRfbGZzLnBkZg==">Embedded Linux From Scratch<i class="fa fa-external-link-alt"></i></span> bootlin的嵌入式Linux教程，略老<br><span class="exturl" data-url="aHR0cHM6Ly9yaXNjdi5vcmcvbmV3cy8yMDIwLzEyL2VtYmVkZGVkLWxpbnV4LWZyb20tc2NyYXRjaC1pbi00NS1taW51dGVzLW9uLXJpc2Mtdi1ib290bGluLw==">Embedded Linux “from scratch” in 45 minutes…on RISC-V | Bootlin<i class="fa fa-external-link-alt"></i></span> 貌似现在流行risc-v和Rust写嵌入式的东西，老了，没玩过。<br><span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvbGF0ZXN0L3NvdXJjZQ==">Elixir Cross Referencer<i class="fa fa-external-link-alt"></i></span> 还是bootlin的，能在线查看Linux源码<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWR1bXAuaW5mby9wb3N0LzIwMjAwMTI4LXN5c3RlbXRhcC1ieS1leGFtcGxlLw==">通过实例快速入门Systemtap<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpY2h1YW5nL2F3ZXNvbWUtc3lzdGVtdGFwLWNu">awesome-systemtap-cn<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm9wZW5yZXN0eS5jb20uY24vY24vZHluYW1pYy10cmFjaW5nLw==">动态追踪技术漫谈<i class="fa fa-external-link-alt"></i></span> 强烈推荐<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNi8wNi8yMi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXJlY2VpdmluZy1kYXRhLyM=">Monitoring and Tuning the Linux Networking Stack: Receiving Data<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNy8wMi8wNi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXNlbmRpbmctZGF0YS8=">Monitoring and Tuning the Linux Networking Stack: Sending Data<i class="fa fa-external-link-alt"></i></span> 这两篇是讲网络栈监控和调优的，经典文章。流传很广，也有很多中文翻译，不过原文直白简练，推荐直接看原文</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇水文主要是写给桌面玩家看的，如果您的服务器打出了GG/被黑了/库被删了，可能不适合来这里找答案。&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="rescue" scheme="https://zhangjk98.xyz/tags/rescue/"/>
    
  </entry>
  
  <entry>
    <title>AUR打包指北</title>
    <link href="https://zhangjk98.xyz/create-aur-packages/"/>
    <id>https://zhangjk98.xyz/create-aur-packages/</id>
    <published>2020-12-20T08:36:47.000Z</published>
    <updated>2020-12-20T08:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>（长期施工中，未完待续）</p><span id="more"></span><blockquote class="blockquote-center"><p>快来当AUR打包工具人/打包苦力吧(笑</p></blockquote><p>其实还是建议你去先看看官方文档</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><h3 id="新建一个测试环境"><a href="#新建一个测试环境" class="headerlink" title="新建一个测试环境"></a>新建一个测试环境</h3><p>在本机上直接打包可能会把你自己的机子环境搞乱搞崩，或者忽略了已经在自己电脑上装了了但是没有的依赖，又或者你想…<br>反正弄一个干净的测试环境是有必要的。可以参考官方Wiki：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6QnVpbGRpbmdfaW5fYV9jbGVhbl9jaHJvb3Q=">DeveloperWiki:Building in a clean chroot<i class="fa fa-external-link-alt"></i></span>, 或者看肥猫这篇：<span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9pbnRyb2R1Y3Rpb24tdG8tYXJjaC1saW51eC1kZXZ0b29scy1idWlsZC1wYWNrYWdlcy1mcm9tLWEtY2xlYW4tY2hyb290Lw==">Arch Linux devtools 简介 – 在干净的环境里编译软件包<i class="fa fa-external-link-alt"></i></span></p><p>当然打包一些很简单、依赖很明确的东西，确定没必要也可以不要这一步。</p><h3 id="编写PKGBUILD"><a href="#编写PKGBUILD" class="headerlink" title="编写PKGBUILD"></a>编写PKGBUILD</h3><p>最快的方法是去找找有没有和你要打包的东西类似的包，然后抄一下它的PKGBUILD。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>先用namcap检查一下，有没有语法错误或者其他不符合规范的地方</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap PKGBUILD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的<code>XXX.tar.xz</code>可以再用<code>namcap</code>检查一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap XXX.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传和分享"><a href="#上传和分享" class="headerlink" title="上传和分享"></a>上传和分享</h3><h4 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h4><p>如果想分享出来，你可以上传到AUR仓库里面。AUR帐号随便就能注册几乎没有审查的（所以传点恶意代码上去也能传的），但是尽量不要把有版权问题之类的东西传上去（虽然出了事应该是你自己负责）</p><p>新建一个账号，然后上传你的SSH公钥和密钥指纹。</p><p>用<code>git clone</code>拉取一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone ssh://aur@aur.archlinux.org/your-package-name.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AUR软件仓库需要<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy5TUkNJTkZPXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">SRCINFO<i class="fa fa-external-link-alt"></i></span>,不然会拒绝你的提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg --printsrcinfo <span class="token operator">></span> .SRCINFO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="非官方软件仓库"><a href="#非官方软件仓库" class="headerlink" title="非官方软件仓库"></a>非官方软件仓库</h4><p>或者你可以去其他非官方的仓库，这有一大堆：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1Vub2ZmaWNpYWxfdXNlcl9yZXBvc2l0b3JpZXNfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Unofficial user repositories<i class="fa fa-external-link-alt"></i></span></p><p>中文用户人最多的是ArchlinuxCN，我猜你很熟悉这个了。</p><p>其他的还有chaotic-aur（里面的包不少，但是国内速度很慢，镜像都在国外，直接访问可能比从AUR拉下来编译还慢），arch4edu（一些教育软件和包，清华的弄得，国内速度还行），blackarch（这个包也很多，约等于arch系的kali源）</p><p>要添加到这些非官方仓库里，可以请求打包，或者跟仓库管理员py。</p><p>或者可以自建一个仓库。</p><p>可参考：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxveGFmLmNvbS8yMDIwLzA2L2J1aWxkX2F1cl93aXRoX2dpdGh1Yl9hY3Rpb25zLw==">利用 GitHub Actions 编译 AUR 包并建立自己的软件源<i class="fa fa-external-link-alt"></i></span></p><h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><h3 id="namcap"><a href="#namcap" class="headerlink" title="namcap"></a>namcap</h3><p>用来检查打包是否正确</p><h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3><p>可以干很多事情，最常用的是新建一个干净的环境用来测试你的包。</p><p>还有很多用法去看文档吧，</p><h3 id="debtap"><a href="#debtap" class="headerlink" title="debtap"></a>debtap</h3><p>大多数情况下可以快速把deb包转成aur包<br>有些deb的包或者rpm的包可以拆包然后重新手动打包一下。一般的用debtap可以解决大部分deb包，有些依赖可能没办法需要手动处理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -Syu debtap<span class="token function">sudo</span> debtap -u <span class="token comment">#同步数据库，可能比较慢</span>debtap -p XXX.deb <span class="token comment"># -p 选项生成PKGBUILD</span><span class="token comment">## 然后根据提示输入包名和协议等</span><span class="token comment">## 然后稍等一会，会比较慢</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后<code>pacman -U XXX.tar.xz</code>可以装到你的电脑上试一下。</p><h3 id="pip2pkgbuilds"><a href="#pip2pkgbuilds" class="headerlink" title="pip2pkgbuilds"></a>pip2pkgbuilds</h3><p>将pip的包转成aur的包，这个工具很久没更新了（But it works）。这个工具有不少情况不会帮你自动处理，python的不少pip包本身也不太遵循pip的打包规范，要做不少手动检查和调整。</p><h3 id="npm-pkgbuild"><a href="#npm-pkgbuild" class="headerlink" title="npm-pkgbuild"></a>npm-pkgbuild</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FybGFjNzcvbnBtLXBrZ2J1aWxkI3JlYWRtZQ==">npm-pkgbuild<i class="fa fa-external-link-alt"></i></span> 一个将npm包转成aur的包，和上面那个类似，也是自动生成PKGBUILD。没用过不好评价。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>人肉测试每个包然后传上去给大家用是最好的，不过有的上游更新太勤测试不过来，或者一些<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1ZDU19wYWNrYWdlX2d1aWRlbGluZXNfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">用版本控制紧跟上游的包<i class="fa fa-external-link-alt"></i></span><br><del>又或者有的时候你想让用户当小白鼠</del></p><p>可以试试Travis CI、Github Action 之类的CI/CD工具，不过最好还是更新之前人肉测试一下</p><h3 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h3><p>Github Action的好处是可以白嫖（划掉</p><p>可以用Github Action自动生成PKGBUILD：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvcHVibGlzaC1hdXItcGFja2FnZQ==">publish-aur-package<i class="fa fa-external-link-alt"></i></span></p><p>鸭鸭的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0R1Y2tTb2Z0L2J1aWxkLWF1ci1hY3Rpb24=">build-aur-action<i class="fa fa-external-link-alt"></i></span>,用Github Action编译一个AUR包（有时候你不想在自己电脑上编译可以试试这个）</p><p>使用见：<span class="exturl" data-url="aHR0cHM6Ly92aWZseXRoaW5rLmNvbS9Vc2VfR2l0SHViQWN0aW9uc190b19idWlsZF9BVVIv">GitHub Actions 打造 AUR 打包下载一条龙服务<i class="fa fa-external-link-alt"></i></span></p><h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><h3 id="AUR的依赖包makepkg无法自动识别"><a href="#AUR的依赖包makepkg无法自动识别" class="headerlink" title="AUR的依赖包makepkg无法自动识别"></a>AUR的依赖包makepkg无法自动识别</h3><p>打包的时候如果依赖AUR的包，在<code>makepkg -s</code>pacman是不会自动安装的需要手动安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: target not found: python-django-cors-headers<span class="token operator">==</span><span class="token operator">></span> ERROR: <span class="token string">'pacman'</span> failed to <span class="token function">install</span> missing dependencies.<span class="token operator">==</span><span class="token operator">></span> ERROR: Could not resolve all dependencies.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果依赖太多装不过来，可以加<code>makepkg -d</code>参数忽略依赖，然后对生成的<code>XXX.tar.xz</code>使用yay或者pikaur之类的AUR helper</p><h3 id="git初次commit不包含SRCINFO导致拒绝提交"><a href="#git初次commit不包含SRCINFO导致拒绝提交" class="headerlink" title="git初次commit不包含SRCINFO导致拒绝提交"></a>git初次commit不包含SRCINFO导致拒绝提交</h3><p>可以用<code>git filter branch</code></p><p>（其实直接删了重新<code>git init</code>可能更快）</p><h2 id="常见写法和命令"><a href="#常见写法和命令" class="headerlink" title="常见写法和命令"></a>常见写法和命令</h2><h3 id="install命令"><a href="#install命令" class="headerlink" title="install命令"></a>install命令</h3><p>用过<code>cmake</code>等编译工具的人应该对<code>make install</code>很熟了，它在PKGBUILD里面大概像这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">make</span> -C <span class="token string">"<span class="token variable">$pkgname</span>-<span class="token variable">$pkgver</span>"</span> <span class="token assign-left variable">DESTDIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$pkgdir</span>"</span> <span class="token function">install</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在PKGBUILD里面，还经常用它把文件安装到制定目录，并指定权限（一般不用<code>cp</code>来干这种事）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$srcdir</span>/<span class="token variable">$pkgname</span>"</span>  <span class="token function">install</span> -vDm <span class="token number">644</span> <span class="token variable">$&#123;pkgname<span class="token operator">%</span>-git&#125;</span><span class="token punctuation">&#123;</span>,.plugin<span class="token punctuation">&#125;</span>.zsh <span class="token punctuation">\</span>    -t <span class="token string">"<span class="token variable">$&#123;pkgdir&#125;</span>/usr/share/zsh/plugins/<span class="token variable">$&#123;pkgname&#125;</span>/"</span>  <span class="token function">install</span> -Dm644 LICENSE <span class="token string">"<span class="token variable">$pkgdir</span>"</span>/usr/share/licenses/<span class="token variable">$pkgname</span>/LICENSE<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将可执行文件和LICENSE分别放到指定目录，像LICENSE或者doc权限644就好了，其他的可执行文件酌情给个755权限。</p><p>如果有需要打印详细安装信息方便调试，可以加<code>-v</code>选项，像这样<code>install -Dvm755</code></p><h3 id="常见写法"><a href="#常见写法" class="headerlink" title="常见写法"></a>常见写法</h3><p>获取Github Release</p><h2 id="练手推荐"><a href="#练手推荐" class="headerlink" title="练手推荐"></a>练手推荐</h2><p>上手AUR打包基本只需要一点bash脚本的知识就可以了。当然最好还要对打包的项目和所用的语言、框架、依赖比较熟悉。</p><p>反正我感觉比deb和rpm的打包简单太多了，而且由于包管理的机制，虽然容易挂，但是依赖一般不会特别麻烦（除了有些要拆包的东西）</p><p>你看看依赖问题<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MTYwNjEyOC9hbnN3ZXIvMTE5NDU5NjU5MQ==">都把隔壁deb系的老哥逼成什么样了<i class="fa fa-external-link-alt"></i></span>。</p><p>可以看这个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS96aC9hcnRpY2xlcy9sLWxvLXJwbS1idWlsZC1wYWNrYWdlLw==">Linux 中 RPM 的构建与打包<i class="fa fa-external-link-alt"></i></span>感受一下打包流程<br>（当然rpm包用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0=">fpm<i class="fa fa-external-link-alt"></i></span>之类的打包工具也没有那么麻烦）</p><p>官方的打包示例是要用到make编译c/c++包的例子，但是一些c/c++的包，运行环境和依赖会比较麻烦，而且在x86和arm等不同架构下面也会有很多问题。拿来熟悉打包流程对萌新不太友好。</p><p>练手打包建议用从自己最熟悉的项目和语言开始。如果你什么语言都不熟悉呢，推荐用一些主题或者可以用debtap之类的工具方便的转成AUR包的东西来熟悉一下打包。</p><p>有的系统主题、grub主题、输入法主题之类的包比较好打包，一般来说依赖也少，不会搞出什么大问题。而且主题的文件存放位置和PKGBUILD里面的其他东西可以找AUR里面打包好的其他主题参考，基本大同小异，上手打包不会有太太高难度和坑，不太熟悉流程的可以先用一些主题练手熟悉一下打包流程。（主要是这个依赖也少，破坏性比较小，萌新打出低质量的AUR包也不至于把装这个包的人一波带走闯下大祸）</p><p>而且他们不需要编译，也没有依赖报错，总之非常的适合熟悉一下PKGBUILD的流程</p><p>当然打包不能包揽所有工作，一些设置需要用户手动启用或者修改的（比如一些配置，又比如systemd之类的daemon），比如我这里打包了一个GRUB的Cyberpunk主题，需要用户手动修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GRUB_THEME</span><span class="token operator">=</span><span class="token string">"/usr/share/grub/themes/Cyberpunk/theme.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要用户手动修改设置来启用（基本上主题、桌面挂件之类的包都是这么做的）</p><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>暑假的时候打了十几个野包，当时水平也菜，刚洗手变成Arch玩家没多久，打的十几个包都没放到AUR上丢人。虽然现在还是真蒟蒻在群里围观各路大佬卖弱不敢说话，看到中文的打包教程这么少，决定还是写点什么。</p><p>当时搜AUR打包相关的资料，发现相关的文章、博客、资料并不多（尤其是中文的）。中文资料保守估计不到Archlinux安装教程的百分之一，也不到deb、rpm、Flatpak打包教程的百分之一。</p><p>Archlinux安装弄的这么难初衷可能是为了筛掉一部分小白和伸手党，不过网上各路保姆级安装教程（一步一步手把手教的视频演示那种）和各种一键安装脚本和 Arch based 的发行版基本上快让<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfTGludXhfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Arch的理念<i class="fa fa-external-link-alt"></i></span>流产了(特别是广为诟病的Manjaro和网上一大堆不负责任的教程，一口一个适合小白，动不动就教人添加ArchlinuxCN源，搞得很多打包者不堪骚扰)</p><p>小白倒没什么，主要是被伸手党搞怕了。</p><p>独立打一个包应该不会比独立装一个Archlinux难（不考虑Nvidia双显卡博通网卡阴间主板诡异驱动等….）。<br>如果一个用户能参照ArchWiki独立装好、配置好自己的Arch，那就应该有能力自己打包。<br>Arch没有Mac、Windows、ChromeOS那样的财大气粗的公司和掏钱买服务的客户，甚至不能跟RHEL和Ubuntu比，社区纯靠热情。而且由于deb系和rpm系用户众多，基本大部分软件如果支持Linux会给出deb或者rpm的包，有的可能会给个appimage的包，Arch的支持基本没太多上游会管，很多包都是Arch的维护者和用户自行编译打包的（不少还是deb拆包转的）。<br>伸手党太多而打包者太少，那就离凉凉不远了。<br>下次看到没有包当伸手党可不好，没有包就自己打一个吧。  </p><h2 id="参考和推荐阅读"><a href="#参考和推荐阅读" class="headerlink" title="参考和推荐阅读"></a>参考和推荐阅读</h2><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6SW5kZXg=">DeveloperWiki<i class="fa fa-external-link-alt"></i></span> 里面关于打包的部分可以看看<br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfcGFja2FnZV9ndWlkZWxpbmVz">Arch package guidelines<i class="fa fa-external-link-alt"></i></span> Arch官方的打包指南<br>[PKGBUILD_(简体中文)]<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1BLR0JVSUxEXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">https://wiki.archlinux.org/index.php/PKGBUILD_(简体中文)<i class="fa fa-external-link-alt"></i></span> PKGBUILD的简要介绍<br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL01ha2Vwa2dfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Makepkg_(简体中文)<i class="fa fa-external-link-alt"></i></span> Makepkg也比较重要，有需要可以参考维基修改一下参数<br><span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9tYWtlLWFuLWFyY2gtcGFja2FnZS1mb3ItcHl0aG9uLW1vZHVsZS8=">给 Arch 打一个包 – Python 模块篇<i class="fa fa-external-link-alt"></i></span> python的包经常没什么人愿意打（确实依赖比较麻烦，好在有肥猫，打了一大堆python包），希望多来点熟悉python的大佬<br><span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vUEtHQlVJTEQuNQ==">PKGBUILD参考手册<i class="fa fa-external-link-alt"></i></span> Arch官网的参考手册，话说Arch最近新上的<span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy8=">手册索引<i class="fa fa-external-link-alt"></i></span>挺香的（btw I use tldr）<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsdHIuY29tL2RvY3MvYnVpbGRpbmctcGFja2FnZXMtb24tYXJjaC1saW51eA==">Building Packages on Arch Linux (Including the AUR)<i class="fa fa-external-link-alt"></i></span> Vultr的教程（我也不知道Vultr怎么会有这种东西）<br><span class="exturl" data-url="aHR0cHM6Ly9qdW55dXNzaC5naXRodWIuaW8vcC9hcmNoLWxpbnV4LXBhY2thZ2UtcXVpY2stc3RhcnQv">Arch Linux 第一次打包就上手<i class="fa fa-external-link-alt"></i></span>  新手可以看看这个  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;（长期施工中，未完待续）&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="AUR" scheme="https://zhangjk98.xyz/tags/AUR/"/>
    
    <category term="Archlinux" scheme="https://zhangjk98.xyz/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>Linux新一代音视频服务Pipewire尝鲜</title>
    <link href="https://zhangjk98.xyz/pipewire/"/>
    <id>https://zhangjk98.xyz/pipewire/</id>
    <published>2020-12-03T07:58:26.000Z</published>
    <updated>2020-12-03T07:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021年9月更新：<br>听说fedora都上Pipiwire了，正好这几天有点空，那就试试吧</p><span id="more"></span><p>Pipewire是红帽造的新一代音视频轮子，主要是用来取代PulseAudio、jack还有gstreams什么的。<br><strong>据说</strong>延迟补偿还不错，<strong>据说</strong>能统一音视频框架还兼容PulseAudio和Jack，据说是朝着专业级音效去的。据说支持Wayland和平板，据说支持Flatpak之类的容器内使用，据说有类似PolKit的权限管理，不需要像PulseAudio那样新建音频用户组和添加用户了。。。。</p><blockquote><p>It provides a low-latency, graph based processing engine on top of audio and video devices that can be used to support the use cases currently handled by both pulseaudio and JACK. PipeWire was designed with a powerful security model that makes interacting with audio and video devices from containerized applications easy, with supporting Flatpak applications being the primary goal. Alongside Wayland and Flatpak we expect PipeWire to provide a core building block for the future of Linux application development.</p></blockquote><p>都是据说啊，被Wayland骗了一次之后我已经不敢信这些宣传了，先试试实际效果再说。</p><p>当然这个目前貌似只正经适配了GNOME和Fedora，不过据说兼容PulseAudio，Arch上的坑已经有人踩了好久了，现在还有点小问题，不过可以考虑上了。<br>昨天刚把Arch和笔记本的EndeavourOS更了python 3.9，除了autojump出了点小问题外一切正常。索性直接上Pipewire看看吧，反正笔记本那个全损音质也跟没有一样，换了说不定能抢救一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S pipewire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要替代PulseAudio和Jack装这两个包<code>pipewire-pulse</code>、<code>pipewire-jack-dropin</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S pipewire-jack-dropin pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后systemd设置一下（archwiki说蓝牙设备需要手动设置一下，编辑<code>/etc/pipewire/pipewire.conf</code>，我手头没蓝牙耳机就不弄了）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> --user pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后退出登录或重启。</p><p>运行<code>pactl info</code>，如果看到</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Server Name:</span> PulseAudio <span class="token operator">(</span>on PipeWire <span class="token number">0.3.17</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明正常。</p><h3 id="蓝牙设备"><a href="#蓝牙设备" class="headerlink" title="蓝牙设备"></a>蓝牙设备</h3><p>感谢室友赞助的一个索尼蓝牙音箱用于测试</p><p>pipewire自带了蓝牙的模块，不需要像PulseAudio那样安装<code>pulseaudio-bluetooth</code>之类的包</p><p>安装了pipewire-pulse之后编辑<code>/etc/pipewire/pipewire.conf</code>在<code>exec /usr/bin/pipewire-media-session</code>后面加上<code>-e bluez5</code>就可以使用了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> /usr/bin/pipewire-media-session -e bluez5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>换回PulseAudio或者Jack可以用这个<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vc25pcHBldHMvMTE2NA==">脚本<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib64/<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-mainloop-glib.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-simple.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjack.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjacknet.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjackserver.so.0.999.0<span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用pacman包管理器装的就</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable pipewire-pulse --usersystemctl disable pipewire --useryay -Rs pipewire-pulseyay -S pulseaudio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新一点实测"><a href="#更新一点实测" class="headerlink" title="更新一点实测"></a>更新一点实测</h2><h3 id="人耳效果和使用体验"><a href="#人耳效果和使用体验" class="headerlink" title="人耳效果和使用体验"></a>人耳效果和使用体验</h3><p>昨天回到宿舍，发现笔记本的EndeavourOS更新python 3.9<br> Optimus-manager 出问题了，好在很快解决了。<br>然后在工具人室友的帮助下测试了绿联的外接声卡一块、某大法耳机一个音响一个，傻多戴显示器自带小音箱一个，均工作正常。</p><p><img src="/pipewire/1607053618.png"><br><img src="/pipewire/1607053601.png"></p><p>两种音质人耳都听不出差别，室友把两段音频放到Adobe Audition也看不出什么大区别</p><p>笔记本自带外放在KDE的设置中从其他音频播放设备切换过去之后出现没有声音的状况，经检查其实是有的，只是非常小，将声音调整到最大还是几乎要被笔记本的风扇声音盖住（这貌似不是pipewire的锅，），重启后外放音量恢复正常。<br>除了笔记本自带外放，在笔记本上音频切换KDE设置都没有出现卡死的状况，，声音也播放正常，没出现切换之后没声了的状况。</p><h3 id="面板参数"><a href="#面板参数" class="headerlink" title="面板参数"></a>面板参数</h3><p>笔记本使用原来的PulseAudio详情：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span><span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span><span class="token key atrule">Server Name</span><span class="token punctuation">:</span> pulseaudio<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> <span class="token number">14.0</span><span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> s16le 2ch 44100Hz<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> alsa_output.pci<span class="token punctuation">-</span>0000_00_1f.3<span class="token punctuation">-</span>platform<span class="token punctuation">-</span>skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> combined.monitor<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 94e6<span class="token punctuation">:</span>e6bf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更换pipewire-pulse之后：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">69</span><span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span><span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span><span class="token key atrule">Server Name</span><span class="token punctuation">:</span> PulseAudio (on PipeWire 0.3.17)<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> 14.0.0<span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> float32le 2ch 48000Hz<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_output.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> hw<span class="token punctuation">:</span>sofhdadsp<span class="token punctuation">,</span><span class="token key atrule">5</span><span class="token punctuation">:</span> sink<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_input.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> <span class="token key atrule">hw:sofhdadsp</span><span class="token punctuation">:</span> source<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 6242<span class="token punctuation">:</span><span class="token number">4425</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来参数是好了一点，实测听不出来。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>据说pipewire音视频延迟低了，手头没有专业设备没法测。其他的混响、均衡、采样手头没有专业设备也测不出来。</p><p>视频的话，浏览器HTML5播放器和本地VLC能正常播放。笔记本播放youtube4k视频外接4k显示器硬解没有大问题。VLC播放用N卡（笔记本的1650）解码也没有问题，驱动正常。</p><p>其他的视频方面和屏幕共享之类的功能暂时还没有测试。我也找不到熟悉视频的工具人了，等找到了再说吧，自己瞎测估计也测不出什么来。</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="音质"><a href="#音质" class="headerlink" title="音质"></a>音质</h3><p><code>pw-cli</code>显示的台式机面板参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pw-cli info <span class="token number">0</span>        id: <span class="token number">0</span>        permissions: rwxm        type: PipeWire:Interface:Core/3        cookie: <span class="token number">653542227</span>        user-name: <span class="token string">"zjk"</span>        host-name: <span class="token string">"zjk-allseries"</span>        version: <span class="token string">"0.3.17"</span>        name: <span class="token string">"pipewire-0"</span>*       properties:*               core.name <span class="token operator">=</span> <span class="token string">"pipewire-0"</span>*               context.profile.modules <span class="token operator">=</span> <span class="token string">"none"</span>*               core.daemon <span class="token operator">=</span> <span class="token string">"true"</span>*               link.max-buffers <span class="token operator">=</span> <span class="token string">"16"</span>*               default.clock.rate <span class="token operator">=</span> <span class="token string">"48000"</span>*               default.clock.quantum <span class="token operator">=</span> <span class="token string">"1024"</span>*               default.clock.min-quantum <span class="token operator">=</span> <span class="token string">"32"</span>*               default.clock.max-quantum <span class="token operator">=</span> <span class="token string">"8192"</span>*               default.video.width <span class="token operator">=</span> <span class="token string">"640"</span>*               default.video.height <span class="token operator">=</span> <span class="token string">"480"</span>*               default.video.rate.num <span class="token operator">=</span> <span class="token string">"25"</span>*               default.video.rate.denom <span class="token operator">=</span> <span class="token string">"1"</span>*               mem.allow-mlock <span class="token operator">=</span> <span class="token string">"true"</span>*               cpu.max-align <span class="token operator">=</span> <span class="token string">"32"</span>*               object.id <span class="token operator">=</span> <span class="token string">"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>教研室的Arch台式机的老声卡接耳机和外接绿联声卡接耳机看不出什么大的区别。<br>Arch开Virtualbox里的win7能用，但是音质不知道为什么变差了特别多。 </p><p>只有笔记本外放音质确实好了一点，我的笔记本外放能听出差别的那种，然而还是比win10差了不少（这个没有参考价值，我的笔记本Realtek驱动太阴间了）。<br>据说延迟低了，这个听不出来，手头上也没有专业设备。  </p><p>其他的等我的校交响乐团的工具人室友回来了再说。  </p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>目前使用的问题大概有：</p><ol><li><code>systemctl status --user pipewire-pulse</code>报错</li></ol><pre class="line-numbers language-log" data-language="log"><code class="language-log">● <span class="token domain constant">pipewire-pulse.service</span> <span class="token operator">-</span> PipeWire PulseAudio     <span class="token property">Loaded:</span> loaded <span class="token operator">(</span><span class="token file-path string">/usr/lib/systemd/user/pipewire-pulse.service</span><span class="token operator">;</span> enabled<span class="token operator">;</span> vendor preset<span class="token operator">:</span> enabled<span class="token operator">)</span>     <span class="token property">Active:</span> active <span class="token operator">(</span>running<span class="token operator">)</span> since Thu <span class="token date number">2020-12-03</span> <span class="token time number">17:10:09</span> CST<span class="token operator">;</span> <span class="token number">12min</span> ago<span class="token property">TriggeredBy:</span> ● <span class="token domain constant">pipewire-pulse.socket</span>   <span class="token property">Main PID:</span> <span class="token number">1787</span> <span class="token operator">(</span>pipewire<span class="token operator">-</span>pulse<span class="token operator">)</span>     <span class="token property">CGroup:</span> <span class="token file-path string">/user.slice/user-1000.slice/user@1000.service/app.slice/pipewire-pulse.service</span>             └─<span class="token number">1787</span> <span class="token file-path string">/usr/bin/pipewire-pulse</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:02</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> core <span class="token number">0x55fc6c39e410</span><span class="token operator">:</span> proxy <span class="token number">0x55fc6c39e410</span> id<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> bound<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span> seq<span class="token operator">:</span><span class="token number">1272</span> res<span class="token operator">:</span><span class="token operator">-</span><span class="token number">32</span> <span class="token operator">(</span>Broken pipe<span class="token operator">)</span> msg<span class="token operator">:</span><span class="token string">"connection error"</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:25</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">42</span> <span class="token operator">(</span>FLUSH_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">168</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:25</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">41</span> <span class="token operator">(</span>CORK_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">169</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:26</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">41</span> <span class="token operator">(</span>CORK_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">170</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">3</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">4</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">5</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:17</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">6</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:18</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">7</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:18</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">8</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token separator comment">***</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">18:58:02</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c37c6f0</span><span class="token operator">:</span> <span class="token punctuation">[</span>VirtualBox<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">23</span> <span class="token operator">(</span>GET_SOURCE_INFO<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">249</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">19:00:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c37c6f0</span><span class="token operator">:</span> <span class="token punctuation">[</span>VirtualBox<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">23</span> <span class="token operator">(</span>GET_SOURCE_INFO<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">376</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过貌似都不影响使用</p><ol start="2"><li>KDE调节音量的按钮换了之后经常卡死（KDE下面整个任务栏都卡死了），恢复之后调节音量无效</li></ol><p><img src="/pipewire/1606991672.png"></p><ol start="3"><li>KDE音频切换设置偶尔卡死</li></ol><p>下图这个</p><p><img src="/pipewire/1606992266.png"><br><img src="/pipewire/1606992430.png"></p><p>点终止之后整个plasma桌面都无了</p><p><img src="/pipewire/1606992508.png"></p><ol start="4"><li><p>上图中的Build-in Audio切换之后耳机没有声音</p></li><li><p>切换外放麦克风和耳机之后再切回来没声了</p></li><li><p>有几个人之前说virtualbox会冲突，我这暂时没遇到</p></li><li><p>2021.2更新后再次出问题了,<code>pw-cli info 0</code>显示</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: <span class="token string">"failed to connect: Host is down"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查了一下发现systemd daemon不知道怎么没了。</p><pre class="line-numbers language-none"><code class="language-none">Unit pipewire.service could not be found.Unit pipewire-pulse.service could not be found.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行<code>systemctl enable pipewire --user</code>后重启还是找不到</p><p><code>systemctl status pipewire-pulse --user</code></p><p>报错：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">● <span class="token domain constant">pipewire-pulse.service</span> <span class="token operator">-</span> PipeWire PulseAudio     <span class="token property">Loaded:</span> loaded <span class="token operator">(</span><span class="token file-path string">/usr/lib/systemd/user/pipewire-pulse.service</span><span class="token operator">;</span> enabled<span class="token operator">;</span> vendor preset<span class="token operator">:</span> enabled<span class="token operator">)</span>     <span class="token property">Active:</span> active <span class="token operator">(</span>running<span class="token operator">)</span> since Sun <span class="token date number">2021-02-14</span> <span class="token time number">10:03:07</span> CST<span class="token operator">;</span> <span class="token number">12min</span> ago<span class="token property">TriggeredBy:</span> ● <span class="token domain constant">pipewire-pulse.socket</span>   <span class="token property">Main PID:</span> <span class="token number">1168</span> <span class="token operator">(</span>pipewire<span class="token operator">-</span>pulse<span class="token operator">)</span>     <span class="token property">CGroup:</span> <span class="token file-path string">/user.slice/user-1000.slice/user@1000.service/app.slice/pipewire-pulse.service</span>             └─<span class="token number">1168</span> <span class="token file-path string">/usr/bin/pipewire-pulse</span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:40</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:40</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6ceab0</span><span class="token operator">:</span> <span class="token punctuation">[</span>QPulse<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">9</span> <span class="token operator">(</span>SET_CLIENT_NAME<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">1</span> error<span class="token operator">:</span><span class="token number">6</span> <span class="token operator">></span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:41</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:41</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6e1cb0</span><span class="token operator">:</span> <span class="token punctuation">[</span>QPulse<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">9</span> <span class="token operator">(</span>SET_CLIENT_NAME<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">1</span> error<span class="token operator">:</span><span class="token number">6</span> <span class="token operator">></span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:42</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退坑保平安"><a href="#退坑保平安" class="headerlink" title="退坑保平安"></a>退坑保平安</h3><p>换回PulseAudio了，不当小白鼠了，心累，好几次升级都有小问题，每次内核更新提心吊胆的。</p><p>2021.2 </p><p>最近更新了Pipewire和kernel，开机加载界面的时候只加载出壁纸，kwin慢了十秒，Pipewire daemon加载失败，不想修了，直接换回PulseAudio。</p><p>在Pipewire出1.0稳定版和正式支持KDE之前一直用PulseAudio了。</p><!-- 如果需要屏幕共享，chrome需要启用WebRTC PipWire支持`chrome://flags/#enable-webrtc-pipewire-capturer`，可能需要用`libpipewire02` --><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p><span class="exturl" data-url="aHR0cHM6Ly9waXBld2lyZS5vcmcv">https://pipewire.org/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1BpcGVXaXJl">https://wiki.archlinux.org/index.php/PipeWire<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUHVsc2VBdWRpbw==">https://zh.wikipedia.org/wiki/PulseAudio<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzczNDEwMy8=">https://lwn.net/Articles/734103/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5nbm9tZS5vcmcvdXJhZXVzLzIwMjAvMDkvMDQvcGlwZXdpcmUtbGF0ZS1zdW1tZXItdXBkYXRlLTIwMjAv">https://blogs.gnome.org/uraeus/2020/09/04/pipewire-late-summer-update-2020/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vd2lraXMvTGltaXRhdGlvbnMtaW4tMC4z">pipewire 0.3的一些局限和问题<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年9月更新：&lt;br&gt;听说fedora都上Pipiwire了，正好这几天有点空，那就试试吧&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="pipewire" scheme="https://zhangjk98.xyz/tags/pipewire/"/>
    
  </entry>
  
  <entry>
    <title>本站评论由valine更换为DisqusJS</title>
    <link href="https://zhangjk98.xyz/change-comment-to-disqusjs/"/>
    <id>https://zhangjk98.xyz/change-comment-to-disqusjs/</id>
    <published>2020-11-26T12:25:41.000Z</published>
    <updated>2020-11-26T12:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于近日不少采用valine作为评论系统网站的遭到几千个垃圾评论刷屏攻击，外加valine存在的安全隐患问题，放弃好看的valine，换用DisqusJS。<br>utteranc继续使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于近日不少采用valine作为评论系统网站的遭到几千个垃圾评论刷屏攻击，外加valine存在的安全隐患问题，放弃好看的valine，换用DisqusJS。&lt;br&gt;utteranc继续使用。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次Spring Cloud上线内存优化</title>
    <link href="https://zhangjk98.xyz/spring-cloud-performance-optimization/"/>
    <id>https://zhangjk98.xyz/spring-cloud-performance-optimization/</id>
    <published>2020-11-19T12:30:06.000Z</published>
    <updated>2020-11-19T12:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>没钱买 256G 内存的服务器的人是这样的</p><span id="more"></span><p>其实本来想说Spring Cloud上线性能优化的，想了想不是，这波，这波啊是性能反向优化（性能不性能的已经不重要了，用户量应该也不太大，先把成本压下来再说吧）。</p><h2 id="怎么回事"><a href="#怎么回事" class="headerlink" title="怎么回事"></a>怎么回事</h2><p>朋友们好啊，<br>我是浑元形意太极门掌门人马保国。<br>刚才有个朋友问我：<br>“马老师发生肾么事了？”<br>我说怎么回事。给我发了几张截图。<br>我一看！哦，原来是昨天，有两个微服务，<br>上线一天，一个内存<strong>996M</strong>，一个内存<strong>888M</strong>。<br><img src="/spring-cloud-performance-optimization/image-20201118095216036.png" alt="它也说，啊，它截图也说了"><br><del>其实是我调了一下凑出来的这两个数</del><br>它说要吃一点资源，我说可以。<br>诶，我一说它“啪”就站起来了，很快啊！<br>然后上来就是，一个虚拟机，一个Docker，一个mysql，我全部防出去，防出去了啊。<br>防出去以后，自然是，上线部署以点到为止。没有限制它内存。<br>我笑一下，准备收工，因为这时间，按传统部署的点到为止，服务器已经够用了。我收工的时间回宿舍啦。<br>它突然袭击，还有8个微服务，来打我机子，啊。我大意了啊，没有闪。<br>来，抢！来，偷吃，我DDR3的，老内存，这好吗？这不好。<br>它说它是乱占用的，它可不是乱占用的。一个996，一个888，这明显是，有备而来！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>正常的操作是加钱上大一点的内存，但是大内存VPS、杜甫它贵啊。以套路云香港为例，明晃晃的抢钱。而且16G内存及以上的版本已经无了。其他华南华北的VPS更贵一点，而且全都是1M小水管。</p><p><img src="/spring-cloud-performance-optimization/image-20201120103456546.png" alt="套路云香港"></p><p><del>服务器内存比本地台式还小是要出大问题的,上线炸内存警告</del></p><p>102网吧里面服务器是有32G内存的，然而网速…..</p><p>服务器的套餐是学校20一个月20M的普通套餐（20M是下载速度，要想对外服务，上传速度可能只有几M）同为校园网。而且你电的教育网会有各种小问题，比如逢年过节十一国庆公网IP就被信息中心收回去了、校园网出口线路很差、域名也不好搞。</p><p>加钱换校园网的套餐也没用，你电沙河主楼的网速我很少见有人跑出过100Mbps以上的。而且问题是主楼那个墙里的网线，貌似是百兆网…教研室的老交换机上面还赫然贴着一张2010年的封条。。。</p><p>VPS的话选Debian，根据我多年用128M-1G内存VPS灵车漂移的印象，占用资源最少的少的就这个了（CentOS占用&gt;Ubuntu Server&gt;Debian&gt;VSP2ARCH）</p><p><del>其实我很想VPS2ARCH再次灵车漂移，但是毕竟是要出事背锅生产环境我不敢</del></p><h2 id="考虑扔掉Docker"><a href="#考虑扔掉Docker" class="headerlink" title="考虑扔掉Docker"></a>考虑扔掉Docker</h2><p>直接裸跑吧，不要再套几层了。</p><h2 id="其他能扔的"><a href="#其他能扔的" class="headerlink" title="其他能扔的"></a>其他能扔的</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>这么点用户量没啥缓存的必要，关了</p><h3 id="NACOS"><a href="#NACOS" class="headerlink" title="NACOS"></a>NACOS</h3><p>动态注册发现之类的单机版也没必要用了，直接手动排查和维护吧。</p><p>NACOS的内存占用单机版在几百M左右（默认参数是<code>-Xms512m -Xmx512m -Xmn256m</code>，可以在startup.sh里面改，不过还是直接关掉比较清静。</p><p><img src="/spring-cloud-performance-optimization/image-20201120212626344.png" alt="NACOS内存使用情况"></p><h2 id="JDK版本"><a href="#JDK版本" class="headerlink" title="JDK版本"></a>JDK版本</h2><p>之前一直用的java8-Openjdk。</p><p>后来看到据说 Oracle JDK 和 Open JDK 有性能差异，不同版本的jdk也有性能差异，java 8 的64位版本和32位版本也有区别（据说不超过2G内存的情况下貌似32位会好一些）</p><p>那就都试试吧。在Arch上打的jar包，就在本地测试了一下，没在服务器上试。</p><h3 id="不同版本内存占用"><a href="#不同版本内存占用" class="headerlink" title="不同版本内存占用"></a>不同版本内存占用</h3><p>Arch有个脚本，可以切换OpenJDK的版本，</p><p><img src="/spring-cloud-performance-optimization/image-20201124123102440.png" alt="archlinux-java"></p><p>Oracle JDK 由于甲骨文公司不武德，跟各路开源组织（以及很多闭源福报公司）都闹僵了，Arch仓库不提供支持，得自己安装。</p><p>从AUR安装结果报错说<code>**==&gt; ERROR:** **Failure while downloading manual://jdk-8u271-linux-x64.tar.gz**    **Aborting...** error downloading sources: jdk8</code>，看了一下还得跑到<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=">Oracle<i class="fa fa-external-link-alt"></i></span>那里去注册下载然后pkgbuild</p><p>从阿里云的镜像可以不用注册下载<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGs4LTh1MjcxL3Jhdy9tYXN0ZXIvamRrLTh1MjcxLWxpbnV4LXg2NC50YXIuZ3o=">jdk8<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGsxMS0xMS4wLjkvcmF3L21hc3Rlci9qZGstMTEuMC45X2xpbnV4LXg2NF9iaW4udGFyLmd6">jdk11<i class="fa fa-external-link-alt"></i></span>，然后扔到<code>~/Downloads</code>里面，再运行<code>yay -Syu jdk8 jdk11</code>就好了。</p><p>java8 和java11 的编译通过了，看起来Oracle JDK效果是要好一点(也只有十几兆的微弱差别，感觉区别不大)，java14和java15还没试，以后有空再说。</p><h3 id="32位和64位的差异"><a href="#32位和64位的差异" class="headerlink" title="32位和64位的差异"></a>32位和64位的差异</h3><p>试了一下java8的32位和64位，貌似有一点区别，32位是节省一点资源。大概差距也在十几兆左右，区别不太大。</p><h2 id="JVM调参"><a href="#JVM调参" class="headerlink" title="JVM调参"></a>JVM调参</h2><p>大概调了调，冲着压榨内存占用调的</p><p>几个比较重要的参数：</p><ul><li>-Xms</li><li>-Xmx</li><li></li></ul><p>暂时把参数改成这样子了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xms16m -Xmx32m -XX:MaxMetaspaceSize<span class="token operator">=</span>48m -XX:CompressedClassSpaceSize<span class="token operator">=</span>8m -Xss256k -Xmn300m -XX:InitialCodeCacheSize<span class="token operator">=</span>4m -XX:ReservedCodeCacheSize<span class="token operator">=</span>8m -XX:MaxDirectMemorySize<span class="token operator">=</span>16m -jar service_ucenter-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不太敢压榨的太狠，怕上线了OutofMemory。</p><p>现在每个jar包跑起来大概内存占用在300M以下。</p><h2 id="压缩MySQL内存占用"><a href="#压缩MySQL内存占用" class="headerlink" title="压缩MySQL内存占用"></a>压缩MySQL内存占用</h2><p>MySQL的内存占用压缩一下还是很低的，之前还在用wordpress的时候128M内存的灵车VPS跑起来没什么大问题。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>浏览器F12 可以看到，在加载首页的时候，大部分html、css、js资源在300ms内加载完成，500ms以后开始加载图床资源，一直到最4000ms以后才加载完成。</p><p><img src="/spring-cloud-performance-optimization/image-20201124170847425.png" alt="加载首页"></p><p>下图是打开首页时png图片（阿里云图床，大小 926k）的时候的加载速度，耗时最长的就是下载图片的过程。</p><p><img src="/spring-cloud-performance-optimization/image-20201124165004678.png" alt="image load speed"></p><p>主要就是压缩图片大小了，jpg和png全换成webp，今年6月份Safari14已经支持webp了，现在主流浏览器都问题不大。</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>暂时不考虑，不过上线的时候砍掉几个无关紧要的功能倒是问题不大，这样只开4个微服务就差不多能用了。</p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p>如果不跑别的东西，一个4G内存的VPS已经够用了。</p><p><img src="/spring-cloud-performance-optimization/image-20201124120817137.png" alt="首页"></p><p><img src="/spring-cloud-performance-optimization/image-20201124120944296.png" alt="全部课程页面"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLnJlZGhhdC5jb20vYmxvZy8yMDE3LzA0LzA0L29wZW5qZGstYW5kLWNvbnRhaW5lcnMv">https://developers.redhat.com/blog/2017/04/04/openjdk-and-containers/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmtlbHUub3JnL3RlY2gvMjAxOC8wNS8zMC9ydW5uaW5nLWEtanZtLWluLWEtY29udGFpbmVyLXdpdGhvdXQtZ2V0dGluZy1raWxsZWQuaHRtbA==">https://blog.kelu.org/tech/2018/05/30/running-a-jvm-in-a-container-without-getting-killed.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXR5b3Vrbm93L3AvNTYxMDIzMi5odG1s">https://www.cnblogs.com/ityouknow/p/5610232.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZseWxlZnQvdGlwL2Jsb2IvbWFzdGVyL2Jsb2cvc3ByaW5nYm9vdCVFNiU4MCVBNyVFOCU4MyVCRCVFOCVCMCU4MyVFNCVCQyU5OC5tZA==">https://github.com/flyleft/tip/blob/master/blog/springboot%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B5b3J0dWMvanZtLW1lbW9yeS1hbGxvY2F0aW9uLWluLWRvY2tlci1jb250YWluZXItYTI2YmJjZTNhM2Yy">https://medium.com/@yortuc/jvm-memory-allocation-in-docker-container-a26bbce3a3f2<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没钱买 256G 内存的服务器的人是这样的&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="jvm" scheme="https://zhangjk98.xyz/tags/jvm/"/>
    
    <category term="Spring" scheme="https://zhangjk98.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>上线一个Spring Cloud的课程管理服务项目</title>
    <link href="https://zhangjk98.xyz/course-managemnet/"/>
    <id>https://zhangjk98.xyz/course-managemnet/</id>
    <published>2020-11-18T13:40:24.000Z</published>
    <updated>2020-11-18T13:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>先说一下感想：小作坊不适合微服务，请不起年薪五十万的架构师、年薪三十万的DevOps，没有各种没事造轮子重构刷KPI的目的，没有服务器集群的、开发一只手能数过来的，都谨慎尝试微服务。</p><span id="more"></span><h2 id="大概情况"><a href="#大概情况" class="headerlink" title="大概情况"></a>大概情况</h2><ul><li><p>瞎折腾微服务玩，然而并没有集群（手里三台服务器垃圾配置只够乱开几个Docker玩）</p></li><li><p>并没有Golang，用的java（别问为什么又是java）</p></li><li><p>目测用户量不超过100，很有可能并发量不超过10（对，比我这博客网站还门可罗雀）</p></li><li><p>不过比较麻烦的一点是有视频播放的问题，流量根本顶不住，目前是打算买阿里云的视频点播</p></li></ul><p><del>我感觉到时候日均用户访问量都没有拆分出来的微服务个数多</del></p><ul><li>用的Spring Cloud全家桶（你看我们像是有闲功夫能自研框架人吗）</li><li>写的挺好，一上线幺蛾子就多了</li></ul><p>cm_admin: 后台管理系统前端代码，vue写的<br>cm_frontweb: 主页面前端代码，Nuxt.js的<br>cm_parent: 后端代码 Spring Cloud 拆成了个微服务</p><p><del>过度设计，问就是过度设计</del></p><p><img src="/course-managemnet/image-20201118214736704.png" alt="后台管理"></p><p><img src="/course-managemnet/image-20201118215636817.png" alt="前台界面"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>docker安装mysql8（其实不是很推荐把数据库扔到Docker里面）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker pull mysql:8.0<span class="token function">sudo</span> docker images mysql:8.0<span class="token function">netstat</span> -tunlpdocker run -p <span class="token number">3309</span>:3306 --name mysql8.0 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">102</span>@uestc -d mysql:8.0docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化数据库，运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mycli -u root -h your_ip_address -P <span class="token number">3309</span> -p your_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database course_managementuse course_managementsource ~&#x2F;codes&#x2F;course_management&#x2F;course_management.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看一下是否成功</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql root@211.83.255.255:course_management&gt; show tables+-----------------------------+| Tables_in_course_management |+-----------------------------+| crm_banner                  || edu_chapter                 || edu_comment                 || edu_course                  || edu_course_collect          || edu_course_description      || edu_subject                 || edu_teacher                 || edu_video                   || statistics_daily            || t_order                     || t_pay_log                   || ucenter_member              |+-----------------------------+13 rows in setTime: 0.009s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Cloud的8个微服务"><a href="#Spring-Cloud的8个微服务" class="headerlink" title="Spring Cloud的8个微服务"></a>Spring Cloud的8个微服务</h3><p>分别打包好8个jar包</p><p> 启动服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar <span class="token punctuation">&#123;</span>微服务名.jar<span class="token punctuation">&#125;</span> -Dspring.config.location<span class="token operator">=</span><span class="token punctuation">&#123;</span>配置文件名.properties<span class="token punctuation">&#125;</span> <span class="token operator">></span> java_cm.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置可以从指定的<code>application.properties</code> 中覆盖</p><p>(本来是都扔在Docker里面的，发现docker images有点大，内存消耗也上去了)</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>将<code>src/main/resources/application.properties</code>和<code>src/test/java/CodeGenerator.java</code>中的配置文件（包括数据库端口、密码、密钥等）改成自己的</p><p>或者启动的时候在``application.properties` 中覆盖</p><h3 id="NACOS"><a href="#NACOS" class="headerlink" title="NACOS"></a>NACOS</h3><p>一个阿里的动态监控监控服务，有一个控制台。我们只要单机版就够了。还有其他的功能，暂时都没用到。</p><p>阿里官方的建库脚本</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvYmxvYi9tYXN0ZXIvZGlzdHJpYnV0aW9uL2NvbmYvbmFjb3MtbXlzcWwuc3Fs">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql<i class="fa fa-external-link-alt"></i></span></p><p>或者不要数据库记录日志，直接存成文件。这个直接照着官方的说明启动就行了</p><p>见<span class="exturl" data-url="aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL3F1aWNrLXN0YXJ0Lmh0bWw=">https://nacos.io/zh-cn/docs/quick-start.html<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/alibaba/nacos.git<span class="token builtin class-name">cd</span> nacos/mvn -Prelease-nacos -Dmaven.test.skip<span class="token operator">=</span>true clean <span class="token function">install</span> -U<span class="token function">ls</span> -al distribution/target/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不想自己打包的直接下那个release好了</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=">https://github.com/alibaba/nacos/releases<i class="fa fa-external-link-alt"></i></span></p><p>运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nacos/bin<span class="token function">sh</span> startup.sh -m standalone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/course-managemnet/image-20201116215705790.png" alt="这样子就是运行成功了"></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>使用Nginx进行端口映射，还是把Nginx扔到Docker里面了</p><p>编写<code>default.conf</code>:</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">listen</span><span class="token number">9001</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server_name</span>localhost</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">location</span> ~ /eduservice/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8001</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /eduoss/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8002</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /eduvod/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8003</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token directive"><span class="token keyword">location</span> ~ /educms/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8004</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /edumsm/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8005</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /eduucenter/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8006</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /eduorder/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8007</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ~ /edustatistics/</span> <span class="token punctuation">&#123;</span> <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8008</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">4096</span></span><span class="token punctuation">;</span>  <span class="token comment">## Default: 1024</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span> <span class="token comment">#includes all files of file type.conf</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写<code>Dockerfile</code>：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginx:alpineCOPY default.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构建<code>Docker image</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker build -t nginxcm <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动Docker image</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run -d nginxcm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他的问题"><a href="#其他的问题" class="headerlink" title="其他的问题"></a>其他的问题</h3><p>阿里云aliyun-sdk-vod-upload这玩意未开源，需要手动下</p><pre class="line-numbers language-none"><code class="language-none">Cannot resolve com.aliyun:aliyun-sdk-vod-upload:1.4.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去<span class="exturl" data-url="aHR0cDovL2RvY3MtYWxpeXVuLmNuLWhhbmd6aG91Lm9zcy5hbGl5dW4taW5jLmNvbS9hc3NldHMvYXR0YWNoLzUxOTkyL2NuX3poLzE2MDA4NDgxOTk5NTIvVk9EVXBsb2FkRGVtby1qYXZhLTEuNC4xMy56aXA/c3BtPWEyYzRnLjExMTg2NjIzLjIuNDAuNDVjMDE5MmJpUEh4Y2omZmlsZT1WT0RVcGxvYWREZW1vLWphdmEtMS40LjEzLnppcA==">这里<i class="fa fa-external-link-alt"></i></span>下载运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file -DgroupId<span class="token operator">=</span>com.aliyun -DartifactId<span class="token operator">=</span>aliyun-sdk-vod-upload -Dversion<span class="token operator">=</span><span class="token number">1.4</span>.11 -Dpackaging<span class="token operator">=</span>jar -Dfile<span class="token operator">=</span>aliyun-java-vod-upload-1.4.13.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>现在很多教程直接<code>npm run dev</code>，好家伙，直接给我看傻了。（CSDN之类的东西实在屏蔽不过来，SEO排名还一个个都贼靠前）</p><p>又看了看，貌似静态页面可以直接</p><p>然后又看到好多教程，大部分用的<code>pm2</code>运行<code>npm start</code>作为damon，js一统江湖哎，可能都是nodejs全干写的，感觉不太像运维的风格。可我想找nginx的抄作业，扒拉vue的文档拉到最底下才看到一个Docker里跑Nginx的。</p><h3 id="后台管理界面"><a href="#后台管理界面" class="headerlink" title="后台管理界面"></a>后台管理界面</h3><p>先在<code>cm_admin</code>和<code>cm_forntweb</code>两个文件夹下<code>build</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cm_admin<span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后会在<code>.dist</code>文件夹下生成压缩后的静态页面。</p><p>扔到服务器上跑就行了，用Nginx配置一下端口映射和域名（我这域名没有，老板嫌备案麻烦没向学校申请）</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginxCOPY dist&#x2F; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;COPY nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">9528</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span> 0.0.0.0</span><span class="token punctuation">;</span>    <span class="token comment">#charset koi8-r;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/host.access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log  error</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker build -t cm_admin <span class="token builtin class-name">.</span>sodo docker run cm_admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="前台界面"><a href="#前台界面" class="headerlink" title="前台界面"></a>前台界面</h3><p>Nuxt.js写的，就直接用的<code>nuxt start</code></p><p>在<code>packages.json</code>里面指定一下端口和IP</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"nuxt"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"3000"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cm_frontweb<span class="token function">npm</span> run build<span class="token function">npm</span> run start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/course-managemnet/image-20201122112918925.png" alt="这个内存占用看起来可以接受"></p><p>在服务器上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> isntall pm2 -g<span class="token builtin class-name">cd</span> cm_frontweb<span class="token function">npm</span> <span class="token function">install</span> --savenuxt buildpm2 start <span class="token function">npm</span> --name <span class="token string">"cm_frontweb"</span> -- run startpm2 startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/course-managemnet/image-20201122114528875.png" alt="内存占用也还好"></p><h2 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h2><pre class="line-numbers language-none"><code class="language-none">npm ERR! code ELIFECYCLEnpm ERR! errno 126npm ERR! cm_front@1.0.0 dev: &#96;nuxt&#96;npm ERR! Exit status 126npm ERR! npm ERR! Failed at the cm_front@1.0.0 dev script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR!     &#x2F;root&#x2F;.npm&#x2F;_logs&#x2F;2020-11-16T14_13_24_937Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean --forceeno1                     14Kb   10Kb   <span class="token number">0.0</span>    <span class="token number">3.4</span>   <span class="token number">6</span>.83G <span class="token number">1</span>.06G  <span class="token number">7152</span> xi102          <span class="token number">1</span>:45 <span class="token number">50</span>    <span class="token number">0</span> S    ? ?    java -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize<span class="token operator">=</span>128m -XX:MaxMetaspaceSize<span class="token operator">=</span>320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath<span class="token operator">=</span>/home/xi102/course_management/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list<span class="token operator">=</span> -Djava.<span class="token function">rm</span> -rf node_modules package-lock.json<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-none"><code class="language-none">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage (repackage) on project cm_parent: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage failed: Plugin org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE or one of its dependencies could not be resolved: Could not transfer artifact org.vafer:jdependency:jar:2.1.1 from&#x2F;to central (https:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2): &#x2F;home&#x2F;zjk&#x2F;.m2&#x2F;repository&#x2F;org&#x2F;vafer&#x2F;jdependency&#x2F;2.1.1&#x2F;jdependency-2.1.1.jar.part (没有那个文件或目录) -&gt; [Help 1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>build报错</p><pre class="line-numbers language-none"><code class="language-none">The POM for com.itwny:service_base:jar:0.0.1-SNAPSHOT is missing, no dependency information available<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage (repackage) on project service_base: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.2.1.RELEASE:repackage failed: Unable to find main class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>貌似是由于spring-boot-maven-plugin插件打出的包无法被依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sh: /home/zjk/codes/course_management/cm_frontweb/node_modules/.bin/nuxt: Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请用root权限运行。</p><pre class="line-numbers language-none"><code class="language-none">2020-11-17 16:02:57 |ERROR |ThreadPoolTaskScheduler-1 |NacosWatch.java:171 |org.springframework.cloud.alibaba.nacos.discovery.NacosWatch |Error watching Nacos Service change<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查一下nacos是否正确启动了(不过这个项目不用NACOS也能完成面向客户的功能)</p><p>npm run build 报错</p><pre class="line-numbers language-none"><code class="language-none">ERROR in Template execution failed: ReferenceError: BASE_URL is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>index.html</code>中<code>BASE_URL</code>为<code>htmlWebpackPlugin.options.url</code></p><p>警告可以不用管</p><pre class="line-numbers language-none"><code class="language-none">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx报错<code>nginx: [emerg] “server” directive is not allowed here</code></p><p>见<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDE3NjYxOTUvbmdpbngtZW1lcmctc2VydmVyLWRpcmVjdGl2ZS1pcy1ub3QtYWxsb3dlZC1oZXJl">https://stackoverflow.com/questions/41766195/nginx-emerg-server-directive-is-not-allowed-here<i class="fa fa-external-link-alt"></i></span></p><p>可能是配置没写好</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>未完待续</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2RlcGxveW1lbnQuaHRtbCMlRTklODAlOUElRTclOTQlQTglRTYlOEMlODclRTUlOEQlOTc=">vue官方文档的部署通用指南<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjc3NDY1MA==">next.js nuxt.js等服务端渲染框架构建的项目部署到服务器,并用PM2守护程序<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjY3NTAxMg==">vue、react等单页面项目应该这样子部署到服务器<i class="fa fa-external-link-alt"></i></span></p><p><a href="https://segmentfault.com/q/1010000008477568"></a></p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjY2NzAxMzIwMjA1">https://juejin.cn/post/6844903666701320205<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先说一下感想：小作坊不适合微服务，请不起年薪五十万的架构师、年薪三十万的DevOps，没有各种没事造轮子重构刷KPI的目的，没有服务器集群的、开发一只手能数过来的，都谨慎尝试微服务。&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Spring Cloud" scheme="https://zhangjk98.xyz/tags/Spring-Cloud/"/>
    
    <category term="microservices" scheme="https://zhangjk98.xyz/tags/microservices/"/>
    
  </entry>
  
  <entry>
    <title>给Archlinux添加blackarch仓库镜像源</title>
    <link href="https://zhangjk98.xyz/add-blackarch-repo-mirrors/"/>
    <id>https://zhangjk98.xyz/add-blackarch-repo-mirrors/</id>
    <published>2020-11-12T14:08:30.000Z</published>
    <updated>2020-11-12T14:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新：BlackArch镜像源的很多包质量很差，请谨慎添加，必要时请修改PKGBUILD或自行打包。</p><span id="more"></span><h2 id="更新和劝退（只是想添加blackarch源的请直接看第二节）"><a href="#更新和劝退（只是想添加blackarch源的请直接看第二节）" class="headerlink" title="更新和劝退（只是想添加blackarch源的请直接看第二节）"></a>更新和劝退（只是想添加blackarch源的请直接看第二节）</h2><p>虽然BlackArch的包很多，但是…….</p><p>BlackArch的打包质量很差（甚至有些包可能比AUR更差），不少包都是用工具直接转的，而且更要命的是很多包缺乏维护（这对于Arch系这些更新频繁的包可不太妙）</p><p>会发生一些离谱的事情，比如这种：<span class="exturl" data-url="aHR0cHM6Ly9mcmVlbm9kZS5sb2dib3QuaW5mby9hcmNobGludXgtY24vMjAyMTA1MTgjYzgwNDcwMjk=">https://freenode.logbot.info/archlinux-cn/20210518#c8047029<i class="fa fa-external-link-alt"></i></span></p><p>一些活跃的第三方源，比如archlinuxcn，arch4edu，处理问题比较及时，质量也比AUR的包更放心。一般的AUR helper，比如yay, pikaur都喜欢把添加的源里的包优先级放到AUR前面。<code>sudo pacman -Syyu</code>也会把本地新的包降级。BlackArch里面很多万年不更新也没人维护的老包，会很麻烦。</p><p>比如neo4j-community，AUR比blackarch源里的新，直接用pacman或者yay等AUR Helper安装就会装一个远古的老版本<br>（不是3.X版本稳定的原因，单纯就是没人维护，<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG93bmxvYWQtY2VudGVyLz9yZWY9c3Vic2NyaXB0aW9uI2NvbW11bml0eQ==">官网的版本<i class="fa fa-external-link-alt"></i></span>现在3.5.28是20 April 2021发布的，BlackArch的官方源更新是在一<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JsYWNrQXJjaC9ibGFja2FyY2gvY29tbWl0L2FiNDk4MGEzNmNkNDcxY2E0ZjRmNGNhMWMxN2Q2YjdlNWU2ZGFhZTk=">2020年3月<i class="fa fa-external-link-alt"></i></span>）</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">aur<span class="token operator">/</span>neo4j<span class="token operator">-</span>community <span class="token number">4.2.2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">(</span><span class="token operator">+</span><span class="token number">63</span> <span class="token number">0.40</span><span class="token operator">)</span> <span class="token operator">(</span>Out<span class="token operator">-</span>of<span class="token operator">-</span>date<span class="token operator">:</span> <span class="token date number">2021-06-06</span><span class="token operator">)</span> <span class="token operator">(</span>Installed<span class="token operator">)</span>    A fully transactional graph database implemented in Java<span class="token property">blackarch/neo4j-community 3.5.14-1 (144.4 MiB 165.9 MiB) (Installed:</span> <span class="token number">4.2.2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">)</span>    A fully transactional graph database implemented in Java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主动安装AUR里的可以这样：<code>yay neo4j-community</code>然后<code>Packages to install</code>选项手动选AUR里的。或者你手动下载AUR里的PKGBUILD然后<code>makepkg</code>自己build。<strong>再或者直接不要blackarch这个第三方源了（推荐）</strong>，<code>/etc/pacman.d</code>里注释掉。</p><p>不然每次更新还要忽略一堆<code>warning: neo4j-community: local (4.2.2-1) is newer than blackarch (3.5.14-1)</code>。</p><p>neo4j这种单个没啥影响的包更新迟缓倒也没啥大问题，问题是BlackArch的包经常会影响community/extra的基础包，比如plasma这个包（某一天某个群友亲历，我由于装的是plasma-meta逃过一劫）</p><p>KDE用户注意：如果你添加了BlackArch源，按照<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS0RFI1BsYXNtYQ==">ArchWiki上的KDE页面<i class="fa fa-external-link-alt"></i></span>添加plasma元组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu plasma<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不仔细看plasma是安装成功了，也没报错。然后就掉到Blackarch的plasma这个包的坑里的,<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JsYWNrQXJjaC9ibGFja2FyY2gvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcGxhc21hL1BLR0JVSUxE">plamsa<i class="fa fa-external-link-alt"></i></span>是BlackArch里面一个python写的一个工具的包，跟KDE Plasma一点关系都没有。</p><p>没想到吧，我也没想到。因为<strong>按照ArchLinux的VSC打包规范</strong>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BsYXNtYS1kaXNhc3NlbWJsZXIvcGxhc21h">plasma<i class="fa fa-external-link-alt"></i></span>这个东西的包名<strong>应该叫做 plasma-git</strong></p><p>你得这样安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -Syu extra/plasma.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>BlackArch仓库人手不够打包质量差、更新不及时我都能理解，能跟extra仓库冲突了就离谱。</p><p>下面传肥猫领袖重要讲话：</p><pre class="line-numbers language-none"><code class="language-none">Felix Yan, [05.02.21 01:08]想起来我当年研究过 blackarch 的仓库Felix Yan, [05.02.21 01:09]想把里面的工具往主仓库搬Felix Yan, [05.02.21 01:09]结果真找不到几个能搬的Felix Yan, [05.02.21 01:09]大部分都是坑工具……（里面有很多质量堪忧或者版权不明白的工具，不适合放到一个正常发行版质量好的工具我当年整过一波，该打的大部分都打了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或许单独装个kali是个不错的选择。平时日用好像Parrot os也不错。我反正Arch够用了（我又不干坏事）。</p><p>以下为原内容，写于 2020.11 目测有效，不保证该方法以后可能过时，建议自行翻阅官方文档。</p><h2 id="导入仓库和设置国内镜像"><a href="#导入仓库和设置国内镜像" class="headerlink" title="导入仓库和设置国内镜像"></a>导入仓库和设置国内镜像</h2><h3 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h3><p>按照官方文档来：</p><p>下载官网的脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -O https://blackarch.org/strap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x strap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./strap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后应该就好了</p><p>看看是不是装好了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -Sg <span class="token operator">|</span> <span class="token function">grep</span> blackarch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后更新一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syyu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候应该会给你安装<code>blackarch-keying</code>这个包，然后就可以用了</p><h3 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h3><p>修改<code>/etc/pacman.conf</code>，在最后加上</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[blackarch]Server &#x3D; http:&#x2F;&#x2F;mirrors.uestc.cn&#x2F;blackarch&#x2F;$repo&#x2F;os&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Server请改成你在那里提供服务而且网速比较快的，比如tuna的</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[blackarch]Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;blackarch&#x2F;$repo&#x2F;os&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="为何要写这么水的一篇博客"><a href="#为何要写这么水的一篇博客" class="headerlink" title="为何要写这么水的一篇博客"></a>为何要写这么水的一篇博客</h2><p>我之前谷歌随手搜出了ustc的镜像使用帮助，然后就开始了飘红报错，试了一圈中文的解决方案，并没有用。<br>（当然中文博客基本都过时了，还是有很多好好写的，不止CSDN,比如这个：<span class="exturl" data-url="aHR0cHM6Ly93ZWVwaW5nZG9nZWwuZ2l0aHViLmlvL3Bvc3RzLyVFNyU5NCVBOGFyY2hfbGludXglRTYlODklOTMlRTklODAlQTAlRTUlQUUlOEMlRTclQkUlOEUlRTYlQjglOTclRTklODAlOEYlRTclOEUlQUYlRTUlQTIlODMv">用 Arch Linux 打造完美渗透环境<i class="fa fa-external-link-alt"></i></span>）</p><p>报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: blackarch: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> is unknown:: Import PGP key F9A6E68A711354D84A9B91637533BAFE69A25079? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> YYerror: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> could not be looked up remotely:: Synchronizing package databases<span class="token punctuation">..</span>.error: blackarch: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> is unknown:: Import PGP key F9A6E68A711354D84A9B91637533BAFE69A25079? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> error: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> could not be looked up remotelyerror: failed to update blackarch <span class="token punctuation">(</span>invalid or corrupted database <span class="token punctuation">(</span>PGP signature<span class="token punctuation">))</span>error: failed to synchronize all databases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现中文的几个解决方案全都过时了。安装<code>blackarch-keying</code>导入key会产生先有鸡还是先有蛋的问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pacman -S blackarch-keyringerror: blackarch: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> is unknown:: Import PGP key F9A6E68A711354D84A9B91637533BAFE69A25079? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Yerror: key <span class="token string">"F9A6E68A711354D84A9B91637533BAFE69A25079"</span> could not be looked up remotelyerror: database <span class="token string">'blackarch'</span> is not valid <span class="token punctuation">(</span>invalid or corrupted database <span class="token punctuation">(</span>PGP signature<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转了一圈还是翻了官方文档，世界瞬间清净了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> installing blackarch keyring<span class="token punctuation">..</span>.loading packages<span class="token punctuation">..</span>.resolving dependencies<span class="token punctuation">..</span>.looking <span class="token keyword">for</span> conflicting packages<span class="token punctuation">..</span>.Packages <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> blackarch-keyring-20140118-3Total Installed Size:  <span class="token number">0.04</span> MiB:: Proceed with installation? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> checking keys <span class="token keyword">in</span> keyring                                         <span class="token punctuation">[</span><span class="token comment">#######################################] 100%</span><span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> checking package integrity                                       <span class="token punctuation">[</span><span class="token comment">#######################################] 100%</span><span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> loading package files                                            <span class="token punctuation">[</span><span class="token comment">#######################################] 100%</span><span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> checking <span class="token keyword">for</span> <span class="token function">file</span> conflicts                                      <span class="token punctuation">[</span><span class="token comment">#######################################] 100%</span>:: Processing package changes<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> installing blackarch-keyring                                     <span class="token punctuation">[</span><span class="token comment">#######################################] 100%</span><span class="token operator">==</span><span class="token operator">></span> Appending keys from blackarch.gpg<span class="token punctuation">..</span>.gpg: public key DB323392796CA067 is <span class="token number">3037</span> days newer than the signaturegpg: public key CF66D153D884358F is <span class="token number">16</span> seconds newer than the signature<span class="token operator">==</span><span class="token operator">></span> Locally signing trusted keys <span class="token keyword">in</span> keyring<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key A0917C4147A37007CB54C1CFD295AA940EFDDF62<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key 4345771566D76038C7FEB43863EC0ADBEA87E4E3<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key CBA3C7D4798912702DCF568E67D8BDF42AD93F4E<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key 8F9A9793CB8591147C2EC70566E0CDBD1E01F333<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Importing owner trust values<span class="token punctuation">..</span>.gpg: inserting ownertrust of <span class="token number">4</span>gpg: setting ownertrust to <span class="token number">4</span>gpg: setting ownertrust to <span class="token number">4</span>gpg: setting ownertrust to <span class="token number">4</span><span class="token operator">==</span><span class="token operator">></span> Updating trust database<span class="token punctuation">..</span>.gpg: key 1EB2638FF56C0C53: no user ID <span class="token keyword">for</span> key signature packet of class <span class="token number">10</span>gpg: key 1EB2638FF56C0C53: no user ID <span class="token keyword">for</span> key signature packet of class <span class="token number">10</span>gpg: public key DB323392796CA067 is <span class="token number">3037</span> days newer than the signaturegpg: marginals needed: <span class="token number">3</span>  completes needed: <span class="token number">1</span>  trust model: pgpgpg: public key CF66D153D884358F is <span class="token number">16</span> seconds newer than the signaturegpg: depth: <span class="token number">0</span>  valid:   <span class="token number">1</span>  signed:  <span class="token number">56</span>  trust: <span class="token number">0</span>-, 0q, 0n, 0m, 0f, 1ugpg: depth: <span class="token number">1</span>  valid:  <span class="token number">56</span>  signed:  <span class="token number">81</span>  trust: <span class="token number">1</span>-, 0q, 0n, 55m, 0f, 0ugpg: depth: <span class="token number">2</span>  valid:  <span class="token number">77</span>  signed:  <span class="token number">26</span>  trust: <span class="token number">77</span>-, 0q, 0n, 0m, 0f, 0ugpg: next trustdb check due at <span class="token number">2020</span>-12-03:: Running post-transaction hooks<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span> Arming ConditionNeedsUpdate<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Appending keys from archlinuxcn.gpg<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Appending keys from archlinux.gpg<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Appending keys from blackarch.gpg<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Appending keys from endeavouros.gpg<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Locally signing trusted keys <span class="token keyword">in</span> keyring<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key 57957BAD5D038B07C28EF49A15B26377262268C1<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Importing owner trust values<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Disabling revoked keys <span class="token keyword">in</span> keyring<span class="token punctuation">..</span>.  -<span class="token operator">></span> Disabling key 8F76BEEA0289F9E1D3E229C05F946DED983D4366<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Updating trust database<span class="token punctuation">..</span>.gpg: next trustdb check due at <span class="token number">2020</span>-12-03<span class="token punctuation">[</span>+<span class="token punctuation">]</span> keyring installed successfully<span class="token punctuation">[</span>+<span class="token punctuation">]</span> updating package databases:: Synchronizing package databases<span class="token punctuation">..</span>. core                                      <span class="token number">129.9</span> KiB  <span class="token number">6.34</span> MiB/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% extra                                    <span class="token number">1634.4</span> KiB  <span class="token number">4.09</span> MiB/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% community                                   <span class="token number">5.2</span> MiB  <span class="token number">11.1</span> MiB/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% multilib                                  <span class="token number">154.2</span> KiB  <span class="token number">7.53</span> MiB/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% endeavouros                                <span class="token number">14.2</span> KiB  <span class="token number">0.00</span>   B/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% archlinuxcn                              <span class="token number">1354.5</span> KiB  <span class="token number">11.0</span> MiB/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% blackarch                                   <span class="token number">3.3</span> MiB   <span class="token number">500</span> KiB/s 00:07 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% blackarch.sig                             <span class="token number">566.0</span>   B  <span class="token number">0.00</span>   B/s 00:00 <span class="token punctuation">[</span>---------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Packages <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> blackarch-keyring-20180925-2  perl-expect-1.35-6Total Download Size:   <span class="token number">0.07</span> MiBTotal Installed Size:  <span class="token number">0.15</span> MiBNet Upgrade Size:      <span class="token number">0.00</span> MiB:: Proceed with installation? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y:: Retrieving packages<span class="token punctuation">..</span>. blackarch-keyring-20180925-2-any                                                                   <span class="token number">18.1</span> KiB  <span class="token number">0.00</span>   B/s 00:00 <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>% perl-expect-1.35-6-any                                                                             <span class="token number">50.9</span> KiB  <span class="token number">1698</span> KiB/s 00:00 <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> checking keys <span class="token keyword">in</span> keyring                                                                                                 <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> checking package integrity                                                                                               <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> loading package files                                                                                                    <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> checking <span class="token keyword">for</span> <span class="token function">file</span> conflicts                                                                                              <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%:: Processing package changes<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token number">1</span>/2<span class="token punctuation">)</span> upgrading blackarch-keyring                                                                                              <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%<span class="token operator">==</span><span class="token operator">></span> Appending keys from blackarch.gpg<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Locally signing trusted keys <span class="token keyword">in</span> keyring<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key A0917C4147A37007CB54C1CFD295AA940EFDDF62<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key 4345771566D76038C7FEB43863EC0ADBEA87E4E3<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key CBA3C7D4798912702DCF568E67D8BDF42AD93F4E<span class="token punctuation">..</span>.  -<span class="token operator">></span> Locally signing key 8F9A9793CB8591147C2EC70566E0CDBD1E01F333<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Importing owner trust values<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Disabling revoked keys <span class="token keyword">in</span> keyring<span class="token punctuation">..</span>.  -<span class="token operator">></span> Disabling key 5E210889BBB5C48500E0C4F9C75E985FF8B993B4<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Updating trust database<span class="token punctuation">..</span>.gpg: key 1EB2638FF56C0C53: no user ID <span class="token keyword">for</span> key signature packet of class <span class="token number">10</span>gpg: key 1EB2638FF56C0C53: no user ID <span class="token keyword">for</span> key signature packet of class <span class="token number">10</span>gpg: public key DB323392796CA067 is <span class="token number">3037</span> days newer than the signaturegpg: marginals needed: <span class="token number">3</span>  completes needed: <span class="token number">1</span>  trust model: pgpgpg: public key CF66D153D884358F is <span class="token number">16</span> seconds newer than the signaturegpg: depth: <span class="token number">0</span>  valid:   <span class="token number">1</span>  signed:  <span class="token number">56</span>  trust: <span class="token number">0</span>-, 0q, 0n, 0m, 0f, 1ugpg: depth: <span class="token number">1</span>  valid:  <span class="token number">56</span>  signed:  <span class="token number">81</span>  trust: <span class="token number">1</span>-, 0q, 0n, 55m, 0f, 0ugpg: depth: <span class="token number">2</span>  valid:  <span class="token number">77</span>  signed:  <span class="token number">26</span>  trust: <span class="token number">77</span>-, 0q, 0n, 0m, 0f, 0ugpg: next trustdb check due at <span class="token number">2020</span>-12-03<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> upgrading perl-expect                                                                                                    <span class="token punctuation">[</span>-----------------------------------------------------------------------------<span class="token punctuation">]</span> <span class="token number">100</span>%:: Running post-transaction hooks<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token number">1</span>/2<span class="token punctuation">)</span> Arming ConditionNeedsUpdate<span class="token punctuation">..</span>.<span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span> Warn about old perl modules:: Searching databases <span class="token keyword">for</span> updates<span class="token punctuation">..</span>.:: Searching AUR <span class="token keyword">for</span> updates<span class="token punctuation">..</span>. -<span class="token operator">></span> python-pgspecial: <span class="token builtin class-name">local</span> <span class="token punctuation">(</span><span class="token number">1.11</span>.10-2<span class="token punctuation">)</span> is newer than blackarch <span class="token punctuation">(</span><span class="token number">1.11</span>.10-1<span class="token punctuation">)</span> there is nothing to <span class="token keyword">do</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实证明还是得看官方文档解决问题，以后直接看官方文档啊同志们！</p><p>一堆过时文档害人啊！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JsYWNrQXJjaC9ibGFja2FyY2g=">https://github.com/BlackArch/blackarch<i class="fa fa-external-link-alt"></i></span>  </li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxhY2thcmNoLm9yZy9kb3dubG9hZHMuaHRtbCNpbnN0YWxsLXJlcG8=">https://www.blackarch.org/downloads.html#install-repo<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibGFja2FyY2gub3JnL2JsYWNrYXJjaC1ndWlkZS16aC5wZGY=">BlackArch Linux指南（中文翻译）<i class="fa fa-external-link-alt"></i></span></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;更新：BlackArch镜像源的很多包质量很差，请谨慎添加，必要时请修改PKGBUILD或自行打包。&lt;/p&gt;</summary>
    
    
    
    
    <category term="blackarch" scheme="https://zhangjk98.xyz/tags/blackarch/"/>
    
  </entry>
  
  <entry>
    <title>systemd-homed简介(homectl设置用户、用户组)</title>
    <link href="https://zhangjk98.xyz/systemd-homed/"/>
    <id>https://zhangjk98.xyz/systemd-homed/</id>
    <published>2020-11-08T05:52:42.000Z</published>
    <updated>2020-11-08T05:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在2020.3 发布的systemd 245增加了systemd-homed，改变了<code>/home</code>目录的加密和工作方式。用homectl设置用户组，直接加密整个<code>/home</code>目录更方便了，快来当小白鼠吧。</p><span id="more"></span><h2 id="太长不看版"><a href="#太长不看版" class="headerlink" title="太长不看版"></a>太长不看版</h2><h3 id="使用homectl新建用户、用户组"><a href="#使用homectl新建用户、用户组" class="headerlink" title="使用homectl新建用户、用户组"></a>使用homectl新建用户、用户组</h3><p>首先你的systemd要在245以后，版本较低或使用SysV或者OpenRC、Upstart的玩家请跳过。</p><p>更新：systemd-247以后的版本默认采用Btrfs，还加了一个可选的恢复密码（recovery key），你的密钥丢了可以用这个重置</p><p>homectl是systemd-homed.service的一个cli工具，用来配置用户组、用户，包括新建、删除、修改权限和密码等。考虑到systemd近乎一统江湖的的市场占有率，可能你们将不得不面对这种方式。</p><p>没开启的先开启一下<code>systemd-homed.service</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> systemd-homedsystemctl start systemd-homed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你的daemon没启动可能会出现<code>**Operation on home test1 failed: Failed to execute operation: Resource temporarily unavailable**</code></p><p>看到下面这样就行了</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Created symlink <span class="token file-path string">/etc/systemd/system/dbus-org.freedesktop.home1.service</span> → <span class="token file-path string">/usr/lib/systemd/system/systemd-homed.service.</span>Created symlink <span class="token file-path string">/etc/systemd/system/multi-user.target.wants/systemd-homed.service</span> → <span class="token file-path string">/usr/lib/systemd/system/systemd-homed.service.</span>Created symlink <span class="token file-path string">/etc/systemd/system/sockets.target.wants/systemd-userdbd.socket</span> → <span class="token file-path string">/usr/lib/systemd/system/systemd-userdbd.socket.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl create zhixi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会像下面这样提示你输入密码，输完之后要稍等一会</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zjk-allseries zjk<span class="token punctuation">]</span><span class="token comment"># homectl create zhixi</span>🔐 Please enter new password <span class="token keyword">for</span> user zhixi: ******                  🔐 Please enter new password <span class="token keyword">for</span> user zhixi <span class="token punctuation">(</span>repeat<span class="token punctuation">)</span>: <span class="token punctuation">(</span>press TAB <span class="token keyword">for</span> no <span class="token builtin class-name">echo</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建成功之后使用<code>homectl list</code>查看homectl创建的用户是否存在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zjk-allseries zjk<span class="token punctuation">]</span><span class="token comment"># homectl list</span>NAME  <span class="token environment constant">UID</span>   GID   STATE    REALNAME <span class="token environment constant">HOME</span>        <span class="token environment constant">SHELL</span>    <span class="token builtin class-name">test</span>  <span class="token number">60444</span> <span class="token number">60444</span> inactive <span class="token builtin class-name">test</span>     /home/test  /bin/bashtest1 <span class="token number">60510</span> <span class="token number">60510</span> inactive test1    /home/test1 /bin/bashzhixi <span class="token number">60353</span> <span class="token number">60353</span> inactive zhixi    /home/zhixi /bin/bash<span class="token number">3</span> home areas listed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>homectl inspect username</code>可以查看用户信息</p><pre class="line-numbers language-none"><code class="language-none">[root@zjk-allseries zhixi]# homectl inspect zhixi   User name: zhixi       State: active Disposition: regular Last Change: Sat 2020-10-31 17:05:25 CST    Login OK: yes Password OK: yes         UID: 60353         GID: 60353 (zhixi)   Directory: &#x2F;home&#x2F;zhixi     Storage: luks (strong encryption)  Image Path: &#x2F;home&#x2F;zhixi.home   Removable: no       Shell: &#x2F;bin&#x2F;bashLUKS Discard: online&#x3D;no offline&#x3D;yes   LUKS UUID: 107ff22e399d417d92f398c91275de3b   Part UUID: 645499ec3e554eaca0f09a9b172d89b3     FS UUID: a6b5969ecfee4ae49f0cad9931f31589 File System: ext4 LUKS Cipher: aes Cipher Mode: xts-plain64  Volume Key: 256bit Mount Flags: nosuid nodev exec   Disk Size: 654.0G  Disk Usage: 11.3G (&#x3D; 1.8%)   Disk Free: 642.7G (&#x3D; 98.2%)  Disk Floor: 11.3GDisk Ceiling: 769.5G  Good Auth.: 1   Last Good: Sat 2020-10-31 19:23:25 CST   Bad Auth.: 1    Last Bad: Sat 2020-10-31 19:23:17 CST    Next Try: anytime Auth. Limit: 30 attempts per 1min   Passwords: 1  Local Sig.: yes     Service: io.systemd.Homelines 2-36&#x2F;36 (END)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后激活用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl activate zhixi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出当前用户并切换用户就可以了(你可能需要更改PAM设置才能正常使用su切换用户)</p><h3 id="从原来的用户组管理方式迁往systemd-homed"><a href="#从原来的用户组管理方式迁往systemd-homed" class="headerlink" title="从原来的用户组管理方式迁往systemd-homed"></a>从原来的用户组管理方式迁往systemd-homed</h3><blockquote><p>这里直接复读一下systemd官网的警告，需要手动操作、有风险、做好备份、出了事自行承担</p></blockquote><p>(不喜欢折腾的人不推荐这么干，原来的又不是不能用了</p><p>其实建议你直接去看<span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0NPTlZFUlRJTkdfVE9fSE9NRUQv">官网的英文说明<i class="fa fa-external-link-alt"></i></span>，这个是给不想看官方文档的懒狗准备的（不会吧不会吧，不会真有这种懒狗吧）</p><p>切到root操作，先重命名你的用户目录，随便移到一个空间够的位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /home/zhixi /home/zhixi.saved<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后看一下你的用户设置（假设用户名是zhixi,GID=1000），以及所在的用户组设置（1000改成你的GID）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getent <span class="token function">passwd</span> zhixigetent shadow zhixigetent group <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（上面是官方文档的做法，也可以用<code>lslogin -u</code>查看）</p><p>把上面这些也备份一下。然后把<code>/etc/passwd</code>和<code>/etc/shadow</code>和<code>/etc/group</code>还有<code>/etc/gshadow</code>里面的zhixi用户相关的东西删了（基本上就只有一行）。</p><p>（官方文档说为了安全请使用<code>vipw</code>, <code>vipw -s</code>, <code>vigr</code> and <code>vigr -s</code>，这些是给配置文件加锁，防止多人同时更改出现问题，使用跟vim一样（找到那一行按dd然后ESC, :,wq回车就好了），如果你确定是自己一个人操作（也没有别人远程登陆或者其他程序正在修改），似乎用别的什么文本编辑器也没什么问题）</p><p>（其实，你可以直接用<code>userdel</code>删除）</p><p>然后剩下的操作跟第一节一样，用<code>homectl</code>新建一个就好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl create zhixi --uid<span class="token operator">=</span><span class="token number">1000</span> --real-name<span class="token operator">=</span>zjk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(uid填你的uid，real-name后面填你的GECOS)</p><p>可能你还想改改磁盘加密方式什么的，想设置的都先设置好。</p><p>然后rsync把原来备份了的东西放回<code>/home/zhixi</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">homectl with zhixi -- <span class="token function">rsync</span> -aHAXv --remove-source-files /home/zhixi.saved/ <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span>  <span class="token function">rmdir</span> /home/foobar.saved<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>systemd-homed是一个用户一个私有用户组。如果你一个用户组设置了多个用户的话，可能要调整一下。</p><h2 id="systemd-homed简介"><a href="#systemd-homed简介" class="headerlink" title="systemd-homed简介"></a>systemd-homed简介</h2><p><del>感觉这下子systemd接管的东西更多了</del></p><h3 id="以前的用户和用户组管理"><a href="#以前的用户和用户组管理" class="headerlink" title="以前的用户和用户组管理"></a>以前的用户和用户组管理</h3><p>好吧，以前要加引号，现在这个在大部分Linux都还没人用呢（甚至连一篇中文介绍都没有）。</p><p>通常使用<code>useradd</code>或<code>adduser</code>新建用户（不同发行版这两条命令有一点区别），比如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -U temp<span class="token function">sudo</span> <span class="token function">useradd</span> temp1 -m -G temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建一个temp用户组并给temp用户组中新建一个叫temp1的用户（同时在<code>/home</code>下新建一个<code>temp1</code>目录作为用户目录）。</p><p>然后使用<code>passwd temp1</code>为用户temp1指定密码</p><p>（虽然useradd有<code>-p</code>选项可以直接指定密码，通常不建议这样做，因为这样子恁的密码会明文留在历史命令里，如果有人不怀好意的执行一下<code>history</code>或者<code>more /home/$USER/.bash_history</code>或者<code>ctrl+r</code>搜索useradd，他将轻易获取你的密码），你用了sudo也可能会被找到，比如<span class="exturl" data-url="aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy8zMDk0MzQvaG93LXRvLXZpZXctY29tbWFuZC1oaXN0b3J5LW9mLWFub3RoZXItdXNlci1pbi1saW51eA==">这个<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vbmV3cy8xMzU4NDUuaHRtbA==">https://www.freebuf.com/news/135845.html<i class="fa fa-external-link-alt"></i></span> history -c 也不太保险</p><p>你的用户名、密码、用户组、权限配置基本都放在<code>/etc</code>目录下面，比如<code>/etc/passwd</code>里面存你的密码，<code>etc/group</code>里面放用户组的设置。<code>/etc/sudoers</code>是超级用户的设置。每个用户的配置散落在各个地方，一些个人设置还被放在了<code>/home/user</code>底下。</p><p>这个样子你需要<code>/etc</code>的写权限，一个用户不同系统迁移的时候需要同时迁移其他的目录（而且UID还得一样），想对<code>/home</code>单独加密也不太方便。</p><h3 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h3><p>主要的变化就是你的个人用户都扔到<code>/home/yourusername</code>下面了。（据说）这样更方便加密和迁移。默认采用LUKS，在用户登陆的时候解密并挂载<code>/home/user</code>，在用户退出登陆的时候加密并取消挂载。休眠挂起（Suspend）的时候也会加密锁住。</p><p>比如你有一个u盘，里面装了你的用户目录，到别的电脑上插上去就能用了，不需要那边给你新建一个用户（现在基本不太行，对面电脑起码得也是systemd 245 版本以上还得启用<code>systemd-homed</code>，我乐观估计等这玩意普及至少得两年吧，那些用老CentOS的万年钉子户更别想了）</p><p>这样也方便全盘加密（我不是那种对物理安全都看的很在乎的申必人士，据说全盘加密会有点性能问题，而且休眠睡眠也比较容易起不来，所以我没试过）（不过恁不用这个systemd-homed其实也能全盘加密）</p><p>现在使用<code>systemd-homed.service</code>和<code>systemd-userdbd.service</code>两个daemon管理用户，登陆的时候是<code>systemd-logind</code> 在管。大概是这么个流程：</p><p><img src="/systemd-homed/image-20201108172857040.png"></p><p><img src="/systemd-homed/image-20201108172321494.png"></p><p>另外，Yubikeys现在是一等公民（说的好像这小玩意这么贵我买得起一样）<br>Yubikeys或者别的加密设备我手头没有，而且LUKS加密home目录之类的我也没有那么高的安全需求，哪位好心人要是愿意送/借我一个玩玩，我把这部分内容补上</p><h3 id="现在的样子"><a href="#现在的样子" class="headerlink" title="现在的样子"></a>现在的样子</h3><p>使用<code>homectl activate</code>激活用户目录后你会看到在<code>/home</code>目录下多了一个用户目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ homectl activate zhixi🔐 Please enter password <span class="token keyword">for</span> user zhixi: ****** <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原来<code>/home</code>下只有一个zhixi.home，activate之后多了一个zhixi目录</p><p>我们看一下这个目录下面有什么</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /home/zhixi <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> -a<span class="token builtin class-name">.</span>  <span class="token punctuation">..</span>  .bash_logout  .bash_profile  .bashrc  .identity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中的<code>.identity</code>存放你的密码等登陆认证信息（以json存储用户记录（JSON User Recoed））,大概长这样</p><p><img src="/systemd-homed/image-20201108170804174.png" alt="image-20201108170804174"></p><p><code>homectl inspect username</code>可以查看用户信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ homectl inspect zhixi   User name: zhixi       State: active Disposition: regular Last Change: Sat <span class="token number">2020</span>-10-31 <span class="token number">17</span>:05:25 CST    Login OK: <span class="token function">yes</span> Password OK: <span class="token function">yes</span>         <span class="token environment constant">UID</span><span class="token builtin class-name">:</span> <span class="token number">60353</span>         GID: <span class="token number">60353</span> <span class="token punctuation">(</span>zhixi<span class="token punctuation">)</span>   Directory: /home/zhixi     Storage: luks <span class="token punctuation">(</span>strong encryption<span class="token punctuation">)</span>  Image Path: /home/zhixi.home   Removable: no       Shell: /bin/bashLUKS Discard: <span class="token assign-left variable">online</span><span class="token operator">=</span>no <span class="token assign-left variable">offline</span><span class="token operator">=</span>yes   LUKS UUID: 107ff22e399d417d92f398c91275de3b   Part UUID: 645499ec3e554eaca0f09a9b172d89b3     FS UUID: a6b5969ecfee4ae49f0cad9931f31589 File System: ext4 LUKS Cipher: aes Cipher Mode: xts-plain64  Volume Key: 256bit Mount Flags: nosuid nodev <span class="token builtin class-name">exec</span>   Disk Size: <span class="token number">654</span>.0G  Disk Usage: <span class="token number">11</span>.3G <span class="token punctuation">(</span><span class="token operator">=</span> <span class="token number">1.8</span>%<span class="token punctuation">)</span>   Disk Free: <span class="token number">642</span>.7G <span class="token punctuation">(</span><span class="token operator">=</span> <span class="token number">98.2</span>%<span class="token punctuation">)</span>  Disk Floor: <span class="token number">11</span>.3GDisk Ceiling: <span class="token number">769</span>.5G  Good Auth.: <span class="token number">1</span>   Last Good: Sat <span class="token number">2020</span>-10-31 <span class="token number">19</span>:23:25 CST   Bad Auth.: <span class="token number">1</span>    Last Bad: Sat <span class="token number">2020</span>-10-31 <span class="token number">19</span>:23:17 CST    Next Try: anytime Auth. Limit: <span class="token number">30</span> attempts per 1min   Passwords: <span class="token number">1</span>  Local Sig.: <span class="token function">yes</span>     Service: io.systemd.Homelines <span class="token number">2</span>-36/36 <span class="token punctuation">(</span>END<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存在的一些问题"><a href="#存在的一些问题" class="headerlink" title="存在的一些问题"></a>存在的一些问题</h3><p>这个东西主要是focus on <code> particularly Laptop users</code>，目前可能多多少少有点小问题。企业用途和运维貌似也不怎么需要这个。</p><h4 id="SSH的问题"><a href="#SSH的问题" class="headerlink" title="SSH的问题"></a>SSH的问题</h4><p>这个东西直接把/home全都加密了，当然也包括<code>.ssh</code>目录下面的东西。</p><p>目前看来没有什么很完美的办法，有人是这样干的：先整一个其他的空用户在他的/home/user下面存公钥，用密码登陆，然后su切过去。(反正看起来挺扭曲的)</p><p>不过对于笔记本个人用户来说SSH到自己的加密盘貌似不是什么刚需，还是等完善了随身带着硬盘走比较好。</p><h4 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h4><p>貌似不少人会碰到奇奇怪怪的休眠问题，很在意休眠的笔记本用户请谨慎上车。</p><h4 id="删除用户后SDDM仍有残留"><a href="#删除用户后SDDM仍有残留" class="headerlink" title="删除用户后SDDM仍有残留"></a>删除用户后SDDM仍有残留</h4><p>用<code>homectl activate</code>激活了一个用户temp1，然后用<code>homectl remove</code>删除了这个用户temp1，结果发现我的SDDM在登陆页面仍然有原来的temp1。检查<code>/home</code>发现这下面已经没有temp1.home文件了，但是还有temp1这个文件夹（受保护）。</p><p>我又用刚才新建的用户zhixi试了一下，在inactive情况下会比较干净的remove。</p><h2 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h2><pre class="line-numbers language-none"><code class="language-none">homectl su: Authentication service cannot retrieve authentication info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能是你的daemon没启动，试试启动daemon并重启一下试试。</p><pre class="line-numbers language-none"><code class="language-none">Operation on home me failed: Specified user name me conflicts with an NSS group by the same name, refusing.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用户组冲突了，看看你之前是不是用useradd之类的操作新建过同名用户组。</p><pre class="line-numbers language-none"><code class="language-none">su: Authentication service cannot retrieve authentication info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个报错出现在我换到systemd-homed后试图用su切换用户。一开始我用 su 在桌面环境下切用户就没成功过，退出登陆后跑到SDDM里是可以的，本来以为这是个feature。后来觉得不应该啊，一查果然，要手动改PAM设置，在<code>/etc/pam.d</code>里面改一下su的配置就好了。配置照着模板改就好了，<code>man pam_systemd_home</code>，详情参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWRlc2t0b3Aub3JnL3NvZnR3YXJlL3N5c3RlbWQvbWFuL3BhbV9zeXN0ZW1kX2hvbWUuaHRtbA==">pam_systemd_home<i class="fa fa-external-link-alt"></i></span>，arch用户看<span class="exturl" data-url="aHR0cHM6Ly9qbGsuZmpmaS5jdnV0LmN6L2FyY2gvbWFucGFnZXMvbWFuL3BhbV9zeXN0ZW1kX2hvbWUuOA==">这里<i class="fa fa-external-link-alt"></i></span></p><p><img src="/systemd-homed/image-20201108142022596.png" alt="PAM模板例子"></p><p>而且看起来很多时候有root权限它还是会让你输入当前用户的密码，比如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c3RlbWQvc3lzdGVtZC9pc3N1ZXMvMTYxNjY=">这个issue<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-none"><code class="language-none">Operation on home username failed: Access denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>权限不够，你至少需要root权限或者要切换到的那个用户的密码才能操作对应目录或者修改配置。（貌似homectl的很多操作需要输入）</p><pre class="line-numbers language-none"><code class="language-none">Operation on home username failed: Failed to execute operation: File exists<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个错误的原因可能有很多，或许可以试试<code>systemctl restart systemd-homed</code></p><pre class="line-numbers language-none"><code class="language-none">(Unknown (FileSystemError): Error: ENOSPC: no space left on device, write)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我新建第二个的时候没有指定存储空间，直接塞满了。用<code>homectl resize user 10G</code>调整了磁盘分配后解决。</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>给不愿意<code>--help</code>看英文说明的懒狗翻译一下命令选项</p><h3 id="homectl命令选项"><a href="#homectl命令选项" class="headerlink" title="homectl命令选项"></a>homectl命令选项</h3><table><thead><tr><th>homectl</th><th>Explinations</th><th>作用</th><th>例子</th><th></th></tr></thead><tbody><tr><td>list</td><td>List home areas</td><td>列出用户信息（包括NAME  UID  GID  STATE   REALNAME HOME     SHELL）</td><td>homectl    list</td><td></td></tr><tr><td>activate USER…</td><td>Activate a home area</td><td>激活用户（执行后<code>/home</code>下面会多出一个和用户同名的目录）</td><td>homectl activate zhixi</td><td></td></tr><tr><td>deactivate USER…</td><td>Deactivate a home area</td><td>取消激活</td><td>homectl deactivate zhixi</td><td></td></tr><tr><td>inspect USER…</td><td>Inspect a home area</td><td>查看用户信息，跟userdbctl user… 的输出差不多</td><td>homectl inspect zhixi</td><td></td></tr><tr><td>authenticate USER…</td><td>Authenticate a home area</td><td>验证用户</td><td>homectl authenticate zhixi</td><td></td></tr><tr><td>create USER</td><td>Create a home area</td><td>新建用户</td><td>homectl create zhixi</td><td></td></tr><tr><td>remove USER…</td><td>Remove a home area</td><td>移除用户</td><td>homectl remove zhixi</td><td></td></tr><tr><td>update USER</td><td>Update a home area</td><td>更改用户设置和状态</td><td>homectl update me –locked=false</td><td></td></tr><tr><td>passwd USER</td><td>Change password of a home area</td><td>改密码</td><td>homectl passwd zhixi</td><td></td></tr><tr><td>with USER [COMMAND…]</td><td>Run shell or command with access to a home area</td><td>用到/在某个用户目录下执行命令（需要root或该用户密码）</td><td>homectl with zhixi – mkdir test1</td><td></td></tr><tr><td>resize USER SIZE</td><td>Resize a home area</td><td>调整用户的存储空间</td><td>homectl resize zhixi 30G</td><td></td></tr><tr><td>lock USER…</td><td>Temporarily lock an active home area</td><td>锁定用户</td><td>homectl lock zhixi</td><td></td></tr><tr><td>unlock USER</td><td>Unlock a temporarily locked home area</td><td>解锁用户</td><td>homectl unlock zhixi</td><td></td></tr></tbody></table><h3 id="userdbctl命令选项"><a href="#userdbctl命令选项" class="headerlink" title="userdbctl命令选项"></a>userdbctl命令选项</h3><table><thead><tr><th>userdbctl</th><th>Explinations</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>user [USER…]</td><td>Inspect user</td><td>查看用户信息</td><td>userdbctl user zhixi</td></tr><tr><td>group [GROUP…]</td><td>Inspect group</td><td>查看用户组信息</td><td>userdbctl group zhixi</td></tr><tr><td>users-in-group [GROUP…]</td><td>Show users that are members of specified group(s)</td><td>查看组中用户</td><td>userdbctl users-in-group zhixi</td></tr><tr><td>groups-of-user [USER…]</td><td>Show groups the specified user(s) is a member of</td><td>查看用户所在的组</td><td>userdbctl groups-of-user zhixi</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0hPTUVfRElSRUNUT1JZLw==">https://systemd.io/HOME_DIRECTORY/<i class="fa fa-external-link-alt"></i></span> 官方文档</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFuNy5vcmcvbGludXgvbWFuLXBhZ2VzL21hbjEvaG9tZWN0bC4xLmh0bWw=">https://www.man7.org/linux/man-pages/man1/homectl.1.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWRlc2t0b3Aub3JnL3NvZnR3YXJlL3N5c3RlbWQvbWFuL2hvbWVjdGwuaHRtbA==">https://www.freedesktop.org/software/systemd/man/homectl.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzgxNDA2OC8=">systemd 245 released<i class="fa fa-external-link-alt"></i></span> systemd第245次更新详情</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1N5c3RlbWQtaG9tZWQ=">https://wiki.archlinux.org/index.php/Systemd-homed<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1VzZXJzX2FuZF9ncm91cHNfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">https://wiki.archlinux.org/index.php/Users_and_groups_(简体中文)<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zeXN0ZW1kLmlvL0NPTlZFUlRJTkdfVE9fSE9NRUQv">https://systemd.io/CONVERTING_TO_HOMED/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy9mZ2M5MWIvd2l0aF9zeXN0ZW1kXzI0NV9sYW5kaW5nX2luX3JlcG9zX3N5c3RlbWRob21lZF9pcy8=">https://www.reddit.com/r/archlinux/comments/fgc91b/with_systemd_245_landing_in_repos_systemdhomed_is/<i class="fa fa-external-link-alt"></i></span> 在Arch上使用的reddit讨论，archwiki的页面也是这个帖子的楼主写的</p><p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpYS5jY2MuZGUvdi9BU0cyMDE5LTE2NC1yZWludmVudGluZy1ob21lLWRpcmVjdG9yaWVz">https://media.ccc.de/v/ASG2019-164-reinventing-home-directories<i class="fa fa-external-link-alt"></i></span> 一个传教视频</p><p><span class="exturl" data-url="aHR0cHM6Ly9jZnAuYWxsLXN5c3RlbXMtZ28uaW8vbWVkaWEvaG9tZWQtYXNnMjAxOS5wZGY=">https://cfp.all-systems-go.io/media/homed-asg2019.pdf<i class="fa fa-external-link-alt"></i></span> 一个传教PPT</p><p>其他的一些简介</p><p><span class="exturl" data-url="aHR0cHM6Ly9saW51eHJldmlld3Mub3JnL1N5c3RlbWQtSG9tZWRfSXNfTWVyZ2VkX0FuZF9JdF9XaWxsX0Z1bmRhbWVudGFsbHlfQ2hhbmdlX0xpbnV4X0hvbWVfRGlyZWN0b3JpZXM=">https://linuxreviews.org/Systemd-Homed_Is_Merged_And_It_Will_Fundamentally_Change_Linux_Home_Directories<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHJlcHVibGljLmNvbS9hcnRpY2xlL2xpbnV4LWhvbWUtZGlyZWN0b3J5LW1hbmFnZW1lbnQtaXMtYWJvdXQtdG8tdW5kZXJnby1tYWpvci1jaGFuZ2Uv">https://www.techrepublic.com/article/linux-home-directory-management-is-about-to-undergo-major-change/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在2020.3 发布的systemd 245增加了systemd-homed，改变了&lt;code&gt;/home&lt;/code&gt;目录的加密和工作方式。用homectl设置用户组，直接加密整个&lt;code&gt;/home&lt;/code&gt;目录更方便了，快来当小白鼠吧。&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="homectl" scheme="https://zhangjk98.xyz/tags/homectl/"/>
    
    <category term="systemd-homed" scheme="https://zhangjk98.xyz/tags/systemd-homed/"/>
    
  </entry>
  
  <entry>
    <title>垃圾佬的Openwrt软路由</title>
    <link href="https://zhangjk98.xyz/openwrt/"/>
    <id>https://zhangjk98.xyz/openwrt/</id>
    <published>2020-10-30T11:15:19.000Z</published>
    <updated>2020-10-30T11:15:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>又是捡垃圾的快乐一天</p><span id="more"></span><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><h3 id="教研室捡来的垃圾"><a href="#教研室捡来的垃圾" class="headerlink" title="教研室捡来的垃圾"></a>教研室捡来的垃圾</h3><blockquote><p>又不是不能用</p></blockquote><ul><li>2GB 内存条（看起来全新实际上至少八九年前的了，别问为什么只有2G，这是教研室能捡垃圾捡到的最后一块内存条了）</li><li>120G intel固态（包浆成色，上个月刚从一个旧电脑上拆下来的）</li><li>一块 i5 4570 的CPU（战斗成色，貌似也六年了）</li><li>一个风扇（战损成色，全是灰）</li><li>六七年前的华硕主板（伊拉克战损成色）</li><li>一个三星显示器（屏幕漏光，也有五六年了，装系统临时用一下）</li><li>一个2014年的老机箱（战斗成色，全是灰）</li><li>一个主机电源（不是很新，200W）</li><li>VGA线、电源线、排线（普通成色）</li><li>螺丝等（一大把旧主机上拆下来的）</li><li>键盘（N年前的薄膜，伊拉克战损成色，全是灰）</li></ul><p>对，102网吧的主板就是这样子的战损主板</p><p><img src="/openwrt/image-20201030191635951.webp" alt="对，只有这种主板了"></p><h3 id="全新的和自掏腰包的"><a href="#全新的和自掏腰包的" class="headerlink" title="全新的和自掏腰包的"></a>全新的和自掏腰包的</h3><p>基本都是室友出的钱</p><ul><li>螺丝刀等（全新，室友的）</li><li>一个插排（昨天室友买的）</li><li>硅脂（全新）</li><li>网卡（室友网购的，刚到）</li><li>网线（教研室网线太老了，就不捡垃圾了）</li><li>clash和v2ray订阅，机场买的</li></ul><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>自行编译时间太长就用人家编译好的了, 室友刷的。本来以为可能2G的老内存可能会卡，结果室友的win10 pe上去意外的流畅。</p><p>借用了这个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xvbW90SG8vVUVTVEMtTmV0d29ya0F1dG9Db25uZWN0">电子科技大学校园网自动登陆脚本<i class="fa fa-external-link-alt"></i></span></p><h2 id="一点小插曲"><a href="#一点小插曲" class="headerlink" title="一点小插曲"></a>一点小插曲</h2><p>晚上室友买完插排，第二天我发现教研室的一个旧箱子里满满一箱子插排，好家伙，亏了一个亿。</p><p><img src="/openwrt/image-20201030191838215.webp" alt="这么多插排...."></p><p>本来Openclash都整好了，结果发现室友的安卓电报没法自行分流。换成了 ssr plus</p><p>装好之后发现风扇声音有点大……..直接把风扇线拔了，世界终于清净了。至于散热，问题不大（这么点负载总不可能把CPU给烧了）。</p><p>ps. 正确的做法是SSH上去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fanspeedctl stop --all --now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>固态闲置了100多个G</p><h2 id="突然发现了clash的正确使用方式"><a href="#突然发现了clash的正确使用方式" class="headerlink" title="突然发现了clash的正确使用方式"></a>突然发现了clash的正确使用方式</h2><p>之前一直很不喜欢clash，clash for win10的图形界面操作在我看起来特别反人类，安卓和平板上clash的app耗电惊人。自动切换线路和分流对我来说又没什么用，一直觉得clash鸡肋，不知道为什么这么多人都在说clash香。</p><p>直到今天室友带入坑上了软路由，好家伙，自动分流和切换真香</p><p>clash这种就适合软路由或者台式机什么的，手机和平板耗电根本顶不住，挂在后台掉电太快了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是捡垃圾的快乐一天&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="openwrt" scheme="https://zhangjk98.xyz/tags/openwrt/"/>
    
    <category term="捡垃圾" scheme="https://zhangjk98.xyz/tags/%E6%8D%A1%E5%9E%83%E5%9C%BE/"/>
    
  </entry>
  
  <entry>
    <title>『转载』使用Qv2ray+cgproxy配置透明代理（仅限Linux）</title>
    <link href="https://zhangjk98.xyz/qv2ray-transparent-proxy/"/>
    <id>https://zhangjk98.xyz/qv2ray-transparent-proxy/</id>
    <published>2020-10-29T11:46:13.000Z</published>
    <updated>2020-10-29T11:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>从Qv2ray电报群里转来的，透明代理老有人问，感觉这个方案比tproxy等方案好，转出来。版权归Qv2ray及cgproxy所有</p><span id="more"></span><p>用的是这个项目：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ3pmeC9jZ3Byb3h5">https://github.com/springzfx/cgproxy<i class="fa fa-external-link-alt"></i></span></p><h2 id="透明代理设置"><a href="#透明代理设置" class="headerlink" title="透明代理设置"></a>透明代理设置</h2><ol><li><p>在“首选项-入站设置”的下方启用透明代理选项。</p><ul><li>监听ipv4地址可填127.0.0.1或0.0.0.0，建议前者。若需双栈代理，则在监听ipv6地址填上<code>::1</code>（如果监听ipv4填了0.0.0.0则可不填）。</li><li>在“网络模式”中勾选需要透明代理的协议。模式选择“tproxy”。</li><li>如果希望在透明代理环境里让v2ray的内置dns接管本地dns，则勾选“dns拦截”。注意，在透明代理环境下，如果系统dns或v2ray的内置dns配置不当，可能导致系统无法解析域名从而无法正常上网。详见后文说明。</li></ul><p>如果是复杂配置，则需要手动添加相应的dokodemo-door入站。由于目前版本复杂配置并没有提供tproxy选项，因此tproxy模式需要通过编辑json来实现。</p></li><li><p>安装<code>cgproxy</code>软件</p><ul><li><code>cgproxy</code>软件已在archlinux, fedora 32, ubuntu 18.04, ubuntu 20.04, deepin 15.11, deepin v20 beta发行版中测试过。</li><li>Archlinux用户可直接在AUR上安装，deb或rpm系发行版用户可从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ3pmeC9jZ3Byb3h5L3JlbGVhc2Vz">github<i class="fa fa-external-link-alt"></i></span>上下载安装包。非以上发行版用户，可自行从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ3pmeC9jZ3Byb3h5">github<i class="fa fa-external-link-alt"></i></span>上获取代码自行编译。</li></ul></li><li><p>配置<code>cgproxy</code>，编辑<code>/etc/cgproxy/config.json</code>：</p><ul><li>在<code>cgroup_proxy</code>中括号里加上”/“（包含引号），<code>port</code>改为Qv2ray首选项里的透明代理的端口。</li><li><code>cgproxy</code>默认配置是代理所有tcp和udp，ipv4和ipv6的流量，如果不希望代理其中的某种（些）流量，则将对应的<code>enable_xxx</code>改为false。注意这里的配置要和Qv2ray选项里的配置一致（如，Qv2ray选项里没有勾选udp，则这里务必把<code>enable_udp</code>改为false）。</li><li>如果希望当本机作为网关设备时为连接到本机网关的其他设备（如连接到本机开设的wifi热点的设备）也提供透明代理，则把<code>enable_gateway</code>改为true。</li></ul></li><li><p>（重要）透明代理的基本原理是拦截系统发出的所有流量，并将这些流量转到代理工具里，从而实现让系统所有流量都走代理的目的。此时，为了避免流量出现死循环（即代理工具发出的流量又转回到代理工具里），需要将代理工具排除在透明代理环境外面。有两种方式可以实现这一点：</p><ul><li><p>通过<code>execsnoop</code>监控代理工具的启动，并自动将其移至透明代理环境外面：</p><ul><li><code>cgproxy</code>软件自带<code>execsnoop</code>支持，以上<code>cgproxy</code>测试过的发行版均可支持。</li><li>编辑<code>/etc/cgproxy/config.json</code>，在<code>program_noproxy</code>中括号里加上”v2ray”,”qv2ray”（包含引号和逗号），以使<code>qv2ray</code>和<code>v2ray</code>发出的流量不经过透明代理。如果你的<code>v2ray</code>或<code>qv2ray</code>不在<code>PATH</code>里，则需要填写它们的绝对路径。</li></ul></li><li><p>在每次连接代理节点时，让<code>qv2ray</code>自己把自己移到透明代理环境外面：</p><ul><li><p>安装Qvplugin-Command插件，在插件设置里的“pre-connection”栏里加上一句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"cgnoproxy --pid <span class="token variable"><span class="token variable">$(</span>pgrep -x qv2ray<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p></li></ul></li></ul></li><li><p>（重要）如果启用了udp的透明代理（dns也是udp），则给v2ray二进制文件加上相应的特权：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setcap <span class="token string">"cap_net_admin,cap_net_bind_service=ep"</span> /path/of/your/v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>否则udp的透明代理可能会出问题。</p></li><li><p>启动透明代理服务：<code>systemctl start cgproxy.service</code>或<code>systemctl enable --now cgproxy.service</code>。</p></li></ol><p>以上步骤完成后，透明代理应该能正常使用了。</p><h2 id="dns配置说明"><a href="#dns配置说明" class="headerlink" title="dns配置说明"></a>dns配置说明</h2><p>如果勾选了“dns拦截”，且启用了dns和udp的透明代理，则v2ray会拦截对系统dns的请求，并将其转发到v2ray的内置dns里，即让v2ray内置dns接管系统dns。但v2ray内置dns是会遵循路由规则的。</p><p>如果没勾选“dns拦截”，则v2ray虽然不会让内置dns接管系统dns，但如果启用了dns和udp的透明代理，则系统dns也会走透明代理进v2ray，并遵循v2ray的路由规则。</p><p>因此，在启用了dns和udp的透明代理时，若系统dns或v2ray的内置dns配置不当，可能导致dns请求发不出去，从而影响正常上网。</p><p>由于qv2ray默认的路由规则是绕过国内ip，国外ip均走代理。在这个情形中，以下两个配置是典型的有问题的dns配置方式：</p><ul><li>配置了国外普通dns作为首选，但代理本身不支持udp（此时dns查询的udp流量出不去，dns无法查询）</li><li>配置了使用域名的doh作为首选（此时doh的域名无法解析，从而doh也无法使用）</li></ul><p>一般而言，如果并不在意将dns查询发给谁，那么，在绕过国内ip的情况下，只需要配置一个国内普通dns作为首选即可保证不会出问题。若代理本身不支持udp，又希望使用国外dns，则可以考虑使用使用ip的doh（如<code>https://1.1.1.1/dns-query</code>等）。</p><p>如果需要更复杂的dns配置，建议参考<span class="exturl" data-url="aHR0cHM6Ly93d3cudjJyYXkuY29tL2NoYXB0ZXJfMDIvMDRfZG5zLmh0bWw=">上游文档<i class="fa fa-external-link-alt"></i></span>，并选择合适的不会影响正常上网的dns配置。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><p>启用透明代理后无法访问任何外网，且v2ray的cpu占用率飙升</p><p>可能是流量陷入死循环了，检查第4步有没有正确配置。如果配置没问题，执行<code>systemctl status cgproxy.service</code>看下有没有诸如<code>info: process noproxy pid msg: xxx</code>之类的输出。如果没有，则说明cgproxy软件或execsnoop没有正常工作。注意cgproxy软件需要cgroup v2。</p><p>尝试退出qv2ray，随后在终端里执行<code>cgnoproxy qv2ray</code>看是否恢复正常，如恢复正常，说明cgproxy正常工作，只是execsnoop没有正常工作。由于execsnoop一定程度上依赖于内核，非上述cgproxy测试过的发行版用户，建议使用第4步中的第2种方法。另外，对kde用户，5.19+版的plasma会给从krunner里启动的程序额外设置cgroup，尽管cgproxy软件考虑到了这一点，但仍有极少数场合可能出现plasma设置的cgroup覆盖掉了cgproxy设置的cgroup的情况，此时通常重启一下qv2ray即可。</p></li><li><p>启用透明代理后，无法访问（部分）域名</p><p>可能是dns无法解析（部分）域名。一般这种故障只发生在启用了dns及udp透明代理的时候。</p><p>终端里执行<code>dig 无法访问的域名</code>看下报什么错：</p><ul><li><p>若出现类似<code>reply from unexpected source: 192.168.0.100#42050, expected 8.8.8.8#53</code>的报错，则检查第5步的有没有正确配置。</p></li><li><p>若出现类似<code>connection timed out; no servers could be reache</code>的报错，则说明dns查询的流量出不去，此时往往是系统dns或v2ray内置dns配置不当。请检查是否出现了前文提到的几种不当配置。如果没有勾选“dns拦截”，则此时v2ray虽然不会用内置dns接管系统dns，但它仍然会让系统dns走透明代理，从而遵循v2ray的路由规则，此时需要检查系统dns是否是前文提到的那几种不当配置。</p></li></ul></li><li><p>能不能分应用代理（如，下载BT时不能走代理）</p><p>对于本机的程序，可以，可通过两种方式实现：</p><ul><li>通过<code>cgnoproxy</code>实现：如，在命令行中执行<code>cgnoproxy qbittorrent</code>，启动的qbittorrent程序就不会走透明代理。又如，在命令行中执行<code>cgnoproxy --pid 12345</code>，执行之后pid为12345的程序就不再走透明代理。这种方式可支持任何应用。</li><li>通过<code>/etc/cgproxy/config.json</code>实现：在配置里的<code>program_noproxy</code>中括号里加上相应的应用即可。这种方式只支持可执行文件，不支持各种脚本。注意修改<code>config.json</code>之后，需要重启cgproxy服务才能生效，执行<code>systemctl restart cgproxy.service</code>即可。</li></ul><p>对于当本机作为网关设备时为连接到本机网关的其他设备，不行，那些设备的所有流量（到本机的流量除外）都必然会走代理。</p></li><li><p>透明代理环境中响应速度变慢</p><p>由于iptables是在域名解析成ip之后，才对相应的流量进行重定向。因此，在透明代理环境中，访问一个域名s可能会需要解析至少2次dns（系统解析一次，重定向到v2ray之后v2ray分流模块再解析一次）。因此，响应理论上是会变慢一点的，变慢的幅度取决于系统dns及v2ray的dns的响应速度。</p></li></ul><h2 id="自己写的更新和群友遇到的一些问题"><a href="#自己写的更新和群友遇到的一些问题" class="headerlink" title="自己写的更新和群友遇到的一些问题"></a>自己写的更新和群友遇到的一些问题</h2><h3 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemd-cgls /noproxy.slice <span class="token comment"># 检查一下被排除代理的应用</span>cgproxy <span class="token function">curl</span> -sSLv https://www.google.com/ <span class="token comment"># 开着代理连一下谷歌试试，检查一下你的透明代理是不是好的</span>cgnoproxy firefox <span class="token comment"># 临时关掉透明代理运行某个应用（比如Firefox），检查一下是不是透明代理造成的问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Docker和透明代理冲突的问题"><a href="#Docker和透明代理冲突的问题" class="headerlink" title="Docker和透明代理冲突的问题"></a>Docker和透明代理冲突的问题</h3><p>这也是一个频繁被问到的问题</p><blockquote><p>你是装了某些可能会破坏 cgroup matching 的东西吗<br>比如 docker 之类的肮脏程序<br>docker 不仅会破坏cgroup matching<br>把网络搞炸<br>docker 还有 hairpin nat<br>巨坑</p></blockquote><p>我自己试了一下是这样的</p><p>在<code>systemctl enable docker</code>后没有问题</p><p>这个时候我没把当前用户添加到个人用户组，不能直接使用Docker，需要<code>sudo docker ...</code><br>在我把Docker添加到当前用户组后出问题了，重启后qv2ray和clash等失效了，延迟测试全部显示0ms</p><p>报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>/11/19 <span class="token number">20</span>:34:03 <span class="token number">192.168</span>.1.105:58398 accepted tcp:211.72.35.152:80 <span class="token punctuation">[</span>outBound_PROXY<span class="token punctuation">]</span> <span class="token number">2020</span>/11/19 <span class="token number">20</span>:34:10 <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4118491953</span><span class="token punctuation">]</span> v2ray.com/core/app/proxyman/outbound: failed to process outbound traffic <span class="token operator">></span> v2ray.com/core/proxy/vmess/outbound: failed to <span class="token function">find</span> an available destination <span class="token operator">></span> v2ray.com/core/common/retry: <span class="token punctuation">[</span>v2ray.com/core/transport/internet/websocket: failed to dial WebSocket <span class="token operator">></span> v2ray.com/core/transport/internet/websocket: failed to dial to <span class="token punctuation">(</span>ws://feec8af.rf.cloudflare.systems/s/feec8af.fm.apple.com:29306<span class="token punctuation">)</span>:  <span class="token operator">></span> <span class="token builtin class-name">read</span> tcp <span class="token number">192.168</span>.1.105:58370-<span class="token operator">></span><span class="token number">211.72</span>.35.152:80: i/o <span class="token function">timeout</span> v2ray.com/core/transport/internet/websocket: failed to dial WebSocket <span class="token operator">></span> v2ray.com/core/transport/internet/websocket: failed to dial to <span class="token punctuation">(</span>ws://feec8af.rf.cloudflare.systems/s/feec8af.fm.apple.com:29306<span class="token punctuation">)</span>:  <span class="token operator">></span> dial tcp: operation was canceled<span class="token punctuation">]</span> <span class="token operator">></span> v2ray.com/core/common/retry: all retry attempts failed<span class="token number">2020</span>/11/19 <span class="token number">20</span>:34:10 <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> v2ray.com/core/transport/internet/tcp: failed to accepted raw connections <span class="token operator">></span> accept tcp <span class="token number">127.0</span>.0.1:12345: accept4: too many <span class="token function">open</span> files<span class="token number">2020</span>/11/19 <span class="token number">20</span>:34:10 <span class="token number">192.168</span>.1.105:58946 accepted tcp:211.72.35.152:80 <span class="token punctuation">[</span>outBound_PROXY<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个办法是用docker的时候加<code>sudo</code>以root用户运行。</p><p>另一个解决办法见：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ3pmeC9jZ3Byb3h5L2lzc3Vlcy8=">https://github.com/springzfx/cgproxy/issues/<i class="fa fa-external-link-alt"></i></span></p><p>编辑<code>/etc/default/grub</code>，<br>添加<code>cgroup_no_v1=net_cls,net_prio</code> 到<code>GRUB_CMDLINE_LINUX_DEFAULT</code>中,<br>然后更新grub，重启<br>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"text cgroup_no_v1=net_cls,net_prio"</span><span class="token function">sudo</span> <span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是，加了这些参数经常也不太好用。</p><blockquote class="blockquote-center"><p>最简单的办法，扬了 docker，换 podman / podman-docker</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu podman-docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者安装podman，然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">docker</span><span class="token operator">=</span>podman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你需要编辑<code>/etc/subuid</code>和<code>/etc/subgid</code>加上<code>podman:165536:4096</code>，然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> --add-subuids <span class="token number">165536</span>-169631 --add-subgids <span class="token number">165536</span>-169631 yourusername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不然会报错，没法pull images</p><pre class="line-numbers language-none"><code class="language-none">ERRO[0000] cannot find UID&#x2F;GID for user zjk: open &#x2F;etc&#x2F;subuid: no such file or directory - check rootless mode in man pages.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pacman更新报错"><a href="#pacman更新报错" class="headerlink" title="pacman更新报错"></a>pacman更新报错</h3><p>本来都是好的，突然有一次更新问题了。浏览器等访问都没有问题，怀疑是透明代理的问题。Qv2ray输出看不到异常。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">:</span><span class="token operator">:</span> Synchronizing package databases<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token property">error:</span> failed retrieving file <span class="token string">'core.db'</span> from <span class="token domain constant">mirrors.uestc.cn</span> <span class="token operator">:</span> Failed to connect to <span class="token domain constant">mirrors.uestc.cn</span> port <span class="token number">80</span><span class="token operator">:</span> Connection timed out<span class="token property">error:</span> failed to update core <span class="token operator">(</span>download library error<span class="token operator">)</span><span class="token property">error:</span> failed to synchronize all databaseserror installing repo packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>cgnoproxy yay -Syu</code> 看了一下，果然。<br>然后在cproxy中将pacman和yay加入noproxy组中。编辑<code>/etc/cgproxy/config.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"comment"</span><span class="token operator">:</span><span class="token string">"For usage, see https://github.com/springzfx/cgproxy"</span><span class="token punctuation">,</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">12345</span><span class="token punctuation">,</span>    <span class="token property">"program_noproxy"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"v2ray"</span><span class="token punctuation">,</span> <span class="token string">"qv2ray"</span><span class="token punctuation">,</span> <span class="token string">"yay"</span><span class="token punctuation">,</span> <span class="token string">"pacman"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"program_proxy"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"cgroup_noproxy"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/system.slice/v2ray.service"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"cgroup_proxy"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"enable_gateway"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enable_dns"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enable_udp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"enable_tcp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"enable_ipv4"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"enable_ipv6"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"table"</span><span class="token operator">:</span> <span class="token number">10007</span><span class="token punctuation">,</span>    <span class="token property">"fwmark"</span><span class="token operator">:</span> <span class="token number">39283</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="透明代理和其他的代理设置冲突"><a href="#透明代理和其他的代理设置冲突" class="headerlink" title="透明代理和其他的代理设置冲突"></a>透明代理和其他的代理设置冲突</h3><p>比如SwitchyOmega、Firefox的代理设置</p><p>开了透明代理，理论上不需要对应用单独指定代理了，直接把SwitchyOmega关掉或者规则选 Direct，Firefox的代理设置也填不使用代理</p><h3 id="报错-too-many-open-files"><a href="#报错-too-many-open-files" class="headerlink" title="报错 too many open files"></a>报错 too many open files</h3><p>报这种错:</p><blockquote><p>2021/03/11 22:32:32 [Warning] github.com/v2fly/v2ray-core/v4/transport/internet/tcp: failed to accepted raw connections &gt; accept tcp 127.0.0.1:8889: accept4: too many open files</p></blockquote><p>这个在开启UDP透明代理的时候常见, 可能是文件大小限制,也可能是你配置错误出现循环转发,比如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YycmF5L3YycmF5LWNvcmUvaXNzdWVzLzE1NjM=">这个issue<i class="fa fa-external-link-alt"></i></span></p><p>编辑<code>/usr/lib/systemd/system/v2ray.service</code> 或 <code>/etc/systemd/system/v2ray.service</code></p><p>加入</p><pre class="line-numbers language-none"><code class="language-none">[Service]LimitNPROC&#x3D;500LimitNOFILE&#x3D;1000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后: </p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reload &amp;&amp; systemctl restart v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考<span class="exturl" data-url="aHR0cHM6Ly90b3V0eXJhdGVyLmdpdGh1Yi5pby9hcHAvdHByb3h5Lmh0bWwjJUU1JTg1JUI2JUU0JUJCJTk2">v2ray配置指南的透明代理部分<i class="fa fa-external-link-alt"></i></span></p><p>或者修改<code>/etc/security/limits.conf</code>在末尾添加</p><pre class="line-numbers language-none"><code class="language-none">user   soft   nofile    40690user   hard   nofile    40690<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>user改为你的用户名(<code>echo $USER</code>查看),或者想为所有用户设置就改为<code>*</code>（不推荐）</p><h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><h3 id="其他平台和其他方案"><a href="#其他平台和其他方案" class="headerlink" title="其他平台和其他方案"></a>其他平台和其他方案</h3><p>目前Linux透明代理的绝大多数方案都是基于iptables（nftables）的<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3YycmF5QS92MnJheUE=">v2raya<i class="fa fa-external-link-alt"></i></span>有自带的透明代理，看起来设置比这个还要简单一些。<br>如果是软路由的透明代理，那Openwrt有很多成熟的方案。如果是非桌面版，请考虑软路由的ssr plus、clash或者v2raya等透明代理方案（或者自己写iptables规则）</p><p>Win用户推荐使用Proxifier达到类似的效果</p><h3 id="Qv2ray的gcc和rprx的纷争"><a href="#Qv2ray的gcc和rprx的纷争" class="headerlink" title="Qv2ray的gcc和rprx的纷争"></a>Qv2ray的gcc和rprx的纷争</h3><p>gcc几个月前宣布隐退，当时很多人（包括我）都在期待gcc回来。不过在前一阵gcc和rprx等人的争吵中，gcc被鸭鸭移除了权限并踢了出去。<br>为什么我要说这个事情呢？cgproxy已经在一年多以前停止维护了。现在Qv2ray的开发在gcc走后也大幅放缓了，而透明代理功能Qv2ray维护者表示这是祖传代码不会继续更新，所以————————（当然现在的版本已经够用了，继续用下去没有问题）</p><p>ps：这件事上我是倾向于支持gcc的。之前我对鸭鸭和gcc印象比较好，很不怎么喜欢 rprx x 。<br>这件事我不支持鸭鸭的做法，gcc作为qv2ray的创始人和主要贡献者，虽然隐退了，应该有对这个项目处置的权利（虽然qv2ray是一个社区项目，然而90%的贡献都是gcc的）。我心目中比较好的处理方式是Qv2ray分家，fork并改名出一个Qxray来作为支持xray的版本（就像Project V、v2fly和Project X那样）。<br>Qv2ray是Linux下这方面为数不多很棒的GUI图形化桌面软件（其他的有Trojan-Qt5,大都先于Qv2ray凉了），唉，Linux桌面的图形化软件前路迢迢  </p><h3 id="关于Qv2ray停止维护的事"><a href="#关于Qv2ray停止维护的事" class="headerlink" title="关于Qv2ray停止维护的事"></a>关于Qv2ray停止维护的事</h3><p>现在star最多的那个组织<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1F2MnJheQ==">Qv2ray<i class="fa fa-external-link-alt"></i></span> 停止维护了，意料之中吧。这件事我不想多评价了，我要评价肯定忍不住对rprx的脏话。下面简单说一下qv2ray的事。</p><p>如果你想用老版本的Qv2ray（Qv2ray 3 以前）</p><p>目前AUR里面的qv2ray 2.7.0 版本是无法正常使用插件的。如果想使用可以自行降级到2.6然后用插件。</p><p>更推荐的方式是换<span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy9xdjJyYXktZGV2LWdpdC8=">qv2ray-dev-git<i class="fa fa-external-link-alt"></i></span> (这个也停止维护了，是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1F2MnJheS9RdjJyYXk=">Qv2ray/qv2ray<i class="fa fa-external-link-alt"></i></span>的打包) 这个要新一点（众所周知dev版本比稳定版稳定）</p><p>上面两个版本足够正常使用，但是都停止更新了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S qv2ray-dev-git qv2ray-plugin-command-dev-git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想用gcc还在开发中的新版的Qv2ray 3.0，可以自行编译或下载release（完全移除了xray的支持，gcc原班人马开发维护，是的，你们永远喜欢的gcc又回来了）。这个版本变化比较大，迁移到了Qt6，重写了不少东西，插件也不通用，只是界面看起来一样而已。</p><p>下面是Gcc的新版本Qv2ray，<strong>Conflict With xray</strong></p><p>Archlinux可以用<span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy9xdjJyYXktc3RhdGljLWJpbi1uaWdodGx5Lw==">qv2ray-static-bin-nightly<i class="fa fa-external-link-alt"></i></span>这个包，想追最新的可以用<code>qv2ray-git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S qv2ray-static-bin-nightly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关于grpc"><a href="#关于grpc" class="headerlink" title="关于grpc"></a>关于grpc</h3><p>grpc经常进行不兼容的更新（对，小版本号也会有破坏性改动）</p><p>所以经常出现滚动更新grpc后，qv2ray就炸掉不能用了（这个时候建议降级grpc先应急）</p><p>或者你依赖grpc的其他包不多的话，可以考虑直接锁grpc的版本。<code>sudo downgrade grpc</code></p><p>事实上不仅是qv2ray会随着grpc的更新出问题，其他的包也会，比如sysdig。经常出现grpc版本更新的但是API变了，其他依赖grpc的包没有更改API还是用老版本就出事了。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">error:</span> failed to prepare transaction <span class="token operator">(</span>could not satisfy dependencies<span class="token operator">)</span><span class="token operator">:</span><span class="token operator">:</span> installing grpc <span class="token operator">(</span><span class="token number">1.41.0</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">)</span> breaks dependency <span class="token string">'libgrpc++_unsecure.so=1.39-64'</span> required by sysdigerror installing repo packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;从Qv2ray电报群里转来的，透明代理老有人问，感觉这个方案比tproxy等方案好，转出来。版权归Qv2ray及cgproxy所有&lt;/p&gt;</summary>
    
    
    
    
    <category term="qv2ray" scheme="https://zhangjk98.xyz/tags/qv2ray/"/>
    
    <category term="cgproxy" scheme="https://zhangjk98.xyz/tags/cgproxy/"/>
    
    <category term="transparent-proxy" scheme="https://zhangjk98.xyz/tags/transparent-proxy/"/>
    
  </entry>
  
  <entry>
    <title>为什么不试试EndeavourOS呢</title>
    <link href="https://zhangjk98.xyz/why-not-try-endeavouros/"/>
    <id>https://zhangjk98.xyz/why-not-try-endeavouros/</id>
    <published>2020-09-13T15:52:18.000Z</published>
    <updated>2020-09-13T15:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>sudo pacman -Rs win10</p><span id="more"></span><p>其实还是建议能折腾的玩家直接上原味Arch。不想装Arch的偷懒用户可以试试这个（不过推荐想用KDE等其他桌面的玩家先选择离线安装，然后卸载xfce的包，再装其他DE。这个在线安装的时候每装一个包都会 -Syu 一下，非常慢）</p><h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><p>再次更新，你电镜像源有EndeavourOS了： <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3Mv">http://mirrors.uestc.cn/endeavouros/<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Server = http://mirrors.tuna.tsinghua.edu.cn/endeavouros/repo/<span class="token variable">$repo</span>/<span class="token variable">$arch</span>"</span> <span class="token operator">></span> /etc/pacman.d/endeavouros-mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>iso镜像在<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3MvaXNvLw==">这里<i class="fa fa-external-link-alt"></i></span></p><p>清华已经安排上了EndeavourOS的镜像和<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2VuZGVhdm91cm9zL2lzby8=">iso<i class="fa fa-external-link-alt"></i></span>，可以方便的下载iso和更新EndeavourOS的包了。（或者用PT种子下载，实测速度均&gt;10Mb/s）</p><p>更改<code>/etc/pacman.d/endeavouros-mirrorlist</code>中的内容，改为</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">## ChinaServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;endeavouros&#x2F;repo&#x2F;$repo&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后<code>sudo pacman -Syy</code>刷新一下</p><h2 id="安装virtualbox虚拟机"><a href="#安装virtualbox虚拟机" class="headerlink" title="安装virtualbox虚拟机"></a>安装virtualbox虚拟机</h2><p> 我用的kernel是lts版本（偶滴本本是Nvidia独显，不敢上kernel一直滚，怕炸）</p><p>装头文件、virtualbox组件、网络和vnc扩展（可选）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S linux-lts-headers virtualbox virtualbox-guest-iso virtualbox-host-dkms net-tools virtualbox-ext-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐安装oracle的增强扩展（一些自适应分辨率缩放、USB驱动什么的都在这里面）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S virtualbox-ext-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载镜像（微软貌似出了用于虚拟机的免费90天win10，然而win10还是耗资源，没有什么特殊需求就只是用用office用用QQ什么的开个win7甚至XP虚拟机就好了，在虚拟机里会流畅一点）</p><p>增强功能要在win虚拟机中手动安装扩展才能用</p><h2 id="终端配置"><a href="#终端配置" class="headerlink" title="终端配置"></a>终端配置</h2><h3 id="将bash-zsh的终端输出信息和日志改回英文"><a href="#将bash-zsh的终端输出信息和日志改回英文" class="headerlink" title="将bash/zsh的终端输出信息和日志改回英文"></a>将bash/zsh的终端输出信息和日志改回英文</h3><p>终端有些报错和输出还是要靠英文去谷歌，中文资料太少了，查不到，但是又不想把全局设置成英文的。直接<code>export LANG=en_US.UTF-8</code>不起作用，改成<code>export LANG=en_US</code>变成了英文但是中文乱码了，差了一下LANGUAGE参数的优先级比LANG要高、LC_X参数优先级比LANGUAGE高，修改LANGUAGE变量即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span><span class="token string">"en_US:UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只修改终端那就在.bashrc加上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token environment constant">$TERM</span>"</span><span class="token operator">=</span><span class="token string">"linux"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>en_US <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认终端改为zsh"><a href="#默认终端改为zsh" class="headerlink" title="默认终端改为zsh"></a>默认终端改为zsh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /usr/bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>装oh-my-zsh（因为我懒得自己配置zsh了）和插件，并设置默认终端为oh-my-zsh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S <span class="token function">zsh</span> oh-my-zsh-git autojump zsh-autosuggestions zsh-syntax-highlightingchsh -s /usr/bin/zsh<span class="token function">cp</span> /usr/share/oh-my-zsh/zshrc ~/.zshrc <span class="token comment"># 我比较懒，就直接把默认配置拿过来改改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="更换lts内核"><a href="#更换lts内核" class="headerlink" title="更换lts内核"></a>更换lts内核</h2><p>更新到5.8以后我的virtualbox又出问题了，换回linux-lts</p><p>EndeavourOS有一个叫akm的图形界面，但是你要手动重装virtualbox之类的会受到内核影响的东西。</p><h2 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h2><blockquote><p>so, nvidia f…..</p></blockquote><p>算了，3080那么强，不黑英伟达了(更新，AMD新卡出了，好家伙</p><p>他们从以前Antergos那fork了一个驱动安装脚本，有个包叫nvidia-installer（lts等用户请用nvidia-installer-dkms），看<span class="exturl" data-url="aHR0cHM6Ly9lbmRlYXZvdXJvcy5jb20vZG9jcy9oYXJkd2FyZS1hbmQtbmV0d29yay9ncmFwaGljLWNhcmRzLWdwdS1kcml2ZXItYW5kLXNldHVwLw==">这里<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h2><p>EndeavourOS官方魔改定制了xfce的主题和图标，离线安装镜像也只有xfce，其他的几乎没怎么魔改。</p><p>如果要装其他DE的话</p><p>紫红配色看个人喜好吧，其实我不太能欣赏的来（这个配色，Gitlab同款）</p><p>更新，KDE 的 5.20.2 配色和EndeavourOS完全一致，建议他们火速从XFCE迁往KDE（不是</p><p><img src="/why-not-try-endeavouros/image-20201031190318540.png" alt="KDE新官网样子"></p><p>多桌面环境可能出问题，非要这样做的话建议每个不同的桌面环境分配一个单独的用户名。<br>（貌似xfce4和KDE一起用几乎问题（用ssdm），先装ssdm和KDE,然后装xfce4）<br>尝试了一下i3wm, 简洁是真的简洁，不太习惯又删了换回KDE了。</p><p>KDE有一种 Windows Vista 的感觉，感觉是 linux 所有 Desktop Enviroment 里面最舒服的。xfce虽然是EndeavourOS默认的DE，但是xfce开发人手不够，用户和社区贡献者也比KDE少，而且内存占用最新的KDE已经比xfce低了…..现在xfce也不怎么轻量了，渣配置机器上表现没有LXDE好，感觉不少用户都转去用i3wm和KDE了…逐渐没落的夕阳DE，适合养老</p><h2 id="硬盘扩容和迁移"><a href="#硬盘扩容和迁移" class="headerlink" title="硬盘扩容和迁移"></a>硬盘扩容和迁移</h2><p>趁打折买了一块西数SN550,之前只有500G还装了个双系统的笔记本可以扩容了</p><p>现在把/home分区（大概60G）从老硬盘移动到新硬盘上，空出来的60G给/目录。我既不是LVM也没有组raid，文件系统用的ext4，500G老硬盘分了400G给win10,剩下100G给了linux，分了一个/，40G,一个/home，60G</p><p>先格式化（这里我用的GPT分区表，ext4），然后挂载到/mnt,然后用rsync迁移/home下的文件到/mnt<br>然后umount，然后分区合并给/root，再挂载到/home下面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -lyay -Sy <span class="token function">rsync</span>mkfs.ext4 /dev/nvme0n1p1<span class="token function">mount</span> /dev/nvme0n1p1 /mnt<span class="token function">rsync</span> -avz /home /mnt<span class="token function">umount</span> dev//nvme0n1p1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两边都是nvme,2分钟就同步完成了，速度非常感人，然后修改fstab，将原来/home分区的uuid改为新硬盘的（/dev/nvme0n1p1）uuid</p><p><code>/etc/fstab</code>大概长这个样子，分别是uuid,挂载目录，文件类型，noatime后面0表示不开机自检，/</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">8205</span>-8BC5                            /boot/efi      vfat    <span class="token assign-left variable">umask</span><span class="token operator">=</span>0077 <span class="token number">0</span> <span class="token number">2</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">36499174</span>-6a4a-4b9d-b5cc-0b1f555a1f46 /              ext4    defaults,noatime <span class="token number">0</span> <span class="token number">1</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>bf5e768c-a2de-4618-9861-5946459a69b6 /home          ext4    defaults,noatime <span class="token number">0</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后退出来，用livecd或者双系统的分区工具把原来的/home分区删掉分给原来的/目录。（注意做好备份不要删错了，删错了就没了）</p><p>再次登陆后应该就行了。弄完突然发现KDE自带一个叫KDE Partition Manager的工具，看起来貌似还行。</p><h2 id="修grub"><a href="#修grub" class="headerlink" title="修grub"></a>修grub</h2><p>双系统grub又出问题了，好在用liveusb重装了一下grub问题救了回来。</p><p>我是UEFI，操作除了最后 grub install 用EndeavourOS的，其他的和Arch一样</p><p>先挂载，然后chroot进去，然后重装grub</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/nvme0n1p3 /mnt<span class="token function">mount</span> /dev/nvme1n1p2 /mnt/boot/efi<span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfggrub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>EndeavourOS-grub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu <span class="token comment"># 装了AUR就yay -Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要自动降级新软件包就<code>-Syuu</code>(不推荐)</p><p>升级的包里面有内核和显卡驱动的时候要注意小心</p><p>升级内核之后最好重启一下，有的时候不重启会遇到开bbr失败了啊，u盘读不出来了啊，就比如<span class="exturl" data-url="aHR0cHM6Ly9qbGljZS50b3AvcC83bDltby8=">记因内核版本错误导致U盘不能识别的问题解决<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly92MmV4LmNvbS90LzMyMzU1OQ==">这个v站帖子<i class="fa fa-external-link-alt"></i></span>还有重启后<span class="exturl" data-url="aHR0cHM6Ly9tYW5hdGVlbGF6eWNhdC5naXRodWIuaW8vbGludXgvMjAyMC8wMi8xNC9maXgtYXJjaC1ib290LWZhaWxlZC5odG1s">Grub内核版本号不升级<i class="fa fa-external-link-alt"></i></span>，大部分情况下<code>modprobe</code>找不到模块八成就是了</p><h3 id="升级内核不重启"><a href="#升级内核不重启" class="headerlink" title="升级内核不重启"></a>升级内核不重启</h3><p>参考reddit这个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy80enJzYzMva2VlcF95b3VyX3N5c3RlbV9mdWxseV9mdW5jdGlvbmFsX2FmdGVyX2Ffa2VybmVsLw==">帖子<i class="fa fa-external-link-alt"></i></span></p><p>一个软链过去，感觉不太优雅，还是乖乖重启比较好</p><blockquote><p>看来包管理器们应该学习其他两个系统，统一在关机开机的时候更新软件。</p></blockquote><h2 id="KDE使用事项"><a href="#KDE使用事项" class="headerlink" title="KDE使用事项"></a>KDE使用事项</h2><h3 id="KDE卡死的抢救方案"><a href="#KDE卡死的抢救方案" class="headerlink" title="KDE卡死的抢救方案"></a>KDE卡死的抢救方案</h3><p>KDE现在已经比较稳定了，但是Linux桌面程序还是偶尔把桌面搞到卡死，比如vscode内存泄漏。</p><p>首先尝试<code>ctl+alt+t</code>呼出终端，如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常退出不行就直接killall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者重启一下SDDM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还不行就杀掉tty1，然后重启xorg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启<br>或者直接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> xstartx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再不行直接<code>reboot</code>就好了</p><p>或许你开了SysRq，先用SysRq抢救一下，见<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvYWRtaW4tZ3VpZGUvc3lzcnEuaHRtbA==">Linux Magic System Request Key Hacks<i class="fa fa-external-link-alt"></i></span>，或者直接看<span class="exturl" data-url="aHR0cDovL2Jsb2cubHVqdW45OTcyLndpbi9ibG9nLzIwMTgvMDgvMjIvbGludXglRTQlQjglOEIlRTclOUElODRzeXNycSVFOSU5NCVBRS9pbmRleC5odG1s">linux下的SysRq键<i class="fa fa-external-link-alt"></i></span></p><p>再不行就直接尝试长按电源关机了</p><h3 id="混成器"><a href="#混成器" class="headerlink" title="混成器"></a>混成器</h3><p>有Nvidia显卡怕驱动更新出问题可以在设置中将渲染器（混成器）从OpenGL改为XRender，XRender出问题的情况会少一点，虽然很多特效都不支持，性能也略差。没有问题建议还是用OpenGL或者直接关闭特效，XRender没有硬件加速用起来感觉跟OpenGL有明显的体验差距。</p><p>另外貌似非整数比缩放的时候透明特效之类的经常不支持，建议直接关了。</p><h3 id="baloo"><a href="#baloo" class="headerlink" title="baloo"></a>baloo</h3><p>禁用baloo：<code>balooctl disable</code> 这个文件索引服务也是个吃性能大户，不管是在GNOME下还是KDE下。可以考虑禁用。要查找文件可以用find命令之类的东西嘛。</p><h3 id="KDE桌面部件"><a href="#KDE桌面部件" class="headerlink" title="KDE桌面部件"></a>KDE桌面部件</h3><p>美化要稍微谨慎一点，魔改太多了不太稳定</p><p>latte-dock：虽然KDE官方维护支持这个，动画效果很漂亮，用起来也很舒服，但是这个实在是吃内存大户。KDE桌面不开多余特效和装各种桌面部件待机内存在300M，装个latte-dock后内存占用比其他所有的加起来还多。把dock的鼠标悬停放大之类的特效关一关。貌似这个的背景透明只有XRender支持。</p><p>一个很喜欢的任务栏部件event calendar</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S plasma5-applets-eventcalendar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="双显示器开机右侧出现黑边"><a href="#双显示器开机右侧出现黑边" class="headerlink" title="双显示器开机右侧出现黑边"></a>双显示器开机右侧出现黑边</h3><p>发现是每次开机分辨率变成1680*1050了</p><p>先看一下你的显示器编号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如我的就是DVI-I-1和DVI-D-0，把这两个分辨率改回1080p</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr --output DVI-I-1 --mode 1920x1080 --rate <span class="token number">60</span>xrandr --output DVI-D-0 --mode 1920x1080 --rate <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里有一个自动配置的包<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy8/bmFtZT1hdXRvcmFuZHI=">autorandr<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S autorandrautorandr horizontal <span class="token operator">&amp;&amp;</span> autorandr vertical <span class="token comment"># 这里我直接把显示长宽分辨率都直接拉满了</span>autorandr --save test1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者你可以手动编辑<code>/etc/X11/xorg.conf.d</code>下的配置</p><p>见<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1hyYW5kcg==">Arch Wiki xrandr<i class="fa fa-external-link-alt"></i></span></p><p>其实每次开机运行一下xrandr可能更好一点（如果你不是wayland的话），不少人都是这么搞得（顺便刷新调整一下字体啥的</p><p><img src="/why-not-try-endeavouros/image-20200923222725926.png" alt="xrandr"></p><h2 id="Mac-win10上的一些软件"><a href="#Mac-win10上的一些软件" class="headerlink" title="Mac/win10上的一些软件"></a>Mac/win10上的一些软件</h2><p><del>请阅读王垠经典博文完全用linux工作</del><br>不少时候用wine还是能搞定的（如果你不在乎wine的稳定性的话），包括一些大型软件，比如PS<br>当然有的东西用wine体验远没有虚拟机好，拿Virtualbox或者KVM开个虚拟机是个不错的选择。或者身边有闲置安卓机用scrcpy投屏，或者KDE Connect传文件。</p><p>部分国产软件开个黑果虚拟机感觉体验比windows虚拟机略好一点<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZveGxldC9tYWNPUy1TaW1wbGUtS1ZN">https://github.com/foxlet/macOS-Simple-KVM<i class="fa fa-external-link-alt"></i></span></p><h2 id="一点闲话"><a href="#一点闲话" class="headerlink" title="一点闲话"></a>一点闲话</h2><p>其实我一直很期待Arch系诞生一批用户友好的桌面发行版，就像Debian那样衍生出Ubuntu、Linux Mint那样。（虽然这很不Arch）</p><ol><li>之前被apt的地狱依赖搞得心态崩了，想用pacman系的（反正打包粒度粗一点好，硬盘现在这么便宜又不在乎占多大地方）</li><li>喜欢KDE</li><li>想要稳定一点的系统做日常主力搬砖用</li><li>安装方便一点。这个倒是无所谓，不过出了事LiveCD抢救也想有个图形界面方便抢修</li></ol><p>Arch把wifi-menu去掉之后就不太想用原味Arch了，我这笔记本没网口高通网卡Nividia独显实在八字不合，只想佛系地找个好装的iso</p><p>KaOS基本符合，然而包太少（加上KCP社区包也还是很少），可惜….<br>另一个<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hha3JhbGludXgub3JnLw==">chakra<i class="fa fa-external-link-alt"></i></span>也是包太少（这个有自己的CCR社区包，包也不多），KDE和Qt骨灰爱好者的宝藏，软件基本全套KDE和Qt（不过据说他们人手不够维护不过来了打算换到）</p><p>此外还有各种层出不穷的真*Arch安装器<br><span class="exturl" data-url="aHR0cHM6Ly9maXJlcmFpbi5tZS8=">https://firerain.me/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9nYXJ1ZGFsaW51eC5vcmcvaW5kZXguaHRtbA==">https://garudalinux.org/index.html<i class="fa fa-external-link-alt"></i></span></p><p>Antergos的继承者，EndeavourOS满足了前两点，貌似xfce主题魔改了点主题，KDE基本原封不动。当时Manjaro闹分裂，jonathon出走了，我也跟着跑路到了这个发行版;用了一段时间感觉还不错，接近原味Arch, 不像Manjaro一样整了很多超出自己驾驭能力的魔改。推荐各位Manjaro用户和想用pacman又嫌麻烦的用户尝试一下。<br>现在看win10反而不习惯，索性把教研室搬砖那台win10全格了只装这个（要用到windows的时候上win7虚拟机 ps. win7 和KDE好像啊）</p><p>那天还看到肥猫跑到Manjaro群里推这个</p><p><img src="/why-not-try-endeavouros/miao.png"></p><p>第二天welcome就有了中文，感动</p><p><img src="/why-not-try-endeavouros/miaomiao.png"></p><p>能制止Manjaro的不是Arch佬的疯狂洗手，是另一个比Manjaro更好的Arch简易安装器，EndeavourOS合格了。</p><p>最后，不要对EndeavourOS抱有过高的期待，感觉他们人手还是不太足。</p><p>不过大方向是走对了，基本上就做做开箱即用和一些代替命令操作的图形界面，没有像Manjaro那样各种魔改搞出很多Arch上反而没有的问题。就比如linux内核切换的图形界面akm，基本上就是代替了archwiki上的手动操作，选项也只有linux,linux-lts,linux-zen几个。不像Manjaro那个内核切换，从linux 5.3 到linux 5.8最新版全都有，非常奔放，你要是真随便选一个linux和linux-lts之外的，哪天滚着滚着就出问题了。</p><p><img src="/why-not-try-endeavouros/akm.png"></p><p>Arch的安装脚本和只是换了个皮的安装器层出不穷，目前看来EndeavourOS是最令人满意的一个（好吧，默认是xfce，这个离线装了然后改DE就好了）</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>AUR包数量很庞大，但也有一些包目前还没有，有精力和意愿打包的可以去给AUR提交打包<br>可以参看</p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy8=">Archlinux User Repository<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0NyZWF0aW5nX3BhY2thZ2Vz">Creating packages<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfVXNlcl9SZXBvc2l0b3J5XyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">Arch用户仓库<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlvaXRzdS5tb2UvYXJjaC1saW51eC9hdXJfcGFja2FnaW5nX2d1aWRlYm9vay5odG1s">AUR 纯萌新向入门教学(2)-创建一个软件包<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlvaXRzdS5tb2UvYXJjaC1saW51eC9hdXJfc3VtYml0aW5nX2d1aWRlYm9vay5odG1s">AUR 纯萌新向入门教学(3)-提交软件包到AUR<i class="fa fa-external-link-alt"></i></span></li></ol><p>KDE的中文翻译也缺人，有精力的玩家可以去当翻译，中文翻译组在<span class="exturl" data-url="aHR0cHM6Ly9jcm93ZGluLmNvbS9wcm9qZWN0L2tkZW9yZw==">这里<i class="fa fa-external-link-alt"></i></span><br>KDE那边貌似挺缺打杂苦力的，熟悉Qt的同学可以去给社区做点贡献.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;sudo pacman -Rs win10&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="KDE" scheme="https://zhangjk98.xyz/tags/KDE/"/>
    
    <category term="EndeavourOS" scheme="https://zhangjk98.xyz/tags/EndeavourOS/"/>
    
  </entry>
  
  <entry>
    <title>基于机器学习的ICU急性心肌梗死死亡率预测（MIMIC数据库）</title>
    <link href="https://zhangjk98.xyz/morality-prediction/"/>
    <id>https://zhangjk98.xyz/morality-prediction/</id>
    <published>2020-05-31T03:06:54.000Z</published>
    <updated>2020-05-31T03:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新：推荐使用新版的MIMIC数据库自行构建数据集，并尝试整合eICU的病人数据。据说LSTM等方法效果不错，可以试试。<br>处理过程已经放在github上了：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FyY2hhZW9yYXB0b3IvQU1JX21vcmFsaXR5X3ByZWRpY3Rpb24uZ2l0">https://github.com/Archaeoraptor/AMI_morality_prediction.git<i class="fa fa-external-link-alt"></i></span></p><span id="more"></span><p>急性心肌梗死的发病率和死亡率都很高，MIMIC里面大概有5000次记录，用来构造数据集效果会比较好，这次就用MIMIC数据库里面的急性心肌梗死进行死亡风险的预测。</p><p>早期心血管疾病采用TIMI（the Thrombolysis in Myocardial Infarction）风险评分、全球急性心脏事件注册表（GRACE）评分或医生经验判断。后来MIMIC、eICU等开放医学数据库的建立和公布，数据量足够支撑起机器学习，疾病风险预测逐渐开始采用机器学习等方法。<br>数据清洗和构造数据集</p><p>目前开源的ICU重症数据库主要有MIMIC和eICU；eICU里面的患者数量多一点，但是貌似数据缺失很多，数据质量也不太好（eICU整合了几家不同医院的临床记录拼凑出来的数据库，数据质量参差不齐）</p><p>这里我用的MIMIC-Ⅲ数据库，内有近四万名成年人以及七千多名新生儿的五万余次住院资料，其中急性心肌梗死入院记录大概5000多次。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>前一阵MIT发布了 MIMIC IV 数据库（第四版），MIMIC-IV目前是0.4版本，以后要放出1.0正式版。希望大家下载最新版本进行训练<del>炼丹</del></p><p>0.4版的压缩包有6.7G,要获取需要在网站注册帐号并进行考试答题，然后同意他们关于医学伦理的条款<br>下载地址： <span class="exturl" data-url="aHR0cHM6Ly9waHlzaW9uZXQub3JnL2NvbnRlbnQvbWltaWNpdi8wLjQv">https://physionet.org/content/mimiciv/0.4/<i class="fa fa-external-link-alt"></i></span><br>并没有BT种子之类下载方式，下载需要帐号验证，由于版权和隐私等原因，应该也不能进行二次分发<br>所以大家自己去下吧。</p><p>通过考试答题后就直接点下载链接就好了。<br>官网还提供了wget的下载方式，安装包有点大，我们打开bbr下载会快一点（有美国代理记得挂）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysctl net.ipv4.tcp_congestion_control<span class="token operator">=</span>bbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后填你的用户名和密码就好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -r -N -c -np --user username --ask-password https://physionet.org/files/mimiciv/0.4/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载好建库的时候记得建索引，不然后续操作会很慢</p><h2 id="患者筛选"><a href="#患者筛选" class="headerlink" title="患者筛选"></a>患者筛选</h2><p>在MIMIC数据库中提取ICD-9疾病编号为410大类、疾病名称为 acute myocardial infarction的相关病人全部住院记录。数据表DIAGNOSE_ICD中的ICD9_CODE字段记录了患者的ICD-9编码，其中410大类编码根据发病部位被分为10个小类，例如第1个小类代表发病部位为前外侧壁、第2个小类代表发病部位为下外侧壁；这10 个小类又根据发病时期分为3个小类，0代表未细分，1代表初次入院，2代表再入院；例如，MIMIC数据库中ICD9_CODE字段为41031，对应的ICD-9编码为410.3.1，其中410代表急性心肌梗死，3代表下后壁，1代表初次入院。<br><img src="%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96%E6%B5%81%E7%A8%8B.svg" alt="数据提取示意图"></p><p>提取到的除后续照顾类别以外的410大类患者数据中，共有5087次入院记录，去除同一患者重复的入院记录，共有4788名病人患有急性心肌梗死（包括同时患有急性心肌梗死的并发症），其中有727人死亡，总死亡率15.18%。男性患者共2924名，平均年龄为67.2岁，死亡391人，男性死亡率13.37%；女性患者共1864名，平均年龄为73.4岁，死亡337人,女性死亡率18.10%。统计急性心肌梗死患者人群种族信息，可以发现亚裔只有74次入院记录。<br>特征选取</p><p>MIIMC里面能用的特征大概有性别年龄这些个人信息、心率血压这些生理指标、还有些用药记录之类的，为了预测患者初次发病的死亡率，只采用患者初次入院24小时内的记录检查项目作为预测指标</p><p>先把24小时ICUSTAY_ID选出来</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> k_AMI2 <span class="token keyword">AS</span><span class="token keyword">SELECT</span>ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>HADM_ID<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>DEATHTIME<span class="token keyword">FROM</span>ADMISSIONS<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>A<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">)</span> ADMITTIME<span class="token keyword">FROM</span>ADMISSIONS A<span class="token punctuation">,</span>DIAGNOSES_ICD B<span class="token keyword">WHERE</span>A<span class="token punctuation">.</span>HADM_ID <span class="token operator">=</span> B<span class="token punctuation">.</span>HADM_ID<span class="token operator">AND</span> <span class="token punctuation">(</span>ICD9_CODE <span class="token operator">=</span> <span class="token string">"41000"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41001"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41010"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41011"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41020"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41021"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41030"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41031"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41040"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41041"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41050"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41051"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41060"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41061"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41070"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41081"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41090"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41091"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41002"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41012"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41022"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41032"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41042"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41052"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41062"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41072"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41082"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41092"</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span>A<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">)</span> <span class="token keyword">AS</span> T<span class="token keyword">WHERE</span>ADMISSIONS<span class="token punctuation">.</span>ADMITTIME <span class="token operator">=</span> T<span class="token punctuation">.</span>ADMITTIME<span class="token operator">AND</span> ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用找患者检查项目、生理指标的ITEM_ID。写一个简单的SQL联接查询就可以了：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>SUBJECT_ID<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MAX_VALUE<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MIN_VALUE<span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span>CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">VALUE</span><span class="token punctuation">`</span><span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>VALUEUOM<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>TIMESTAMPDIFF<span class="token punctuation">(</span> <span class="token keyword">HOUR</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>INTIME<span class="token punctuation">,</span> CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME <span class="token punctuation">)</span> STAYHOUR <span class="token keyword">FROM</span>CHARTEVENTS<span class="token punctuation">,</span>A_AKF_DEATH T <span class="token keyword">WHERE</span>CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>ICUSTAY_ID <span class="token operator">AND</span> <span class="token punctuation">(</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">220546</span> <span class="token operator">OR</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">1542</span> <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID <span class="token punctuation">)</span> AA<span class="token keyword">WHERE</span>STAYHOUR <span class="token operator">&lt;=</span> <span class="token number">24</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本次选取的急性心肌梗死患者主要特征见下表：</p><table><thead><tr><th>特征</th><th>字段或ITEMID</th></tr></thead><tbody><tr><td>年龄</td><td>PTENETS.DOD和DOB</td></tr><tr><td>性别</td><td>PATIENTS.GENDER</td></tr><tr><td>心率</td><td>CHARTEVENTS.ITEMID</td></tr><tr><td>入院类型</td><td>ADMISSION_TYPE</td></tr><tr><td>ICD细分编码</td><td>ADMISSION.ICD9_CODE</td></tr><tr><td>最小GCS评分</td><td>220739、223901、223900、198</td></tr><tr><td>排尿量</td><td>40055、226559</td></tr><tr><td>PaO2</td><td>779、220224</td></tr><tr><td>白细胞计数WBC</td><td>220546、15424、200、1127、861</td></tr><tr><td>体温</td><td>676、223762、678、223761</td></tr><tr><td>血钾浓度</td><td>50971</td></tr><tr><td>血钠浓度</td><td>50983</td></tr><tr><td>血胆红素浓度</td><td>50885</td></tr><tr><td>是否有血液恶性肿瘤</td><td>ICD9_CODE =200XX-208XX</td></tr><tr><td>收缩压</td><td>51、220050</td></tr><tr><td>动脉收缩压</td><td>455、220179</td></tr><tr><td>血清尿素水平</td><td>51006</td></tr></tbody></table><h3 id="归一化和标准化"><a href="#归一化和标准化" class="headerlink" title="归一化和标准化"></a>归一化和标准化</h3><p>为了将患者特征转换成便于机器学习模型输入训练的特征变量的形式，对于MIMIC数据库中患者初次入院24小时中多次测量并记录的化验指标，选取最小值、最大值和平均值作为三个不同的特征。</p><p>然后对数字变量进行归一化，把标准差置为1，均值置为零（ICD细分编码之类的虽然是数字，但实际上是一个类别特征，应作为类别特征处理）</p><p>对于性别种族等类别特征，进行Onehot编码转换为梯度提升树模型能够接受的类型；以性别为例，将性别为女编码为01，性别为男编码为10。（LightGBM等可以用直方图算法之类的方式直接处理类别特征，不需要该操作）经过上述处理，共筛选并构建出42个急性心肌梗死患者的特征维度。</p><h3 id="缺失值填补"><a href="#缺失值填补" class="headerlink" title="缺失值填补"></a>缺失值填补</h3><p>由于MIMIC数据库中的数据是由两家不同的医院在10年间的ICU重症监护记录整合而成，急性心肌梗死患者的数据存在缺失和不统一的问题。以化验项目血清碳酸氢水平为例，在提取得到的4788份急性心肌梗死患者样本数据中，有4730份血清碳酸氢数据记录是完整的，有58份是缺失的，缺失率1.2%；但是部分检查指标，如收缩压，4788个样本中只有2665份完整数据，缺失率44.3%。</p><p>对于SVM等对于缺失值敏感的算法，用均值填补空缺数据的方法；对于缺失值不敏感的决策树类算法（如GBDT）和自带缺失值处理的算法（如XGBoost），将缺失值置为-1。</p><p>（缺失率在40%左右的会影响模型的效果，但是收缩压之类的又很重要，不能轻易舍弃）</p><p><img src="/morality-prediction/image-20200603192151696.png" alt="img"></p><h3 id="数据集不平衡的问题"><a href="#数据集不平衡的问题" class="headerlink" title="数据集不平衡的问题"></a>数据集不平衡的问题</h3><p>有的疾病可能会有，急性心肌梗死由于死亡率很高，正负样本比例已经超过了1：9，并不是那种极端不平衡的问题。有的疾病死亡率1%左右需要采样等方式构造平衡数据集。</p><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>直接用的scikit-learn工具包，随便调了调参。决策树类的bsoosting算法表现都还不错，像GBDT啊，XGBoost啊，LightGBM啊。数据量还是有点小了，就没上深度学习那些网络。直接调sklearn的包调一下参：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># pd.options.mode.chained_assignment = None</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span>cross_val_score<span class="token punctuation">,</span>cross_val_predict<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomTreesEmbedding<span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">,</span> GradientBoostingClassifier<span class="token comment"># criteria</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> roc_curve<span class="token comment"># 加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train_data_modified.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>data_x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># data_x = data.iloc[:,[1,2,3,4,5,6,7,36]]</span>lbl <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># data_x['M'] = lbl.fit_transform(data_x['M'].astype(str))#将含有字符的类别特征这一列进行转换</span><span class="token comment"># data_x['EMERGENCY'] = lbl.fit_transform(data_x['EMERGENCY'].astype(str))#将含有字符的类别特征这一列进行转换</span>data_y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 准备一个train/test来构建模型。</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data_x<span class="token punctuation">,</span>                                                    data_y<span class="token punctuation">,</span>                                                     test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>                                                     random_state<span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">,</span>                                                    <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">from</span> xgboost<span class="token punctuation">.</span>sklearn <span class="token keyword">import</span> XGBClassifierxgb <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span>    n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    learning_rate <span class="token operator">=</span><span class="token number">0.09</span><span class="token punctuation">,</span>    max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    min_child_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    gamma<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>    subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>    colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>    objective<span class="token operator">=</span> <span class="token string">'binary:logistic'</span><span class="token punctuation">,</span>    nthread<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>    scale_pos_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    seed<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token comment"># xgb = HistGradientBoostingClassifier(learning_rate=0.09)</span>xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>y_pred_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>y_pred_xgb_pr <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>fpr_xgb<span class="token punctuation">,</span>tpr_xgb<span class="token punctuation">,</span>thresholds  <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>y_pred_xgb_pr<span class="token punctuation">)</span><span class="token comment"># y_pred_xgb = y_pred_xgb_pr > 0.5</span><span class="token comment"># print(lr.coef_) #W</span><span class="token comment"># print(lr.intercept_) #b</span><span class="token comment"># 评价指标</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"auc面积:"</span><span class="token punctuation">,</span>roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb_pr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"精确率:"</span><span class="token punctuation">,</span>precision_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"召回率:"</span><span class="token punctuation">,</span>recall_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确率:"</span><span class="token punctuation">,</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"F1值:"</span><span class="token punctuation">,</span>f1_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死亡率预测"><a href="#死亡率预测" class="headerlink" title="死亡率预测"></a>死亡率预测</h2><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>表3-3 几种机器学习方法的死亡率预测结果如下表：</p><table><thead><tr><th></th><th>GBDT</th><th>LR</th><th>KNN</th><th>SVM</th><th>XGBoost</th><th>LightGBM</th><th>NB</th></tr></thead><tbody><tr><td>AUC</td><td>0.834</td><td>0.780</td><td>0.695</td><td>0.779</td><td>0.851</td><td>0.844</td><td>0.777</td></tr><tr><td>精确率</td><td>0.676</td><td>0.618</td><td>0.5</td><td>0.688</td><td>0.690</td><td>0.663</td><td>0.378</td></tr><tr><td>召回率</td><td>0.320</td><td>0.239</td><td>0.162</td><td>0.155</td><td>0.329</td><td>0.330</td><td>0.479</td></tr><tr><td>准确率</td><td>0.879</td><td>0.865</td><td>0.852</td><td>0.864</td><td>0.875</td><td>0.872</td><td>0.806</td></tr><tr><td>F1 值</td><td>0.451</td><td>0.345</td><td>0.245</td><td>0.253</td><td>0.443</td><td>0.439</td><td>0.422</td></tr></tbody></table><p>看上去准确率挺高，实际结果不太好，召回率太低了。召回率的意义是真阳性率（True Positive Rate），也就是预测到的死亡患者占所有患者的比例，大概真正死亡的患者只有一半被预测了出来。</p><table><thead><tr><th></th><th>实际死亡</th><th>实际存活</th></tr></thead><tbody><tr><td>预测死亡</td><td>真阳性（TP）</td><td>假阳性（FP）</td></tr><tr><td>预测存活</td><td>假阴性（FN）</td><td>真阴性（TN）</td></tr></tbody></table><p>由于数据集还是太小，就没有细分搞成多分类的问题预测一下短期（30天）和长期（90天以上）死亡率，数据集大了可以做一下。数据集再大可以做细分，比如STEMI和NSTEMI的细分或者</p><h3 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h3><p><img src="/morality-prediction/image-20200531203632378.png" alt="几种机器学习方法的ROC曲线"></p><h3 id="特征权重"><a href="#特征权重" class="headerlink" title="特征权重"></a>特征权重</h3><p>以GBDT为例，提取训练模型的决策树权重，结果如图3-3所示。由图可知，梯度提升树模型认为最重要的10个指标为当日最小血清碳酸氢水平、平均动脉血二氧化碳分压、平均排尿量、心率范围、最小心率、肌酐、体温范围、当日最大收缩压、当日心率标准差、年龄。</p><p><img src="/morality-prediction/image-20200531210528257.png" alt="GBDT的特征权重"></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>这个，急性心肌梗死这个直接看心电图或者彩超啥的更好一些，准确率一般不会低于90%。心血管疾病这种做这个预测基本没有太大意义。急性肾衰竭啥的可能更有意义一点</p><p>MIMIC数据库里面的数据亚裔很少，放到国内可能不太合适。护理和临床记录方式也差别不小。</p><p>这是2001-2012年的数据，近十年来医学水平提高了不少，包括再灌注等手段，死亡率已经下降了，用这批数据预测现在的可能会偏高</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><h3 id="MIMIC数据库表格名称及用途"><a href="#MIMIC数据库表格名称及用途" class="headerlink" title="MIMIC数据库表格名称及用途"></a>MIMIC数据库表格名称及用途</h3><table><thead><tr><th>表格名称</th><th>表格内容</th><th>备注</th></tr></thead><tbody><tr><td>ADMISSIONS（入院表）</td><td>提供有关患者的入院信息，由于为病人进行的每次唯一的医院访问都分配了一个唯一的信息<code>HADM_ID</code>，因此ADMISSIONS表可以被认为是<code>HADM_ID</code></td><td></td></tr><tr><td>CALLOUT(标注表)</td><td>提供患者何时准备好从ICU出院以及患者何时实际从ICU出院的信息</td><td></td></tr><tr><td>caregivers</td><td>记录医护人员信息（ID、类型、附加信息）</td><td></td></tr><tr><td>chartevents</td><td>记录所有病人的图表数据，住院期间的所有症状、体征、精神状态、实验室检查等</td><td></td></tr><tr><td>cptevents</td><td>包含当前的程序术语（CPT）代码，这些代码便于为在患者身上执行的操作计费。</td><td></td></tr><tr><td>d_cpt</td><td>当前程序术语（CPT）代码的高级定义</td><td></td></tr><tr><td>prescriptions（处方）</td><td>包含药物相关的订单条目，即处方</td><td></td></tr><tr><td>inputevents_cv</td><td>患者输入数据（流入患者体内液体信息）</td><td>表格来源CareVue ICU数据库。</td></tr><tr><td>inputeevents_mv</td><td>患者输入数据（流入患者体内液体信息）</td><td>表格来源Metavision ICU数据库。</td></tr><tr><td>outputevent</td><td>患者的输出数据。</td><td></td></tr><tr><td>labevents</td><td>包含给定患者的所有实验室测量值，包括患者数据（ITEMID、VALUE）</td><td></td></tr><tr><td>d_icd_diagnoses</td><td>ICD-9疾病诊断的定义表,对 疾病编码的解释</td><td></td></tr><tr><td>d_icd_procedures</td><td>ICD-9治疗程序代码的解释</td><td></td></tr><tr><td>d_items</td><td>ICU数据库中所有项目的定义表</td><td></td></tr><tr><td>d_labitems</td><td>所有实验室测量的定义表（对ITEMID的解释，对应数据类型，关联的LOINC代码）</td><td></td></tr><tr><td>datetimeevents</td><td>包含所有日期格式的数据</td><td></td></tr><tr><td>diagnoses_icd（诊断表）</td><td>包含患者住院期间所有ICD-9诊断</td><td></td></tr><tr><td>drgcodes</td><td>包含患者的诊断相关组（DRG）代码</td><td></td></tr><tr><td>icustays</td><td>患者在ICU内的住院概要（入住或者转出ICU的时间等）</td><td></td></tr><tr><td>microbiologyevents</td><td>包含微生物学信息，包括进行的测试和敏感性</td><td></td></tr><tr><td>noteevents</td><td>包含所有患者注意事项。，主要是不便于数字化的报告</td><td></td></tr><tr><td>patients</td><td>包含患者的基本信息（性别、出生日期、死亡日期、死亡标志位）</td><td></td></tr><tr><td>procedureevents_mv</td><td>包含患者的（治疗）程序</td><td></td></tr><tr><td>procedures_icd</td><td>包含患者的ICD程序，最值得注意的是ICD-9程序，即诊断程序</td><td></td></tr><tr><td>services</td><td>患者被接纳/转移的服务</td><td></td></tr><tr><td>transfers</td><td>患者整个住院期间的物理位置</td><td></td></tr></tbody></table><p>注意： 表格主要分为两种，一种是以D开头的，表示该表格为字典，比如d_labitems，表示实验室检查字典，内含每个实验室检查结果的说明；没有以D打头的表格则是记录患者信息的表格，比如labevents则表示患者住院期间的所有实验室检查结果。</p><h3 id="MIMIC数据表中主要字段"><a href="#MIMIC数据表中主要字段" class="headerlink" title="MIMIC数据表中主要字段"></a>MIMIC数据表中主要字段</h3><table><thead><tr><th>数据表</th><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>ADMISSION</td><td>SUBJECT_ID</td><td>每个患者的唯一标识</td></tr><tr><td>ADMISSION</td><td>HADM_ID</td><td>患者每次入院的唯一标识</td></tr><tr><td>ADMISSION</td><td>ADMITTIME</td><td>入院时间</td></tr><tr><td>ADMISSION</td><td>DEATHTIME</td><td>死亡时间</td></tr><tr><td>DIAGNOSES_ICD</td><td>ICD9_CODES</td><td>患者的ICD-9编码</td></tr><tr><td>ADMISSION</td><td>HOSPITAL_EXPIRE_FLAG</td><td>是否死亡</td></tr><tr><td>D_ITEMS</td><td>ITEMID</td><td>项目编号</td></tr><tr><td>D_ITEMS</td><td>LEABEL</td><td>项目名称</td></tr><tr><td>ICUSTAYS</td><td>ICUSTAY_ID</td><td>每次ICU病房接受病人唯一标识</td></tr><tr><td>LABEVENTS</td><td>VALUE</td><td>检查项目</td></tr><tr><td>LABEVENTS</td><td>VALUEUOM</td><td>ITEM的值 检查项目的单位（如K/uL）</td></tr><tr><td>LABEVENT</td><td>FLAG</td><td>检查项目是否异常（正常为Null）</td></tr></tbody></table><h3 id="急性心肌梗死患者主要特征"><a href="#急性心肌梗死患者主要特征" class="headerlink" title="急性心肌梗死患者主要特征"></a>急性心肌梗死患者主要特征</h3><table><thead><tr><th>特征</th><th>字段或ITEMID</th></tr></thead><tbody><tr><td>年龄</td><td>PTENETS.DOD和DOB</td></tr><tr><td>性别</td><td>PATIENTS.GENDER</td></tr><tr><td>心率</td><td>CHARTEVENTS.ITEMID</td></tr><tr><td>入院类型</td><td>ADMISSION_TYPE</td></tr><tr><td>ICD细分编码</td><td>ADMISSION.ICD9_CODE</td></tr><tr><td>最小GCS评分</td><td>220739、223901、223900、198</td></tr><tr><td>排尿量</td><td>40055、226559</td></tr><tr><td>PaO2</td><td>779、220224</td></tr><tr><td>白细胞计数WBC</td><td>220546、15424、200、1127、861</td></tr><tr><td>体温</td><td>676、223762、678、223761</td></tr><tr><td>血钾浓度</td><td>50971</td></tr><tr><td>血钠浓度</td><td>50983</td></tr><tr><td>血胆红素浓度</td><td>50885</td></tr><tr><td>是否有血液恶性肿瘤</td><td>ICD9_CODE =200XX-208XX</td></tr><tr><td>收缩压</td><td>51、220050</td></tr><tr><td>动脉收缩压</td><td>455、220179</td></tr><tr><td>血清尿素水平</td><td>51006</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>MIMIC IIII  数据库中用于识别患者身份的字段共有3个：subjects_id，hadm_id和icustay_id。其中subjects_id是患者身份的唯一标识，即一个subject_id只对应一名患者，一名患者也只有一个subject_id。hadm_id是患者每次住院的身份识别号，一个患者可能多次住院，因此一个subjects_id会对应多个hadm_id，但一个hadm_id只能对应一个subject_id。icustay_id表示患者在进入ICU的编号，因为患者一次住院可以多次进入不同的ICU，因此一个icustay_id只能对应一个hadm_id，当然也只能对应一个subject_id，但一个hadm_id可以对应多个icustay_id。在利用 MIMIC III 数据库进行研究时，往往需要运用sql语言对多个数据库进行连接，连接的基础一般就是这三个字段。</li><li>患者的临床资料不一定是住ICU期间的临床资料，也可能是住普通病房时的资料。记录患者入院时间的表格为admission，内含三个时间点：admittime，表示患者入院时间；dischartime，表示患者出院时间；deathtime，表示患者院内死亡的时间。如果deathtime为空(null)，则表示患者住院期间未死亡。记录患者进入和离开ICU的表格为icustays，这个表格中有两个时间较为重要，分别是intime和outtime，前者表示进入ICU的时间，后者表示离开ICU的时间。当然，如果患者在ICU死亡，那么dischartime、outtime和deathtime理论上就是同一个时间，但实际上会稍微有些出入，估计是由于录入不及时造成的；</li><li>MIMIC III  中的数据来自于两套数据采集系统：carevue和metavision。在icustays表格中，有一个字段叫dbsource，用于标识数据是来源于carevue还是metavision。CareVue记录的是2001至2008年入院的患者资料，Metavision则是2008至2012年期间入院的患者资料。在Metavision中，病人的随访时间最少为90天，在CareVue中，病人的随访时间则至少为4年。换而言之，在进行预后研究时，如果将数据来源限定为CareVue，则可以将随访时间假定为4年，对于4年以后死亡的患者，可以将其在出院后第4年生存状况定义为“存活”。当然，如果患者的死亡状况(DOD_SSN)为空格(null)，也同样可以表明患者在出院后4年仍然存活。</li><li>MIMIC数据库中的ICD编码统计方式和国内不太一样，基本都包含并发症，比如一个病人流感入院并死亡，同时患有急性心肌梗死的并发症，那么该病人也算作急性心肌梗死患者。（主要诊断是其他的疾病，但同时患有某疾病并发症，也认为是该疾病患者，统计死亡时也算在里面）</li><li>在MIMIC中有一个’ADMISSION_TYPE，其中有3个类别，分别是URGENT，EMERGENCY和ELECTIVE，ELECTIVE是不紧急的，URGENT和EMERGENCY的区别大概是URGENT的紧急程度更高（一般是需要立即采取措施的那种）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;更新：推荐使用新版的MIMIC数据库自行构建数据集，并尝试整合eICU的病人数据。据说LSTM等方法效果不错，可以试试。&lt;br&gt;处理过程已经放在github上了：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL0FyY2hhZW9yYXB0b3IvQU1JX21vcmFsaXR5X3ByZWRpY3Rpb24uZ2l0&quot;&gt;https://github.com/Archaeoraptor/AMI_morality_prediction.git&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="MIMIC" scheme="https://zhangjk98.xyz/tags/MIMIC/"/>
    
  </entry>
  
  <entry>
    <title>基于BERT的电子病历的命名实体识别</title>
    <link href="https://zhangjk98.xyz/9112/"/>
    <id>https://zhangjk98.xyz/9112/</id>
    <published>2020-05-19T02:09:16.000Z</published>
    <updated>2020-05-19T02:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>BERT效果确实好，就是有点吃内存</p><span id="more"></span><h2 id="序列标注"><a href="#序列标注" class="headerlink" title="序列标注"></a>序列标注</h2><p>一些医院的电子病历拆分的很细，比如主诉这一个大项里面部位、症状、时间、状态都是分开的；另一些医院的电子病历就跟纯文本差不多，要把大段文字中的主要结构提出来需要自然语言处理或者人工录入。一般做自然语言处理的时候都是几个部分分开做的，因为不同部分差异比较大，分开训练识别效果好。大部分电子病历包括入院记录、首次病程记录、病程记录、出院记录、手术记录、护理记录、病案首页，这里面又分为一些检查项、时间、主诉、既往史之类的小项。不少电子病历系统导出都是XML的，一般都是把电子病历拆成主诉那种一个个不能再拆的纯文本部分，比如主诉，见<a href="https://zhangjk98.xyz/81d4/">上一篇</a>，然后再对不能拆分的纯文本用人工或自然语言处理进一步拆分。这就是所谓的电子病历结构化。</p><p>比如一段主诉：</p><blockquote><p>反复胸痛伴胸闷1+年，加重20+天。</p></blockquote><p>按照规范一定的规范可分为几个不同的小块，比如下面这十一种：</p><blockquote><p>部位、症状、持续时间、伴随部位、伴随症状、伴随时间、状 态、病因/其他、观察项目、观察结果、既往史</p></blockquote><p>胸是部位、痛是症状、1+年是持续时间、反复是状态……</p><p>标注出来的结果可以保存为json格式，labels里面的list分别为起始位置、结束位置、标签</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;text&quot;: &quot;反复胸痛伴胸闷1+年，加重20+天。&quot;, &quot;labels&quot;: [[0, 2, &quot;状态&quot;], [2, 3, &quot;部位&quot;], [3, 4, &quot;症状&quot;], [5, 7, &quot;伴随症状&quot;], [7, 10, &quot;伴随时间&quot;], [11, 17, &quot;持续时间&quot;]]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>BIO格式，大概是这个样子：B，begin标签开始；I，inside包含在标签内，O，outside在标签外</p><pre class="line-numbers language-none"><code class="language-none">反 B-状态复 I-状态胸 B-部位痛 B-症状伴 O胸 B-伴随症状闷 I-伴随症状1 B-伴随时间+ I-伴随时间年 I-伴随时间， O加 B-持续时间重 I-持续时间2 I-持续时间0 I-持续时间+ I-持续时间天 I-持续时间。 O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BERT的接口是BIO格式，标注工具doccano，这里写两个互相转换的脚本就行了，标注完成后将json转为BIO，训练和预测完成后将BIO预测结果转为JSON</p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>NLP里面的命名实体识别很早就用在电子病历上，早期的机器学习方法效果一般，后来开始用RNN和CNN，后来用LSTM，再后来用BERT，效果一直在提升，BERT基本上到顶了（好一点的训练数据BERT基本能达到90%以上，对于主诉这样的较短的简单条目甚至能达到98%以上）</p><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><h3 id="doccano的部署和使用"><a href="#doccano的部署和使用" class="headerlink" title="doccano的部署和使用"></a>doccano的部署和使用</h3><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h5><h6 id="构建和部署"><a href="#构建和部署" class="headerlink" title="构建和部署"></a>构建和部署</h6><p>运行以下命令</p><pre class="line-numbers language-none"><code class="language-none">$ docker pull chakkiworks&#x2F;doccano # 拉取官方镜像$ docker run -d --name doccano -p 80:8000 chakkiworks&#x2F;doccano # 运行镜像，请按需修改端口$ docker exec doccano tools&#x2F;create-admin.sh &quot;admin&quot; &quot;[email protected]&quot; &quot;password&quot; # 创建用户并指定密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意  Docker镜像run之后会产生三个容器，doccona_nginx、doccona_backend、docker_frontend,其中docker_frontend在构建完成后会直接exit，这是一个feature，不是bug，它的主要作用是webpack打包</p><p><img src="/9112/image-20200109220759931.png" alt="img"></p></blockquote><h4 id="访问Docker中的PostgreSQL数据库中的数据"><a href="#访问Docker中的PostgreSQL数据库中的数据" class="headerlink" title="访问Docker中的PostgreSQL数据库中的数据"></a>访问Docker中的PostgreSQL数据库中的数据</h4><p>由于数据库安全问题，数据库分离再一个单独的容器中并且 首先执行<code>Docker exec</code>命令进入相应的PostgreSQL数据库容器</p><p>应该看到下图这样，终端从宿主机切换进容器</p><p><img src="/9112/image-20200109220232851.png" alt="img"></p><p>在容器的shell中用命令进入数据库</p><pre class="line-numbers language-none"><code class="language-none">$ psql -h 127.0.0.1 -d doccano -U doccano -p 5432 # 注意你的host，数据库名、用户名和端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应该看到下图这样，终端从Docker容器切进数据库</p><p><img src="/9112/image-20200109220100751.png" alt="img"></p><p>然后执行<code>\l</code>等命令进入和查看数据库（执行SQL）</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>后台管理入口是这个<span class="exturl" data-url="aHR0cDovL3lvdXJzaXRlL2FkbWluLyVFRiVCQyU4QyVFNSVCMCVCMSVFNiU5OCVBRiVFNCVCOCU4MCVFNCVCOCVBQURqYW5nbyVFOCU4NyVBQSVFNSVCOCVBNiVFNyU5QSU4NCVFNSU5MCU4RSVFNSU4RiVCMCVFNyVBRSVBMSVFNyU5MCU4Ng==">http://yoursite/admin/，就是一个Django自带的后台管理<i class="fa fa-external-link-alt"></i></span></p><p><img src="/9112/image-20200411204841203-1586654887394.png" alt="img"></p><p><img src="/9112/image-20200411205005107-1586654884937.png" alt="img"></p><p><img src="/9112/image-20200411205102588-1586654882966.png" alt="img"></p><p>登录进去后可自行添加账号和项目并设置权限和标签，标注项目选择sequential labeing即可，导出时选择JSONL格式</p><p>这个数据比较多的时候没有自动跳转比较麻烦，请直接在浏览器地址栏使用url跳转</p><p>比如，修改浏览器后面的url，#后面的offset改为685，直接回车，就可以从当前的689跳转到第685个数据</p><p><span class="exturl" data-url="aHR0cDovL3lvdXJzaXRlL3Byb2plY3RzLzYvI29mZnNldD02ODU=">http://yoursite/projects/6/#offset=685<i class="fa fa-external-link-alt"></i></span></p><p><img src="/9112/image-20200307213544539.png" alt="img"></p><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2Nhbm8vZG9jY2Fubw==">https://github.com/doccano/doccano<i class="fa fa-external-link-alt"></i></span> 一个开源的标注工具</p><p> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hY2Fudi9CRVJULUJpTFNUTS1DUkYtTkVS">https://github.com/macanv/BERT-BiLSTM-CRF-NER<i class="fa fa-external-link-alt"></i></span> 一个BERT的NER工具包</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;BERT效果确实好，就是有点吃内存&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="bert" scheme="https://zhangjk98.xyz/tags/bert/"/>
    
    <category term="NER" scheme="https://zhangjk98.xyz/tags/NER/"/>
    
  </entry>
  
</feed>
