<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>止息的博客</title>
  
  <subtitle>唯见月寒日暖，来煎人寿</subtitle>
  <link href="https://zhangjk98.xyz/atom.xml" rel="self"/>
  
  <link href="https://zhangjk98.xyz/"/>
  <updated>2022-01-02T06:05:36.000Z</updated>
  <id>https://zhangjk98.xyz/</id>
  
  <author>
    <name>Zhang.j.k</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新年开箱一个Canokey Pigeon</title>
    <link href="https://zhangjk98.xyz/canokey-pigeon-unboxing/"/>
    <id>https://zhangjk98.xyz/canokey-pigeon-unboxing/</id>
    <published>2022-01-02T06:05:36.000Z</published>
    <updated>2022-01-02T06:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>迟来的开箱，本来以为快递1号当天能到的，结果晚了一点。不管怎么说，元旦快落！</p><span id="more"></span><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>Canokey就是tuna那一帮人弄的重置版yubikey啦，stm32版本完全开源，发售的版本固件开源加密算法没开。至于后门和售后这些问题，由子安人格担保。这一批的500个比以前更贵了，169大洋，小贵。（据说以前是亏本买的）和之前透明探索版不同，这次虽然有壳，但是似乎更脆弱了，总担心一不小心掉水里。然而还是买了，看到群友人均有一个key我也想整一个。虽然小贵，但是飞天的key又怕有后门不太敢要。其他的产品算上跨国邮费还是比这个贵了。（虽然我有个stm32的，找嘉立创打样整了一个，不过做工一般（毕竟白嫖的嘉立创打样，有就不错了），不太适合挂钥匙扣上一直带着）</p><p>子安29号从深圳发的，去快递的时候货架上还放着不少连号的相同包装，应该都是群友的。外包装有点脏，里面完好，附带一个绳子和USB-A转type-c的转接头。插上以后chromium浏览器会自动弹出管理界面（Firefox不支持Webusb所以用不了）<br><img src="/canokey-pigeon-unboxing/canokey2.webp"><br>好，然后生成个ed25519的密钥换掉我原来用于ssh登陆的rsa（这个对我来说好处是密钥不像rsa那么长，可以用笔抄在纸上一份，不要paperkey一类的工具把它变短了）。按照惯例找个liveusb，装好gpg，断网，生成公钥密钥子密钥。然后将子密钥导入CanoKey，主密钥抄下来。</p><p>感觉还是原来的透明探索版看起来耐用一点，这个的壳子不怎么防水容易进灰。上几张图给大家看一下灯光亮度。亮度和罗技G102鼠标最亮的蓝光大致相当，远高于我的键盘（dell kb522）指示灯和机箱电源的蓝光。（建议在管理页面调成默认关闭LED）</p><p><img src="/canokey-pigeon-unboxing/canokey3.webp"><br><img src="/canokey-pigeon-unboxing/canokey4.webp"></p><p>一个惊喜是这个功率比较低，在我的键盘USB插槽上可以正常使用。我的键盘USB插槽功率连U盘都带不动，也带不动g102等大部分鼠标，闲置了许久终于有了用途。</p><h2 id="用途和体验"><a href="#用途和体验" class="headerlink" title="用途和体验"></a>用途和体验</h2><p>1.两步验证</p><p>这个没有FIDO认证，因为没交保护费。所以YubiKey能干的一些事他干不了，比如可以跳过验证的<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZGZsYXJlY2hhbGxlbmdlLmNvbS8=">cloudflarechallenge<i class="fa fa-external-link-alt"></i></span>。<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzc2MzE4NjE=">互联网上消防栓的消亡-Cloudflare 无图 CAPTCHA 的应运而生<i class="fa fa-external-link-alt"></i></span> 想不要CAPTCHA那得交保护费。 </p><p>国内大多数网站不支持，不过Google帐号之类的还是可以的。Webauthn有FIDO2会用FIDO2,没有会去用U2F。</p><p>2.NFC</p><p>打开了一直关闭的iphone NFC功能试了一下，然而没有成功。据说这一批的确不太行，可能还不如之前的透明探索版。见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhbm9rZXlzL2Nhbm9rZXktcGlnZW9uL2Rpc2N1c3Npb25zLzQ=">对 NFC 的一些说明和建议<i class="fa fa-external-link-alt"></i></span>。</p><p>更新：读取成功了！弹出提示 网站NFC标签 “在Safari浏览器中打开”canokeys.org””（当然，没有webUSB，console用不了），NFC Tools成功读到标签类型和序列号。试了一下Google的两步验证，登陆成功。<br>iphone读NFC的位置非常靠上，大概在刘海屏的背面那里，其他位置读不到。  </p><p>3.sudo免密码</p><p>可以装<code>pam_u2f</code>实现，配置方式见<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvVW5pdmVyc2FsXzJuZF9GYWN0b3I=">Universal_2nd_Factor ArchWiki<i class="fa fa-external-link-alt"></i></span>。不过还是建议不要sudo免密，在恍惚走神的状态下使用sudo容易酿成大祸。有的时候确认处在清醒状态直接<code>sudo su -</code>临时操作一下就好了。</p><p>4.放密钥</p><p>终于说到了我买这个key的主要目的了，拿来放密钥。体验还不错，有些时候跑到别人的电脑上或者在公共电脑上用ssh登陆的时候终于不用担心密钥泄漏了。 </p><p>5.加密LUKS之类的</p><p>去年systemd-homed刚出的那个时候我写过一篇博客，还说等我有了YubiKey试试LUKS加密home分区。不过到今年我已经很不喜欢systemd了（底裤，注意底裤！）。更重要的是我终于想明白了我home分区里面那点破玩意价值不足10元，用一个几百元的key去保护一个连key的零头都不到的破数据没必要。是时候停止我的被迫害妄想症了。</p><p>对于防止普通人直接把你硬盘扣了插到别的电脑上读数据，Arch可以直接装<code>mkinitcpio-tpm2-encrypt</code>和<code>luks-tpm2</code>这两个包配置TPM2+LUKS加密。systemd 248以上版本用systemd-cryptenroll也行。不过dell、hp几家的国行没有TPM的，有TPM的联想之类的也是有后门的TPM，所以你如果想拿来对付非普通人士还是算了吧。</p><h2 id="推不推荐买"><a href="#推不推荐买" class="headerlink" title="推不推荐买"></a>推不推荐买</h2><p>这要看你拿它来干什么，如果你很在乎体验又不缺钱也对开源没有特殊的感情，那去买YubiKey吧。如果不是很想掏钱或者对安全没那么在乎，那没必要买类似的产品。如果你想找一个足够方便的两步验证设备，那建议去用给FIDO2交了保护费的FIDO2之类的。  </p><p>我只是用它放个密钥啥的，倒也够用了。其实三年前我第一次开始用密钥是因为不想每次输入密码，后来逐渐变成了被迫害妄想症，一发不可收拾（倒也不全是杞人忧天，至少我大四的时候经历过一次被盗，由于出租屋家徒四壁幸免于难，合租的两位损失过万）<br>设置密码或者加密文件到底是防谁呢？</p><blockquote><p>There are two types of encryption: one that will prevent your sister from reading your diary and one that will prevent your government.   —-Bruce Schneier</p></blockquote><p>一顿操作下来，突然有一天发现密码忘了、钥匙无了、LUKS损坏了。<strong>防的竟是我自己</strong><br>第一种我身边的人用密码挡一下就已经够了，第二种暂时没有这个需求。现在除了你姐姐和gov，更多的是一些大小公司的流氓软件，扫描你的目录上传你的相册。现在已经懒得和它们斗智斗用了，流氓软件扔进虚拟机，密钥扔进CanoKey。   </p><p>说说局限<br>1.NFC不太灵<br>2.蓝色的灯光比较刺眼（设置里可以关）<br>3.由于芯片性能原因不能直接在CanoKey里面生成rsa4096（不过可以导入）<br>4.加密算法不开源（不过有子安人格担保）<br>5.这次一个Yubikey的价格没法买5个CanoKey了症<br>6.送的type-c转接头短一截看着逼死强迫</p><p><img src="/canokey-pigeon-unboxing/canokey5.webp"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnplbml0aGFsLm1lLzIwMjEvMDIvMTUvQW50LURlc2lnbi1HaXRIdWItMkZBLXVuYXZhaWxhYmxlLWluLUNoaW5hLw==">从Ant Design GitHub失窃案谈开去：国内有可用的2FA吗<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMVBQNmFrU3RMX3hIVFk2OHpETW1LYkpyQnFRaE4zRkU5TXdMRG9NR3hiYXMvZWRpdCNnaWQ9MA==">Comparison of security keys<i class="fa fa-external-link-alt"></i></span> 群友整理的关于隔壁各家类似产品的功能对比<br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNhbm9rZXlzLm9yZy8=">CanoKeys官方文档<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyZHVoL1l1YmlLZXktR3VpZGU=">YubiKey Guide<i class="fa fa-external-link-alt"></i></span> CanoKey的资料比较少，一些用法可以参考yubikey<br><span class="exturl" data-url="aHR0cHM6Ly9pYW10d3ouZ2l0Ym9va3MuaW8veXViaWtleS1oYW5kYm9vay1jaGluZXNlLw==">YubiKey 使用手册<i class="fa fa-external-link-alt"></i></span> 中文资料<br><span class="exturl" data-url="aHR0cHM6Ly9ud24ubW9lL3Bvc3RzL3l1YmlrZXktZXhhbXBsZXM=">应用 Yubikey 的N种方法<i class="fa fa-external-link-alt"></i></span>   </p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FnaGVyemFuL3l1YmlrZXktZnVsbC1kaXNrLWVuY3J5cHRpb24=">yubikey full disk encryption<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ud24ubW9lL3Bvc3RzL2J0cmZzLW9uLWx1a3Mv">让系统更安全 - 系统分区加密 (Btrfs on LUKS) 操作实录<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTI1ODYyMTU4">Unlocking LUKS2 Volumes with TPM2, FIDO2, PKCS#11 Security HW on Systemd 248<i class="fa fa-external-link-alt"></i></span>  如果只是想电脑被偷之后，不让普通小偷/电脑城修电脑的/脚本小子看你的数据，用tpm2加密home分区增加的破解成本差不多能够保护你不太之前的数据了。  </p><p><span class="exturl" data-url="aHR0cHM6Ly9mbHloaWdoZXIudG9wL2RldmVsb3AvMjE2MC5odG1s">谈谈 WebAuthn<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93ZWJhdXRobi5tZS8=">webauth.me<i class="fa fa-external-link-alt"></i></span> 用于测试webauthn的网站    </p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFwZXJrZXk=">Paperkey Archwiki<i class="fa fa-external-link-alt"></i></span> paperkey用来减少密钥长度方便抄下来<br><span class="exturl" data-url="aHR0cHM6Ly91bHljLmdpdGh1Yi5pby8yMDIxLzAxLzEzLzIwMjElRTUlQjklQjQtJUU3JTk0JUE4JUU2JTlCJUI0JUU3JThFJUIwJUU0JUJCJUEzJUU3JTlBJTg0JUU2JTk2JUI5JUU2JUIzJTk1JUU0JUJEJUJGJUU3JTk0JUE4UEdQLSVFNCVCOCU4QS8=">2021年，用更现代的方法使用PGP（上）<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly91bHljLmdpdGh1Yi5pby8yMDIxLzAxLzE4LzIwMjElRTUlQjklQjQtJUU3JTk0JUE4JUU2JTlCJUI0JUU3JThFJUIwJUU0JUJCJUEzJUU3JTlBJTg0JUU2JTk2JUI5JUU2JUIzJTk1JUU0JUJEJUJGJUU3JTk0JUE4UEdQLSVFNCVCOCVBRC8=">2021年，用更现代的方法使用PGP（中）<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly91bHljLmdpdGh1Yi5pby8yMDIxLzAxLzI2LzIwMjElRTUlQjklQjQtJUU3JTk0JUE4JUU2JTlCJUI0JUU3JThFJUIwJUU0JUJCJUEzJUU3JTlBJTg0JUU2JTk2JUI5JUU2JUIzJTk1JUU0JUJEJUJGJUU3JTk0JUE4UEdQLSVFNCVCOCU4Qi8=">2021年，用更现代的方法使用PGP（下）<i class="fa fa-external-link-alt"></i></span>  </p><p>目前Pigeon暂时卖完了，你可以自己去嘉立创整一个stm32版本的</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nhbm9rZXlzL2Nhbm9rZXktc3RtMzI=">Canokey-stm32<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9sY2VkYS5jbi96NHl4L25mYy1wb3dlci10ZXN0">Canokey-NFC-A<i class="fa fa-external-link-alt"></i></span>   </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;迟来的开箱，本来以为快递1号当天能到的，结果晚了一点。不管怎么说，元旦快落！&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="canokey" scheme="https://zhangjk98.xyz/tags/canokey/"/>
    
  </entry>
  
  <entry>
    <title>文件系统的Reflink（Reflink、hardlink、symlink的区别）</title>
    <link href="https://zhangjk98.xyz/reflink-hardlink-symlink/"/>
    <id>https://zhangjk98.xyz/reflink-hardlink-symlink/</id>
    <published>2021-12-19T05:24:54.000Z</published>
    <updated>2021-12-19T05:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>reflink暂且翻译成引用链接吧，新版coreutils的cp和mv的默认行为就是reflink（如果文件系统支持）</p><span id="more"></span><h2 id="Reflink"><a href="#Reflink" class="headerlink" title="Reflink"></a>Reflink</h2><p>如果你的coreutils&gt;9.0，而且装的是Btrfs或XFS等支持Reflink的文件系统，那么<code>cp</code>和<code>mv</code>的默认行为是使用reflink(mv应该是在不同子卷之间，when moving files across BTRFS subvols)，<code>cp --reflink=auto</code></p><p>最早是从Btrfs听说的reflink,以为这就是一个COW，后来发现它并不一定需要COW，而是和de-duplication（重复数据删除）有关。</p><h2 id="整理碎片对reflink的影响"><a href="#整理碎片对reflink的影响" class="headerlink" title="整理碎片对reflink的影响"></a>整理碎片对reflink的影响</h2><p>以Btrfs为例，defragment会打断reflink，于是你做完defrag以后会发现占用空间可能大了好多。不过像Btrfs之类的文件系统几乎都跑在SSD上，整理碎片不仅不会像机械那样提升性能，而且会增加写入。所以直接不整理碎片就好了。</p><h2 id="硬链接和软链接和Reflink的区别"><a href="#硬链接和软链接和Reflink的区别" class="headerlink" title="硬链接和软链接和Reflink的区别"></a>硬链接和软链接和Reflink的区别</h2><p>这两个东西的区别基本上网上都说烂了。这里再简单说一下。</p><p>硬链接（hardlink）的inode号和原来的一样</p><p>但是hardlink和symlink有一些问题，创建的时候很开心，修改和删除就比较麻烦。</p><h2 id="Reflink这个东西有啥用"><a href="#Reflink这个东西有啥用" class="headerlink" title="Reflink这个东西有啥用"></a>Reflink这个东西有啥用</h2><p>1.加快复制和移动速度<br>2.节省空间</p><p>比如wine的reflink补丁。比如你steam开proton下了很多游戏，你会发现<code>.local/share/Steam</code>下面每个游戏的目录都有一堆相同的ddl。reflink的补丁可以有效减小Wine应用的体积，很多重复的ddl文件都会以reflink的方式复制。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PVJlZmxpbmstRm9yLVdpbmUtUGF0Y2hlcw==">Proposed Reflink Support Would Provide Big Space Savings For Wine<i class="fa fa-external-link-alt"></i></span>， <span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PVdpbmUtUmVmbGluay1SZXZpc2Vk">Wine Reflink Support Continues To Be Worked On For Significant Space Savings<i class="fa fa-external-link-alt"></i></span>  </p><p>坏消息这玩意暂时不支持ext4，好消息Steam Deck将采用Btrfs。对于不支持的文件系统，可以通过OVerlayfs实现，不过好像没多少人这么干（Overlayfs这个名字你也在Docker那里听说过对罢？坑也不少）</p><p>那wine为什么不用符号链接呢？看起来这种情况下用symlink不是也挺合适的？</p><blockquote><p>Because most of the file WINE is running didn’t have symlink support in mind.They assumes that the open give them the file, not a symlink.After opening the file, they would just update it without replacing that symlink with an actual file.</p></blockquote><p>另一个麻烦的问题是相当多的游戏反作弊软件，他们在检查的时候不认符号链接。于是就认为你这ddl有问题，然后就封号了。用reflink就比较好解决了，在Wine应用和你看来是感觉不到链接存在的，reflink看起来就像是正常的文件一样；而symlink看起来就是一个link，如果Wine应用和外挂检测不去处理他会出问题。举一个不恰当的例子，reflink就像透明代理一样，用户和软件感觉不到它的存在。</p><p>要不我们叫它透明链接算了（逃</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5vcmFjbGUuY29tL2xpbnV4L3Bvc3QveGZzLWRhdGEtYmxvY2stc2hhcmluZy1yZWZsaW5r">https://blogs.oracle.com/linux/post/xfs-data-block-sharing-reflink<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9idHJmcy53aWtpLmtlcm5lbC5vcmcvaW5kZXgucGhwL0RlZHVwbGljYXRpb24=">Deduplication Btrfs Wiki<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY3J1Y2lhbC5jb20vYXJ0aWNsZXMvYWJvdXQtc3NkL3Nob3VsZC15b3UtZGVmcmFnLWFuLXNzZA==">Should You Defrag an SSD? <i class="fa fa-external-link-alt"></i></span> </p><p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9pb2N0bF9maWNsb25lLjIuaHRtbA==">https://man7.org/linux/man-pages/man2/ioctl_ficlone.2.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzMzMTgwOC8=">https://lwn.net/Articles/331808/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;reflink暂且翻译成引用链接吧，新版coreutils的cp和mv的默认行为就是reflink（如果文件系统支持）&lt;/p&gt;</summary>
    
    
    
    
    <category term="fs" scheme="https://zhangjk98.xyz/tags/fs/"/>
    
    <category term="reflink" scheme="https://zhangjk98.xyz/tags/reflink/"/>
    
  </entry>
  
  <entry>
    <title>现代文件系统笔记，顺便说说Btrfs</title>
    <link href="https://zhangjk98.xyz/filesystem-note-btrfs-introduction/"/>
    <id>https://zhangjk98.xyz/filesystem-note-btrfs-introduction/</id>
    <published>2021-12-17T14:34:07.318Z</published>
    <updated>2021-12-17T14:34:07.318Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.xkcd.com/comics/dark_arts.png"><br>之前做6.s081的lab的时候照猫画虎写了一个类似ext2的超简陋的文件系统，自己用了有将近一年的Btrfs，一直想写点什么。然而之前看OS的书和做Lab都是</p><span id="more"></span><h2 id="从简单的文件系统说起"><a href="#从简单的文件系统说起" class="headerlink" title="从简单的文件系统说起"></a>从简单的文件系统说起</h2><p>我们先不管日志、快照、原子性、加密这些功能。也暂时先不看类似9p那种分布式文件系统。<br>磁盘被划分成很多块（block），我们拿出来一些块放用户数据（data region），为了记录文件的</p><h2 id="现代文件系统"><a href="#现代文件系统" class="headerlink" title="现代文件系统"></a>现代文件系统</h2><blockquote><p>如果reiserfs没有因为作者杀妻进去<br>如果SUN没有被Oracle收购，ZFS没那些版权问题</p></blockquote><h3 id="Reference-Link"><a href="#Reference-Link" class="headerlink" title="Reference Link"></a>Reference Link</h3><h2 id="说说Btrfs"><a href="#说说Btrfs" class="headerlink" title="说说Btrfs"></a>说说Btrfs</h2><p>Btrfs推出也很久了，最初是打算取代ext3/ext4地位做默认的新一代文件系统的。当然，Btrfs已经十几年了，进入Linux内核主线都8年了，大家也看到了。。。</p><p>最近的Linux内核每次更新几乎都有Btrfs的内容，而且在phoronix之类的地方讨论总是很热烈</p><p><a href="https://www.phoronix.com/forums/forum/software/general-linux-open-source/1276327-btrfs-adds-degenerate-raid-support-performance-improvements-with-linux-5-15"></a><br><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PUZlZG9yYTMzLURlc2t0b3AtQnRyZnMtUHJvcG9zYWw=">There’s A Proposal To Switch Fedora 33 On The Desktop To Using Btrfs<i class="fa fa-external-link-alt"></i></span>  </p><p>这话怎么听着这么耳熟，隔壁Wayland是不是好多年前也说过要*&amp;&amp;%&amp;<em>￥%</em>&amp;……，真是不巧我还在用x11呢。。。</p><p>现在在用Btrfs的大概也就Facebook，群晖，默认用Btrfs的发行版几乎就openSUSE，然后去年好像Fedora也把Btrfs作为默认了（可能）。</p><h3 id="关于Btrfs性能不好"><a href="#关于Btrfs性能不好" class="headerlink" title="关于Btrfs性能不好"></a>关于Btrfs性能不好</h3><p>Btrfs性能不好的说法主要来源于跑分跑不过ext4等等。跑分这种事情很多时候也就图一乐，以下引用fc老师的话</p><blockquote><p>phoronix 測文件系統性能的最大問題在於容易讓讀者以為文件系統是左右存儲性能的關鍵，實際上文件系統只是夾在內存子系統和塊IO子系統中間的決策層，通常瓶頸不會在文件系統，除非文件系統過度簡化設計，對存儲性能影響更大的是別的層面的東西，按他們的方式測試文件系統只能測出一堆難以預計到的副作用的結果，沒法對文件系統優化提供可供參考的提示</p></blockquote><blockquote><p>要測純讀寫做對比肯定不考慮 reflink 和透明壓縮，但是實際幹活的時候這些新特性很節省時間（</p></blockquote><p>当然Btrfs在重io的情况下桌面特别卡，那很有可能是quota的问题，把quota关掉吧，quota有已知的性能问题，尤其是在ssd上。（关了这个磁盘配额你就看不到快照大小、指定不了每个子卷的大小）</p><h3 id="Copy-on-Write写时复制"><a href="#Copy-on-Write写时复制" class="headerlink" title="Copy-on-Write写时复制"></a>Copy-on-Write写时复制</h3><p>写时复制（COW）原理看起来好像很简单，但是实现起来一堆坑。我做6.S081的Lab的时候折腾COW快把我整麻了，从Lab4以后每次做完Lab之后不想写博客总结了，做完之后思绪混乱，没什么心情写笔记。</p><h4 id="给数据库所在的目录关闭COW"><a href="#给数据库所在的目录关闭COW" class="headerlink" title="给数据库所在的目录关闭COW"></a>给数据库所在的目录关闭COW</h4><p>SSD会有写入放大的问题，这个现象在Btrfs上尤其严重。<br>不想和Btrfs和数据库斗智斗勇可以选择别的文件系统。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>如果用不到现代文件系统的那些功能，对于大多数用户直接去用ext4可能是一个更好的选择。然后忘了文件系统这回事吧，就像开头xkcd的漫画说的那样：<code>BUT I NOW </code></p><h3 id="都要2022年了，Btrfs稳定了吗"><a href="#都要2022年了，Btrfs稳定了吗" class="headerlink" title="都要2022年了，Btrfs稳定了吗"></a>都要2022年了，Btrfs稳定了吗</h3><p>无可奉告。<br>平时用倒是能用，不过真出了问题</p><h3 id="Btrfs挂了要怎么修"><a href="#Btrfs挂了要怎么修" class="headerlink" title="Btrfs挂了要怎么修"></a>Btrfs挂了要怎么修</h3><p><del>去群里找fc老师</del></p><p>做好备份，真挂了把备份找回来。大多数修复软件几乎都不怎么支持Btrfs，你去电脑城找做修复的师傅人家也不会，自求多福吧。</p><h3 id="RAID、子卷、分区问题"><a href="#RAID、子卷、分区问题" class="headerlink" title="RAID、子卷、分区问题"></a>RAID、子卷、分区问题</h3><p>之前用ext4等文件系统很多都习惯<code>/</code>，<code>/home</code>, <code>/var</code><br>Btrfs一般不分那么多区，而是用子卷。</p><p>一般对<code>var</code>这样的目录单独建一个子卷，然后禁用COW</p><p>Btrfs可以直接添加、删除设备、调整大小（增加和缩小都行，XFS暂时还不支持缩）</p><h3 id="snapshot"><a href="#snapshot" class="headerlink" title="snapshot"></a>snapshot</h3><h4 id="要怎么查看snapshot的大小"><a href="#要怎么查看snapshot的大小" class="headerlink" title="要怎么查看snapshot的大小"></a>要怎么查看snapshot的大小</h4><p>查看snapshot大小需要打开quota，但是打开quota可能会有性能问题。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzE3MDcuMDg1MTQucGRm">Analyzing IO Amplification in Linux File Systems<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzYzODU0Ni8=">XFS: There and back … and there again?<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9mYXJzZWVyZmMubWUvemhzL2J0cmZzLXZzLXpmcy1kaWZmZXJlbmNlLWluLWltcGxlbWVudGluZy1zbmFwc2hvdHMuaHRtbA==">Btrfs vs ZFS 实现 snapshot 的差异<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9oYWJyLmNvbS9ydS9wb3N0LzQ3NjQxNC8=">Выявляем процессы с дисковой активностью в Linux<i class="fa fa-external-link-alt"></i></span>  一篇俄文的Write Amplification讨论  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/dark_arts.png&quot;&gt;&lt;br&gt;之前做6.s081的lab的时候照猫画虎写了一个类似ext2的超简陋的文件系统，自己用了有将近一年的Btrfs，一直想写点什么。然而之前看OS的书和做Lab都是&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="btrfs" scheme="https://zhangjk98.xyz/tags/btrfs/"/>
    
    <category term="fs" scheme="https://zhangjk98.xyz/tags/fs/"/>
    
  </entry>
  
  <entry>
    <title>Linux from Scratch 编译笔记</title>
    <link href="https://zhangjk98.xyz/build-linux-from-scratch/"/>
    <id>https://zhangjk98.xyz/build-linux-from-scratch/</id>
    <published>2021-11-29T11:55:37.000Z</published>
    <updated>2021-11-29T11:55:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>久闻大名，然而真的编译了几圈下来，和想象中的不太一样。照着手册一步一步来并不难，但是特别繁琐。其实我更建议去看一看Alpine等更精简的Linux的构建过程。哦，对了，我等编译的时候通关了蔚蓝a面</p><span id="more"></span><p>LFS的主要目的是教你打造一个你自己的发行版，所以它特别繁琐。如果你想自己做一个优麒麟去骗钱那不妨看看。如果想了解一下Linux的依赖和编译过程，想看看一个特别精简版的Linux长什么样子，<strong>请试试Alpine而不是LFS</strong></p><p><strong>感觉Alpine更适合作为一个 玩具来学习，而LFS更适合作为正经用途。</strong> 大家不知为何都反着来。</p><p>推荐阅读：<span class="exturl" data-url="aHR0cHM6Ly90dHlzMy5kZXYvcG9zdC9kby1ub3QtdXNlLWFscGluZS1pbi1wcm9kdWN0aW9uLWVudmlyb25tZW50Lw==">不要在生产环境中使用alpine基础镜像 – 容器基础镜像的选择<i class="fa fa-external-link-alt"></i></span></p><p>之前觉得就是一个安装超麻烦版的Arch/Gentoo，就没试过。最近终于试了一下，学到的东西倒不是很多，没有当时第一次完整安装Arch时的收获大。</p><p>这个东西告诉你linux里面glibc之类的依赖关系是什么样的。这个东西就像单片机最小系统一样，告诉你。你可以从头开始看一看系统是怎么从源码构建的，glibc那一堆依赖又是怎么鸡生蛋、蛋生鸡的。推荐想了解系统构建依赖的Linux用户看一看这个东西。</p><p>闲着没事的人最适合玩一玩这个了，不过不太推荐日常使用。虽然还是是有一些人真的把这个当日用主力的，比如fcitx输入法初代目鱼王（Yuking）就是在LFS上面写了早期的fcitx输入法。<br>LFS is free if your time is free.     </p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先去找一个好一点的机器用来编译。你要有一个宿主机，一般用Ubuntu 20的比较多一点，我用的Arch, 暂时没遇到什么大问题。</p><p>然后下载LFS的手册和源码，我用的是最新的r11.0-92这个版本：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXhmcm9tc2NyYXRjaC5vcmcvbGZzL2Rvd25sb2Fkcy9kZXZlbG9wbWVudC8=">https://www.linuxfromscratch.org/lfs/downloads/development/<i class="fa fa-external-link-alt"></i></span></p><p>手册说的wget-list没有说在哪，wget-list 可以用香港的镜像： <span class="exturl" data-url="aHR0cHM6Ly9sZnMtaGsua29kZG9zLm5ldC9sZnMvdmlldy9yMTEuMC05Mi93Z2V0LWxpc3Q=">https://lfs-hk.koddos.net/lfs/view/r11.0-92/wget-list<i class="fa fa-external-link-alt"></i></span></p><p>如果想稳一点可以用stable版本，喜欢systemd可以用systemd版本（最近对systemd全家桶有点怨念，就不上systemd了）。</p><h2 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h2><p>这里面绝大部分编译都是make那一套流程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="个人的改动"><a href="#个人的改动" class="headerlink" title="个人的改动"></a>个人的改动</h2><p>其实不太建议第一次就用dev版本还加上一大堆自己的改动。我自己乱改，前面几次都没有开机成功，反复编译了四五次才成功开机。</p><h3 id="我和手册有些出入的地方"><a href="#我和手册有些出入的地方" class="headerlink" title="我和手册有些出入的地方"></a>我和手册有些出入的地方</h3><p>手册里面要求使用bash，我在宿主机一直都用的zsh，好在没出什么大问题（主要是想接着用我习惯的那几个插件和语法，反正这个东西兼容sh，问题不大）（<strong>不要学我，坑特别多</strong>）</p><p>chroot之后用的是bash，然而看到那个没有自动补全和色彩高亮的bash, 我不能接受，于是配了半天的</p><p>分区我只分了一个100G的<code>/</code>分区，swap和boot都是和Arch共用的。（我懒）</p><h3 id="一些手册上有但我没编译和安装的东西"><a href="#一些手册上有但我没编译和安装的东西" class="headerlink" title="一些手册上有但我没编译和安装的东西"></a>一些手册上有但我没编译和安装的东西</h3><p>现在看文档基本都在浏览器上面搜了，很少看本地目录的文档，那些doc之类的东西我基本上都没装。没用默认的vim，参考BLFS的手册装了一个我习惯的neovim</p><p>Meson这个包编译报错了，这个是systemd和BLFS需要的，我就没管</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>lfs <span class="token function">chroot</span><span class="token punctuation">)</span> root:/sources/meson-0.60.2<span class="token comment"># python3 setup.py build</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"/sources/meson-0.60.2/setup.py"</span>, line <span class="token number">23</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from setuptools <span class="token function">import</span> setup  File <span class="token string">"/usr/lib/python3.10/site-packages/setuptools/__init__.py"</span>, line <span class="token number">18</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from setuptools.dist <span class="token function">import</span> Distribution  File <span class="token string">"/usr/lib/python3.10/site-packages/setuptools/dist.py"</span>, line <span class="token number">38</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from setuptools <span class="token function">import</span> windows_support  File <span class="token string">"/usr/lib/python3.10/site-packages/setuptools/windows_support.py"</span>, line <span class="token number">2</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token function">import</span> ctypes  File <span class="token string">"/usr/lib/python3.10/ctypes/__init__.py"</span>, line <span class="token number">8</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from _ctypes <span class="token function">import</span> Union, Structure, ArrayModuleNotFoundError: No module named '_ctypes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加快速度"><a href="#加快速度" class="headerlink" title="加快速度"></a>加快速度</h2><h3 id="多核编译"><a href="#多核编译" class="headerlink" title="多核编译"></a>多核编译</h3><p>通常可以直接拉满，比如我的宿主机最多能<code>-j20</code> 那就<code>export MAKEFLAGS=&#39;-j20&#39; </code>。<br>需要注意的是有的时候必须用<code>-j1</code>参数，比如编译<code>binutils</code></p><h3 id="多核压缩解压"><a href="#多核压缩解压" class="headerlink" title="多核压缩解压"></a>多核压缩解压</h3><p>xz压缩格式，使用最新版的tar看起来默认就是多核的。加上参数之后<code>XZ_OPT=&#39;-T0&#39; tar -xf linux-5.15.2.tar.xz</code>和直接<code>tar -xf linux-5.15.2.tar.xz</code>没有区别。<br>有几个gz后缀的使用<code>pizg</code>应该会快一点，但是这几个文件太小了，几乎没区别。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>第七章结尾会教你<code>tar -cJpf $HOME/lfs-temp-tools-r11.0.92.tar.xz .</code>进行备份，这个备份速度很慢，比上面那些解压慢不少。</p><p>我推荐使用Btrfs snapshot，在每次重要的make都建立一个snapshot，这样不用从头开始，而且备份和恢复的速度也很快。</p><h2 id="其他的一些小问题"><a href="#其他的一些小问题" class="headerlink" title="其他的一些小问题"></a>其他的一些小问题</h2><h3 id="i和l"><a href="#i和l" class="headerlink" title="i和l"></a>i和l</h3><p><code>Iana-etc</code>这里是大写的<code>i</code>，不是小写的<code>L</code>，另一个叫<code>Inetutils</code>的也是。</p><h3 id="chroot的时候PTY-allocation-request-failed"><a href="#chroot的时候PTY-allocation-request-failed" class="headerlink" title="chroot的时候PTY allocation request failed"></a>chroot的时候PTY allocation request failed</h3><p>我是ssh连的另一台电脑编译的（本地和远程都是Arch），结果有一天突然<code>PTY allocation request failed</code></p><p>我以为是chroot或者ssh的问题，穷尽毕生所学调试了半个小时，<strong>结果发现是那台服务器的校园网账户欠费了</strong>。</p><h3 id="一些编译报错"><a href="#一些编译报错" class="headerlink" title="一些编译报错"></a>一些编译报错</h3><p>编译findutils报错，但是装上去能用。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token file-path string">/sources/findutils-4.8.0/find/pred.c</span><span class="token operator">:</span><span class="token number">751</span><span class="token operator">:</span> undefined reference to `rpl_fnmatch'<span class="token file-path string">/usr/bin/ld</span><span class="token operator">:</span> libfindtools<span class="token punctuation">.</span>a<span class="token operator">(</span>pred<span class="token punctuation">.</span>o<span class="token operator">)</span><span class="token operator">:</span><span class="token file-path string">/sources/findutils-4.8.0/find/pred.c</span><span class="token operator">:</span><span class="token number">1180</span><span class="token operator">:</span> more undefined references to `rpl_fnmatch' follow<span class="token property">collect2:</span> <span class="token property">error:</span> ld returned <span class="token number">1</span> exit status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译gzip时报错：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">In file included from <span class="token file-path string">./lib/getopt.h</span><span class="token operator">:</span><span class="token number">84</span><span class="token punctuation">,</span>                 from gzip<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">77</span><span class="token operator">:</span><span class="token file-path string">./lib/getopt-cdefs.h</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span> error<span class="token operator">:</span> <span class="token operator">#</span>if with no expression   <span class="token number">31</span> <span class="token operator">|</span> <span class="token operator">#</span>if      <span class="token operator">|</span>     <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>make clean</code>后错误消失。</p><p><code>make check</code>失败一项：<code>FAIL: help-version</code>，这个影响不大，忽略。</p><p>在编译Patch的时候发生了同样的报错，重新编译后成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">In <span class="token function">file</span> included from <span class="token punctuation">..</span>/lib/getopt.h:84,                 from patch.c:27:<span class="token punctuation">..</span>/lib/getopt-cdefs.h:32:5: error: <span class="token comment">#if with no expression</span>   <span class="token number">32</span> <span class="token operator">|</span> <span class="token comment">#if</span>      <span class="token operator">|</span>     ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怀疑是多线程编译的问题，采用<code>make -j1</code>和<code>make -j20</code>分别编译了10次，发现这个问题确实是在<code>-j20</code>多线程编译时才会发生。</p><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>接下来就是重头戏编译内核了。编译内核这个gentoo用户应该很熟悉了。可以自己选择编译参数，没有什么特殊喜好就默认吧。</p><p><img src="/build-linux-from-scratch/image-20211204142505342.png" alt="image-20211204142505342"></p><p>编译速度比想象中的快，我从下午2:49编译到3:17，大概半个小时左右。</p><p>魔改编译参数请量力而行。我前面几次都自己改了很多参数，编译虽然没报错，但是启动的时候CapsLock和ScrollLock同时闪烁，只能重新编译。</p><h3 id="编译时make-clean和make-mrproper的区别"><a href="#编译时make-clean和make-mrproper的区别" class="headerlink" title="编译时make clean和make mrproper的区别"></a>编译时make clean和make mrproper的区别</h3><p><code>make mrproper</code>相比<code>make clean</code>多删除了config文件。</p><h3 id="启动引导设置"><a href="#启动引导设置" class="headerlink" title="启动引导设置"></a>启动引导设置</h3><p><strong>设置Grub的时候记得备份你宿主机的grub！</strong></p><p>本来我是想用Arch的<code>os-prober</code>自动识别<code>grub-mkconfig -o /boot/grub/grub.cfg</code>，但是不行。这样会识别成<code>Arch Linux， with Linux 5.15.2.-lfs-r11.0.92</code></p><p>在Archlinux宿主机中编辑Grub，加上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">menuentry <span class="token string">"GNU/Linux, Linux 5.15.2-lfs-r11.0-92"</span> <span class="token punctuation">&#123;</span>linux /boot/vmlinuz-5.15.2-lfs-r11.0-92 <span class="token assign-left variable">root</span><span class="token operator">=</span>/dev/sda2 ro<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fly-Bitch！"><a href="#Fly-Bitch！" class="headerlink" title="Fly Bitch！"></a>Fly Bitch！</h2><p>到这里我已经累了，BLFS已经不打算再弄了，没啥意思。Nvidia驱动，折腾了好几次，想用dkms装驱动结果都失败了。最后我把Nvidia独显拆了，整个世界都美好了。<br>试图整个KDE桌面上去，结果一堆依赖没成功，结果发现最容易的反而是dwm。。。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>终于记住了tar命令解压时候哪个参数是压缩哪个是解压。<br>不过sed还是不太会用，已经被sd惯坏了。<br>发现了starship这个不错的prompt，bash上很舒服，体验接近powerlevel10k。<br>LFS的企鹅LOGO真的好丑啊，见过的最丑的企鹅。<br>bash里<code>+h</code>关闭hash查找。这个参数的意思是不使用当前hash表里面存放的路径，精确的使用现在给出的路径。使用<code>set +h</code>关闭hash，使用<code>set -h</code>启用hash。（我总觉得<code>+h</code>才是开启hash, 真是令人迷惑）  </p><p>断断续续折腾了四五天，等编译期的间隙里蔚蓝从3a跳到了到7a登顶。</p><h2 id="编译时无聊发现的其他东西"><a href="#编译时无聊发现的其他东西" class="headerlink" title="编译时无聊发现的其他东西"></a>编译时无聊发现的其他东西</h2><p>这几天在等编译的时候闲着没事发现了其他一些有意思的东西。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Rjam9uZXMvbWs=">https://github.com/dcjones/mk<i class="fa fa-external-link-alt"></i></span> plan9的mk</p><h3 id="bash和zsh的环境变量是怎么传递和继承的"><a href="#bash和zsh的环境变量是怎么传递和继承的" class="headerlink" title="bash和zsh的环境变量是怎么传递和继承的"></a>bash和zsh的环境变量是怎么传递和继承的</h3><p>login shell 和 nonlongin shell的读取环境变量方式不太一样</p><h3 id="zsh里面的‘-’命令是干什么的"><a href="#zsh里面的‘-’命令是干什么的" class="headerlink" title="zsh里面的‘-’命令是干什么的"></a>zsh里面的‘-’命令是干什么的</h3><p><span class="exturl" data-url="aHR0cHM6Ly96c2guc291cmNlZm9yZ2UuaW8vRG9jL1JlbGVhc2UvU2hlbGwtR3JhbW1hci5odG1sI1ByZWNvbW1hbmQtTW9kaWZpZXJz">zsh的文档<i class="fa fa-external-link-alt"></i></span>是这样说的：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">- The command is executed with a ‘-’ prepended to its argv[0] string.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看起来似乎它会在<code>argv[0]</code>前面加上一个<code>-</code>，可是这有什么用？</p><p>argv[0]你可以当作<span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9leGVjdmUuMi5odG1s">execve<i class="fa fa-external-link-alt"></i></span>的第一个变量，通常是<code>\bin\bash</code>这样的可执行路径。</p><p>再看一下exec这个命令，参数<code>-l</code>的效果和zsh里面的<code>-</code>是一致的</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">exec [ -cl ] [ -a argv0 ]    The following command together with any arguments is run in place of the current process, rather than as a sub-process. The shell does not fork and is replaced. The shell does not invoke TRAPEXIT, nor does it source zlogout files. The options are provided for compatibility with other shells.    The -c option clears the environment.    The -l option is equivalent to the - precommand modifier, to treat the replacement command as a login shell; the command is executed with a - prepended to its argv[0] string. This flag has no effect if used together with the -a option.    The -a option is used to specify explicitly the argv[0] string (the name of the command as seen by the process itself) to be used by the replacement command and is directly equivalent to setting a value for the ARGV0 environment variable. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哦，就是把当前shell视为login shell，试了一下看起来的确是这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token builtin class-name">echo</span> <span class="token variable">$0</span>/bin/zsh❯ - <span class="token builtin class-name">echo</span> <span class="token variable">$0</span>/bin/zsh❯ - <span class="token function">zsh</span>❯ <span class="token builtin class-name">echo</span> <span class="token variable">$0</span>-zsh❯ <span class="token builtin class-name">exit</span>❯ <span class="token function">zsh</span>❯ <span class="token builtin class-name">echo</span> <span class="token variable">$0</span><span class="token function">zsh</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTI4ODIwNjAy">Linux from Scratch with Training Wheels<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hbHBpbmVsaW51eC5vcmcv">Alpine<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NjAxMi93aGF0LWlzLXRoZS1wdXJwb3NlLW9mLXRoZS1oYXNoLWNvbW1hbmQ=">What is the purpose of the hash command?<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;久闻大名，然而真的编译了几圈下来，和想象中的不太一样。照着手册一步一步来并不难，但是特别繁琐。其实我更建议去看一看Alpine等更精简的Linux的构建过程。哦，对了，我等编译的时候通关了蔚蓝a面&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="LFS" scheme="https://zhangjk98.xyz/tags/LFS/"/>
    
  </entry>
  
  <entry>
    <title>从KDE迁移到i3，顺便说说Linux桌面(DE)和窗口管理器（WM）</title>
    <link href="https://zhangjk98.xyz/migrating-from-kde-to-i3/"/>
    <id>https://zhangjk98.xyz/migrating-from-kde-to-i3/</id>
    <published>2021-11-13T14:25:47.000Z</published>
    <updated>2021-11-13T14:25:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>逐渐开始认同Keep it Simple, Stupid</p><span id="more"></span><p>前一阵不是KDE 25周年吗，然后KDE推出了25周年纪念版，从这开始的几个版本，小问题不断。迫害GNOME是KDE群友的传统艺能，然而，最近似乎KDE用户受到的迫害比GNOME还多。KDE怎么会变成了这个样子？ 于是决定从KDE先迁移到i3之类的wm去。（当然，最主要的原因是我逐渐不需要一个完整DE的那么功能了）</p><h2 id="从KDE说起"><a href="#从KDE说起" class="headerlink" title="从KDE说起"></a>从KDE说起</h2><p>KDE一度是我最看好的Linux桌面，功能该有的都有，当时也比较稳定，那时我觉得最近3年应该不用换到其他的桌面去了。<br>KDE为什么是神，首先，要从Konqueror和KHTML的荣光说起…<br>KDE4时代虽然好看，但是因为不稳定而饱受诟病。自从KDE5以来，KDE也稳定了,<br>直到，KDE 25周年特供版……每次更新总有一些新问题，又开始不稳定了…..</p><h3 id="防火防盗防抄袭的配置文件"><a href="#防火防盗防抄袭的配置文件" class="headerlink" title="防火防盗防抄袭的配置文件"></a>防火防盗防抄袭的配置文件</h3><p>想抄一下我的KDE的桌面设置？不好意思KDE的设置我自己也不知道它给我保存到哪里去了。</p><p>KDE的配置文件在<code>config</code>里面扔的到处都是，实乃居家旅行防偷配置利器。</p><p><code>.config</code>目录下面有一个有一个小写的<code>kde</code>目录，还有一个大写的<code>KDE</code>目录,还有一个<code>kde.org</code>目录，下面有<code>systemsettings.conf</code>和<code>plasmashell.conf</code>这样的配置文件。如果你是祖传home目录，那八成还有个<code>kde4</code>。如果你是比较新的用户，你会开心的发现<code>~/.config</code>下面没有<code>kde4</code>，是的，他跑到<code>~/.kde4</code>这来了,<code>~/.kde4/share/config</code>下面有一些kde4的配置。<br>然后，<code>~/.config</code>下面，还有<code>plasmarc</code>，<code>kded5rc</code>，<code>plasmashellrc</code>，<code>kdeglobals</code>，天知道它们有什么区别。<br>然后是一堆散落在<code>.config</code>下面的KDE全家桶应用, 比如<code>kalarmrc</code>。这次看起来挺合理吧，你看别的应用好多不也都把配置文件扔在<code>~/.config</code>下面。</p><p>别急，比如KDE出品的和notepad3、vscode类似的文本编辑器kate，在<code>~/.config</code>下面有<code>katerc</code>, <code>kateschemarc</code>, <code>katevirc</code>等等，跟VSCode一个json文件比起来拆的还是太散了。在比如elisa这个音乐播放器，有一个<code>elisarc</code>，还有一个<code>kde.org/elisa.conf</code>。</p><p>更麻烦的是这些KDE的设置和其他应用都混在一起了。有一天你的配置崩溃了，KDE起不来，你想全部恢复默认设置，又不能直接全删了来恢复默认设置。（比较好的办法是挑出不是KDE的设置或者）。比如<code>trashrc</code>是KDE的配置文件，它看起来跟KDE毫无关系。</p><p>当然有一些第三方工具可以保存KDE的设置，比如<code>konsave</code>，我还给他打过一个AUR包。不过用了两天我立刻发现这并不能解决问题，我想抄别人的配置去改一改还是要打开KDE系统设置的图形界面。某一部分微小的改动，我还是要从茫茫的配置文件里面找到它们，KDE官方有没有说明，结果就是改起配置文件比手动在设置里面调整慢。</p><p>当然KDE有一个kcmshell5的命令工具可以在命令行配置，不过我想正常人没有用这个的。你以为他是命令行工具，实际上你执行他，他给你弹出一个和系统设置一样的图形界面。</p><p>估计KDE也没想让你使用<code>dotfiles</code>或者直接编辑配置文件，都给我用鼠标在设置里面点击选择的你设置！</p><h3 id="小而美的Baloo"><a href="#小而美的Baloo" class="headerlink" title="小而美的Baloo"></a>小而美的Baloo</h3><blockquote><p>baloo 是张小龙开发的吗</p></blockquote><p>哎，这index索引文件怎么50多个G？哎，我桌面怎么突然卡死了？哎，我CPU怎么突然100%了？哎，我内存怎么占用飙升？</p><p>Baloo这个用过KDE的应该都有体会，体验大概就是Windows装了个流氓全家桶的感觉。 </p><p>一个索引服务, 磁盘写入远超读取是怎样一种体验？</p><p>我建议每个每个KDE用户装上KDE立刻关闭Baloo，我也建议有良心的KDE发行版在KDE的默认设置里面禁用Baloo</p><pre class="line-numbers language-none"><code class="language-none">balooctl suspendbalooctl disablebalooctl purge #delete the index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你还想要一个搜索工具，推荐rg、fd、fzf。<br>如果你想要一个Baloo那样带索引的，试试plocate</p><h3 id="混成器"><a href="#混成器" class="headerlink" title="混成器"></a>混成器</h3><p>混成器（Compositer）造成了KDE4时代KDE不如GNOME稳定的传说，当时OpenGL导致画质撕裂。据说当时大部分不稳定的锅都是混成器的，KDE其他的部分还是挺稳定的。<br>就在10月份，KDE将Compositer的选项</p><p>Vulkan也不知道要等到什么时候，据说要KDE6了，到时候再试试KDE吧。</p><h2 id="使用平铺wm"><a href="#使用平铺wm" class="headerlink" title="使用平铺wm"></a>使用平铺wm</h2><p>最近一年来我对Desktop Enviroment的需求逐渐降低，很多操作都从鼠标点击过渡到了命令操作。我在KDE桌面上操作窗口也从鼠标点击变成了Win+上下左右平铺、Alt+Tab切换窗口、Win+Tab切换桌面。之前非常喜欢的yakuake也被我用tdrop+alacritty替代了。那些标题栏、桌面小组件、任务栏逐渐开始变得鸡肋，而且我也不想要那么多的桌面过渡特效。为了更好地移动窗口我试过krohnkite（一个模仿dwm操作的脚本）</p><p>在发现自己的需求基本上wm都能满足之后，好像没有什么用DE的必要了。</p><p>平铺的好处是比较充分的铺满整个桌面，而且可以省掉标题栏，对于比较小的笔记本屏幕可以省空间。（笔记本上用wm还比较省电，轻松撑过一整天）</p><p>关于wm的介绍可以看这个视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1BcGk2ZEZNbHhBQQ==">https://www.youtube.com/watch?v=Api6dFMlxAA<i class="fa fa-external-link-alt"></i></span></p><p>dwm是类似栈的操作，而i3wm的窗口是一棵树。不过轻度使用应该区别不大，我几乎只用将屏幕两等分或者四等分、或者竖着三等分。</p><h3 id="真的一定要那么依赖鼠标和GUI吗"><a href="#真的一定要那么依赖鼠标和GUI吗" class="headerlink" title="真的一定要那么依赖鼠标和GUI吗"></a>真的一定要那么依赖鼠标和GUI吗</h3><p>早些时候人们用键盘的快捷键和命令和计算机打交道，鼠标和GUI界面反而是比较后来的事情了。据说微软当年为了让用户习惯鼠标操作，推出了扫雷、空当接龙和蜘蛛纸牌让大家玩</p><p>我从第一次用Windows XP开始就是拿鼠标在图形界面上点点点，在小时候的相当长一段时间内键盘打字都不熟练，后来微机课教的也是Office、Flash、photoshop等拿着鼠标在一堆设置按钮里面选来选取的那种，甚至外的游戏也都是pvz、愤怒的小鸟等鼠标操作居多</p><h3 id="i3的一些问题"><a href="#i3的一些问题" class="headerlink" title="i3的一些问题"></a>i3的一些问题</h3><p>不管是i3还是sway，或者dwm之类的，都对浮动窗口支持很差。其实挺难受的，比如沙拉查词之类的翻译软件或者浏览器小窗播放、又比如输入法那个小菜单栏（虽然现在fcitx5没有浮在外面的菜单栏），不太适合平铺。</p><p>i3的浮动窗口必须置于平铺的下面，挺难受的。</p><p>另外这些平铺桌面</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我装的cn源里面那个功能最多的开发版本，如果没什么特殊需求可以直接装i3wm或者i3-gaps（支持窗口缝隙）</span><span class="token comment"># yay -S i3-gaps</span>yay -S i3-gaps-next-git yay -S picom <span class="token comment"># 用来设置外观、锁屏什么的</span>yay -S lxappearance <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一些fcitx5的configtool、qt界面的设置软件，我用KDE的时候都装过了，这里略过。</p><h3 id="polybar作为状态栏"><a href="#polybar作为状态栏" class="headerlink" title="polybar作为状态栏"></a>polybar作为状态栏</h3><p>polybar比i3bar功能多一点而且好看，但是占用也高</p><p>polybar自己一点一点配置会很麻烦，比较懒的我直接用的这个：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkaTEwOTB4L3BvbHliYXItdGhlbWVz">polybar-themes<i class="fa fa-external-link-alt"></i></span>，一个awesome wm的polybar设置脚本，有相当多的主题可供选择。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --depth<span class="token operator">=</span><span class="token number">1</span> https://github.com/adi1090x/polybar-themes.git<span class="token builtin class-name">cd</span> polybar-themes<span class="token function">chmod</span> +x setup.sh./setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后选一个你喜欢的主题改一改就好了。</p><h3 id="picom配置"><a href="#picom配置" class="headerlink" title="picom配置"></a>picom配置</h3><p>其实我对阴影特效、模糊透明毛玻璃、圆角都没有什么需求。装picom主要是解决一下画面撕裂的问题（毕竟Nvidia f**k you, 混成器不要是不行的）</p><p>picom可选<code>xrender</code>和<code>glx</code>，以及``<br>如果要用自带的毛玻璃效果请使用cn源里的<code>picom-git</code>并开启experimental-backends。然后在i3的<code>config</code>设置里面也加上<code>picom --experimental-backends</code></p><h3 id="i3lock-color锁屏"><a href="#i3lock-color锁屏" class="headerlink" title="i3lock-color锁屏"></a>i3lock-color锁屏</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S i3lock-color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="gtk主题配置"><a href="#gtk主题配置" class="headerlink" title="gtk主题配置"></a>gtk主题配置</h3><p>我用的是capitaine-cursors arc-gtk-theme。这个用lxappearance设置。</p><h3 id="HiDPI配置"><a href="#HiDPI配置" class="headerlink" title="HiDPI配置"></a>HiDPI配置</h3><p>大部分应用在<code>~/.Xresources</code>里面配置一下就可以了。但是polybar、rofi这几个都不吃</p><p>polybar</p><p>config里面</p><pre class="line-numbers language-none"><code class="language-none">dpi &#x3D; $&#123;xrdb:Xft.dpi:-1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rofi需要自己一点一点都调了，字体差不多16px，然后圆角和图标那都调大一点。绝大部分rofi主题都是1080p的，要自己调大小。</p><h2 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h2><blockquote><p>Keep it simple, stupid</p></blockquote><p>现在越来越喜欢简单的东西了</p><blockquote><p>keep it sufficiently sophisticated</p></blockquote><h2 id="其他的选择"><a href="#其他的选择" class="headerlink" title="其他的选择"></a>其他的选择</h2><p>1.Wayland</p><p>I use Nvidia…., so Nvidia f**k</p><p>最近某些媒体宣称KDE+Wayland+Nvidia已经差不多了，然而前几天我试了一下KDE的wayland还是有不少小问题的。暂时没有什么迁移到wayland的动力。而且不少应用在xwayland下面的HiDPI体验不是很好。最重要的是alacritty这个东西，在wayland会卡。而我现在对</p><p>2.Sway</p><p>原因Wayland，我用Nvidia显卡。<br>Sway现在输入法问题基本可以了，剩下的是xwayland在HiDPI有一点不清晰和一部分x的应用我比较习惯所以暂时不打算迁移到wayland</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N3YXl3bS9zd2F5L3B1bGwvNDc0MA==">https://github.com/swaywm/sway/pull/4740<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZjaXR4L2ZjaXR4NS9pc3N1ZXMvMzk=">https://github.com/fcitx/fcitx5/issues/39<i class="fa fa-external-link-alt"></i></span></p><p>3.Wayfire</p><p>Wayland的原因同上。<br>Wayfire主要还是堆叠窗口的操作，特效和流畅程度看宣传和演示视频可能是Wayland里面最棒的一个了，响应丝滑、特效也很棒。<br>不过Wayfire的那些炫酷的桌面效果我不太想用，我自己大概有blur和活动窗口变亮一点就可以了。<br>Wayfire关掉点特效用来做平铺和堆叠的混合桌面应该不错。因为像i3等对堆叠窗口的操作没有那么丰富，比如堆叠窗口只能放在平铺窗口的上面。</p><p>Wayfire目前是0.7版本，最近我看到依云在试水，HiDPI和输入法的问题patch得差不多了，我再等等吧。等1.0正式版，我迁移到Wayland和Wayfire。</p><ol start="4"><li>KDE的平铺选择？</li></ol><p>如果你对平铺操作的要求不太高，那么KDE自带的快捷键差不多就够了，如果要更多功能，推荐<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Jpc211dGgtRm9yZ2UvYmlzbXV0aA==">bismuth<i class="fa fa-external-link-alt"></i></span></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly90Lm1lL0FyY2hDTktERVZTR05PTUU=">迫害GNOME的频道<i class="fa fa-external-link-alt"></i></span> （仅供娱乐）<br><span class="exturl" data-url="aHR0cHM6Ly9pbnZlbnQua2RlLm9yZy9wbGFzbWEva3dpbi8tL21lcmdlX3JlcXVlc3RzLzEwODg=">https://invent.kde.org/plasma/kwin/-/merge_requests/1088<i class="fa fa-external-link-alt"></i></span> KDE在这个Merge移除了XRender混成器<br><span class="exturl" data-url="aHR0cHM6Ly9tYWlsLmtkZS5vcmcvcGlwZXJtYWlsL2t3aW4vMjAyMS1KdW5lLzAwNTIzMi5odG1s">https://mail.kde.org/pipermail/kwin/2021-June/005232.html<i class="fa fa-external-link-alt"></i></span> 讨论移除XRender的邮件列表<br><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2tkZS9jb21tZW50cy9xYW1sZmQvd2FzX3hyZW5kZXJfY29tcG9zaXRvcl9yZW1vdmVkX2luX3BsYXNtYV81MjMv">https://www.reddit.com/r/kde/comments/qamlfd/was_xrender_compositor_removed_in_plasma_523/<i class="fa fa-external-link-alt"></i></span> reddit上的移除XRender受害者（这位是i卡，不是N卡）</p><p>Vulkan<br><span class="exturl" data-url="aHR0cDovL2Jsb2cuZGF2aWRlZG11bmRzb24uY28udWsvYmxvZy9ydW5uaW5nLXBsYXNtYXNoZWxsLXdpdGgtdnVsa2FuLw==">http://blog.davidedmundson.co.uk/blog/running-plasmashell-with-vulkan/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0tERS9rd2luL2NvbW1pdC84MTFiZWI5NGUwYTdkZDU2NjY5MDZiMDdhNTFhODRlZmU1ZjFiYjUz">https://github.com/KDE/kwin/commit/811beb94e0a7dd5666906b07a51a84efe5f1bb53<i class="fa fa-external-link-alt"></i></span></p><p>Nvidia的问题（不是很懂为什么移除xrender）<br><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2tkZS9jb21tZW50cy9xc2t2cjEvc2NyZWVuX2ZsaWNrZXJfcHJvYmxlbV93aXRoXzE0NGh6X29uX2tkZV9uZW9uX2FueS8=">https://www.reddit.com/r/kde/comments/qskvr1/screen_flicker_problem_with_144hz_on_kde_neon_any/<i class="fa fa-external-link-alt"></i></span></p><p>i3wm配置参考：</p><p><span class="exturl" data-url="aHR0cHM6Ly96anV5ay5naXRsYWIuaW8vcG9zdHMvaTN3bS1jb25maWcv">I3wm 配置思路<i class="fa fa-external-link-alt"></i></span></p><p>Polybar配置：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkaTEwOTB4L3BvbHliYXItdGhlbWVz">https://github.com/adi1090x/polybar-themes<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;逐渐开始认同Keep it Simple, Stupid&lt;/p&gt;</summary>
    
    
    
    
    <category term="KDE" scheme="https://zhangjk98.xyz/tags/KDE/"/>
    
    <category term="i3wm" scheme="https://zhangjk98.xyz/tags/i3wm/"/>
    
    <category term="kiss" scheme="https://zhangjk98.xyz/tags/kiss/"/>
    
  </entry>
  
  <entry>
    <title>又被Docker坑了（其实是被Yaml坑了</title>
    <link href="https://zhangjk98.xyz/aware-docker-yaml/"/>
    <id>https://zhangjk98.xyz/aware-docker-yaml/</id>
    <published>2021-11-08T11:50:24.000Z</published>
    <updated>2021-11-08T11:50:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>大聪明yaml将60以下的数字识别成60进制，所以需要用引号括起来。自作聪明程度直追Excel将身份证号识别成科学计数法然后直接末尾四位变零。<br>珍爱生命，远离yaml  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大聪明yaml将60以下的数字识别成60进制，所以需要用引号括起来。自作聪明程度直追Excel将身份证号识别成科学计数法然后直接末尾四位变零。&lt;br&gt;珍爱生命，远离yaml  &lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://zhangjk98.xyz/tags/Docker/"/>
    
    <category term="yaml" scheme="https://zhangjk98.xyz/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame 2021 (中科大信安赛) Write Up</title>
    <link href="https://zhangjk98.xyz/hackergame-2021-write-up/"/>
    <id>https://zhangjk98.xyz/hackergame-2021-write-up/</id>
    <published>2021-10-30T04:00:01.000Z</published>
    <updated>2021-10-30T04:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>吃瓜群众第一次参赛，从LUG过来的，打酱油路过，没学过信安和密码学，然而很遗憾，跟Linux有关的那几个题全都没做出来。。。。<br>很意外自己能挤进200名的，事前完全没有准备，也没接触过CTF之类的东西，甚至比赛开始3天，进行到一半了我才突然发现这比赛它已经开始了，如果早知道 p😭q<br>对，今年这个Hackergame就是UTF-8比赛，对萌新可友好了（确信  </p><span id="more"></span><p>周二还在想今年中科大信安赛是不是要开始了，结果一看已经进行一半了，来划个水吧。由于太菜加上懒，math零蛋，只能流下数理基础不扎实的泪水p😭q 。 </p><p>作为一个纯萌新和老废物，第一次参加Hackergame，以前看到他们中科大LUG办的，就想着下次举办去参加一下玩。以前看到好多Web题和有意思的小题目，虽然我js也特别菜，好歹还能挣扎一下。结果几年一打开就是一堆binary糊脸，二进制和逆向pwm之类的完全不懂，罢了，就做点General吧。</p><p>结果？？？？进前200了？</p><p><img src="/hackergame-2021-write-up/image-20211030121230343.png" alt="image-20211030121230343"></p><p>看来Hackergame真的是萌新友好，明年一定再来玩。</p><h2 id="做出了来的的小题目"><a href="#做出了来的的小题目" class="headerlink" title="做出了来的的小题目"></a>做出了来的的小题目</h2><p>还是有不少对我很友好的题目的</p><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><blockquote><p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p></blockquote><p>打开题目，秒是从1970年开始计算的，这就是UNIX时间戳呗。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> +%s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到<code>1635213339</code>，修改URL后缀，得到<code>flag&#123;HappyHacking2021-b0e5f6c9af&#125;</code>签到成功</p><h3 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h3><p>首先我们OCR识别一下</p><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个好办，打开Bless Hex Editor之类的Hex编辑器, flag的16进制是<code>66 6C 61 67</code>, 找到相应位置，得到flag为<code>flag&#123;Y0U_SH0U1D_kn0w_H0W_t0_C0nv3rt_HEX_to_TexT&#125;</code></p><h3 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h3><p>F12想直接修改放瓜数量为负是不可以的，我们没有办法放上一个负数或者小数的瓜</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;放上 6 斤的瓜 &lt;input type&#x3D;&quot;number&quot; class&#x3D;&quot;number&quot; name&#x3D;&quot;b6&quot; value&#x3D;&quot;0&quot; min&#x3D;&quot;0&quot;&gt; 个&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始填一个很大的数尝试溢出，果然。</p><p><img src="/hackergame-2021-write-up/image-20211026131723641-16352255218271.png" alt="image-20211026131723641"></p><p>然后就是打开WolframAlpha, 一边算一边试，试出了一个正好二十。</p><h3 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h3><p>一开始没什么头绪，但是看到左下角那个彩色方块的小房子实在是太显眼了，可能是什么地标建筑。我们以图搜图找一下呗。</p><p>Google搜图没有结果，TineEye也没有。算了算了，打开我最讨厌的百度（毕竟这可能是一个国内的位置）</p><p><span class="exturl" data-url="aHR0cHM6Ly9ncmFwaC5iYWlkdS5jb20vcGNwYWdlL3NpbWlsYXI/b3JpZ2luU2lnbj0xMjZjMGQ1YjgyZjIzMmYzMDY5YjkwMTYzNTMxMTc1OSZzcmNwPWNyc19wY19zaW1pbGFyJnRuPXBjJmlkY3RhZz1neiZzaWRzPTEwMDA3XzEwNTEyXzEwNTIxXzEwOTE0XzEwOTEzXzExMDA2XzEwOTI0XzEwOTA1XzEwMDE4XzEwOTAxXzEwOTQyXzEwOTA3XzExMDEyXzEwOTcwXzEwOTY4XzEwOTc0XzExMDMyXzE3ODUxXzE3MDcwXzE4MDEzXzE4MTAxXzE3MjAwXzE3MjAyXzE4MzAxXzE4MzExXzE4MzMwXzE5MzAwXzE5MTkxXzE5MTYyXzE5MjIwXzE5MjEwXzE5MjEyXzE5MjE0XzE5MjE3XzE5MjE5XzE5MjU2XzE5MjMwXzE5MjY4XzE5MjgwXzE5NTUwXzE5NjcwXzEwMDAwJmxvZ2lkPTI0Mzg0MjcwMDgmZW50cmFuY2U9Z2VuZXJhbCZ0cGxfZnJvbT1wYyZwYWdlRnJvbT1ncmFwaF91cGxvYWRfcGNzaGl0dSZpbWFnZT1odHRwOi8vaW1nMS5iYWlkdS5jb20vaXQvdT0zODI1MzQwMjIwLDkyNzYwNTA0NiZmbT0yNTMmYXBwPTEzOCZmPUpQRUc/dz02NDAmaD00ODAmY2Fyb3VzZWw9NTAzJmluZGV4PTEmcGFnZT0xJnNoaXR1VG9rZW49YzkyM2Qz">百度搜图的结果<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ncmFwaC5iYWlkdS5jb20vcGNwYWdlL3NpbWlsYXI/b3JpZ2luU2lnbj0xMjZjMGQ1YjgyZjIzMmYzMDY5YjkwMTYzNTMxMTc1OSZzcmNwPWNyc19wY19zaW1pbGFyJnRuPXBjJmlkY3RhZz1neiZzaWRzPTEwMDA3XzEwNTEyXzEwNTIxXzEwOTE0XzEwOTEzXzExMDA2XzEwOTI0XzEwOTA1XzEwMDE4XzEwOTAxXzEwOTQyXzEwOTA3XzExMDEyXzEwOTcwXzEwOTY4XzEwOTc0XzExMDMyXzE3ODUxXzE3MDcwXzE4MDEzXzE4MTAxXzE3MjAwXzE3MjAyXzE4MzAxXzE4MzExXzE4MzMwXzE5MzAwXzE5MTkxXzE5MTYyXzE5MjIwXzE5MjEwXzE5MjEyXzE5MjE0XzE5MjE3XzE5MjE5XzE5MjU2XzE5MjMwXzE5MjY4XzE5MjgwXzE5NTUwXzE5NjcwXzEwMDAwJmxvZ2lkPTI0Mzg0MjcwMDgmZW50cmFuY2U9Z2VuZXJhbCZ0cGxfZnJvbT1wYyZwYWdlRnJvbT1ncmFwaF91cGxvYWRfcGNzaGl0dSZpbWFnZT1odHRwOi8vaW1nMi5iYWlkdS5jb20vaXQvdT0zMjUxMjkwNzY1LDE0NjUyMzc0ODkmZm09MjUzJmFwcD0xMzgmZj1KUEVHP3c9MjQ5Jmg9MjQ5JmNhcm91c2VsPTUwMyZpbmRleD01JnBhZ2U9MSZzaGl0dVRva2VuPTlkMDk3OA==">百度搜图的结果<i class="fa fa-external-link-alt"></i></span></p><p>搜到了，是秦皇岛西浴场。这个彩色方块的小房子是海边的救助亭。</p><p>秦皇岛西沙滩，附近有酒店和KFC，而且旁边就是海，应该就是这里了。</p><p>旁边甚至还有一个停车场。和一个秦皇岛国际大酒店（最后根据位置发现酒店应该不是这个）</p><p>然后查找一下周围的KFC（这种事情应该让馒狗来），果不其然有一个网红Tiffany KFC,一群人在小红书打卡。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueGlhb2hvbmdzaHUuY29tL2Rpc2NvdmVyeS9pdGVtLzVlOTZjOTE5MDAwMDAwMDAwMTAwNTdjMQ==">https://www.xiaohongshu.com/discovery/item/5e96c91900000000010057c1<i class="fa fa-external-link-alt"></i></span></p><p>高德地图上可以找到电话：0335-7168800</p><p>大众点评的照片上可以看到左侧建筑的三个字为：<strong>海豚馆</strong></p><p><span class="exturl" data-url="aHR0cDovL3d3dy5kaWFucGluZy5jb20vc2hvcC8yNDQzNDA4Nw==">http://www.dianping.com/shop/24434087<i class="fa fa-external-link-alt"></i></span></p><p>从地图上看可能是东南方向，从阳光照射方向看可能是傍晚。</p><p>然后就剩下了楼层数，大概有15、16层左右的样子，随便试几个。结果是16，好的，得到flag</p><h3 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h3><p>这个是我精通八门乐器的校艺术团室友秒掉的，听了一遍就说修改采样率（大概从48000调到了18000的样子），就可以听到正常的声音了。<br>是一串北约音标字母。</p><p>真好，虽然找不到中科大少年班的神通口算口算RSA，但是我有精通乐理的室友。</p><h3 id="喵咪问答-Pro-Max"><a href="#喵咪问答-Pro-Max" class="headerlink" title="喵咪问答 Pro Max"></a>喵咪问答 Pro Max</h3><p>这个没啥好说的，Google搜就完事了（已经关闭的网站看Web Archive的快照就好了）</p><p>report地址是<code>/dev/null</code>可还行</p><h3 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h3><p>graphql查询，这个也比较简单，没做什么严格的限制去卡你，直接查就完事了</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    user(id<span class="token operator">:</span><span class="token number">1</span>)<span class="token punctuation">&#123;</span>        username        privateEmail    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>url接口是<code>/graphql?query=&#123;.....&#125;</code>, 会得到一个：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"user"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token property">"privateEmail"</span><span class="token operator">:</span><span class="token string">"flag&#123;dont_let_graphql_l3ak_data_dad4053dd4@hackergame.ustc&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>收工。。。</p><h3 id="Amnesia-轻度失忆（第一个flag）"><a href="#Amnesia-轻度失忆（第一个flag）" class="headerlink" title="Amnesia 轻度失忆（第一个flag）"></a>Amnesia 轻度失忆（第一个flag）</h3><blockquote><p>编译后 ELF 文件的 .data 和 .rodata 段会被清零。</p></blockquote><p>唯一整出来的binary题目（避免了binary和math双双爆零的惨状），虽然这个好像也不算binary，更像是在考我编译原理。使劲浑身解数。。。。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span></span><span class="token keyword">char</span> <span class="token operator">*</span> hello<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>    hello<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>    <span class="token string">"mov $4,%eax;"</span>    <span class="token string">"mov $1,%ebx;"</span>    <span class="token string">"mov hello ,%ecx;"</span>    <span class="token string">"mov $13,%edx;"</span>    <span class="token string">"int $0x80"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free(hello);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有个小问题是它会内存泄漏，但是想不出什么更好的解答了。</p><h3 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h3><p>level0 简单，level1 也简单，就是实现一个循环呗。</p><p>剩下两个给我整不会了，人都傻了。</p><h3 id="p😭q"><a href="#p😭q" class="headerlink" title="p😭q"></a>p😭q</h3><p>我也不知道这道题何德何能排在倒数第三个，甚至还有400分的分值。在学了信号与系统、数字信号处理、数字图像处理、生物医学信号处理的我看来，这应该属于送分题。（不过之前都是用matlab做的，python的库都没用过）</p><p>先将gif每一帧转成图像再转成numpy的array再转成一维数组得到功率谱，傅立叶反变换回去得到音频信号……</p><p>等等。。。。它只有功率谱的幅度没有相位信息我可怎么恢复。难道要我猜一个相位吗？</p><p>搜了一下librosa，有一个自带的恢复库，用的是一个迭代估计的算法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageSequence<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> librosa<span class="token keyword">import</span> soundfile <span class="token keyword">as</span> sfsample_rate <span class="token operator">=</span> <span class="token number">22050</span>num_freqs <span class="token operator">=</span> <span class="token number">32</span>quantize <span class="token operator">=</span> <span class="token number">2</span>min_db <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">60</span>max_db <span class="token operator">=</span> <span class="token number">30</span>fft_window_size <span class="token operator">=</span> <span class="token number">2048</span>frame_step_size <span class="token operator">=</span> <span class="token number">512</span>window_function_type <span class="token operator">=</span> <span class="token string">'hann'</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.gif'</span><span class="token punctuation">)</span><span class="token builtin">iter</span> <span class="token operator">=</span> ImageSequence<span class="token punctuation">.</span>Iterator<span class="token punctuation">(</span>im<span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">1</span>spec <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> frame <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">:</span>    <span class="token comment"># print("image %d: mode %s, size %s" % (index, frame.mode, frame.size))</span>    frame<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./imgs/frame%d.png"</span> <span class="token operator">%</span> index<span class="token punctuation">)</span>    index <span class="token operator">+=</span> <span class="token number">1</span>    image_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>    image_list <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>image_arr<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># print(image_list)</span>    image_list <span class="token operator">=</span> image_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token comment"># print(image_list)</span>    <span class="token comment"># print(image_list.shape)</span>    spec <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> image_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'output1.txt'</span><span class="token punctuation">,</span> spec<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%d"</span><span class="token punctuation">)</span>spec <span class="token operator">=</span> np<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>spec<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>melspectrogram <span class="token operator">=</span> librosa<span class="token punctuation">.</span>db_to_power<span class="token punctuation">(</span>spec<span class="token punctuation">.</span>T<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token comment"># print(melspectrogram.shape)</span>audio_signal <span class="token operator">=</span> librosa<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>inverse<span class="token punctuation">.</span>mel_to_audio<span class="token punctuation">(</span>    melspectrogram<span class="token punctuation">,</span>    n_iter<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>    sr<span class="token operator">=</span>sample_rate<span class="token punctuation">,</span>    n_fft<span class="token operator">=</span>fft_window_size<span class="token punctuation">,</span>    hop_length<span class="token operator">=</span>frame_step_size<span class="token punctuation">,</span>    window<span class="token operator">=</span>window_function_type<span class="token punctuation">)</span><span class="token comment"># print(audio_signal, audio_signal.shape)</span>sf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'test.wav'</span><span class="token punctuation">,</span> audio_signal<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好的，秒了。（怎么有种回到本科写课堂作业的感觉）</p><p>声音是有了，但是这个相位好像还是不太对的样子。我超，回声不绝于耳。。。</p><p>调一下参数，让他多迭代几轮<code>n_iter=8192,</code>，行了，现在清晰度有个高中大喇叭放英语早读听力的样子。</p><p><strong>衬衫的价格是九磅十五便士，现在你有十秒钟时间，将Flag填到输入框上</strong>…….</p><h2 id="看起来有点头绪但是没做的题目"><a href="#看起来有点头绪但是没做的题目" class="headerlink" title="看起来有点头绪但是没做的题目"></a>看起来有点头绪但是没做的题目</h2><p>懒癌又犯了，周六休息一会，周五天气太好了，还有其他事情要做，算了</p><h3 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy RSA"></a>Easy RSA</h3><p>由于我找不到中科大少年班的神通，而我自己的数论还停留在高中水平（当年数竞还过了校队选拔，然后上来就听了好几节数论和组合，直接退出了（后悔，现在就是非常后悔））</p><p>只能找山大网安的大二学弟来帮帮我看看这个密码学的问题，问问这种形式该怎么解(已知n, p, q, c)</p><p>$$<br>a^n mod(p*q) = c<br>$$</p><p>他当场就给我秒了，还随手写了3页。</p><p>然后问题是怎么跑出这个p来，这次学弟也没什么好办法了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>    y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span>    value_p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span>                              x<span class="token punctuation">)</span>  <span class="token comment"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span>    <span class="token keyword">return</span> value_p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始我是这样跑的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> x    <span class="token comment"># print(sum)</span>    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum的值是"</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sum的值是"</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果一跑就是一天，看到我的5600g只有1个CPU在跑，我决定整个multiprocessing（本来想用Golang整一个，但是Golang的数值计算库不太行，还得去用那个难用的<code>math/big</code>包）</p><p>结果再次发现，甚至上了multiprocessing，反而更慢了。</p><p>于是我决定搜一下，结果就找到了这个网站的两种算法：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvY29tcHV0ZS1uLXVuZGVyLW1vZHVsby1wLw==">Compute n! under modulo p<i class="fa fa-external-link-alt"></i></span></p><p>哦，有个复杂度$O((p-n)*Logn)$的算法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Python3 program to comput</span><span class="token comment"># n! % p using Wilson's Theorem</span><span class="token comment"># Utility function to do modular</span><span class="token comment"># exponentiation. It returns (x^y) % p</span><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># Initialize result</span>    x <span class="token operator">=</span> x <span class="token operator">%</span> p  <span class="token comment"># Update x if it is more</span>    <span class="token comment"># than or equal to p</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If y is odd, multiply</span>        <span class="token comment"># x with result</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p        <span class="token comment"># y must be even now</span>        y <span class="token operator">=</span> y <span class="token operator">>></span> <span class="token number">1</span>  <span class="token comment"># y = y/2</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p    <span class="token keyword">return</span> res<span class="token comment"># Function to find modular inverse</span><span class="token comment"># of a under modulo p using Fermat's</span><span class="token comment"># method. Assumption: p is prime</span><span class="token keyword">def</span> <span class="token function">modInverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> power<span class="token punctuation">(</span>a<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token comment"># Returns n! % p using</span><span class="token comment"># Wilson's Theorem</span><span class="token keyword">def</span> <span class="token function">modFact</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># n! % p is 0 if n >= p</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment"># Initialize result as (p-1)!</span>    <span class="token comment"># which is -1 or (p-1)</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># Multiply modulo inverse of</span>    <span class="token comment"># all numbers from (n+1) to p</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">*</span> modInverse<span class="token punctuation">(</span>i<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> p    <span class="token keyword">return</span> res<span class="token comment"># Driver code</span>x <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span>y <span class="token operator">=</span> <span class="token number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span><span class="token comment"># y = 10</span>n <span class="token operator">=</span> yp <span class="token operator">=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>modFact<span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># This code is contributed by ihritik</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>只用了1分钟</strong>就跑了出来。这算法好强！</p><p>我把这个做法发给学弟，学弟表示：</p><p>“可以，回头我看看”<br>“<strong>我比较关心这个是怎么构造出来和怎么证明的</strong>”<br>“<strong>初等数论比较巧妙</strong>”<br>“<strong>可以看一下</strong>”  </p><p>听完学弟的话，接下来的内容我不太想做了。<br>我这样数理基础不扎实的菜狗（尤其是数论，一窍不通），做出来也<strong>改变不了我是个数论白痴的事实</strong>。都是些trival的东西了，<strong>有这个时间折腾这些应该去系统的补习一下数论</strong>。</p><h3 id="拼多多砍一刀"><a href="#拼多多砍一刀" class="headerlink" title="拼多多砍一刀"></a>拼多多砍一刀</h3><p>FLAG 助力大红包，这个东西应该挂一个爬虫代理池能做。但是这个方法好像太暴力了点，而且我不想再爬东西了，免费的那几个IP池都不太好用，要钱的又不想掏钱。</p><h3 id="minecraft"><a href="#minecraft" class="headerlink" title="minecraft"></a>minecraft</h3><p>随便乱走亮了两盏灯，还有一盏。看起来应该F12找找线索，有一个flag.js的东西，但是它一堆16进制的变量和函数名，看起来挺费劲，算了，不看了。</p><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>应该就是根据奇偶校验和他给的打码过程的那个python文件。上一次做二维码和奇偶校验的东西还是大二上数字电路的时候。</p><p>看起来像是第十版二维码，结果打开qrazybox想手动修复一下最高只有ver.9</p><p>然后写了十几行发现好像这个东西要枚举遍历？？可能的二维码团还不止一种。（不知道是不是我漏了什么条件，但看起来还原出来确实不止一种）</p><p>周五周六天气真好，成都难得出太阳，不做了，出去玩。</p><h2 id="以为会做然而被乱杀到怀疑人生的题"><a href="#以为会做然而被乱杀到怀疑人生的题" class="headerlink" title="以为会做然而被乱杀到怀疑人生的题"></a>以为会做然而被乱杀到怀疑人生的题</h2><h3 id="Amnsia记忆清除"><a href="#Amnsia记忆清除" class="headerlink" title="Amnsia记忆清除"></a>Amnsia记忆清除</h3><p>抹除掉ELF文件的<code>.text</code>段，完全不会</p><h3 id="LUKS"><a href="#LUKS" class="headerlink" title="LUKS"></a>LUKS</h3><p>就觉得我这么长时间的Linux白用了，整不出来。我只会hashcat爆破，Hashcat爆破又没啥意思，算了，放弃。</p><h3 id="RAID修复"><a href="#RAID修复" class="headerlink" title="RAID修复"></a>RAID修复</h3><p>文件系统白学了，直接不会，白给。RAID-0做不出来，RAID-5也做不出来。</p><h3 id="赛博厨房后两问"><a href="#赛博厨房后两问" class="headerlink" title="赛博厨房后两问"></a>赛博厨房后两问</h3><p>直接人都傻了，找不到规律，根本找不到。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在是周六中午12点，总排名187/2679，很幸运没有掉出200名。</p><blockquote><p>当前分数：1600， 总排名：187 / 2679<br>binary：150 ， general：1050 ， math：0 ， web：400</p></blockquote><p>今年是第一次参见Hackergame，玩的很开心。binary的题比往年多了很多，不过我一个都不会，好在有个打印<code>Hello, world!</code>的题，很幸运没有爆零。  </p><p>当然，general和web题还是给了我一点信心，让我有种我上我也行的感觉，不过打开排行榜看到mcfx乱秒的样子，嗯，我是傻逼。</p><p>主要感想就是数理基础太差，数论是真的是一窍不通，这几个月正好有空，准备去恶补一下数学。    </p><p>当然进前100名和CTF师傅们以及天神下凡的mcfx合影留念是无望了，明年再来玩耍吧。欢度周末去了，再见。   </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;吃瓜群众第一次参赛，从LUG过来的，打酱油路过，没学过信安和密码学，然而很遗憾，跟Linux有关的那几个题全都没做出来。。。。&lt;br&gt;很意外自己能挤进200名的，事前完全没有准备，也没接触过CTF之类的东西，甚至比赛开始3天，进行到一半了我才突然发现这比赛它已经开始了，如果早知道 p😭q&lt;br&gt;对，今年这个Hackergame就是UTF-8比赛，对萌新可友好了（确信  &lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hackergame" scheme="https://zhangjk98.xyz/tags/hackergame/"/>
    
    <category term="UTF-8" scheme="https://zhangjk98.xyz/tags/UTF-8/"/>
    
  </entry>
  
  <entry>
    <title>将VSCode作为Neovim的GUI客户端——VSCode Neovim插件配置</title>
    <link href="https://zhangjk98.xyz/vscode-neovim-setting/"/>
    <id>https://zhangjk98.xyz/vscode-neovim-setting/</id>
    <published>2021-10-29T16:00:00.000Z</published>
    <updated>2021-10-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来不报希望的试了试这套不伦不类的缝合怪配置，结果缝合出了很好的效果，可以拿这套配置在VSCode下养老了。</p><span id="more"></span><p>VSCodevim这个插件和原生Vim的体验差距很大，Vim的很多操作都不支持，而且大文件会特别卡。VSCode Neovim这个插件是在Insert模式几乎和正常的VSCode编辑一样，在Normal模式有满血的Vim体验（不像VSCodevim那样是体验是残血的，只是一个Vim键位和操作的模拟器）</p><p>这个插件直接将Neovim作为后端，在Normal模式下由Neovim控制（直接将内容缓存发往Neovim处理），可以使用Vim的各种键位操作<br>在Insert模式下，操作和渲染由VSCode处理，编辑体验几乎和VSCode完全一致。色彩高亮和代码补全等都由VSCode实现（所以不要装Neovim的LSP等插件，没用，而且可能影响速度）当你保存的时候更改会从VSCode同步到Neovim。  </p><p>VSCode在编辑模式下的舒服体验和插件、Vim在Normal模式下的操作，同时得到了保留，而且性能和速度还可以接受。</p><p>与其说这是VSCode的一个Vim键位插件，不如说是将VSCode直接改造成了Neovim的一个GUI客户端。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>VSCode插件市场装VSCode Neovim，Archlinux安装neovim<code>sudo pacman -S neovim</code><br>然后在设置里面填上路径</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"vscode-neovim.neovimExecutablePaths.linux"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/nvim"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以用了</p><h2 id="中文输入法和Neovim插件Normal模式下冲突"><a href="#中文输入法和Neovim插件Normal模式下冲突" class="headerlink" title="中文输入法和Neovim插件Normal模式下冲突"></a>中文输入法和Neovim插件Normal模式下冲突</h2><p>VSCode的Neovim插件在Normal模式下，如果fcitx5等输入法处于中文模式，那么输入的字符会被输入法全部捕获（就像平时在VSCode里打字一样）</p><p>ArchWiki 给出了下面这种方法，试了一下速度比较慢</p><pre class="line-numbers language-vimrc" data-language="vimrc"><code class="language-vimrc">autocmd InsertLeave * :silent !fcitx5-remote -c &quot; 退出插入模式时禁用输入法autocmd BufCreate *  :silent !fcitx5-remote -c &quot; 创建 Buf 时禁用输入法autocmd BufEnter *  :silent !fcitx5-remote -c &quot; 进入 Buf 时禁用输入法autocmd BufLeave *  :silent !fcitx5-remote -c &quot; 离开 Buf 时禁用输入法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比较快的方法是装插件，比如依云的fcitx.vim插件，但是这个插件在neovim下面好像没有效果。</p><p>本来想自己移植一个neovim的插件的，但是看了一下已经有人干了：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2gtaGcvZmNpdHgubnZpbS5naXQ=">fcitx.nvim<i class="fa fa-external-link-alt"></i></span></p><p>我用的vim-plug管理插件，放到<code>~/.config/nvim/init.vim</code>下面就可以了</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">call</span> plug#<span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Plug <span class="token string">'https://github.com/h-hg/fcitx.nvim.git'</span><span class="token keyword">call</span> plug#<span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一些按键绑定设置"><a href="#一些按键绑定设置" class="headerlink" title="一些按键绑定设置"></a>一些按键绑定设置</h2><p>首先我不要hjkl这几个上下左右键（根本无法接受，我的肌肉记忆明明是键盘上上下左右四个经典方向键，玩空洞骑士和Ballance用的极其熟练，其次是WASD这个4399键位，其次是鼠标，我鼠标可熟练了）<br>我知道hjkl移动距离短而且移动后方便按距离近的i键进入Insert模式，但是我的肌肉记忆是上下左右，你再给我十年我也改不过来。</p><p>然后我将Casplock映射为ESC，这个万年不用的键放在这么重要的位置还有一个比Tab键还大的键帽，简直浪费。编辑<code>～/Xmodmap</code>修改键盘映射就可以了。</p><p>或者如果喜欢也可以将<code>jj</code>（连按两次）绑定成ESC<code>inoremap jj &lt;Esc&gt;</code>^`</p><p>然后是VSCode里面正常的<code>Ctrl+F</code>当前搜索，这个我们找回来（<code>Ctrl+F</code>在Vim里是向上翻页，我完全用不到，我用PgDn和PgUp）</p><p>然后是VSCode的<code>Ctrl+B</code>展开/收起侧边栏，这个我也留着VSCode的设置。</p><p>编辑<code>~/.config/Code/User/keybindings.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"ctrl+f"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"-vscode-neovim.escape"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"ctrl+b"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"-vscode-neovim.escape"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"ctrl+a"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"-vscode-neovim.escape"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制和粘贴我大部分时间直接用linux下x默认的鼠标点击和中键。但是全选等操作的时候我还是习惯<code>Ctrl-A</code>加<code>Ctrl-C</code></p><p>偶尔使用<code>Ctrl-C</code>的人，把<code>Ctrl-C</code>和<code>Ctrl-A</code>找回来还是有必要的，偶尔在<code>insert</code>模式下<code>Ctrl-C</code>会进入normal模式，<code>Ctrl-A</code>会输入<code>。sd</code>，很烦。</p><p>所以我也直接在json设置里面排除了<code>Ctrl-A</code>。ps：如果你想使用mswin.vim那样在neovim里面绑定，那可能会报错<code>nvim_call_function: Vim(let):E684: list index out of range: 0</code>。注意在Neovim的扩展设置里面（Keyboard shortcuts）删掉<code>Ctrl+A</code></p><p>然后在<code>settings.json</code>中设置</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"vscode-neovim.useCtrlKeysForInsertMode"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"vscode-neovim.useCtrlKeysForNormalMode"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就基本上把Ctrl的功能还给VSCode了。</p><h2 id="Neovim插件默认instert模式"><a href="#Neovim插件默认instert模式" class="headerlink" title="Neovim插件默认instert模式"></a>Neovim插件默认instert模式</h2><p>这个样子平时就像正常使用VSCode一样，当用到normal mode的功能时才打开normal mode，可以少按很多次i</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'nvim'</span><span class="token punctuation">)</span>    <span class="token builtin">autocmd</span> TermOpen <span class="token builtin">term</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">startinsert</span><span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>之前只在编辑小文件的时候临时用Vim, 这两年内Vim使用次数逐渐增多，Vim也逐渐熟练，一度产生过将主力编辑器从VSCode换成Vim的想法。VSCode在Linux平台上频繁内存泄漏、VSCode的渲染速度比Vim慢很多（尤其是打开大文件的时候），这些原因导致VSCode在某些时候的体验比Vim差了好多。</p><p>但是Vim我没有找到合适的GUI界面来打造一个对我而言比较舒服的编辑器，gvim在当年上嵌入式课的时候在Ubuntu下就试过一次了，感觉体验和</p><p>SpaceVim试过，装了一堆插件之后太卡，性能不是太好，性能表现几乎和VSCode不相上下，在我的超低配七年老电脑上失去了Vim流畅的优势，而且这一套界面的颜值和使用体验远不如VSCode。</p><p>Neovim的GUI界面有<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FraXlvc2kvZ29uZW92aW0=">goneovim<i class="fa fa-external-link-alt"></i></span>和neovide，体验也不如VSCode。（go居然能拿来写Qt还写成这种样子，哇偶）</p><p>最舒服的Vim体验还是在Alacritty里面，GPU加速渲染速度很快，非常丝滑。</p><p>而且VSCode在我从18年开始使用它的三年内，肉眼可见的进步。未来的前景也很光明，微软掏钱养着也不用担心倒闭的问题，除非微软倒闭（真倒闭了那不是更好吗，还有这种好事，苏联笑话.jpg）<br>现在我除了要写一万行以上的屎山项目才会打开Goland等全家桶IDE，编辑100行以下的配置文件等会打开vim。<br>剩下的绝大多数编辑都是用VSCode,用VSCode来写Go、C、Python、shell，用VSCode来写Markdown和LaTeX, 逐渐抛弃了typora和Word，也放弃了曾经很喜欢的sublime text（纯粹是因为好看和启动速度比vscode快一点）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWhvbm4ubWUvYmxvZy90aGUtdmltLWd1aWRlLWZvci12cy1jb2RlLXVzZXJz">从VSCode到Vim到……两个都用？<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhaXBlaWh1c3QvaW0tc2VsZWN0I2luc3RhbGxhdGlvbg==">https://github.com/daipeihust/im-select#installation<i class="fa fa-external-link-alt"></i></span> Windows和Mac以及使用vscodevim插件用户可以用这个解决中文输入法冲突的问题<br><span class="exturl" data-url="aHR0cHM6Ly9kZGFkYWFsLm1lL2FydGljbGVzL2Zyb20tdnNjb2RlLXRvLXZpbS10by1ib3Ro">https://ddadaal.me/articles/from-vscode-to-vim-to-both<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qZGhhby5naXRodWIuaW8vMjAyMC8wMS8xMi92aW1fbnZpbV9oaXN0b3J5X2RldmVsb3BtZW50Lw==">Vim 和 Neovim 的前世今生<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hYzczOWM2ZWE1NDE=">vscode 集成 Neovim<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1nNGRYWjBSUVdkdw==">VSCode with embedded Neovim<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本来不报希望的试了试这套不伦不类的缝合怪配置，结果缝合出了很好的效果，可以拿这套配置在VSCode下养老了。&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="VSCode" scheme="https://zhangjk98.xyz/tags/VSCode/"/>
    
    <category term="Neovim" scheme="https://zhangjk98.xyz/tags/Neovim/"/>
    
    <category term="Vim" scheme="https://zhangjk98.xyz/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux下VSCode+Latex+Zotero的论文写作方案</title>
    <link href="https://zhangjk98.xyz/paper-with-latex-zotero-vscode/"/>
    <id>https://zhangjk98.xyz/paper-with-latex-zotero-vscode/</id>
    <published>2021-09-24T10:44:24.000Z</published>
    <updated>2021-09-24T10:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>开源拖拉机将就着用吧，又不是不能用，再见Word、EndNote和Windows。顺便说一下你电的LaTeX模板怎么用。不定期更新到毕业。</p><span id="more"></span><p>又遇到了Lamport老爷子的东西，上一次看到Lamport<del>还是上次</del>还是看Paxos算法的时候。</p><p>Office很强，但是微软不给Linux开发桌面版（好吧，我有在线的教育版，在线版写写文档还行，但是排版有一些捉襟见肘）。好吧，虚拟机或者wine是可以的但是我不想用。wps的Linux版倒是很不错，但是调格式放到office上又乱了，对数学公式的支持也不是特别好。<br>另一个让我放弃word和wps的重要原因是我想要用git做版本控制，手动命名一个个v0.0.8、v0.2.1版本的论文初稿实在是太蠢了。<br>最近放弃WPS的原因是新版本实在太糊了，我在Archlinux上试图降级旧版又失败了。本来以为新版WPS字体模糊是因为没有配适4k分辨率的屏幕，这个文章<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTU5OTM1NzY=">WPS For Linux个人版更新（Qt5版本）<i class="fa fa-external-link-alt"></i></span>的评论去也确实是这么说的。结果我打开1080p的笔记本，发现字体更糊了。<br>overleaf应该是我用过最好用的Latex在线编辑，但是我对在线的东西不是很信得过。TexStudio又不是太好看，高分屏下还比较糊，键位也不习惯，放弃了。lyx是很好用，但是我不太喜欢所见即所得，还是习惯左边源码右边编辑结果pdf这种。  </p><p>最终又回到了VSCode，目前的方案是ArchLinux下Zotero+textlive+VSCode（LaTeX Workshop插件）</p><h2 id="安装texlive"><a href="#安装texlive" class="headerlink" title="安装texlive"></a>安装texlive</h2><p>我用对中文支持比较好的xelatex，在Arch下我们装texlive的包就可以了。pdflatex也包含在里面，但是这个对中文支持没有那么好，一般用xelatex生成中文pdf。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S texlive-core texlive-langchinese  texlive-fontsextra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>texlive的不少宏包在Arch上都有系统的包，你可以用<code>yay</code>等AUR helper装，如果想用<code>tlmgr</code>装，那就用<span class="exturl" data-url="aHR0cHM6Ly9hdXIuYXJjaGxpbnV4Lm9yZy9wYWNrYWdlcy90bGxvY2FsbWdyLWdpdC8=">tllocalmgr-git<i class="fa fa-external-link-alt"></i></span>这个AUR包。</p><h2 id="Zotero配置"><a href="#Zotero配置" class="headerlink" title="Zotero配置"></a>Zotero配置</h2><h3 id="参考文献抓取和管理"><a href="#参考文献抓取和管理" class="headerlink" title="参考文献抓取和管理"></a>参考文献抓取和管理</h3><p>首先是中文论文网站引用和pdf抓取的问题，可以用下面这个插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2wwbzAvdHJhbnNsYXRvcnNfQ04=">Zotero translators 中文维护小组<i class="fa fa-external-link-alt"></i></span></p><p>知网文献可以用这个插件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2wwbzAvamFzbWludW0=">jasminum<i class="fa fa-external-link-alt"></i></span></p><p>下载并放到translater文件夹中(Linux下默认应该是<code>~/Zotero/translators</code>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/l0o0/translators_CN.git <span class="token function">cp</span> -r translators_CN/translators/* ~/Zotero/translators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参照README更新插件的translater就行了。</p><p>VSCode有一个Zotero LaTeX插件，可以用快捷键直接插入文献。安装后报错<code>Error adding citation: HTTPError: Response code 404 (Not Found)</code>，见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ibG9kZS92c2NvZGUtem90ZXJvL2lzc3Vlcy8y">Zotero Citations: could not connect to<i class="fa fa-external-link-alt"></i></span>。安装beta版本后成功解决。<code>yay -S zotero-beta</code></p><p>使用这个插件需要安装zotero插件<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JldG9ycXVlcmUvem90ZXJvLWJldHRlci1iaWJ0ZXg=">zotero-better-bibtex<i class="fa fa-external-link-alt"></i></span></p><p>具体使用请参考：<span class="exturl" data-url="aHR0cDovL3h1Z2VlLmNvbS9pbWFnZXMvMy8zYS9WU2NvZGUlRTQlQkQlQkYlRTclOTQlQTglRTglQUYlQjQlRTYlOTglOEUucGRm">VScode使用说明(Zotero插件) 刘再华<i class="fa fa-external-link-alt"></i></span></p><p>安装好之后按<code>Alt+z</code>就可以方便的插入参考文献了。</p><p>然后要插入GB/T 7714格式化的参考文献，可以参考<span class="exturl" data-url="aHR0cHM6Ly9jdGFuLm1hdGguaWxsaW5vaXMuZWR1L21hY3Jvcy9sYXRleC9jb250cmliL2JpYmxhdGV4LWNvbnRyaWIvYmlibGF0ZXgtZ2I3NzE0LTIwMTUvYmlibGF0ZXgtZ2I3NzE0LTIwMTUucGRm">符合 GB/T 7714-2015 标准的 biblatex 参考文献样式<i class="fa fa-external-link-alt"></i></span></p><p>有模板可以直接套模板，模板应该会处理参考文献格式。没有特殊喜好可以用 等支持GB/T格式的模板。</p><p>ps：如果单纯为了插入GB/T格式的参考文献可以用一点脏办法: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDE4MDU3MDQ=">电子科技大学LaTeX模板参考文献问题解决<i class="fa fa-external-link-alt"></i></span> (不得已的办法)</p><h3 id="自建同步"><a href="#自建同步" class="headerlink" title="自建同步"></a>自建同步</h3><p>Zotero的文件同步免费的只有300M，而且很慢。</p><p>我们可以自建文件同步，只要支持WebDAV协议就行了。这个好办，Nginx就能做到。</p><h2 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h2><h3 id="LaTex插件选择"><a href="#LaTex插件选择" class="headerlink" title="LaTex插件选择"></a>LaTex插件选择</h3><p>通常推荐装Latex Workshop这个插件。配置可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2k=">官方文档<i class="fa fa-external-link-alt"></i></span>, wiki写的很全。功能当然没有TeXStudio全，但是已经满足我的日常需求了（一般只装这一个插件就够了）</p><p>另一个插件叫LaTeX。LaTeX Workshop功能比LaTeX插件多一点，如果只想把VSCode当一个普通的文本编辑器不想要额外的snippet等功能的话，装LaTeX这个插件就可以了。</p><h4 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h4><p>编译配置推荐使用<code>latexmk</code>的方案，可以省去xelatex-bibtex-xelatex*2的多次编译。  </p><p>比如你电的毕业论文模板，完整的编译需要</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xelatex main.texbibtex main.auxbibtex accomplish.auxxelatex main.texxelatex main.tex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译的时候需要先latexmk编译一遍，再bibtex编译一遍，再latexmk编译一遍，见<a href="https://liam.page/2016/01/23/using-bibtex-to-generate-reference/"></a></p><p>或者参考这篇文章：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjk5MzgwMDc=">我们该如何优雅地使用LaTeX in 2020<i class="fa fa-external-link-alt"></i></span></p><p>编辑<code>settings.json</code>, 加上能够编译参考文献的配置，就可以在左侧边栏点击运行了。（其实我还是喜欢在命令行里<code>alias</code>将这三个命令指定一个短命令）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xelatex -> bibtex -> xelatex*2"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"bibtex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"xelatex"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这样需要编译四次，有一个更好的方法是<code>latexmk</code>增量编译</strong></p><p>我们将<code>settings.json</code><strong>改成这个样子</strong>（方案来自<span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAyMC8wNC8yNC91c2luZy1MYVRlWG1rLXdpdGgtTGFUZVh3b3Jrc2hvcC13aXRoLVZTQ29kZS8=">在 VSCode 的 LaTeXworkshop 插件中使用 LaTeXmk<i class="fa fa-external-link-alt"></i></span>）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.latex.tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>            <span class="token string">"-shell-escape"</span><span class="token punctuation">,</span>            <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>            <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>            <span class="token string">"%DOC%"</span><span class="token punctuation">,</span>            <span class="token string">"-outdir=%OUTDIR%"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"XeLaTeXmk"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只需要<code>latexmk</code>一个编译命令，<code>latexmk</code>的增量编译也比原来快了。</p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>LaTeX Workshop 左侧边栏可以查看字数统计<br>可以自定义snippest快捷命令<br>可以插入参考文献（需要手打`\cite{}，支持搜索bib文件里的文献（可以用zotero导出并开启同步））, 这样就不用装zotero latex插件了。</p><h3 id="json配置"><a href="#json配置" class="headerlink" title="json配置"></a>json配置</h3><p>这是我的<code>settings.json</code>配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//双向搜索</span><span class="token property">"latex-workshop.view.pdf.viewer"</span><span class="token operator">:</span> <span class="token string">"tab"</span><span class="token punctuation">,</span><span class="token comment">//将编译生成的文件放到build文件夹</span><span class="token property">"latex-workshop.latex.outDir"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span><span class="token comment">//使用latexmk解决插入文献bibtex需要多次编译的问题</span><span class="token property">"latex-workshop.latex.tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"latexmk"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-xelatex"</span><span class="token punctuation">,</span>            <span class="token string">"-synctex=1"</span><span class="token punctuation">,</span>            <span class="token string">"-shell-escape"</span><span class="token punctuation">,</span>            <span class="token string">"-interaction=nonstopmode"</span><span class="token punctuation">,</span>            <span class="token string">"-file-line-error"</span><span class="token punctuation">,</span>            <span class="token string">"%DOC%"</span><span class="token punctuation">,</span>            <span class="token string">"-outdir=%OUTDIR%"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.recipes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LaTeXmk"</span><span class="token punctuation">,</span>        <span class="token property">"tools"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"XeLaTeXmk"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//去掉右下角烦人的警告</span><span class="token property">"latex-workshop.message.error.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.message.warning.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.latex.clean.fileTypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//设定清理文件的类型(ctrl+alt+c：清除辅助文件)</span>    <span class="token string">"*.aux"</span><span class="token punctuation">,</span>    <span class="token string">"*.bbl"</span><span class="token punctuation">,</span>    <span class="token string">"*.blg"</span><span class="token punctuation">,</span>    <span class="token string">"*.idx"</span><span class="token punctuation">,</span>    <span class="token string">"*.ind"</span><span class="token punctuation">,</span>    <span class="token string">"*.lof"</span><span class="token punctuation">,</span>    <span class="token string">"*.lot"</span><span class="token punctuation">,</span>    <span class="token string">"*.out"</span><span class="token punctuation">,</span>    <span class="token string">"*.toc"</span><span class="token punctuation">,</span>    <span class="token string">"*.acn"</span><span class="token punctuation">,</span>    <span class="token string">"*.acr"</span><span class="token punctuation">,</span>    <span class="token string">"*.alg"</span><span class="token punctuation">,</span>    <span class="token string">"*.glg"</span><span class="token punctuation">,</span>    <span class="token string">"*.glo"</span><span class="token punctuation">,</span>    <span class="token string">"*.gls"</span><span class="token punctuation">,</span>    <span class="token string">"*.ist"</span><span class="token punctuation">,</span>    <span class="token string">"*.fls"</span><span class="token punctuation">,</span>    <span class="token string">"*.log"</span><span class="token punctuation">,</span>    <span class="token string">"*.fdb_latexmk"</span><span class="token punctuation">,</span>    <span class="token string">"*.nav"</span><span class="token punctuation">,</span>    <span class="token string">"*.snm"</span><span class="token punctuation">,</span>    <span class="token string">"*.bcf"</span><span class="token punctuation">,</span>    <span class="token string">"*.run.xml"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"extensions.ignoreRecommendations"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"zotero.latexCommand"</span><span class="token operator">:</span> <span class="token string">"cite"</span><span class="token punctuation">,</span><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"recentlyUsedByPrefix"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="电子科技大学论文模板"><a href="#电子科技大学论文模板" class="headerlink" title="电子科技大学论文模板"></a>电子科技大学论文模板</h2><p>Github上有一个不错的模板是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoaWZ1anVuL1VFU1RDdGhlc2lz">shifujun/UESTCthesis<i class="fa fa-external-link-alt"></i></span>，但是时老师的这个模板很久没更新了。<br>另一个是还在一直更新的模板，本硕博都有，直接clone下来改一下就好了（你电图书馆推荐的，勉强算是半官方的吧）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/x-magus/ThesisUESTC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网上有一些教程，包括：<br>知乎上的一篇文章<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjY3MTI5ODI=">UESTC 本科Latex毕设论文模板 无痛上手指南<i class="fa fa-external-link-alt"></i></span>，这个我本科写毕设的时候就看到同学在朋友圈转过。这个教程我不是很推荐，因为：</p><blockquote><p>但是这里为了减少小伙伴们的学习成本达到“快速无痛上手”的目的（同时考虑到有些小伙伴用word写的很熟练），这里引用电子科大图书馆嵇灵老师的方法：用mathtype编辑，然后转化为latex代码。</p></blockquote><p>河畔现任站长的介绍帖子：<span class="exturl" data-url="aHR0cHM6Ly9iYnMudWVzdGMuZWR1LmNuL2ZvcnVtLnBocD9tb2Q9dmlld3RocmVhZCZ0aWQ9MTc4NjIzMSZleHRyYT0mcGFnZT0x">LaTeX 学校官方模板-2019年11月发<i class="fa fa-external-link-alt"></i></span> （需要登陆查看）<br>以及上一个帖子附件中嵇灵老师的PPT： 使用Latex模板撰写毕业论文（2019)<br>ps：个人不推荐这个PPT，里面推荐使用被思杰克马丁代理的Mathtype，推荐直接使用Office 2019的<code>Alt+=</code>手打公式（比LaTeX的公式甚至还舒服一点，也直接支持LaTeX的公式），实在想用图形界面输入公式就用AxMath吧，正版30多，还算良心不。  </p><p>上面那些教程的安装和使用几乎都是Windows环境，编辑器是overleaf和texstudio，而且操作偏向图形化界面点点点（Linux用户应该不会喜欢连LaTeX打公式都要点点点再粘贴上去）</p><p>注意要安装下面这些额外的包，不然会报<code>! LaTeX Error: File &#39;multirow.sty&#39; not found</code>等错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S texlive-latexextra texlive-science texlive-bibtexextra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Archlinux下字体问题"><a href="#Archlinux下字体问题" class="headerlink" title="Archlinux下字体问题"></a>Archlinux下字体问题</h3><p>一种选择是装win10字体，然后修改<code>thesis-uestc.cls</code>的Default字体设置。AUR有个包<code>ttf-ms-win10-auto-zh_cn</code>，但是这个包由于再分发的版权原因要下载整个win10的iso，然后解压只保留ttf字体文件。身边有win10的建议直接将ttf文件拷贝过来（只要<code>simhei.ttf</code>，<code>simsong.ttf</code>，<code>simkai.ttf</code>就可以了）。<br>或者安装方正字体（默认的），AUR有个包<code>ttf-fangzheng</code>由于版权原因，也不能直接yay安装，只提供PKGBUILD，需要到官网下载ttf然后手动<code>makepkg</code></p><p>另一种选择是找到模板的字体设置，直接修改<code>thesis-uestc.cls</code>文件（反正毕业论文只要求宋体和黑体，又没说什么宋体和黑体，用系统默认的黑体和宋体就行了）</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\else</span><span class="token function selector">\iflinux</span>  <span class="token function selector">\setCJKmainfont</span><span class="token punctuation">[</span>BoldFont=FandolSong-Bold.otf,ItalicFont=FandolKai-Regular.otf<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>FandolSong-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\newCJKfontfamily</span><span class="token punctuation">&#123;</span><span class="token function selector">\heiti</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>FandolHei-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\newfontfamily</span><span class="token punctuation">&#123;</span><span class="token function selector">\heiti</span>@letter<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>FandolHei-Regular.otf<span class="token punctuation">&#125;</span>  <span class="token function selector">\setallmainfonts</span><span class="token punctuation">&#123;</span>Times New Roman<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了中文字体还需要一个Times New Roman罗马字体，这个AUR的包可以直接装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S ttf-times-new-roman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>直接运行<code>latexmk main.tex</code>就可以了。</p><p>在VSCode里面装了LaTeX Workshop可以点击左上角那个绿色的运行按钮。会弹出一个pdf，将pdf放到右边一栏</p><h3 id="关于你电的一些问题"><a href="#关于你电的一些问题" class="headerlink" title="关于你电的一些问题"></a>关于你电的一些问题</h3><p>什么？教务处非要收word怎么办？要不妥协用Word，要不用pdf转图片转Word随便交一个上去，要不就pandoc顶着格式乱掉硬转一个，反正这个就是规定留档，没人看。<br>（隔壁西电早都支持提交LaTeX论文呢，不会有的985连这都不支持吧，非要冒着被制裁的风险用微软家的Word？不会吧？）</p><p>老板要用Word批注功能怎么办？这个没办法，回去用Word吧。<br>推荐你畔现任站长的一篇文章：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0N1aWFDdWlTaGEvVXNlV29yZEluVGhlc2lz">适用于毕业论文的word排版技巧<i class="fa fa-external-link-alt"></i></span> 之前本科毕设论文排版就看的这个，比你电图书馆的讲座教程和PPT好多了。</p><p>知网查重LaTeX会查公式，查重率高怎么办？不好意思这个没办法。</p><h2 id="LaTeX教程和模板推荐"><a href="#LaTeX教程和模板推荐" class="headerlink" title="LaTeX教程和模板推荐"></a>LaTeX教程和模板推荐</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>LaTeX本来就是用于排版的专业排版工具，能做出很多相当漂亮和复杂的效果。LaTeX能做到什么程度可以看StackExchange上的这个问题：<span class="exturl" data-url="aHR0cHM6Ly90ZXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzEzMTkvc2hvd2Nhc2UtJTIwJTIwb2YtYmVhdXRpZnVsLXR5cG9ncmFwaHktZG9uZS1pbi10ZXgtZnJpZW5kcw==">Showcase of beautiful typography done in TeX &amp; friends<i class="fa fa-external-link-alt"></i></span></p><p>想要自己从0设计排版成这样的效果是需要肝的。而我用LaTeX是因为不想花太多精力在排版上，想把它当成Markdown一样的东西用。所以我需要模板。</p><p>模板可以来这里找：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXhzdHVkaW8ubmV0Lw==">LaTeXStudio<i class="fa fa-external-link-alt"></i></span> 不过这个网站最近突然换了前端页面还多了不少广告（有种不详的预感）  </p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>教程这个不同人适合不同的教程，下面是我比较喜欢的一个：</p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNC8wOS8wOC9sYXRleC1pbnRyb2R1Y3Rpb24v">一份其实很短的 LaTeX 入门文档<i class="fa fa-external-link-alt"></i></span></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="关闭LaTeX-Workshop右下角的烦人通知"><a href="#关闭LaTeX-Workshop右下角的烦人通知" class="headerlink" title="关闭LaTeX Workshop右下角的烦人通知"></a>关闭LaTeX Workshop右下角的烦人通知</h3><p>LaTeX WorkShop插件每次保存都会弹出通知<code>Formatting failed. Please refer to LaTeX Workshop Output for details.</code></p><p>关闭右下角每次都弹出的烦人提示</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"latex-workshop.message.error.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"latex-workshop.message.warning.show"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="双向跳转"><a href="#双向跳转" class="headerlink" title="双向跳转"></a>双向跳转</h3><p><del>双向奔赴了属于是</del></p><p>目前最新的LaTeX Workshop插件是无需配置可以直接跳转的。（插件内置的PDF.js，在VSCode内预览）<br>网上很多教程已经过时了，直接看官方文档。官方文档写的很清楚：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbWVzLVl1L0xhVGVYLVdvcmtzaG9wL3dpa2kvVmlldyNzeW5jdGV4">https://github.com/James-Yu/LaTeX-Workshop/wiki/View#synctex<i class="fa fa-external-link-alt"></i></span></p><p>从pdf跳转到tex文件使用<code>Ctrl+鼠标左键</code><br>从tex文件定位到pdf相应位置<code>Ctrl+Alt+J</code>  </p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>插入图片可以放到相应位置然后手写<code>\includegraphics&#123;example.jpg&#125;</code>。<br>如果想从剪切板自动粘贴，和Markdown一样，用paste image插件就行了。我Markdown的paste image配置和latex的不一样，所以放到workspace的json文件里</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.defaultName"</span><span class="token operator">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.encodePath"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.path"</span><span class="token operator">:</span> <span class="token string">"$&#123;currentFileDir&#125;/pic"</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.showFilePathConfirmInputBox"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> <span class="token string">"\\includegraphics[scale =]&#123;$&#123;imageSyntaxPrefix&#125;$&#123;imageFilePath&#125;$&#123;imageSyntaxSuffix&#125;&#125;"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者我们在user的<code>settings.json</code>里加上</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> .......<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表示只对latex生效。</p><p>insertPattern选项请根据模板自己修改，比如你电的学位论文模板改成这样就可以了。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pasteImage.insertPattern"</span><span class="token operator">:</span> <span class="token string">"\\begin&#123;figure&#125;[h]\n\t\\includegraphics[width= 6cm]&#123;$&#123;imageFileName&#125;&#125;\n\t\\caption&#123;$&#123;imageFileNameWithoutExt&#125;&#125;\n\t\\label&#123;fig:$&#123;imageFileNameWithoutExt&#125;&#125;\n\\end&#123;figure&#125;"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外需要注意的是paste image插件的快捷键<code>ctrl+alt+v</code>和LaTeX Workshop冲突，要在<code>Keyboard Shortcuts</code>里面换掉一个，不然快捷键粘贴图片不起作用。</p><h3 id="参考文献报错"><a href="#参考文献报错" class="headerlink" title="参考文献报错"></a>参考文献报错</h3><p>设置参考文献这两行要放在<code>\end&#123;document&#125;</code>前面</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\bibliography</span><span class="token punctuation">&#123;</span>export.bib<span class="token punctuation">&#125;</span><span class="token function selector">\bibliographystyle</span><span class="token punctuation">&#123;</span>plain<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不然会报错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">I found no \bibdata command<span class="token separator comment">---</span>while reading file <span class="token domain constant">test.aux</span>I found no \bibstyle command<span class="token separator comment">---</span>while reading file test<span class="token punctuation">.</span>aux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="某些知网文献bibtex编译报错"><a href="#某些知网文献bibtex编译报错" class="headerlink" title="某些知网文献bibtex编译报错"></a>某些知网文献bibtex编译报错</h3><p>垃圾知网不仅弄出了天价查重、caj格式这些天怒人怨的东西，中文文献的引用格式也挺乱的，经常缺这个少那个，而且不支持bibtex。如果用zotero转出来也会因为缺少各种字段而报错。查了一下没什么太好的解决办法。<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2Mzk4OTA5L2Fuc3dlci8zMjY0Mzc4OA==">如何使用BibTeX引用中文参考文献？ - 刘海洋的回答 - 知乎<i class="fa fa-external-link-alt"></i></span> 刘海洋老师推荐自己写bibtex，但是我给这些东西写这些，我用LaTeX就是因为不想在word的排版上纠缠过多。  </p><p>百度好歹干了点人事，能导出bibtex格式。但是有很多学位论文，百度学术也没有万方也没有，就知网有。  </p><p>之前说过，如果单纯为了插入GB/T格式的参考文献可以用一点脏办法: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDE4MDU3MDQ=">电子科技大学LaTeX模板参考文献问题解决<i class="fa fa-external-link-alt"></i></span> (不得已的办法)。比如插入知网文献的时候可以用这个。<strong>一开始觉得这是不太好的脏办法</strong>，在被知网的一些参考文献格式整麻了以后，觉得<strong>这才是最好的方法</strong>。直接粘贴纯文本，反正最后排版效果一样就行了。bibtex的理念不适合处理脏东西，脏东西要用脏办法。</p><p>编辑<code>thesis-uestc.bst</code>, 新建一个参看文献格式</p><pre class="line-numbers language-bst" data-language="bst"><code class="language-bst">FUNCTION &#123;biaoti&#125;&#123;    bibitem.begin    title write$    newline$&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>reference.bib</code>里面粘贴复制粘贴的文本就可以了，相当于引用纯文本</p><h3 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h3><p>只对Latex开启自动换行</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[latex]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="电子科技大学论文模板识别不了linux环境"><a href="#电子科技大学论文模板识别不了linux环境" class="headerlink" title="电子科技大学论文模板识别不了linux环境"></a>电子科技大学论文模板识别不了linux环境</h4><p>编译的时候加参数<code>-shell-escape</code>。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p1aWN5L1VFU1RDX3JlcG9ydF9sYXRleC90cmVlL21hc3Rlci9VRVNUQ19yZXBvcnQ=">https://github.com/zuicy/UESTC_report_latex/tree/master/UESTC_report<i class="fa fa-external-link-alt"></i></span> 电子科技大学实验报告的LaTeX模板，是你电信软学院的同学做的，看起来似乎全校通用（改一下学院名字就好了）。<br>LaTeXStudio上那个是比较老的模板：<span class="exturl" data-url="aHR0cHM6Ly93d3cubGF0ZXhzdHVkaW8ubmV0L2FyY2hpdmVzLzUxNTQxLmh0bWw=">电子科大的实验报告 LaTeX 模板 - 用户投稿<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTE4ODkyNTI=">Linux 下的 LaTex 写作工具链（1）<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3h1Z2VlLmNvbS9pbWFnZXMvMy8zYS9WU2NvZGUlRTQlQkQlQkYlRTclOTQlQTglRTglQUYlQjQlRTYlOTglOEUucGRm">VScode使用说明(Zotero插件) 刘再华<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ibG9kZS92c2NvZGUtem90ZXJv">https://github.com/mblode/vscode-zotero<i class="fa fa-external-link-alt"></i></span> vscode zotero的Markdown引用文献插件。  </p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAxNi8wMS8yMy91c2luZy1iaWJ0ZXgtdG8tZ2VuZXJhdGUtcmVmZXJlbmNlLw==">使用 BibTeX 生成参考文献列表<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvTGFUZVg=">https://en.wikibooks.org/wiki/LaTeX<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1c2hpZG9uZy9iaWJsYXRleC16aC1jbg==">https://github.com/hushidong/biblatex-zh-cn<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1c2hpZG9uZy9iaWJsYXRleC1zb2x1dGlvbi10by1sYXRleC1iaWJsaW9ncmFwaHk=">https://github.com/hushidong/biblatex-solution-to-latex-bibliography<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9saWFtLnBhZ2UvMjAyMC8wNC8yNC91c2luZy1MYVRlWG1rLXdpdGgtTGFUZVh3b3Jrc2hvcC13aXRoLVZTQ29kZS8=">https://liam.page/2020/04/24/using-LaTeXmk-with-LaTeXworkshop-with-VSCode/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2Rkc3dodS5tZS9wb3N0cy8yMDE4LTA0L3ZzLWNvZGUtZm9yLWxhdGV4Lw==">http://ddswhu.me/posts/2018-04/vs-code-for-latex/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHVnLm9yZy90ZXhsaXZlL2RvYy90ZXhsaXZlLXpoLWNuL3RleGxpdmUtemgtY24ucGRm">https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开源拖拉机将就着用吧，又不是不能用，再见Word、EndNote和Windows。顺便说一下你电的LaTeX模板怎么用。不定期更新到毕业。&lt;/p&gt;</summary>
    
    
    
    
    <category term="LaTeX" scheme="https://zhangjk98.xyz/tags/LaTeX/"/>
    
    <category term="Zotero" scheme="https://zhangjk98.xyz/tags/Zotero/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 Lab Syscall 笔记</title>
    <link href="https://zhangjk98.xyz/6.s081-lab-syscall/"/>
    <id>https://zhangjk98.xyz/6.s081-lab-syscall/</id>
    <published>2021-09-15T12:01:25.000Z</published>
    <updated>2021-09-15T12:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>暑假摸了一个月的鱼，回来接着做Lab。2021 spring 的6.S081已经开始了，直接做2021的吧（看了一下好像没有太大变化）。而且xv6-labs-2021这个repo貌似修复了Archlinux上新版gdb不兼容的问题，不用再降级包或者去用Ubuntu 20了。</p><span id="more"></span><p>注：目前现在2021的repo由于进度原因只有riscv、util和syscall三个分支，没有master分支，所以会报警告：<code>warning: remote HEAD refers to nonexistent ref, unable to checkout.</code>这个不用管。</p><h2 id="关于syscall"><a href="#关于syscall" class="headerlink" title="关于syscall"></a>关于syscall</h2><p>syscall一般很少直接用，用c语言写东西的时候大部分都是通过wrapper函数间接调用syscall。其他语言里用到系统调用的就更少了，我就只在某次用golang的网络库实现traceroute的时候调用过一次。</p><p>之前对syscall的印象是x86下<code>int 80</code>中断，从用户空间切到内核空间。常用的比如read, write, open, close啊，以及mmap等等。</p><p>6.S081改用risc-v, 不太一样。<br>risc-v中有三种模式：<br>User-mode，用户模式。普通应用会在这个模式下运行。<br>Supervisor-mode， 特权模式。<br>Machine-mode，机器模式，需要的权限比supervisor模式还要高。一些嵌入式几乎整个都运行在这种模式下，完整的操作系统就只有bootloader等是在M模式下，大部分任务都在U和S模式下。<br>关于risc-v的特权模式可以参考手册：The RISC-V Instruction Set Manual<br>Volume II: Privileged Architecture</p><p>进入syscall是通过ecall（环境调用）指令，大部分都是从u模式进入s模式，结束后使用<code>sret</code>指令返回。</p><p>还有就是讲义中将异常（exception）和中断（interrupt）都算做陷阱（trap），一开始看讲义的时候一直以为这是三个不同的东西。后来发现涉及到supervisor和machine模式的都算做trap。</p><h2 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h2><p>Lab2就两个，简单熟悉一下系统调用，不难。</p><h3 id="System-call-tracing-moderate"><a href="#System-call-tracing-moderate" class="headerlink" title="System call tracing (moderate)"></a>System call tracing (moderate)</h3><p>这个不是很难，不过要改的东西很多，按照提示一点一点做就行了。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9zeXNjYWxscy4yLmh0bWw=">https://man7.org/linux/man-pages/man2/syscalls.2.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9maWxpcHBvLmlvL2xpbnV4LXN5c2NhbGwtdGFibGUv">https://filippo.io/linux-syscall-table/<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;暑假摸了一个月的鱼，回来接着做Lab。2021 spring 的6.S081已经开始了，直接做2021的吧（看了一下好像没有太大变化）。而且xv6-labs-2021这个repo貌似修复了Archlinux上新版gdb不兼容的问题，不用再降级包或者去用Ubuntu 20了。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="syscalls" scheme="https://zhangjk98.xyz/tags/syscalls/"/>
    
  </entry>
  
  <entry>
    <title>Earlyoom和oomd使用，解决Linux内存耗尽的一点尝试</title>
    <link href="https://zhangjk98.xyz/early-oom-and-oomd-for-out-of-memory/"/>
    <id>https://zhangjk98.xyz/early-oom-and-oomd-for-out-of-memory/</id>
    <published>2021-09-14T08:08:11.000Z</published>
    <updated>2021-09-14T08:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>太长不看：就是把原来内核的OOM killer挪到用户空间（userspace）去，这样就可以在系统卡住之前（通常桌面卡住的时候OOM killer认为还不用kill）提前kill掉占内存最大的一个，让桌面和鼠标可以正常工作。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先来看phoronix的一个报道：<span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PUxpbnV4LURvZXMtQmFkLUxvdy1SQU0=">Yes, Linux Does Bad In Low RAM / Memory Pressure Situations On The Desktop<i class="fa fa-external-link-alt"></i></span>  </p><p>Linux桌面在小内存、内存紧张的情况下表现很差。（用过Linux现在桌面的相信都有这种感受）</p><p>解决内存不足、内存耗尽的<strong>最好办法还是加钱多装几根内存条</strong>，什么swap、zram还有本文的earlyoom和oomd都是权宜之计。 </p><h2 id="OOM简介"><a href="#OOM简介" class="headerlink" title="OOM简介"></a>OOM简介</h2><p>OOM很多人应该都很熟悉了，服务器上跑的任务申请内存超过了可用内存就会发生OOM（其实是可以Overcommit的，这个以后再说）</p><p>为了避免内存耗尽（Out of Memory，OOM），OOM-killer在内存将要耗尽的时候杀掉<code>oom_score</code>最大的进程。（如果连OOM-killer都没能及时kill掉，那就会触发kernel panic）</p><p>但是内核默认的OOM策略比较保守，如果你是桌面用户，那么还没等到OOM killer工作，图形界面就已经卡死（handling， 有的时候也被称为freeze）了。Earlyoom和oomd等工具运行在用户空间，让一些任务提前崩溃，让图形界面还能正常工作。</p><p>OOM killer和Overcommit等更详细的介绍我写到<a href="https://zhangjk98.xyz/linux-out-of-memory">这里</a>, 这里不多说了。</p><h2 id="Earlyoom"><a href="#Earlyoom" class="headerlink" title="Earlyoom"></a>Earlyoom</h2><p>EarlyOOM</p><p>Earlyoom在桌面系统的表现比较成功，Fedora 32 已经默认启用了EarlyOOM。</p><h2 id="oomds"><a href="#oomds" class="headerlink" title="oomds"></a>oomds</h2><p>oomd是Facebook做的，后来和systemd一起做了一个sysytemd-oomd守护进程，现已加入systemd全家桶。</p><h2 id="在Archlinux上安装和使用"><a href="#在Archlinux上安装和使用" class="headerlink" title="在Archlinux上安装和使用"></a>在Archlinux上安装和使用</h2><p>Earlyoom已经在community源里了。oomd这个包目前是orphand，我们用Earlyoom就好了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S earlyoom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接terminal里执行<code>earlyoom</code>就可以了。（可能需要root权限，不然会报<code>Could not lock memory - continuing anyway: Cannot allocate memory</code>）</p><p>或者使用systemd守护进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> earlyoom --now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后又到了调参环节，编辑<code>/etc/default/earlyoom</code>，根据你的机器配置和使用习惯改改参数。</p><p>默认10秒检查一次，当可用内存小于10%和swap小于10的时候执行<code>SIGTERM</code>，当可用内存小于5%和swap小于5%的时候执行<code>SIGKILL</code>。</p><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>一开始我笔记本和台式机都8G内存，当时那个版本的VSCode有严重的内存泄漏，经常泄漏到我桌面连鼠标都动不了了。只能切到tty杀掉VSCode的进程或者魔术键重启，烦的我一度想投奔vim。<br>后来买了两根16G的笔记本内存条，又把教研室的台式内存（拆了4根8G ddr3的杂牌内存条下来）加到了32G，开着一个虚拟机好多Docker一个Goland还有Chrome，再也没遇到过内存不够用的问题。<br>最近要在另一个8G内存的电脑上和只有2g内存的VPS上面干点活，又回到了当初只有8G内存的时候vscode频繁内存泄漏导致整个桌面直接卡死的拮据状态。Ubuntu 16.04 那个版本的GNOME内存泄漏和内部错误也相当讨厌。换了lxde好了一点。然后试了试swap，效果不好。然后用了zram, 效果比swap好不少。  </p><p>最后用了Earlyoom，好多了，不用频繁手动处理桌面卡死了。（注意4G以下这种小内存不推荐用这些，会浪费不少可用内存）</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JmamFrb2IvZWFybHlvb20=">https://github.com/rfjakob/earlyoom<i class="fa fa-external-link-alt"></i></span>  </p><p>Fedora默认启用Earlyoom的一些讨论：</p><p><span class="exturl" data-url="aHR0cHM6Ly9mZWRvcmFwcm9qZWN0Lm9yZy93aWtpL0NoYW5nZXMvRW5hYmxlRWFybHlvb20jRW5hYmxlX0Vhcmx5T09N">https://fedoraproject.org/wiki/Changes/EnableEarlyoom#Enable_EarlyOOM<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9wYWd1cmUuaW8vZmVkb3JhLXdvcmtzdGF0aW9uL2lzc3VlLzExOQ==">https://pagure.io/fedora-workstation/issue/119<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9bmV3c19pdGVtJnB4PUZlZG9yYS0zMi1EZWZhdWx0LUVhcmx5T09N">https://www.phoronix.com/scan.php?page=news_item&amp;px=Fedora-32-Default-EarlyOOM<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cDovL3d3dy53b3dvdGVjaC5uZXQvbWVtb3J5X21hbmFnZW1lbnQvb29tLmh0bWw=">Linux vm运行参数之（二）：OOM相关的参数<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;太长不看：就是把原来内核的OOM killer挪到用户空间（userspace）去，这样就可以在系统卡住之前（通常桌面卡住的时候OOM killer认为还不用kill）提前kill掉占内存最大的一个，让桌面和鼠标可以正常工作。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="OOM" scheme="https://zhangjk98.xyz/tags/OOM/"/>
    
    <category term="earlyoom" scheme="https://zhangjk98.xyz/tags/earlyoom/"/>
    
    <category term="oomd" scheme="https://zhangjk98.xyz/tags/oomd/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程调度，从服务器到桌面</title>
    <link href="https://zhangjk98.xyz/linux-processing-scheduling/"/>
    <id>https://zhangjk98.xyz/linux-processing-scheduling/</id>
    <published>2021-08-30T03:26:55.000Z</published>
    <updated>2021-08-30T03:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>用了一周linux-ck和MuQSS，发现没有想象中的那么好。哦，这还要从一个麻醉师说起。</p><span id="more"></span><p>没仔细看调度器之前我以为Linux进程调度都是和内存管理一样很复杂的东西。实现比较简单的进程调度就几十行代码。CFS这种比较复杂的就不仔细说了、多核和分布式调度这些比较复杂的下面也不会多讲。（主要是我水平太菜了，怕讲错）</p><h2 id="进程调度简介"><a href="#进程调度简介" class="headerlink" title="进程调度简介"></a>进程调度简介</h2><p>进程是操作系统虚拟化出来的东西，</p><p>Linux里面基本不区分进程和线程，统称为task（任务）。下面的进程等词都指task。</p><p>CPU的资源是有限的，进程之间需要一个调度器来分配资源使用。最常见的调度器是Linux内核主线默认采用的CFS。</p><p>注：不要只盯着复杂度O(n), O(1), O(log n), 效果还是得看实测。引用一下cauche调度器readme里的一段话</p><p>O(n) sounds scary, but usually for a machine with 4 CPUS where it is used for desktop or mobile jobs, the maximum number of runnable tasks might not exceeds 10 (at the pick next run time) - the idle tasks are excluded since they are dequeued when sleeping and enqueued when they wake up.</p><p>在电脑桌面和手机、4核CPU使用场景，最多运行任务不超过10个。所以复杂度O(n)不一定比O(1)调度速度快。</p><h3 id="关于进程"><a href="#关于进程" class="headerlink" title="关于进程"></a>关于进程</h3><p>在<code>include/linux/sched.h</code>头文件里面有进程的定义（一个结构体来表示的task）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Linux系统在启动的时候会首先执行<code>start_kernel()</code>函数<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvdjUuNy1yYzEvc291cmNlL2luaXQvbWFpbi5j">init/main.c<i class="fa fa-external-link-alt"></i></span>。</p><p>首先是<code>set_task_stack_end_magic(&amp;init_task)</code>创建一个叫<code>init_task</code>的进程，一般管它叫0号进程（也就是后面的idle进程）。</p><p>然后调用<code>sched_init();</code>函数初始化进程调度。</p><p>然后在<code>start_kernel()</code>函数最后调用<code>rest_init</code>, 两个<code>kernel_thread</code>分别创建了一号进程（<code>init</code>）和二号进程(<code>kthreadd</code>)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">noinline <span class="token keyword">void</span> __ref <span class="token function">rest_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">;</span><span class="token keyword">int</span> pid<span class="token punctuation">;</span><span class="token function">rcu_scheduler_starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">kernel_thread</span><span class="token punctuation">(</span>kernel_init<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> CLONE_FS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">kernel_thread</span><span class="token punctuation">(</span>kthreadd<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> CLONE_FS <span class="token operator">|</span> CLONE_FILES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般1号进程是用户态进程，整个用户态的进程树都是它<code>fork</code>出来的。关于1号进程的介绍可以看看systemd作者写的<a href="http://0pointer.de/blog/projects/systemd.html"><span class="exturl" data-url="aHR0cDovLzBwb2ludGVyLm5ldC9ibG9nL3Byb2plY3RzL3N5c3RlbWQuaHRtbA==">Rethinking PID 1<i class="fa fa-external-link-alt"></i></span></a> 中文翻译: <span class="exturl" data-url="aHR0cDovL2thaXdhbmdjaGVuLmdpdGh1Yi5pby8yMDE0LzEwLzA4L3N5c3RlbWQuaHRtbA==">重新思考 1 号进程<i class="fa fa-external-link-alt"></i></span></p><p>2号进程是内核进程，负责管理和调度内核线程。</p><p>进程描述符里面有一些调度需要的信息，比如。</p><h3 id="初代调度器"><a href="#初代调度器" class="headerlink" title="初代调度器"></a>初代调度器</h3><p>初代调度器非常简单，就是一个runqueue（运行队列），源码在<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvMC4xMS9zb3VyY2Uva2VybmVsL3NjaGVkLmM=">kernel/sched.c<i class="fa fa-external-link-alt"></i></span>,   我们忽略掉系统调用和printk日志以及floppy之类的，只看调度部分：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* *  'schedule()' is the scheduler function. This is GOOD CODE! There * probably won't be any reason to change this, as it should work well * in all circumstances (ie gives IO-bound processes good response etc). * The one thing you might take a look at is the signal-handler code here. * *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other * tasks can run. It can not be killed, and it cannot sleep. The 'state' * information in task[0] is never used. */</span><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* this is the scheduler proper: */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">></span> c<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>priority<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就只有这么几行。也没有nice值和多核，甚至没有生命周期，还是很容易理解的。</p><p>jiffies是系统开机以来tick的次数（alarm&gt;jiffies说明过期了，重置为0）</p><p>counter是时间片，单位是tick（时钟滴答），调度器根据couter大小决定优先级（couter越大优先级越高）</p><p>NR_TASKS是task（进程）总数。</p><p>第一个循环是检查一遍<span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi9hbGFybS4yLmh0bWw=">alarm()<i class="fa fa-external-link-alt"></i></span>函数，唤醒任何收到alarm传来的signal的没有被阻塞的tasks，将<code>TASK_INTERRUPTIBLE</code>（挂起）改为<code>TASK_RUNNING</code>可执行。</p><p>然后<code>while(1)</code> 这个死循环一直执行到关机，每次循环先<code>while (--i)</code>找出counter（时间片）最大的task。（couter越大说明）</p><p><code>if (c) break;</code>和下面的这些是说如果c为0（所有进程的counter用完了），就重新分配counter。</p><p>最后调用<code>switch_to(next)</code>切换进程。（切换到counter最大的一个）</p><p>然后还有几个函数，是几个状态的转换，也很简单。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>小tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmp<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token operator">*</span>p<span class="token operator">=</span>current<span class="token punctuation">;</span>repeat<span class="token operator">:</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">goto</span> repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个调度器复杂度是O(n)的（复杂度没啥用，因为NR_TASKS早期特别小）。只有分配的counter值作为调度优先级</p><p>0号进程的优先级是最低的（最后被调度）。在后面的调度器中0号进程根本不参与调度。</p><h3 id="O-n-调度器"><a href="#O-n-调度器" class="headerlink" title="O(n)调度器"></a>O(n)调度器</h3><p>早期的调度器是和UNIX的差不多，就是O(n)调度器。</p><p>O(n)调度器是用runqueue（运行队列），和初代调度器不同的是CPU每个核都有一个runqueue。</p><h3 id="O-1-调度器"><a href="#O-1-调度器" class="headerlink" title="O(1)调度器"></a>O(1)调度器</h3><p>2.6版本</p><p>O(1)调度器比较适合服务器，基本上做到了将I/O利用率最大化。</p><p>静态优先级（一般叫nice值）</p><h3 id="CFS"><a href="#CFS" class="headerlink" title="CFS"></a>CFS</h3><p>CFS调度器（Completely Fair Scheduler），用的最广的一个（从2.6开始Linux内核主线默认就是他）。CFS的意思是完全公平调度器，完全公平是说每一个进程在一个周期时间内运行相同的时间。在一个生命周期<code>T</code>内，<code>N</code>个task占用CPU的时间均为$T/N$</p><p>CFS是一个红黑树实现的。是几种调度器中实现很复杂的一个调度器，源码在这里：<span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvbGF0ZXN0L3NvdXJjZS9rZXJuZWwvc2NoZWQvZmFpci5j">sched_fair.c Linux Kernel Source<i class="fa fa-external-link-alt"></i></span></p><p>文档在这里：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9zY2hlZHVsZXIvc2NoZWQtZGVzaWduLUNGUy50eHQ=">https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt<i class="fa fa-external-link-alt"></i></span></p><p>调度实体sched_entity，虚拟运行时间vruntime</p><h3 id="RT调度器"><a href="#RT调度器" class="headerlink" title="RT调度器"></a>RT调度器</h3><p>实时调度器，Real Time Scheduler。一般使用优先级队列（priority queue）实现的</p><p>进程根据优先级（priority）</p><p>实时调度器调度的实时进程的优先级通常很高（优先级0-99，不同内核可能不太一样）</p><p>非实时的进程优先级在100-139</p><p>执行<code>ps</code>命令可以查看优先级，PRI这一列是优先级（priority），NI这一列是NICE值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ps</span> -elF S   <span class="token environment constant">UID</span>     PID    <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD<span class="token number">4</span> R     <span class="token number">0</span>       <span class="token number">1</span>       <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">25249</span> -      ?        00:00:07 systemd<span class="token number">1</span> S     <span class="token number">0</span>       <span class="token number">2</span>       <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 kthreadd<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">3</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_gp<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">4</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_par_gp<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">6</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 kworker/0:0H-events_highpri<span class="token number">1</span> I     <span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 mm_percpu_wq<span class="token number">1</span> S     <span class="token number">0</span>       <span class="token number">9</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 rcu_tasks_rude_<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">10</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 rcu_tasks_trace<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">11</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:08 ksoftirqd/0<span class="token number">1</span> I     <span class="token number">0</span>      <span class="token number">12</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:18 rcu_sched<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">13</span>       <span class="token number">2</span>  <span class="token number">0</span> -40   - -     <span class="token number">0</span> -      ?        00:00:00 migration/0<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">14</span>       <span class="token number">2</span>  <span class="token number">0</span>   <span class="token number">9</span>   - -     <span class="token number">0</span> -      ?        00:00:00 idle_inject/0<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">16</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 cpuhp/0<span class="token number">5</span> S     <span class="token number">0</span>      <span class="token number">17</span>       <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 cpuhp/1<span class="token number">1</span> S     <span class="token number">0</span>      <span class="token number">18</span>       <span class="token number">2</span>  <span class="token number">0</span>   <span class="token number">9</span>   - -     <span class="token number">0</span> -      ?        00:00:00 idle_inject/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多核"><a href="#多核" class="headerlink" title="多核"></a>多核</h3><p>CPU的每个核都有一个runqueue</p><h3 id="组调度"><a href="#组调度" class="headerlink" title="组调度"></a>组调度</h3><p>本来打算先跳过这一部分的，以后写cgroup的时候再说。但是这个东西对桌面的优化很重要，比如这个很老的补丁。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9YXJ0aWNsZSZpdGVtPWxpbnV4XzI2MzdfdmlkZW8mbnVtPTE=">The ~200 Line Linux Kernel Patch That Does Wonders<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJjLmluZm8vP2w9bGludXgta2VybmVsJm09MTI4OTc4MzYxNzAwODk4Jnc9Mg==">Re: [RFC/RFT PATCH v3] sched: automated per tty task groups<i class="fa fa-external-link-alt"></i></span> </p><p>现在Linux的调度策略比较多，不同用户通过组调度进行资源的分配和隔离。说到这里你是不是想起了cgroup，对，这个东西就是用cgroup实现的。</p><h3 id="其他的调度器"><a href="#其他的调度器" class="headerlink" title="其他的调度器"></a>其他的调度器</h3><p>官方不支持调度器像kernel module一样做成可插拔的，所以其他魔改的调度策略通常单独做一个内核。</p><h2 id="适合桌面的进程调度"><a href="#适合桌面的进程调度" class="headerlink" title="适合桌面的进程调度"></a>适合桌面的进程调度</h2><p>Linux的一些设计和参数偏向服务器、嵌入式设备等用途，毕竟普通桌面用户的意见加起来都比不上半个红帽。<br>IO调度没关系，反正有个SSD就完全够了，用NOOP调度甚至直接不要IO调度都没关系。<br>进程调度就不太行了，默认的CFS (Completely Fair Scheduler)调度非常不适合日常桌面使用。<br>通常服务器多是I/O密集型任务，而桌面（Desktop Enviroment，比如KDE和GNOME这种）需要快速响应（低延迟）和不断切换任务，CFS就不适合了（没法做到不断的切换优先级和抢占）。</p><p>比如编译、看视频CPU硬解码、玩游戏，负载高了之后，如果用CFS调度桌面会非常卡，极大影响体验。</p><p>好吧这不太符合Unix哲学，你在terminal里面用管道</p><p>麻醉师Con Kolivas针对桌面系统做的BFS（后来改名叫MuQSS了）</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXgtbWFnYXppbmUuY29tL3Zhci9saW51eF9tYWdhemluL3N0b3JhZ2UvaW1hZ2VzL21lZGlhL2xpbnV4LW1hZ2F6aW5lLWVuZy11cy9pbWFnZXMvbmV3cy1pbWFnZXMvY2FydG9vbi1mZWF0dXJlcy8zNjc5MDgtMS1lbmctVVMvQ2FydG9vbi1GZWF0dXJlc19tZWRpdW0ucG5n">https://www.linux-magazine.com/var/linux_magazin/storage/images/media/linux-magazine-eng-us/images/news-images/cartoon-features/367908-1-eng-US/Cartoon-Features_medium.png<i class="fa fa-external-link-alt"></i></span></p><h2 id="服务器进程调度"><a href="#服务器进程调度" class="headerlink" title="服务器进程调度"></a>服务器进程调度</h2><p>大多数服务器默认的CFS以及足够合适了。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvVGVuY2VudE9TLWtlcm5lbCMlRTclQTYlQkIlRTclQkElQkYlRTglQjAlODMlRTUlQkElQTYlRTclQUUlOTclRTYlQjMlOTVidA==">https://github.com/Tencent/TencentOS-kernel#离线调度算法bt<i class="fa fa-external-link-alt"></i></span></p><h2 id="更改进程调度"><a href="#更改进程调度" class="headerlink" title="更改进程调度"></a>更改进程调度</h2><h3 id="chrt更改调度策略"><a href="#chrt更改调度策略" class="headerlink" title="chrt更改调度策略"></a>chrt更改调度策略</h3><p>使用见<span class="exturl" data-url="aHR0cDovL2Jsb2cubHVqdW45OTcyLndpbi9ibG9nLzIwMTgvMDgvMjgvJUU0JUJEJUJGJUU3JTk0JUE4Y2hydCVFNCVCRiVBRSVFNiU5NCVCOSVFOCVCRiU5QiVFNyVBOCU4QiVFOCVCMCU4MyVFNSVCQSVBNiVFNyVBRCU5NiVFNyU5NSVBNSVFNSU4RiU4QSVFNCVCQyU5OCVFNSU4NSU4OCVFNyVCQSVBNy9pbmRleC5odG1s">使用chrt修改进程调度策略及优先级<i class="fa fa-external-link-alt"></i></span></p><h3 id="内核选择"><a href="#内核选择" class="headerlink" title="内核选择"></a>内核选择</h3><p><em>选择非官方支持的内核请谨慎，因为可能有很多不兼容的问题。</em>没有特别需求和强迫症还是推荐使用有官方支持的内核，比如Archlinux官方源支持维护``linux<code>（没啥特殊偏好就这个呗），</code>linux-lts<code>（lts版，不想天天更新内核就用这个）， </code>linux-zen<code>（跟AMD的zen关系不太大，主要是针对桌面的），</code>linux-harended`（有安全加固，会牺牲一定性能）</p><p><code>linux</code>这个包的调度器是CFS，大多数情况下表现都不差。（lts当然也是喽）</p><p>如果你是桌面用户，对性能和延迟有需求，可以试试linux-ck、linux-zen、linux-xanmod、linux-tgk等一堆针对桌面和性能优化的内核。<code>linux-ck</code>的调度器是MuQSS。xanmod的调度器可以选cauche。</p><p>我个人体验是xanmod内核的延迟最低（直接拯救了我玩空洞骑士时肉眼可见的延迟）。玩OSU音游的喜欢用linux-zen，这个包是官方维护，比较省心，xanmod延迟虽然跑分上比这个低，对延迟要求不苛刻、反应慢的，可能体验不出来太大区别。</p><p>（音游在Linux上的声音延迟应该是PulseAudio的锅，但是现在Pipewire又不稳，实际效果还不如PulseAudio,等pipewire稳定下来不知道要多久，只有打点补丁才能维持的了生活的样子。感谢这位玩家给wine-osu打的补丁<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRoZXBvb24uZnIvb3N1TGludXhBdWRpb0xhdGVuY3kv">Low-latency osu! on Linux<i class="fa fa-external-link-alt"></i></span>）<br><em>关于游戏的题外话</em><br>Archlinux可以装gamemode和performance-tweaks（这个在chaotic-aur里面）。</p><p>xanmod实测见：<span class="exturl" data-url="aHR0cHM6Ly93d3cucGhvcm9uaXguY29tL3NjYW4ucGhwP3BhZ2U9YXJ0aWNsZSZpdGVtPXhhbm1vZC1saXF1b3JpeC01MTA=">XanMod’s Linux 5.10 Kernel Helping Tap Extra Performance With The AMD Ryzen 9 5900X<i class="fa fa-external-link-alt"></i></span><br>cuache相关讨论：<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS5lbmRlYXZvdXJvcy5jb20vdC9pbnRyb2R1Y2luZy10aGUtY2FjdWxlLXNjaGVkdWxlci1hLWNmcy1yZXBsYWNlbWVudC8xMzY0NA==">https://forum.endeavouros.com/t/introducing-the-cacule-scheduler-a-cfs-replacement/13644<i class="fa fa-external-link-alt"></i></span></p><p>如果要用btrfs或者cgroups，请注意MuQSS兼容性不太好。</p><p>Archlinux直接AUR编译就行了。不过很多人换ck内核是因为老机器性能不好，找一个编译好的源（比如repo-ck）或者在别的机子上编译一个吧。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzcyMDIyNy8=">https://lwn.net/Articles/720227/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXgtbWFnYXppbmUuY29tL09ubGluZS9OZXdzL0Nvbi1Lb2xpdmFzLUludHJvZHVjZXMtTmV3LUJGUy1TY2hlZHVsZXI=">https://www.linux-magazine.com/Online/News/Con-Kolivas-Introduces-New-BFS-Scheduler<i class="fa fa-external-link-alt"></i></span></p><p>为什么Linux CFS调度器没有带来惊艳的碾压效果<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MC9hcnRpY2xlL2RldGFpbHMvOTY1MDAxODY=">Linux桌面GUI系统的调度器应该怎么做才不卡顿呢？<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MC9hcnRpY2xlL2RldGFpbHMvOTYzNjI3ODk=">为什么Windows/iOS操作很流畅而Linux/Android却很卡顿呢<i class="fa fa-external-link-alt"></i></span> dog250这位博主在CSDN上从2009年开始，一直在写，文章还不错（不要因为CSDN就不看啊，这是早期良心用户）。这样的稀有博主是我一直没舍得狠下心屏蔽CSDN的原因（颇有一种在垃圾坑里淘宝的感觉）</p><p><span class="exturl" data-url="aHR0cHM6Ly9kcmF2ZW5lc3MubWUvc3lzdGVtLWRlc2lnbi1zY2hlZHVsZXIv">调度系统设计精要 - 面向信仰编程<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2NrLmtvbGl2YXMub3JnLw==">http://ck.kolivas.org/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9saXF1b3JpeC5uZXQv">https://liquorix.net/<i class="fa fa-external-link-alt"></i></span> 这个内核是基于zen内核加了一些其他的补丁和改动（有ck补丁，但是没有MuQSS，原因<code>I&#39;m severely prejudiced against MuQSS, so it will continue &quot;giving a null&quot;.</code>, 见这里<span class="exturl" data-url="aHR0cHM6Ly9idWdzLmFyY2hsaW51eC5vcmcvdGFzay81NjMxMiVFRiVCQyU4OQ==">https://bugs.archlinux.org/task/56312）<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9wZW9wbGUuZWNlLnViYy5jYS9zYXNoYS9wYXBlcnMvZXVyb3N5czE2LWZpbmFsMjkucGRm">The Linux Scheduler: a Decade of Wasted Cores<i class="fa fa-external-link-alt"></i></span> 讲多核的</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmloeXBvLm5ldC8xNTI3OTU1NzcwOTY4NS5odG1s">https://blog.ihypo.net/15279557709685.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2xpbnV4cGVyZi5jb20vP3A9NDI=">http://linuxperf.com/?p=42<i class="fa fa-external-link-alt"></i></span></p><!-- https://blog.csdn.net/XD_hebuters/article/details/79623130https://cloud.tencent.com/developer/article/1603970https://cloud.tencent.com/developer/article/1603974 --><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGVsbG9raXR0eTIvcC8xNDE5OTc0MS5odG1s">https://www.cnblogs.com/hellokitty2/p/14199741.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZWFuYXJraC9yZWFkLWxpbnV4LTAuMTE=">https://github.com/theanarkh/read-linux-0.11<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3d3dy53b3dvdGVjaC5uZXQvcHJvY2Vzc19tYW5hZ2VtZW50LzQ0OS5odG1s">http://www.wowotech.net/process_management/449.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTG95ZW5XYW5nL3AvMTI0NTkwMDAuaHRtbA==">Linux进程调度-组调度及带宽控制<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用了一周linux-ck和MuQSS，发现没有想象中的那么好。哦，这还要从一个麻醉师说起。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="scheduler" scheme="https://zhangjk98.xyz/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>6.S081的调试和VSCode环境配置</title>
    <link href="https://zhangjk98.xyz/6.S081-VSCode-prepare-and-kernel-debugging/"/>
    <id>https://zhangjk98.xyz/6.S081-VSCode-prepare-and-kernel-debugging/</id>
    <published>2021-07-08T14:11:18.000Z</published>
    <updated>2021-07-08T14:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>6.S081的调试和VSCode环境配置，还有一些踩坑和小技巧，杂七杂八的都放在这一篇里面了。（遇到什么情况就更新，准备一直更到做完Lab）</p><span id="more"></span><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="Archlinux环境配置"><a href="#Archlinux环境配置" class="headerlink" title="Archlinux环境配置"></a>Archlinux环境配置</h3><p>我们可以用qemu模拟risc-v，就像模拟ARM一样。</p><p>直接参照这里来就好了。如果没有自带的包，可能会编译比较久。</p><p><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC90b29scy5odG1s">https://pdos.csail.mit.edu/6.828/2020/tools.html<i class="fa fa-external-link-alt"></i></span></p><p>Archlinux可以用pacman装这四个包，都在comunity源里。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S riscv64-linux-gnu-binutils riscv64-linux-gnu-gcc riscv64-linux-gnu-gdb qemu-arch-extra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后测试一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">riscv64-linux-gnu-gcc --versionqemu-system-riscv64 --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试一下编译运行xv6</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/mit-pdos/xv6-riscv.git<span class="token builtin class-name">cd</span> xv6-risvv<span class="token function">make</span> qemu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果发现不行，卡在这里不动了。搜了一下Archlinux就官网这一句话教程，也没别人遇到相同的问题（随手一搜arch的教程全是ubuntu的结果）。</p><pre class="line-numbers language-none"><code class="language-none">qemu-system-riscv64 -machine virt -bios none -kernel kernel&#x2F;kernel -m 128M -smp 3 -nographic -drive file&#x3D;fs.img,if&#x3D;none,format&#x3D;raw,id&#x3D;x0 -device virtio-blk-device,drive&#x3D;x0,bus&#x3D;virtio-mmio-bus.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依我用Archlinux的踩坑血泪史，八成是版本太高了。降级<strong>qemu-arch-extra</strong> 6.0.0一下试试，降级到跟官方页面上一致的版本5.1.0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> downgrade qemu-arch-extra<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着又报了这个错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp <span class="token number">3</span> -nographic -drive <span class="token assign-left variable">file</span><span class="token operator">=</span>fs.img,if<span class="token operator">=</span>none,format<span class="token operator">=</span>raw,id<span class="token operator">=</span>x0 -device virtio-blk-device,drive<span class="token operator">=</span>x0,bus<span class="token operator">=</span>virtio-mmio-bus.0qemu-system-riscv64: error <span class="token keyword">while</span> loading shared libraries: liburing.so.1: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directorymake: *** <span class="token punctuation">[</span>Makefile:165: qemu<span class="token punctuation">]</span> Error <span class="token number">127</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找不到io_uring的动态链接库，没关系，我们而再降级一下liburing或者自己下一个动态链接库趁系统不注意偷偷塞到<code>/usr/lib</code>之类的地方就好了。io_uring虽然很重要，但是查了依赖，我目前只有qemu直接依赖<code>liburing</code>(还有一个virtualbox的vde2是optionally requires)，那就直接降级吧。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> downgrade liburing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="6.S081-lab-util/1625406448.png"></p><p>然后一个sh就出现了，按Ctrl-a x退出。</p><p>到这里准备环境就好了，耗时10分钟。（用了降级系统包版本的脏办法，<code>io_uring</code>这么重要的东西自己乱换版本不太好，不过目前直接依赖系统<code>liburing</code>的包不多）</p><h3 id="更新Ubuntu20-04配置"><a href="#更新Ubuntu20-04配置" class="headerlink" title="更新Ubuntu20.04配置"></a>更新Ubuntu20.04配置</h3><p>受不了坑位上7年前采购的老电脑的编译速度了，换教研室的20核服务器远程编译了。为了方便先将Ubuntu Server强行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接<code>make qemu</code>试试，耗时5s，舒服了</p><p><img src="6.S081-lab-util/image-20210702145048984.png" alt="image-20210702145048984"></p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h3><p>写一个helloworld看看是不是真的好了。</p><p>在user目录里面直接新建一个hello.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, nerd!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Makefile里面修改，加上<code>$U/_hello\</code></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">UPROGS<span class="token operator">=</span>\<span class="token variable">$U/_cat\</span><span class="token variable">$U/_echo\</span><span class="token variable">$U/_forktest\</span><span class="token variable">$U/_grep\</span><span class="token variable">$U/_hello\</span><span class="token variable">$U/_init\</span><span class="token variable">$U/_kill\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> qemu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（注意不要用return 0，用exit(0)终止进程，或者你喜欢单片机的裸机的写法不要返回直接void main也行）</p><p>（Make sure <code>main</code> calls <code>exit()</code> in order to exit your program. ）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ helloHello, nerd<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="6.S081-lab-util/image-20210702150654556.png" alt="image-20210702150654556"></p><h2 id="gdb-qemu调试"><a href="#gdb-qemu调试" class="headerlink" title="gdb+qemu调试"></a>gdb+qemu调试</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>现在6.S081推荐用<code>gdb-multiarch</code>这个包。<br>然后开两个终端（严格来讲应该叫终端模拟器，以下简称终端）, 第一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> qemu-gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二个终端运行的你gdb（arch用riscv64-linux-gnu-gdb、ubuntu用gdb-multiarch或者其他的版本）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">riscv64-linux-gnu-gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后能看到输出下面这样应该就没问题了</p><pre class="line-numbers language-none"><code class="language-none">This GDB was configured as &quot;x86_64-pc-linux-gnu&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.Find the GDB manual and other documentation resources online at:    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.--Type &lt;RET&gt; for more, q to quit, c to continue without paging--For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.The target architecture is set to &quot;riscv:rv64&quot;.warning: No executable has been specified and target does not supportdetermining executable automatically.  Try using the &quot;file&quot; command.0x0000000000001000 in ?? ()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Archlinux上<code>gdb-multiarch</code>还有一段报错，guile的问题不过貌似没啥太大影响，<code>riscv64-linux-gnu-gdb</code>是好的</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Exception caught while booting Guile<span class="token punctuation">.</span>Error in function <span class="token string">"make_objcode_from_file"</span><span class="token operator">:</span><span class="token property">bad header on object file:</span> <span class="token string">"\x7fELF\x02\x01\x01ÿ\x00\x00\x00\x00\x00\x00\x00\x00"</span><span class="token property">gdb-multiarch:</span> <span class="token property">warning:</span> <span class="token property">Could not complete Guile gdb module initialization from:</span><span class="token file-path string">/usr/share/gdb/guile/gdb/boot.scm.</span>Limited Guile support is available<span class="token punctuation">.</span>Suggest passing <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">-</span>directory<span class="token operator">=</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>gdb<span class="token operator">/</span>data<span class="token operator">-</span>directory<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第一个终端你会看到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** Now run <span class="token string">'gdb'</span> <span class="token keyword">in</span> another window.qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp <span class="token number">3</span> -nographic -drive <span class="token assign-left variable">file</span><span class="token operator">=</span>fs.img,if<span class="token operator">=</span>none,format<span class="token operator">=</span>raw,id<span class="token operator">=</span>x0 -device virtio-blk-device,drive<span class="token operator">=</span>x0,bus<span class="token operator">=</span>virtio-mmio-bus.0 -S -gdb tcp::26000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在另一个终端就可以调试了。gdb平时怎么用的现在就怎么用。这里以mkdir为例，给<code>main</code>函数打一个断点：</p><pre class="line-numbers language-gdb" data-language="gdb"><code class="language-gdb">(gdb) file user&#x2F;_mkdirReading symbols from user&#x2F;_mkdir...(gdb) b mainBreakpoint 1 at 0x0: file user&#x2F;mkdir.c, line 7.(gdb) cContinuing.Thread 1 hit Breakpoint 1, main (argc&#x3D;84215045, argv&#x3D;0x505050505050505)    at user&#x2F;mkdir.c:77       &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入c, 停在了initing,没有进入xv6的sh，可能是系统初始化的时候调用了mkdir，我们看一下变量</p><p><img src="/6.S081-VSCode-prepare-and-kernel-debugging/1626525086.png"></p><p>接着输入<code>c</code>往下走，在第一个终端（qemu）会进入xv6的sh，然后输入<code>mkdir hello</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> cContinuing.<span class="token punctuation">[</span>Switching to Thread <span class="token number">1.3</span><span class="token punctuation">]</span>Thread <span class="token number">3</span> hit Breakpoint <span class="token number">1</span>, main <span class="token punctuation">(</span>argc<span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">argv</span><span class="token operator">=</span>0x2fc0<span class="token punctuation">)</span> at user/mkdir.c:7<span class="token number">7</span>       <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n<span class="token number">10</span>        if<span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token variable">$7</span> <span class="token operator">=</span> 0x2ff0 <span class="token string">"mkdir"</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token variable">$8</span> <span class="token operator">=</span> 0x2fe0 <span class="token string">"hello"</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/6.S081-VSCode-prepare-and-kernel-debugging/1626525345.png"></p><p>可以看到执行过程中的变量了</p><h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>查看寄存器<code>info registers</code>，会列出32个通用寄存器</p><pre class="line-numbers language-gdb" data-language="gdb"><code class="language-gdb">(gdb) info registersra             0x80001f60       0x80001f60 &lt;scheduler+92&gt;sp             0x8000a7c0       0x8000a7c0 &lt;stack0+3984&gt;gp             0x505050505050505        0x505050505050505tp             0x0      0x0t0             0x800027c6       2147493830t1             0x8000000000087fff       -9223372036854218753t2             0x505050505050505        361700864190383365fp             0x8000a810       0x8000a810 &lt;stack0+4064&gt;s1             0x80017768       2147579752a0             0x80011968       2147555688a1             0x80011970       2147555696a2             0x80025000       2147635200a3             0x80023086       2147627142a4             0x0      0a5             0x22     34--Type &lt;RET&gt; for more, q to quit, c to continue without paging--RETa6             0x505050505050505        361700864190383365a7             0x7      7s2             0x2      2s3             0x80017768       2147579752s4             0x80011950       2147555664s5             0x0      0s6             0x80011970       2147555696s7             0x1      1s8             0x3      3s9             0x0      0s10            0x0      0s11            0x0      0t3             0x505050505050505        361700864190383365t4             0x505050505050505        361700864190383365t5             0x505050505050505        361700864190383365t6             0x505050505050505        361700864190383365pc             0x80001faa       0x80001faa &lt;scheduler+166&gt;dscratch       Could not fetch register &quot;dscratch&quot;; remote failure reply &#39;E14&#39;mucounteren    Could not fetch register &quot;mucounteren&quot;; remote failure reply &#39;E14&#39;(gdb) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RISC-V的寄存器有32个，比ARM多，已经超过了我的记忆容量。有需要就去翻<span class="exturl" data-url="aHR0cDovL2NydmEuaWN0LmFjLmNuL2RvY3VtZW50cy9SSVNDLVYtUmVhZGVyLUNoaW5lc2UtdjJwMS5wZGYuMTEuMw==">手册<i class="fa fa-external-link-alt"></i></span>吧<br>调试时大多数情况只要关注a开头的几个就好了, s开头的是系统保留。a0和a1是函数参数和返回值(Function arguments/return values)，a2到a7是变量(Function arguments), 你可以用汇编操作这些寄存器的值。  </p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p><code>info threads</code>查看进程</p><h2 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h2><h3 id="代码提示和自动补全"><a href="#代码提示和自动补全" class="headerlink" title="代码提示和自动补全"></a>代码提示和自动补全</h3><p>自动补全插件推荐clangd（比Microsoft官方的那个c/c++ extension好用）</p><p>默认的库函数提示会告诉你找不到<code>kernel/kernel.h</code>，需要手动添加</p><p><img src="/6.S081-VSCode-prepare-and-kernel-debugging/1626526305.png"></p><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><p>参照这篇博客设置<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vS2F0eXVNYXJpc2FCbG9nL3AvMTM3Mjc1NjUuaHRtbA==">MIT 6.S081 xv6调试不完全指北<i class="fa fa-external-link-alt"></i></span>，改一改那个<code>launch.json</code>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"debug xv6"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/kernel/kernel"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerServerAddress"</span><span class="token operator">:</span> <span class="token string">"211.83.111.224:26000"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/gdb-multiarch"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"pretty printing"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"logging"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// "engineLogging": true,</span>                <span class="token comment">// "programOutput": true,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后删掉<code>.gdbinit</code>里<code>target remote 127.0.0.1:26000</code></p><p>然后其他的都跟这篇博客里的差不多，以<code>ls</code>为例：</p><pre class="line-numbers language-gdb" data-language="gdb"><code class="language-gdb">-exec file user&#x2F;_ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/6.S081-VSCode-prepare-and-kernel-debugging/1626579434.png"></p><p>于是就可以并不太愉快的debug了。试了一下发现其实体验还没直接在gdb里面敲命令好，vscode的debugger跟IDE差距很大，鼠标点来点去可能都没有gdb直接敲命令舒服。</p><p><strong>如果真想找一个好的图形化debugger推荐nemiver</strong></p><h3 id="使用clangd-format进行xv6代码风格的格式化"><a href="#使用clangd-format进行xv6代码风格的格式化" class="headerlink" title="使用clangd-format进行xv6代码风格的格式化"></a>使用clangd-format进行xv6代码风格的格式化</h3><p>有没有像Golang的go-fmt一样强制代码格式化的东西呢，有的，<span class="exturl" data-url="aHR0cHM6Ly9jbGFuZy5sbHZtLm9yZy9kb2NzL0NsYW5nRm9ybWF0Lmh0bWw=">clang format<i class="fa fa-external-link-alt"></i></span>。</p><p>安装<code>clangd</code>插件，在VSCode的设置里面启用<code>format on save</code>，然后在根目录下新建<code>.clang-format</code>文件。每次<code>ctrl+s</code>的时候就可以像go-fmt插件那样格式化代码了。</p><p>很遗憾的是，c/c++的代码风格并没有一个官方的统一风格，各种风格争论不休。<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvcnZhbGRzL2xpbnV4L2Jsb2IvbWFzdGVyLy5jbGFuZy1mb3JtYXQ=">Linux的format风格<i class="fa fa-external-link-alt"></i></span>我不太习惯，比如一个tab占8个空格。<br>下面是我改了改llvm风格的配置，跟6.828Lab的xv6风格不太一样，函数类型和函数一行，tab是4个空格（tab空两个看起来真的难受，早期显示屏小才这样子干，我觉得24寸以上显示器空四个才是合理的），括号换行和golang一样。（不然在go和c之间来回切换我要精神分裂了）</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FyY2hhZW9yYXB0b3IvZG90ZmlsZXMvYmxvYi9tYXN0ZXIvdnNjb2RlLy5jbGFuZy1mb3JtYXQ=">https://github.com/Archaeoraptor/dotfiles/blob/master/vscode/.clang-format<i class="fa fa-external-link-alt"></i></span></p><p>需要注意的是，一定不要对#include头文件自动排序，要设置<code>SortIncludes:    false</code>不然头文件顺序不对会报错。</p><p>比如排序前：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动格式化后</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就会报错：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token file-path string">./kernel/stat.h</span><span class="token operator">:</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span> error<span class="token operator">:</span> unknown type name ‘uint’    <span class="token number">7</span> <span class="token operator">|</span>   uint ino<span class="token operator">;</span>    <span class="token operator">/</span><span class="token operator">/</span> Inode number      <span class="token operator">|</span>   <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token file-path string">./kernel/stat.h</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span> error<span class="token operator">:</span> unknown type name ‘uint64’   <span class="token number">10</span> <span class="token operator">|</span>   uint64 size<span class="token operator">;</span> <span class="token operator">/</span><span class="token operator">/</span> Size of file in bytes      <span class="token operator">|</span>   <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token property">make:</span> <span class="token separator comment">***</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>builtin<span class="token operator">></span><span class="token operator">:</span> user<span class="token operator">/</span>pingpong<span class="token punctuation">.</span>o<span class="token punctuation">]</span> Error <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：如果你想要xv6Lab的风格，可以用Mozilla的风格改一改。</p><h3 id="clion等IDE"><a href="#clion等IDE" class="headerlink" title="clion等IDE"></a>clion等IDE</h3><p>大多数时候用的VSCode，clion不怎么用。（不是我不想用，教研室那个七年前的老电脑用Jetbrains家的IDE实在是有点卡，而且JB还经常封你电邮箱，要用学生证照片去申请学生帐号）</p><p>clion的配置可以参考<br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjY0MTM2MDQ=">https://zhuanlan.zhihu.com/p/166413604<i class="fa fa-external-link-alt"></i></span></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="gdb调试报错Cannot-access-memory-at-address"><a href="#gdb调试报错Cannot-access-memory-at-address" class="headerlink" title="gdb调试报错Cannot access memory at address"></a>gdb调试报错Cannot access memory at address</h3><p>我在Archlinux下用<code>riscv64-linux-gnu-gdb</code>调试会报<code>Cannot access memory at address 0x278</code></p><p>本来以为是跟以前在ARM上内核地址随机化一样的问题，关了随机化还是不行，最后发现要在<code>.gdbinit.tmpl-riscv</code>加一条<code>set riscv use-compressed-breakpoints yes</code></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vS2F0eXVNYXJpc2FCbG9nL3AvMTM3Mjc1NjUuaHRtbA==">MIT 6.S081 xv6调试不完全指北<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC9sZWMvZ2RiX3NsaWRlcy5wZGY=">Using the GNU Debugger<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhYnNjYWxlL3h2Ni1wdWJsaWM=">https://github.com/wabscale/xv6-public<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;6.S081的调试和VSCode环境配置，还有一些踩坑和小技巧，杂七杂八的都放在这一篇里面了。（遇到什么情况就更新，准备一直更到做完Lab）&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="debug" scheme="https://zhangjk98.xyz/tags/debug/"/>
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="VSCode" scheme="https://zhangjk98.xyz/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>番外：Linux内核调试</title>
    <link href="https://zhangjk98.xyz/kernel-debugging/"/>
    <id>https://zhangjk98.xyz/kernel-debugging/</id>
    <published>2021-07-04T09:10:09.000Z</published>
    <updated>2021-07-04T09:10:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前写那个Linux抢救和维护的时候提过一下，现在做6.S081的Lab又碰到的这个问题，单独开一篇记录一下（水平不够，调试来凑）</p><span id="more"></span><h2 id="printk"><a href="#printk" class="headerlink" title="printk()"></a>printk()</h2><p>如果内核的错误还没有严重到来不及输出错误信息，还是可以靠print大法调试的。</p><p>printk输出到日志的内容可以用<code>dmesg</code>，普通的驱动问题靠输出的log定位问题就可以了。比如我要找HDMI的log：<code>dmesg | grep HDMI</code>。如果信息还不够多就加一个参数<code>CONFIG_DEBUG_DRIVER</code>到<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS2VybmVsX3BhcmFtZXRlcnM=">kernel parameter<i class="fa fa-external-link-alt"></i></span>里面，这会把来自Linux Kernel Driver Database的原始数据全都打印出来（非常非常多，除非写驱动的或者Debug找不到足够信息否则不要开）</p><p>printk有7个级别，见<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC92NS4xMi1yYzMvY29yZS1hcGkvcHJpbnRrLWJhc2ljcy5odG1s">Message logging with printk<i class="fa fa-external-link-alt"></i></span>。从0-7打印信息逐渐增加，调试的时候选一个合适的就行了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">"这里好像有问题，打印一下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Kernel-Panic-后来不及printk"><a href="#Kernel-Panic-后来不及printk" class="headerlink" title="Kernel Panic 后来不及printk"></a>Kernel Panic 后来不及printk</h3><p>printk是异步的<br><code>printk.synchronous=1</code></p><p>printk()有一个问题，每次想添加printk()的时候都要重新编译（6.S081/6.828用的教学xv6那种几千行代码的玩具操作系统还好办，Linux内核这样庞大的东西CPU不太好的时候要编译很久的）</p><h2 id="proc-sys等目录"><a href="#proc-sys等目录" class="headerlink" title="/proc/sys等目录"></a>/proc/sys等目录</h2><p>这几个目录比较重要，临时修改参数可以用</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>systemtap，相当于一个kprobe的封装</p><h2 id="qemu等模拟器-虚拟机"><a href="#qemu等模拟器-虚拟机" class="headerlink" title="qemu等模拟器/虚拟机"></a>qemu等模拟器/虚拟机</h2><p>虚拟机里面比较简单，有很多方便的方案可以将日志、页表、堆栈调用给你打印出来。</p><h3 id="gdb-qemu"><a href="#gdb-qemu" class="headerlink" title="gdb+qemu"></a>gdb+qemu</h3><p>下面以6.S081/6.828为例：</p><p>按照课程的推荐装一个合适的gdb（gdb要支持相应的架构，），比如我要调试的内核是RISC-Ⅴ的，在Archlinux下应该是<code>riscv64-linux-gnu-gdb</code>, 在Ubuntu20.04下可以用<code>gdb-multiarch</code>。</p><p>然后打开两个terminal，第一个执行<code>make qemu-gdb</code>启动qemu模拟器， 第二个执行gdb<code>gdb-multiarch</code>。</p><p>这样就可以愉快的用gdb调试了，具体操作见另一篇。（太长不看版，就是普通程序gdb怎么调试这里就怎么调呗）</p><h2 id="其他环境"><a href="#其他环境" class="headerlink" title="其他环境"></a>其他环境</h2><h3 id="物理机（比如Linux桌面发行版）"><a href="#物理机（比如Linux桌面发行版）" class="headerlink" title="物理机（比如Linux桌面发行版）"></a>物理机（比如Linux桌面发行版）</h3><p>这种比qemu模拟器里面的要麻烦很多，你可能来不及看到错误log就崩溃了，得借助kdump、crash等工具把崩溃信息记下来。</p><p>如果能进grub，</p><h3 id="开发板或裸机"><a href="#开发板或裸机" class="headerlink" title="开发板或裸机"></a>开发板或裸机</h3><p>ARM的板子就直接用Jlink呗。以前写的烧到板子上的东西都是不超过两千行的小玩意，没啥调试经验，不讲了。（当时全靠dmesg）</p><h2 id="调试的原理"><a href="#调试的原理" class="headerlink" title="调试的原理"></a>调试的原理</h2><p>这些内容由于我实在太菜，写不动了。写的不好，将就着看吧。稍微了解一下原理对使用这些调试工具有一些帮助</p><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p>gdb的实现利用了ptrace的systemcall</p><h3 id="printk-1"><a href="#printk-1" class="headerlink" title="printk"></a>printk</h3><p>直接看这两篇文章吧：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXhwbHVtYmVyc2NvbmYub3JnL2V2ZW50LzQvY29udHJpYnV0aW9ucy8yOTAvYXR0YWNobWVudHMvMjc2LzQ2My9scGMyMDE5X2pvZ25lc3NfcHJpbnRrLnBkZg==">printk: Why is it so complicated?<i class="fa fa-external-link-alt"></i></span> Linux Plumbers Conf 的ppt<br><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzgwMDk0Ni8=">Why printk() is so complicated (and how to fix it)<i class="fa fa-external-link-alt"></i></span>  </p><h3 id="systemtap"><a href="#systemtap" class="headerlink" title="systemtap"></a>systemtap</h3><h2 id="你真的需要Debugger吗"><a href="#你真的需要Debugger吗" class="headerlink" title="你真的需要Debugger吗"></a>你真的需要Debugger吗</h2><p>Linus在邮件<span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0LzIwMDAvMDkxNC9hL2x0LWRlYnVnZ2VyLnBocDM=">Re: Availability of kdb<i class="fa fa-external-link-alt"></i></span>里是这样说的：<code> I don&#39;t like debuggers. Never have, probably never will. I use gdb all the time, but I tend to use it not as a debugger, but as a disassembler on steroids that you can program.</code></p><p>这封邮件比较长，截取一段代表性观点</p><blockquote><p>I happen to believe that not having a kernel debugger forces people to think about their problem on a different level than with a debugger. I think that without a debugger, you don’t get into that mindset where you know how it behaves, and then you fix it from there. Without a debugger,you tend to think about problems another way. You want to understand things on a different <em>level</em>.</p></blockquote><p>系统编程不像平时糊个网站搓个脚本那样，不能过于依赖Debug，应该一开始就设计好，出bug说明设计有问题、写的人不仔细。把事情都想清楚写好了编译一次通过，这才是Linus认为的合格的(水平要达到不依赖debugger)</p><blockquote><p>you start being careful, or you start whining about a kernel debugger.</p></blockquote><blockquote><p>Quite frankly, I’d rather weed out the people who don’t start being<br>careful early rather than late. </p></blockquote><p>老派程序员里面很多经验丰富的大牛都不用debugger, 一种是习惯了print，另外很多典型的观点是Robe Pike这样的</p><blockquote><p>If you dive into the bug, you tend to fix the local issue in the code, but if you think about the bug first, how the bug came to be, you often find and correct a higher-level problem in the code that will improve the design and prevent further bugs.</p></blockquote><p>我试着不用gdb调试、语法高亮和代码补全做了6.S081的Lab1，结果相当惨烈。这几天回去翻出了藏在柜子里面的k&amp;r，从图书馆拿来了《c陷阱和指针》和《debug hacks》，并给VSCode启用了clangd自动补全并配置了断点调试。（我甚至想掏出clion了）</p><p>如果你像我一样菜，去找/买个大屏幕（最好能竖过来），然后打开你的debugger<br>（强烈推荐4k显示器，画质飞跃，头也不疼眼也不花了）</p><p>（据说一个大的显示屏有buff加成，据说，据说再在旁边摆一个小显示器开个终端也不错）</p><p>当然，有的时候你也只是想找一下驱动的bug并汇报给厂家，或者你只是个普通用户，想检查一下内核更新后开不了机的问题；掏出调试工具吧！</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>《Debug Hacks 深入调试的技术和工具》 （吉冈弘隆） 这本书讲的很好，这还是之前我在图书馆乱逛无意间翻到的，结果发现是讲内核的，当时根本看不懂。今天又从图书馆翻出来了，发现讲的还挺好。</p><p><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0LzIwMDAvMDkxNC9hL2x0LWRlYnVnZ2VyLnBocDM=">https://lwn.net/2000/0914/a/lt-debugger.php3<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC92NS4xMi1yYzMvY29yZS1hcGkvcHJpbnRrLWJhc2ljcy5odG1s">https://www.kernel.org/doc/html/v5.12-rc3/core-api/printk-basics.html<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGludXhwbHVtYmVyc2NvbmYub3JnL2V2ZW50LzQvY29udHJpYnV0aW9ucy8yOTAvYXR0YWNobWVudHMvMjc2LzQ2My9scGMyMDE5X2pvZ25lc3NfcHJpbnRrLnBkZg==">printk: Why is it so complicated?<i class="fa fa-external-link-alt"></i></span> Linux Plumbers Conf 的ppt<br><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzgwMDk0Ni8=">Why printk() is so complicated (and how to fix it)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTIwMzI1MjIyNTA0L2h0dHA6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWtlcm5lbC1sb2dnaW5nLWFwaXMvaW5kZXguaHRtbA==">内核日志：API及其实现<i class="fa fa-external-link-alt"></i></span>  </p><p><span class="exturl" data-url="aHR0cHM6Ly9lbGludXgub3JnL0RlYnVnZ2luZ19ieV9wcmludGluZw==">https://elinux.org/Debugging_by_printing<i class="fa fa-external-link-alt"></i></span>  </p><p>另外<span class="exturl" data-url="aHR0cHM6Ly9lbGludXgub3JnL01haW5fUGFnZQ==">Embedded Linux Wiki<i class="fa fa-external-link-alt"></i></span>里面挺多东西都挺好的（你不搞嵌入式那当我没说）</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdrZWdhZ2FsaWthaXd1L2FydGljbGUvZGV0YWlscy84NTcyMzY1">https://blog.csdn.net/tangkegagalikaiwu/article/details/8572365<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写那个Linux抢救和维护的时候提过一下，现在做6.S081的Lab又碰到的这个问题，单独开一篇记录一下（水平不够，调试来凑）&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="debug" scheme="https://zhangjk98.xyz/tags/debug/"/>
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="kernel" scheme="https://zhangjk98.xyz/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lab1 Util</title>
    <link href="https://zhangjk98.xyz/6.s081-lab-util/"/>
    <id>https://zhangjk98.xyz/6.s081-lab-util/</id>
    <published>2021-06-30T14:43:08.000Z</published>
    <updated>2021-06-30T14:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>6.S081是原6.828 lab的简单重置版（萌新青春版），以RISC-V和xv6为例讲OS，Lab还挺有意思的。 </p><span id="more"></span><p>之前都是学的ARM，之前自己看csapp的时候x86汇编那几章全跳过去了。正好最近刚考完最后一门课，老板留我们7月在学校里打黑工（其实完全没啥事干），可以闲下来做点一直想做但没空的Lab了。</p><h2 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h2><p>第一个Lab,都很简单，帮你熟悉一下xv6和系统调用。</p><p>直接照着提示做就好了。</p><p>测试可以用<code>make grade</code>测试全部成绩。测试单个成绩可以用<code>./grade-lab-util xxx</code> 或者<code>make GRADEFLAGS=xxx grade</code></p><p>有的时候需要测试打印</p><h3 id="Boot-xv6"><a href="#Boot-xv6" class="headerlink" title="Boot xv6"></a>Boot xv6</h3><p>先下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://g.csail.mit.edu/xv6-labs-2020<span class="token builtin class-name">cd</span> xv6-labs-2020<span class="token function">git</span> switch util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编译运行xv6。</p><h3 id="sleep-easy"><a href="#sleep-easy" class="headerlink" title="sleep(easy)"></a>sleep(easy)</h3><blockquote><p>Implement the UNIX program <code>sleep</code> for xv6; your <code>sleep</code> should pause  for a user-specified number of ticks.  A tick is a notion of time  defined by the xv6 kernel, namely the time between two interrupts  from the timer chip.  Your solution should be in the file  <code>user/sleep.c</code>.</p></blockquote><p>这个也没有什么好说的，让你熟悉一下系统调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"usage: sleep &lt;n>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后看一下测试（grade），一次通过，简单。</p><p><img src="/6.s081-lab-util/image-20210702153759549.png" alt="image-20210702153759549"></p><h3 id="pingpong-easy"><a href="#pingpong-easy" class="headerlink" title="pingpong(easy)"></a>pingpong(easy)</h3><blockquote><p>Write a program that uses UNIX system calls to ‘’ping-pong’’ a  byte between two processes over a pair of pipes, one for each  direction.  The parent should send a byte to the child;  the child should print “<pid>: received ping”,  where <pid> is its process ID,  write the byte on the pipe to the parent,  and exit;  the parent should read the byte from the child,  print “<pid>: received pong”,  and exit.  Your  solution should be in the file <code>user/pingpong.c</code>.</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> parent<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error create pipe child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child process, fork = 0</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of child</span>    <span class="token function">read</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of child</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//parent process, fork > 0</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close read of parent</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close write of child</span>    <span class="token function">write</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close write of parent</span>    <span class="token function">read</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received p%sng\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>熟悉一下fork和管道呗。</p><p>一开始传的是”ping”, “pong”，各占四个byte，又读了一遍题发现这里只让用1个byte，注意到ping和pong只差一个字母，那就传i和o好了。</p><p>这个小玩意本身没什么难的，已经对c完全手生的我愣是做了一个多小时。pipe的0是读，1是写，一开始我搞反了，下午上一个水课的时候又困又饿，调了半个小时百思不得其解。这个Lab几个作业里面做的最失败的一个（没想到竟然栽在一个easy上了），写了一点注释整理了好几次思路才pass。</p><p><img src="/6.s081-lab-util/1625234931.png"></p><h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><blockquote><p>Write a concurrent version of prime sieve using pipes. This idea is due to Doug McIlroy, inventor of Unix pipes. The picture halfway down <span class="exturl" data-url="aHR0cDovL3N3dGNoLmNvbS9+cnNjL3RocmVhZC8=">this page<i class="fa fa-external-link-alt"></i></span> and the surrounding text explain how to do it. Your solution should be in the file <code>user/primes.c</code>.</p></blockquote><p>素数筛，这个之前看go语言圣经的经典例子。 扔给你的这篇论文<span class="exturl" data-url="aHR0cHM6Ly9zd3RjaC5jb20vfnJzYy90aHJlYWQv">Bell Labs and CSP Threads<i class="fa fa-external-link-alt"></i></span> 扯了一下CSP模型的，你看这作者Russ Cox，霍，这不是go的…..再一看素数筛、共享内存、CSP模型介绍、  后面还提了一嘴go，引用里一堆Robe Pike等熟悉的名字。写过go的孩子是不是有一股我们在哪里见过的感觉……</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// char prime[MAXN];</span>  <span class="token comment">// menset(prime, 1, sizeof(prime));</span>  <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//children process</span>  <span class="token punctuation">&#123;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fork error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sieve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token comment">//p process</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">write</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//write numbers into pipe</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close wiring of parent</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//wait for all child process to end</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token function">sieve</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> child<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//exit </span>  <span class="token punctuation">&#125;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//child is not prime</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sieve</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//start a new child process</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prime <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span>prime <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close writing of parent</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始觉得这有什么难的，仿照go版本写一个不就完事了。也没看提示，在我本机上明明是好的扔到qemu的xv6上就开始乱了，调了半天。然后又读了一遍看到提示<code>Be careful to close file descriptors that a process doesn&#39;t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.</code></p><p>然后发现打印出来有时是正确的，有时是乱序的。</p><p><img src="/6.s081-lab-util/image-20210703170414708.png" alt="image-20210703170414708"></p><p>最后又搜了一下， <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3MuZGFydG1vdXRoLmVkdS9+ZG91Zy9zaWV2ZS9zaWV2ZS5wZGY=">Coroutine prime number sieve<i class="fa fa-external-link-alt"></i></span>, Douglas McIlroy在这里面给了一个c的例子，用dup来复制文件描述符，然后关闭管道。对照着这个我检查了一下，是少了一个<code>    close(p[0]);</code></p><p>比go麻烦好多……..</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file <code>user/find.c</code>.</p></blockquote><p>这个不难，处理细节有点繁琐，注意递归的时候不要把<code>.</code>和<code>..</code>算进去就好了。可以参考<code>ls.c</code>和<code>grep.c</code>（选做正则匹配）。照抄ls的代码然后写一个简单的DFS或者BFS就可以了（目录是个树，如果不考虑软链接）。</p><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>实现xarg命令，就用fork和exec实现就好了。这些碰到问题可以直接参考（抄 袭）一下xv6的源码或者gnu coreutils的实现。代码略长，不贴了。<strong>注意</strong>这里每次调试的时候要<code>make clean</code>清除编译缓存。</p><p>贴一个xargs用法的比较好的文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuanVubWFqaW5sb25nLmNvbS9zaGVsbC94YXJncy8=">Linux xargs命令详解<i class="fa fa-external-link-alt"></i></span> 为数不多的对这个命令的用心介绍。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>大三的时候学的微嵌（ARM的），当时讲的也水，大作业和实验也水（什么跑马灯驱动啊、ARM汇编啊，c内联汇编啊，还有一点FPGA），考试全都是抄书抄PPT写概念。深感当时学的太水了，走马观花看了一堆概念，实际上根本不会。</p><p>现在在实验室基本除了划水就是做一些CRUD的垃圾项目，什么XX管理系统，什么XX网站，什么基于机器学习的论文灌水；偶尔维护一下师兄师姐乱七八糟的祖传代码，感觉再这样虚度时光就要变成一个废人了，现在连c都生疏了。暂时打算从6.828和6.824开始，后面可能会做一点数据库的。</p><p>Verilog和VHDL这些暂时不打算再碰了，现在只想用c写。现在实验室有没有FPGA的板子，现在对RTL那些几乎也忘得差不多了，逻辑综合那些更别提了，本科那基本verilog的书当时疫情毕业也都送人了。</p><p>实验室已经两三年没人搞硬件了，堆在角落里的示波器和焊台也已经蒙了一层灰尘，罪过罪过。估计以后也没什么焊板子调运放的机会了…….</p><p>突然发现用go已经用习惯了，甚至感觉写go还挺舒服。。。用习惯了go的管道defer写close，写这个的时候老忘了close。<strong>而且我至少不下十次忘记末尾加分号<code>；</code>了</strong>，完了，写go写出肌肉记忆了。</p><p>（说起来Go写多了真是有点被惯坏了，现在再回去写c，手动管理内存和指针都觉得好麻烦，管道和进程也觉得不顺手。另一个非常非常难受的地方是，习惯了go很快的编译速度，现在每次等编译都好难受啊）</p><h2 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC9zY2hlZHVsZS5odG1s">https://pdos.csail.mit.edu/6.828/2020/schedule.html<i class="fa fa-external-link-alt"></i></span></p><!-- https://www.cnblogs.com/fatsheep9146/p/5216681.htmlhttps://www.cnblogs.com/fatsheep9146/category/769143.htmlhttps://clownote.github.io/about/ --><p>xv6的资料</p><p><span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC94djYvYm9vay1yaXNjdi1yZXYxLnBkZg==">https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf<i class="fa fa-external-link-alt"></i></span></p><p>哈工大的课，跟6.S081前面几个lab差不多。</p><p><span class="exturl" data-url="aHR0cHM6Ly9oaXRzei1sYWIuZ2l0ZWUuaW8vb3NfbGFiLw==">https://hitsz-lab.gitee.io/os_lab/<i class="fa fa-external-link-alt"></i></span></p><p>risc-v 资料</p><p><span class="exturl" data-url="aHR0cDovL2NydmEuaWN0LmFjLmNuL2RvY3VtZW50cy9SSVNDLVYtUmVhZGVyLUNoaW5lc2UtdjJwMS5wZGY=">http://crva.ict.ac.cn/documents/RISC-V-Reader-Chinese-v2p1.pdf<i class="fa fa-external-link-alt"></i></span></p><p>调试：</p><p><span class="exturl" data-url="aHR0cHM6Ly90d2RsbGwuZ2l0aHViLmlvLzIwMjAvMTEvMTAvNi5TMDgxLTIv">https://twdlll.github.io/2020/11/10/6.S081-2/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjY0MTM2MDQ=">https://zhuanlan.zhihu.com/p/166413604<i class="fa fa-external-link-alt"></i></span> clion调试</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vS2F0eXVNYXJpc2FCbG9nL3AvMTM3Mjc1NjUuaHRtbA==">https://www.cnblogs.com/KatyuMarisaBlog/p/13727565.html<i class="fa fa-external-link-alt"></i></span> vscode调试</p><h3 id="其他的一些推荐"><a href="#其他的一些推荐" class="headerlink" title="其他的一些推荐"></a>其他的一些推荐</h3><p><em>The Linux Programming Interface: A Linux and UNIX System Programming Handbook</em>（中文版：《Linux/Unix系统编程手册》上下两册，下册翻译的很烂），相当不错的工具书，可以放在手边当参考书和工具书用。</p><p><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvaW5kZXguaHRtbA==">Linux man pages online<i class="fa fa-external-link-alt"></i></span> 在线参考手册，必备</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NJLVJJU0NWL2UyMDBfb3BlbnNvdXJjZQ==">https://github.com/SI-RISCV/e200_opensource<i class="fa fa-external-link-alt"></i></span> 没看过，据说还行。</p><p>现代操作系统</p><p><span class="exturl" data-url="aHR0cHM6Ly9pcGFkcy5zZS5zanR1LmVkdS5jbi9tb3NwaS8=">《现代操作系统：原理与实现》<i class="fa fa-external-link-alt"></i></span> 上交IPADS的，我还没买。据说相当不错。（这本我自己一点也没看过，）</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>c语言， 大概弄懂k&amp;r那本<em>The C Programming Language</em>就可以开工了。当然，懂得越多越好，多多益善。</p><p><strong>菊巨可以用Rust哦，贵清<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jjb3JlLW9zL3JDb3Jl">rCore<i class="fa fa-external-link-alt"></i></span>那边的课据说挺好的</strong>（群友们人均Rust, 就只本菜不会Rust了）</p><p>gdb等调试手段要熟， 没法调试等着两眼抓瞎吧。</p><p>熟悉链接库和编译那一套，Makefile什么的会用就行了。不熟悉编译的去编译个LFS（Linux from Scratch）就差不多了。</p><p>一些基础的书和知识，比如csapp等书可以先看看。</p><p>参考手册和工具书先备着，RISC-V的资料也备着。xv6有很多可以参考的地方。</p><p>xv6的资料在这里：<span class="exturl" data-url="aHR0cHM6Ly9wZG9zLmNzYWlsLm1pdC5lZHUvNi44MjgvMjAyMC94djYuaHRtbA==">https://pdos.csail.mit.edu/6.828/2020/xv6.html<i class="fa fa-external-link-alt"></i></span><br>这有一个中文的翻译：（版本略老，是x86的）<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JhbnhpYW4veHY2LWNoaW5lc2U=">https://github.com/ranxian/xv6-chinese<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;6.S081是原6.828 lab的简单重置版（萌新青春版），以RISC-V和xv6为例讲OS，Lab还挺有意思的。 &lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="6.S081" scheme="https://zhangjk98.xyz/tags/6-S081/"/>
    
    <category term="xv6" scheme="https://zhangjk98.xyz/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统的抢救和维护（桌面篇）</title>
    <link href="https://zhangjk98.xyz/linux-rescue/"/>
    <id>https://zhangjk98.xyz/linux-rescue/</id>
    <published>2021-04-09T12:31:56.000Z</published>
    <updated>2021-04-09T12:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇水文主要是写给桌面玩家看的，如果您的服务器打出了GG/被黑了/库被删了，可能不适合来这里找答案。</p><span id="more"></span><p>由于这篇水文是写给普通玩家的，所以尽量简单易懂、适合萌新操作。所以像eBPF、Systemtap这样的神兵利器几乎不会多讲 （这还是我在《性能之巅》这本书看到作者传教DTrace才了解的，这些东西对于一般路过普通用户大概就像vim和emacs, 很强，但是学习成本太高）<br>这里面有一些systemd的内容，openrc用户请跳过（相信这年头还在坚守openrc和其他非systemd的用户水平应该不用看我博客）。<br>由于本人水平有限，而且这篇写的比较仓促，文中可能有不少错误，光临我博客的大佬们发现了请告诉我。<br>暂时先写这么多，还有很多有意思的、重要的、不好写的没有写，以后再更新。</p><h2 id="通常的卡死解决流程"><a href="#通常的卡死解决流程" class="headerlink" title="通常的卡死解决流程"></a>通常的卡死解决流程</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>此处的“卡死”，指鼠标动不了或某个应用、进程没有响应了</li><li>以下流程展示以KDE和Archlinux为例</li><li>如果你想问ubuntu内部错误等，那我只能说无可奉告</li></ol><h3 id="通用流程"><a href="#通用流程" class="headerlink" title="通用流程"></a>通用流程</h3><p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是常事，各种小bug就更多了，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong></p><p>虽然KDE、GNOME都有图形化的系统监视器，看起来还不错。然鹅，有点鸡肋：<strong>鼠标经常随着图形界面在x11、wayland罢工后一起没了，键盘几乎能战斗到最后一刻</strong>（除非 kernel panic 或者 usb等外设的kernel module出问题了）。请适应并熟悉终端模拟器、tty、vim等键盘操作。</p><p>首先尝试<code>ctl+alt+t</code>呼出终端，如果能，那问题应该不大，然后用<code>htop</code>、<code>glances</code>之类的东西看一下罪魁祸首是谁。</p><p>找到那个进程的pid，试试杀掉它。比如vscode内存泄漏动不了了，那就<code>pkill code</code>(相当于<code>ps -ef | grep vscode | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code>)。<br>如果你不知道具体叫什么，但是它在屏幕前能看到，可以用<code>xkill</code>命令终止它（如果你还能动鼠标）</p><p>如果程序或应用是systemd守护进程，用systemctl停掉或重启（openrc、crontab、pm2等同理），比如<code>systemctl disable neo4j --now</code>禁用并停止neo4j数据库的daemon；<code>systemctl daemon-reload &amp;&amp; systemctl restart kubelet</code>刷新配置并重启kubelet（咦，好像没有桌面玩家在自己电脑上跑kubelet进程…一时没想起更好的例子）</p><p>提供了禁用命令的优先用自带命令，比如禁用KDE自带的文件搜索baloo，<code>balooctl stop &amp;&amp; balooctl disable</code></p><p>如果怀疑是KDE桌面及其组件的问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">plasmashell --replace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不能就<code>ctl+alt+F2</code>调出tty，htop看一下那个进程占用高，kill掉，如果不行就重启tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kquitapp5 plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常退出不行就试试killall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> plasmashell <span class="token operator">&amp;&amp;</span> kstart5 plasmashell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者重启一下SDDM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还不行就杀掉tty1，然后重启xorg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tty1 <span class="token comment"># 或者pgrep tty1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后kill掉（或者直接<code>pkill -9 -t tty1</code>），重启。或者这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pkill</span> xstartx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那如果你连tty都切不过去，就用魔术键重启。（如果你提前设置开启了魔术键SysRq的话，这个下面再讲）<br>按住<code>Alt+Shift+SysRq</code>，依次按<code>REISUB</code>这几个键。（每按一个键停几秒钟）（如果你内核出了kernel panic之类的问题，那魔术键也没用）</p><p>再不行直接<code>reboot</code>，<code>shutdown -r now</code>就好了</p><p>以上的命令如果桌面经常卡死建议绑定到你喜爱的快捷键上（在动不了鼠标和快捷键调不出终端模拟器的时候能用上）</p><p>再不行就直接尝试长按电源关机了（一般长按电源键5-10秒，这取决于你的主板BIOS设置，这会发送一个<code>RESET</code>信号）。如果你的主板有复位键，就按复位键重启。实在实在没办法那就拔电源吧。（做好丢失所有未保存数据的准备）</p><p>ps: 如果你用的ext4，那恭喜你，中奖了。异常掉电可能不是丢失数据这么简单了，你的文件系统可能已经出了小问题。（这个后面再说）</p><h3 id="如何终止-重启进程"><a href="#如何终止-重启进程" class="headerlink" title="如何终止/重启进程"></a>如何终止/重启进程</h3><h4 id="首先找到它"><a href="#首先找到它" class="headerlink" title="首先找到它"></a>首先找到它</h4><p>以vscode为例：<code>ps aux | grep vscode</code>或<code>pgrep -fl vscode</code>（<code>-f</code>参数表示<code>use full process name to match</code>，如果不加<code>-f</code>是找不到vscode的，只有<code>grep code</code>能找到进程（因为这个进程名字叫code））</p><p><img src="/linux-rescue/1618143574.png"></p><p>如果不想让<code>ps aux | grep xx</code>的时候每次都显示他自己，再加上<code>|grep -v &quot;grep&quot;</code><br>如果能在屏幕上看到它就直接<code>xkill</code></p><h4 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h4><p>kill的方式大概有这些</p><pre class="line-numbers language-none"><code class="language-none">HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较常用的有HUP(通常在关闭终端模拟器的时候，调用SIGHUP，可以用<code>nohup</code>等命令让终端模拟器关闭后进程继续)、QUIT（退出，调用SIGQUIT，<code>Ctrl+\</code>）、KILL（调用SIGKILL，使用<code>kill -9 就是这个</code>）。此外还有TERM（软中断），开发板常用，桌面用户可能用的不多。 </p><p><code>Ctrl+z</code>调用的就是SIGTSTP，这是最温和的一种，挂起的进程可以用<code>fg</code>恢复;<code>Ctrl+c</code>调用的就是SIGINT，会终止进程。</p><p>这部分内容可以去阅读《UNIX高级编程》等书，或者看看维基词条<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVW5peCVFNCVCRiVBMSVFNSU4RiVCNw==">Unix信号<i class="fa fa-external-link-alt"></i></span></p><h2 id="碰到比较严重情况的抢救"><a href="#碰到比较严重情况的抢救" class="headerlink" title="碰到比较严重情况的抢救"></a>碰到比较严重情况的抢救</h2><p>这种情况包括但不限于不小心卸载了系统自带的python、卸载了iptables、卸载了桌面环境（DE）或者卸载了什么重要的库，或者你改了什么<code>kernel parameter</code>直接黑屏进不去了，又或者你执行了危险的<code>dd</code>命令。</p><p>有或者显卡驱动有问题了</p><p>或者双系统Windows更新把你grub整没了（不要双系统就没这么多事，直接上<code>systemd-boot</code>之类的东西）</p><p>反正，开机直接黑屏了。或者你运气好，能进grub界面，还能抢救一下。或者运气更好，进了grub界面然后在DM那里黑屏了（这种可能是显卡驱动的问题）</p><p>你可能需要一个LiveUSB用来抢救。如果你没设置加密，那就挂载<code>\</code>, <code>\home</code>, <code>\boot</code>等目录然后chroot进去修。</p><p>试试重装重要的包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S base base-devel linux linux-firmware linux-headers xorg plasma kde-applications<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件系统损坏"><a href="#文件系统损坏" class="headerlink" title="文件系统损坏"></a>文件系统损坏</h3><p>比如，ext4断电。</p><p>如果你的电脑要经常面对断电等恶劣情况，那建议去用ZFS等文件系统，不要用ext4</p><h3 id="kernel-panic-等"><a href="#kernel-panic-等" class="headerlink" title="kernel panic 等"></a>kernel panic 等</h3><p>Kernel panic之类的问题通常比较严重</p><p>kernel panic segmentation fault core dump</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0NvcmVfZHVtcCNFeGFtaW5pbmdfYV9jb3JlX2R1bXA=">https://wiki.archlinux.org/index.php/Core_dump#Examining_a_core_dump<i class="fa fa-external-link-alt"></i></span></p><h3 id="看看是不是硬件坏了"><a href="#看看是不是硬件坏了" class="headerlink" title="看看是不是硬件坏了"></a>看看是不是硬件坏了</h3><p>内存条没插紧、硬盘坏了、电源没插好、主板受潮了。。。。</p><h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>排查问题和调试比较需要经验，而且要花费不少时间。调试并修好，很有可能比直接重装所花费的时间、精力多得多。<strong>如果你赶时间，我建议做好备份，随时重装。不要将有限的时间浪费在排查问题上。</strong></p><!-- ![do you have a life?](/linux-rescue/1618281436.png)图源[reddit u/sovietarmyfan](https://www.reddit.com/r/linuxmemes/comments/ejdkaj/choosing_an_os_my_own_version/) --><p><strong>但是，追根溯源找到问题并修好它，很有意思，不是吗？</strong></p><p>网上充斥着性能优化的教程，好多都盗了下面这张图，不仅不标注<span class="exturl" data-url="aHR0cDovL3d3dy5icmVuZGFuZ3JlZ2cuY29tL2Jsb2cvMjAxOS0wNy0xNS9icGYtcGVyZm9ybWFuY2UtdG9vbHMtYm9vay5odG1s">来源<i class="fa fa-external-link-alt"></i></span>还把右下角来源抹去（而且还是17年版的老图传来传去）<br><img src="/linux-rescue/1618031552.png"><br>本来想仿照这个做一个调试的图，但是想到指不定又被盗了。算了，随便写点大家将就着看吧。</p><h3 id="查看报错和日志"><a href="#查看报错和日志" class="headerlink" title="查看报错和日志"></a>查看报错和日志</h3><p>遇到解决不了的问题先把报错和版本信息记下来，然后去谷歌一下，搜不到的就去拿着详细的报错去相应的地方请教大佬（希望您提问之前已经阅读了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYW53dS9Ib3ctVG8tQXNrLVF1ZXN0aW9ucy1UaGUtU21hcnQtV2F5L2JsbyUyMGIvbWFpbi9SRUFETUUtemhfQ04ubWQ=">《提问的智慧》<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA4MDQuaHRtbA==">X-Y Problem<i class="fa fa-external-link-alt"></i></span>等）</p><p>进入急救模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl rescuesystemctl emergency<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl -x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如何调试内核"><a href="#如何调试内核" class="headerlink" title="如何调试内核"></a>如何调试内核</h3><p>用户态的问题都还比较好调试，总不至于崩了连个报错信息和崩溃日志都保存不下来。内核相关的问题比较麻烦，不过好在除非自己各种折腾或者用Arch这种内核经常滚动升级的，一般碰不到这些问题。</p><p>我调试内核的经验也不多，为数不多的几次几乎都是当年在开发板上。sniper写得那个《Linux内核调试指南》写得挺好，然而不太适合普通的桌面玩家，而且有一点年头了。gdb调试，printk在桌面发型版kernel panic的时候几乎都失效了。对于普通的桌面玩家，遇到了 kernel panic 等严重问题，发现自己解决不了，不妨去论坛/群里提问，找有空的大佬帮你看看（有些小白尝试debug的时候可能越折腾问题越严重）。桌面玩家检查一下自己最近干了什么或者最近系统更新了什么应该就能找到问题了。</p><p>常见的调试方式包括：</p><ol><li>Kdump+crash</li><li>Serial Console</li></ol><p>用kdump捕获错误（kdump会在内核崩溃的时候用kexec运行捕获内核然后转储），然后用crash看一下。使用之前Kdump你可能需要自己编译内核，在内核参数里面设置参数，然后还要设置systemd守护进程。<br>ArchLinux玩家可以参考ArchWiki的<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tkdW1w">Kump<i class="fa fa-external-link-alt"></i></span>条目设置（Archlinux默认没装需要的包，Wiki也没说，要装一下<code>sudo pacman -S kexec-tools crash</code>。）</p><p>Serial Console 串口调试这个折腾过嵌入式的应该也很熟悉了，需要在bootloader设置一下。<br>Arch用户也可以参照ArchWiki词条<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1dvcmtpbmdfd2l0aF90aGVfc2VyaWFsX2NvbnNvbGU=">Working with the serial console<i class="fa fa-external-link-alt"></i></span>设置（我只在树莓派上的archarm试过串口，并没有用这种方法调试过内核）<br>大部分桌面用户的笔记本和台式机上可能已经没有串口了（仅存不多的可能也就给个针脚），搞一个USB转串口才能愉快的调试。</p><p>一般桌面用户出现内核问题用journalctl看一下日至或者拍一下屏幕上的错误然后到群里/论坛请教就行了。见：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNSU4NiU4NSVFNiVBMCVCOCVFNSVCNCVBOSVFNiVCQSU4M18oS2VybmVsX3Bhbmljcyk=">ArchWiki: General_troubleshooting_(简体中文)#内核崩溃_(Kernel_panics)<i class="fa fa-external-link-alt"></i></span></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>Go mod 命名导致的问题：<span class="exturl" data-url="aHR0cHM6Ly94dWFud28uaW8vMjAyMC8xNC1idWctaW50cm9kdWNlZC1ieS1iaW5hcnktbmFtZS8=">记一次二进制乱起名字引发的翻车<i class="fa fa-external-link-alt"></i></span></p><p>我几个月前被和漩涡这个翻车一模一样的问题坑了。</p><h3 id="调试驱动问题"><a href="#调试驱动问题" class="headerlink" title="调试驱动问题"></a>调试驱动问题</h3><p>驱动这个我单独讲一下。因为网上搜“驱动调试”都是嵌入式开发（几年前我）需要的（会叫你用strace、gdb、printk）,对于桌面用户（现在的我）应该去搜关键词：“型号+Linux”。不过如果你不用螃蟹网卡、Nvidia双显卡、某些阴间网卡、不支持Linux的BIOS，应该不用担心。用的XPS、Thinkpad系列等对Linux支持比较好的笔记本应该也不用担心。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>我用一个PS\2键盘(P口键盘)为例演示一下:</p><p>OS：Archlinux<br>主板：b85<br>Kernel：Linux-lts 5.10<br>CPU：intel i5-4590<br>键盘：PS2口的老键盘<br>症状：PS\2键盘插上去用不了</p><ol><li>首先用<code>dmesg</code>等工具检查一下，没啥问题。然后重启（PS\2不支持热插拔，保险期间重启试试）</li><li>除了通用驱动会被合并到kernel主线，大部分驱动是<code>kernel module</code>的形式。所以我们先<code>lsmod</code>看一下有没有PS\2相关的东西。只找到了<code>psmouse</code>（先假装不知道i8042是干嘛的）</li><li>然后去找相关的驱动呗。搜一下“PS\2键盘 驱动”，搜出来第一条是微软的文档，不过没关系，它告诉我们是i8042了。再<code>lsmod</code>看一下，它有。再<code>modprobe i8042</code>看一下，也是好的。</li><li>再搜一下启动参数就发现PS\2和atkbd这个模块有关，然后就顺手搜到这个：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Y24ub3JnL2xpbnV4LTMxMy13YXJuaW5nLXBzMi1rZXlib2FyZC1zdXBwb3J0LWlzLW5vdy1tb2R1bGFyLw==">Linux 3.13 警告：PS/2 键盘支持现已模块化<i class="fa fa-external-link-alt"></i></span>。</li><li>然而高兴早了，还是不行, 但是搜到了一个和我一样的<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zNTQ4MDIvcHMtMi1rZXlib2FyZC1vbmx5LXdvcmtzLXVwLXRvLWdydWItbm90LWFmdGVyLW9zLWZ1bGx5LWJvb3RlZD9ub3JlZGlyZWN0PTEmbHE9MQ==">PS/2 keyboard only works up to GRUB, not after OS fully booted<i class="fa fa-external-link-alt"></i></span> 没有得到解决</li><li>这个问题没有解决，但是有上面那个提问告诉我一个重要的信息：直到GRUB都还是工作的（works up to GRUB）。于是我在GRUB界面试了试，上下和回车都能用、NumLock也是亮的。</li><li>那就简单了，是GRUB启动参数哪里有问题喽。搜索“GRUB i8042”发现很多触控板的问题（touchpad），GRUB加上启动参数<code>i8042.reset i8042.nomux i8042.nopnp i8042.noloop</code>问题立刻解决了</li><li>还看到下面<span class="exturl" data-url="aHR0cHM6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8yODczNi93aGF0LWRvZXMtdGhlLWk4MDQyLW5vbXV4LTEta2VybmVsLW9wdGlvbi1kby1kdXJpbmctYm9vdGluZy1vZi11YnVudHU=">这个链接<i class="fa fa-external-link-alt"></i></span>回答为什么添加<code>i8042.nomux</code>参数能解决触控板的问题（自动检测是否多工（Multiplexing）的默认配置有问题，改成禁用就好了）。</li><li>去<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvRG9jdW1lbnRhdGlvbi9hZG1pbi1ndWlkZS9rZXJuZWwtcGFyYW1ldGVycy50eHQ=">内核文档<i class="fa fa-external-link-alt"></i></span>里查一下, 其他几个选项分别是<pre class="line-numbers language-none"><code class="language-none">i8042.nopnp[HW] Don&#39;t use ACPIPnP &#x2F; PnPBIOS to discover KBD&#x2F;AUX具体     controllers        不使用ACPIPNP或可插拔BIOS模式发现KBD&#x2F;AUX（Keyboard input driver，键盘输入驱动，Auxiliary，音频）可能是这个意思，我猜的i8042.notimeout[HW] Ignore timeout condition signalled by controller        忽略超时i8042.reset[HW] Reset the controller during init, cleanup and     suspend-to-ram transitions, only during s2r     transitions, or never reset        就是reset重置呗i8042.noloop[HW] Disable the AUX Loopback command while probing     for the AUX port        禁用AUX回环？音频相关的东西，应该跟这个参数没关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>看起来起作用的应该是nopnp这个参数起作用了，去掉其他3个参数，试了一下就是它。</li><li>  进一步查找根源问题和报告BUG的环节了。先去报BUG的那几个地方（Google搜出来都是launchpad怎么设置）用<code>nopnp</code>和<code>PnPBIOS</code>搜一下有没有相关的 Bug Report。在LKML邮件列表上可以找到这个：<span class="exturl" data-url="aHR0cHM6Ly9sa21sLm9yZy9sa21sLzIwMjAvMTAvMTMvNTU4">PS/2 mouse not detected with ACPIPnP/PnPBIOS<i class="fa fa-external-link-alt"></i></span> 这一串邮件已经找到了问题。<br>并且在2020.10.13在bugzilla已经发了<span class="exturl" data-url="aHR0cHM6Ly9idWd6aWxsYS5rZXJuZWwub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDk2NTc=">PnP unable to detect connected PS/2 mouse on Asus F2A85-M PRO<i class="fa fa-external-link-alt"></i></span><br>今年3月份的时候还给出了Patch，就等合并了。（更新，4月14号这个patched被defer）<br>行了，<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMzMjM0NzYzMi9hbnN3ZXIvNzMyMzA3MDY4">我修了Linux内核的一个小bug，应该如何把它推进主线呢？ - 醉卧沙场的回答<i class="fa fa-external-link-alt"></i></span>教的东西也用不上了，就等合并吧…..</li></ol><h2 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><blockquote><p>备份，然后重装</p></blockquote><p>如果硬盘或者u盘够大，推荐使用rsync或timeshift（其实也是调用的rsync或btrfs snapshot）<br>btrfs用户可以使用btrfs snapshots</p><p>备份硬盘不够大就只备份dotfiles等配置文件和个人资料就好了。</p><h3 id="谨慎进行危险操作"><a href="#谨慎进行危险操作" class="headerlink" title="谨慎进行危险操作"></a>谨慎进行危险操作</h3><p>一些可能会带来的操作尽量现在虚拟机、容器里面试一下。然而，能够意识到危险的东西一般不会把你坑了。</p><h3 id="dotfiles和脚本"><a href="#dotfiles和脚本" class="headerlink" title="dotfiles和脚本"></a>dotfiles和脚本</h3><p>经常换电脑或重装可以准备dotfiles和快速安装脚本</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>桌面发行版如果没有暴露在外的公网IP和端口，应该不用担心。（毕竟桌面玩家大部分连个独显都没有，挖矿都榨不出油水（而且我简单不少Linux万家有钱了都叛逃Mac了））<br>不放心就用iptables/nftables设置一下防火墙，设置一下用户和文件的权限；还不放心可以用clamav等工具扫一扫rookit。<br>虽然x11不少安全问题，桌面版sandbox隔离做的不好，可是这都不重要，你要小心的是流氓软件而不是所谓的CVE、0day。</p><p>Archlinux用户可以按照这个配置: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vVGgzV2hpdDNXb2xmLzJmMjRiMjkxODNiZTdmOGU5YzBiMDUxMTVhZWZiNjkz">Arch Secure Laptop Install<i class="fa fa-external-link-alt"></i></span> 对于一个桌面用户已经差不多了</p><h2 id="不想重启怎么办"><a href="#不想重启怎么办" class="headerlink" title="不想重启怎么办"></a>不想重启怎么办</h2><p>如果你用的是ArchLinux等滚动发行版，有不少更新是要重启后生效的。普通用户还是更新后重启一下比较好（这可能是最省心省力的）。<br>如果你不想重启，那也没问题。<br><strong>可能唯一不得不重启的就是内核更新了。</strong></p><h3 id="安装更新发生了什么"><a href="#安装更新发生了什么" class="headerlink" title="安装更新发生了什么"></a>安装更新发生了什么</h3><p>你可能听过这样的说法，Linux更新后的旧程序仍然跑在内存里，重启后才生效。可是内存不才一共就那么点？（啊，还有swap等交换区，那加起来也而不多）怎么装得下？ 实际上这些安装文件是（通常是）通过mmap建立虚拟地址映射，还在硬盘里。</p><p>在安装脚本和编译命令里面你会看到<code>install</code>这个命令，它跟<code>cp</code>命令最大的区别不是权限管理，而是更改前<code>unlink</code>。<br><code>cp</code>会把指定目录原有的文件删掉然后再将新的拷贝到指定目录，而当你有二进制文件在运行的时候，用<code>cp</code>更改这个二进制文件直接删会出错（可能<code>cp</code>命令报错<code>device or resource busy</code>执行失败，或<code>cp</code>执行成功但是导致正在运行的东西出现问题）。<br>而<code>install</code>会先<code>unlink</code>拷贝一个副本，很像Btrfs的COW（Copy on Write）机制，如果在用，原文件暂时保留（inode），新文件用新的inode，如果有程序在使用这个文件，在mmap映射中依然可以找到原文件（的inode）。虽然这个时候看起来你在安装目录原来的文件已经没了（<code>ls</code>命令查看<code>/usr/bin/XXX</code>、<code>/usr/lib/XXX</code>已经找不到旧文件了，只能看到新安装的），但是实际上在硬盘里还有副本（inode还在）。等到旧文件没有进程在用（refer,引用）之后（inode引用计数为0），旧文件才会被真正删掉；下次再引用的时候，就是新文件了。<br>（可以用<code>lsof /usr/bin/ssh</code>查看哪个进程在引用或读写<code>/usr/bin/ssh</code>这个文件）</p><p>普通的更新，无需重启整个系统。关闭应用或<code>kill</code>相关进程再打开应该就是新的了。</p><p>ps：不同文件系统的<code>cp</code>行为可能不一样（比如有COW的Btrfs和ZFS, 如果你启用了<code>reflink</code>参数）。不同<code>install</code>命令的实现可能也不一样。有些不太靠谱的安装使用<code>cp</code>命令更新二进制文件（比如Archlinux的AUR里某些野包），所以我喜欢刚开机的时候更新。</p><p>见：</p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Nzg5NDg3OA==">Linux中的mmap映射 [一]<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDkwNjI0MTA0NDQxL2h0dHA6Ly9lbi5jaHlzLmluZm8vMjAwOS8wNS9pbnN0YWxsLXZzLWNwLWFuZC1tbWFwLw==">install vs. cp; and mmap<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29weS1vbi13cml0ZQ==">Copy-on-write<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMi91bmxpbmsuMi5odG1s">unlink(2) — Linux manual page<i class="fa fa-external-link-alt"></i></span> 里的这段话：<br>If the name was the last link to a file but any processes still have the file open, the file will remain in existence until the last file descriptor referring to it is closed.</p><h3 id="不重启整个系统让更新生效"><a href="#不重启整个系统让更新生效" class="headerlink" title="不重启整个系统让更新生效"></a>不重启整个系统让更新生效</h3><p>普通的用户态的程序，直接重启这个程序就完了。<br>涉及到systemd daemon，<code>systemctl restart XXX</code><br>如果更新了<code>glibc</code>，那稍微麻烦一点, 这个东西影响比较多。至少要重启DE（Desktop Enviroment, 比如KDE）、systemd（已经你正在跑的daemon）、以及systemd依赖的dbus等等。（不推荐萌新尝试，很容易搞出问题，直接重启整个系统简单粗暴好用）<br>如果更新了<code>kernel module</code>，如果没生效试试手动<code>modprobe XXX</code>一下。</p><h3 id="内核更新不重启（暂时）"><a href="#内核更新不重启（暂时）" class="headerlink" title="内核更新不重启（暂时）"></a>内核更新不重启（暂时）</h3><p>这个括号里的<strong>暂时</strong>的意思是说，现在并没有很好的真·更新内核后不重启的办法（特别是Archlinux等滚动发行版）。下面要说到的<code>kexec</code>、<code>livepatch</code>等热更新都是用来修安全问题打补丁的（狂刷版本号的滚动更新请老老实实挑个空闲时间重启）。<br>如果想避免频繁更新内核之后的重启，请换用更新频率低的lts内核，比如非滚动升级的发行版（比如RH）。Arch可以用依云仙子的<code>linux-lily</code>，基本上半年更新一次（Arch的lts内核的更新频率并不低，甚至有些时候<code>linux-lts</code>比<code>linux</code>包版本号还高（前一段时间 5.10 lts 那会））。<br>如果你使用定制内核，部分模块（比如显卡驱动）推荐使用<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0R5bmFtaWNfS2VybmVsX01vZHVsZV9TdXBwb3J0">DKMS<i class="fa fa-external-link-alt"></i></span></p><p>一些给内核打热补丁的新技术，比如<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3QvbGl2ZXBhdGNoL2xpdmVwYXRjaC5odG1s">livepatch<i class="fa fa-external-link-alt"></i></span>在<span class="exturl" data-url="aHR0cHM6Ly91YnVudHUuY29tL3NlY3VyaXR5L2xpdmVwYXRjaA==">Ubuntu等发行版已经支持了<i class="fa fa-external-link-alt"></i></span>，一定程度上减小了内核更新频率。很可惜更新内核频繁的Archlinux并没有默认启用，如果想自己打patch可以参考<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tlcm5lbF9saXZlX3BhdGNoaW5n">wiki<i class="fa fa-external-link-alt"></i></span>。很可惜Arch默认也不会像Debian/Ubuntu的apt更新之后提示你是否应该重启，不过有个叫<code>needrestart</code>的包，会帮你在更新之后检查哪个 systemd daemon 需要更新。</p><p>之前讲调试kernel panic的时候提过<code>kexec</code>用于切换内核, 临时应付一下到下次关机可以用这个。如果嫌<code>kexec</code>麻烦可以试试下面这个：</p><p>在Archlinux上如果想在更新内核后临时使用旧内核到关机，可以用<code>kernel-modules-hook</code>这个包。注意，这个包会保留你原来的kernel在<code>/usr/lib/modules/</code>里面，要在重启时自动清理旧内核需要启动 systemd daemon： <code>systemctl enable linux-modules-cleanup</code></p><p>reddit版块有一个<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy9kMWxqMGEvaG93X2NvbWVfYXJjaF9saW51eF9jYW5fdXBncmFkZV90aGVfa2VybmVsLw==">讨论贴<i class="fa fa-external-link-alt"></i></span></p><h2 id="个人体验和想说的话"><a href="#个人体验和想说的话" class="headerlink" title="个人体验和想说的话"></a>个人体验和想说的话</h2><h3 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h3><p>混成器（compositer）有OpenGL2、OpenGL3.1、xrender三个选项，混成器和显卡驱动设置不当经常会出一些小问题，比如Kwin屏幕撕裂、黑屏、卡死。如果你的鼠标卡住动不了了，可以在重启plasma之前禁用混成试试（默认的快捷键是Alt+Shift+F12）</p><p><img src="/linux-rescue/1618028977.png"></p><p>对于混成器感兴趣可以看看fc老师的这篇博客：<span class="exturl" data-url="aHR0cHM6Ly9mYXJzZWVyZmMubWUvemhzL2JyaWVmLWhpc3Rvcnktb2YtY29tcG9zaXRvcnMtaW4tZGVza3RvcC1vcy5odG1s">桌面系统的混成器简史<i class="fa fa-external-link-alt"></i></span>，不过现在2021年了，wayland还是。。。</p><p>如果你用Nivida，或者KDE，或者除了gdm以外的其他dm,不太推荐wayland。如果你喜欢触控板和GNOME,可以试试。<br>KDE用户可以考虑关闭baloo（这是一个搜索工具，然而经常出现内存占用飙升、CPU 100%）</p><blockquote><p>如果你使用 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPXF0NWN0">qt5ct<i class="fa fa-external-link-alt"></i></span> 包，Qt5 设置工具将有可能覆盖系用设置内的字体设置。</p></blockquote><p>小白用户可能还是适合Windows，如果用Linux就老老实实默认设置，不要为了好看去照着不知道哪来的教程做一些自己也不知道干了什么的美化。<br>如果真想入坑定制和美化，不妨去reddit的 Unix Porn 看看。<br>休眠设置不当经常导致很多问题，swap和zram要仔细配置<br>显卡驱动是万恶之源，Nvidia Fuck you！<br>使用wayland基本就是灵车漂移<br>使用pipewire也是<br>btrfs曾经是灵车，现在不是生产环境个人使用感觉还行（请善用snapshots备份）<br>虽然只用过2个月的Manjaro，然而出问题的次数比我用了一年Arch还多。<br>用CentOS是不可能用CentOS的，用windows都不可能用CentOS的。</p><h3 id="一些闲话"><a href="#一些闲话" class="headerlink" title="一些闲话"></a>一些闲话</h3><p>Linux用户包括Linux做主力的桌面玩家，靠这个吃饭的服务器运维或者网管，驱动和嵌入式开发们、红帽和Canonical…..当然更多的人只是偶尔连上去服务器的或者有一台不常用的桌面系统（一般是Ubuntu，还是wsl、跑在虚拟机里的那种）。最早我接触Linux的时候，是本科那会，基本都是arm的板子，调试串口写点驱动…桌面发行版就一个Ubuntu16扔在虚拟机里除了干活没打开过几次。当时还要频繁的用protel画pcb、stm32套件，用word应付乱七八糟的实验报告，根本没想到有一天会将Linux作为主力桌面系统。<br>余生也晚，据说曾经的Linux中文论坛和社区人声鼎沸，现在都随着irc、bbs时代一起没落了；然而现在Linux等话题下面充斥着活跃的是营销号、卖书的、卖课的、忽悠考证的，还有Linux中国之类的垃圾机翻，以及无数的伸手党。<br>ps：最近老男孩抄袭spug运维的事又闹得沸沸扬扬的，某些卖课培训班的德行，啧啧。本来是想兼谈服务器的，毕竟在大多数人眼里这才是“正事”，“桌面”那属于不务正业浪费时间瞎折腾。让他们卖课噶韭菜用CentOS的人看抄了无数遍的N手老资料去吧。<br>都说到这了，<span class="exturl" data-url="aHR0cHM6Ly9jZW50b3MucmlwLw==">给CentOS上个香<i class="fa fa-external-link-alt"></i></span>再走吧。</p><p>相比于Linux/Unix在服务器上几年不关机稳如狗的表现，桌面环境和应用的崩溃和卡死是司空见惯的事，，毕竟用爱发电的开源拖拉机没那么多人手和资金用在测试和GUI体验上，<strong>要习惯，不要大惊小怪，也不要死机了就一言不合重启重装</strong>（或者你可以去用wm或者在termial下面用Vim等终端工具生活）</p><p>现在的Linux桌面和软件已经比以前完善、漂亮、稳定多了，我个人比较看好KDE，当然。<br>大部分情况下导致桌面卡死的就那么几个东西，比如vscode内存泄漏，比如baloo，比如pipewire和pulseaudio，比如某些Wine的软件。</p><h2 id="参考和推荐阅读"><a href="#参考和推荐阅读" class="headerlink" title="参考和推荐阅读"></a>参考和推荐阅读</h2><p><span class="exturl" data-url="aHR0cHM6Ly94aWFveWVzaGl5dS5naXRodWIuaW8vbGludXgvZmFlLzIwMTcvMDUvMTEvJUU1JUFFJTlFJUU0JUJFJThCJUU0JUJEJUJGJUU3JTk0JUE4Y3Jhc2glRTUlODglODYlRTYlOUUlOTBLZHVtcCVFOCVCRCVBQyVFNSU4MiVBOGtlcm5lbCVFNSVCNCVBOSVFNiVCQSU4MyVFNSU4NiU4NSVFNiVBMCVCOC8=">https://xiaoyeshiyu.github.io/linux/fae/2017/05/11/实例使用crash分析Kdump转储kernel崩溃内核/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly90aG9tYXNrLnNkZi5vcmcvYmxvZy8yMDE5LzExLzA5L3Rha2UtY2FyZS1lZGl0aW5nLWJhc2gtc2NyaXB0cy5odG1s">https://thomask.sdf.org/blog/2019/11/09/take-care-editing-bash-scripts.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTIzMDg3MzA4">https://news.ycombinator.com/item?id=23087308<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTIyNjA5NTY1NzAz">https://juejin.cn/post/6844904122609565703<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tkdW1w">https://wiki.archlinux.org/index.php/Kdump<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5icmVuZGFuZ3JlZ2cuY29tL2xpbnV4cGVyZi5odG1s">http://www.brendangregg.com/linuxperf.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFnaWNfU3lzUnFfa2V5">https://en.wikipedia.org/wiki/Magic_SysRq_key<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5n">https://wiki.archlinux.org/index.php/General_troubleshooting<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC9sYXRlc3Qv">The Linux Kernel documentation<i class="fa fa-external-link-alt"></i></span> 网上搜不到的解决办法时候再去查文档</p><p>ArchLinux相关：</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy9HZW5lcmFsX3JlY29tbWVuZGF0aW9uc18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KQ==">ArchWiki: General recommendations (简体中文)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0dlbmVyYWxfdHJvdWJsZXNob290aW5n">ArchWiki: General troubleshooting<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RlYnVnXy1fR2V0dGluZ19UcmFjZXM=">ArchWiki Debug - Getting Traces<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0J1Z19yZXBvcnRpbmdfZ3VpZGVsaW5lcw==">ArchWiki Bug reporting guidelines<i class="fa fa-external-link-alt"></i></span>  </p><p>安全相关：</p><p><span class="exturl" data-url="aHR0cHM6Ly9tYWRhaWRhbnMtaW5zZWN1cml0aWVzLmdpdGh1Yi5pby9ndWlkZXMvbGludXgtaGFyZGVuaW5nLmh0bWwjY2hvb3NpbmctdGhlLXJpZ2h0LWRpc3Rybw==">https://madaidans-insecurities.github.io/guides/linux-hardening.html#choosing-the-right-distro<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvU2VjdXJpdHlfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">https://wiki.archlinux.org/title/Security_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltdGhlbmFjaG9tYW4vSG93LVRvLVNlY3VyZS1BLUxpbnV4LVNlcnZlciNkaXNhYmxlLXJvb3QtbG9naW4=">https://github.com/imthenachoman/How-To-Secure-A-Linux-Server#disable-root-login<i class="fa fa-external-link-alt"></i></span></p><h3 id="喜欢折腾且有时间可以看看这些"><a href="#喜欢折腾且有时间可以看看这些" class="headerlink" title="喜欢折腾且有时间可以看看这些"></a>喜欢折腾且有时间可以看看这些</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGZyb21zY3JhdGNoLm9yZy9sZnMvdmlldy9zdGFibGUv">Linux From Scratch<i class="fa fa-external-link-alt"></i></span> 著名的LFS，教你从头编译，照着教程来不难，需要一点耐心和性能足够好的机器用来编译。这有个<span class="exturl" data-url="aHR0cHM6Ly9sY3R0LmdpdGh1Yi5pby9MRlMtQk9PSy9sZnMtc3lzdi9MRlMtQk9PSy5odG1s">中文翻译<i class="fa fa-external-link-alt"></i></span>可以参考。<br><span class="exturl" data-url="aHR0cHM6Ly9ib290bGluLmNvbS9kb2MvbGVnYWN5L2VsZnMvZW1iZWRkZWRfbGZzLnBkZg==">Embedded Linux From Scratch<i class="fa fa-external-link-alt"></i></span> bootlin的嵌入式Linux教程，略老<br><span class="exturl" data-url="aHR0cHM6Ly9yaXNjdi5vcmcvbmV3cy8yMDIwLzEyL2VtYmVkZGVkLWxpbnV4LWZyb20tc2NyYXRjaC1pbi00NS1taW51dGVzLW9uLXJpc2Mtdi1ib290bGluLw==">Embedded Linux “from scratch” in 45 minutes…on RISC-V | Bootlin<i class="fa fa-external-link-alt"></i></span> 貌似现在流行risc-v和Rust写嵌入式的东西，老了，没玩过。<br><span class="exturl" data-url="aHR0cHM6Ly9lbGl4aXIuYm9vdGxpbi5jb20vbGludXgvbGF0ZXN0L3NvdXJjZQ==">Elixir Cross Referencer<i class="fa fa-external-link-alt"></i></span> 还是bootlin的，能在线查看Linux源码<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZWR1bXAuaW5mby9wb3N0LzIwMjAwMTI4LXN5c3RlbXRhcC1ieS1leGFtcGxlLw==">通过实例快速入门Systemtap<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpY2h1YW5nL2F3ZXNvbWUtc3lzdGVtdGFwLWNu">awesome-systemtap-cn<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm9wZW5yZXN0eS5jb20uY24vY24vZHluYW1pYy10cmFjaW5nLw==">动态追踪技术漫谈<i class="fa fa-external-link-alt"></i></span> 强烈推荐<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNi8wNi8yMi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXJlY2VpdmluZy1kYXRhLyM=">Monitoring and Tuning the Linux Networking Stack: Receiving Data<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBhY2thZ2VjbG91ZC5pby9lbmcvMjAxNy8wMi8wNi9tb25pdG9yaW5nLXR1bmluZy1saW51eC1uZXR3b3JraW5nLXN0YWNrLXNlbmRpbmctZGF0YS8=">Monitoring and Tuning the Linux Networking Stack: Sending Data<i class="fa fa-external-link-alt"></i></span> 这两篇是讲网络栈监控和调优的，经典文章。流传很广，也有很多中文翻译，不过原文直白简练，推荐直接看原文</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇水文主要是写给桌面玩家看的，如果您的服务器打出了GG/被黑了/库被删了，可能不适合来这里找答案。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux&amp;Unix" scheme="https://zhangjk98.xyz/categories/Linux-Unix/"/>
    
    
    <category term="Linux" scheme="https://zhangjk98.xyz/tags/Linux/"/>
    
    <category term="rescue" scheme="https://zhangjk98.xyz/tags/rescue/"/>
    
  </entry>
  
  <entry>
    <title>AUR打包指北</title>
    <link href="https://zhangjk98.xyz/create-aur-packages/"/>
    <id>https://zhangjk98.xyz/create-aur-packages/</id>
    <published>2020-12-20T08:36:47.000Z</published>
    <updated>2020-12-20T08:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>（长期施工中，未完待续）</p><span id="more"></span><blockquote class="blockquote-center"><p>快来当AUR打包工具人/打包苦力吧(笑</p></blockquote><p>其实还是建议你去先看看官方文档</p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><h3 id="新建一个测试环境"><a href="#新建一个测试环境" class="headerlink" title="新建一个测试环境"></a>新建一个测试环境</h3><p>在本机上直接打包可能会把你自己的机子环境搞乱搞崩，或者忽略了已经在自己电脑上装了了但是没有的依赖，又或者你想…<br>反正弄一个干净的测试环境是有必要的。可以参考官方Wiki：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6QnVpbGRpbmdfaW5fYV9jbGVhbl9jaHJvb3Q=">DeveloperWiki:Building in a clean chroot<i class="fa fa-external-link-alt"></i></span>, 或者看肥猫这篇：<span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9pbnRyb2R1Y3Rpb24tdG8tYXJjaC1saW51eC1kZXZ0b29scy1idWlsZC1wYWNrYWdlcy1mcm9tLWEtY2xlYW4tY2hyb290Lw==">Arch Linux devtools 简介 – 在干净的环境里编译软件包<i class="fa fa-external-link-alt"></i></span></p><p>当然打包一些很简单、依赖很明确的东西，确定没必要也可以不要这一步。</p><h3 id="编写PKGBUILD"><a href="#编写PKGBUILD" class="headerlink" title="编写PKGBUILD"></a>编写PKGBUILD</h3><p>最快的方法是去找找有没有和你要打包的东西类似的包，然后抄一下它的PKGBUILD。</p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>先用namcap检查一下，有没有语法错误或者其他不符合规范的地方</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap PKGBUILD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 <code>XXX.tar.xz</code>可以再用 <code>namcap</code>检查一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">namcap XXX.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传和分享"><a href="#上传和分享" class="headerlink" title="上传和分享"></a>上传和分享</h3><h4 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h4><p>如果想分享出来，你可以上传到AUR仓库里面。AUR帐号随便就能注册几乎没有审查的（所以传点恶意代码上去也能传的），但是尽量不要把有版权问题之类的东西传上去（虽然出了事应该是你自己负责）</p><p>新建一个账号，然后上传你的SSH公钥和密钥指纹。</p><p>用 <code>git clone</code>拉取一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone ssh://aur@aur.archlinux.org/your-package-name.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AUR软件仓库需要<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwLy5TUkNJTkZPXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">SRCINFO<i class="fa fa-external-link-alt"></i></span>,不然会拒绝你的提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">makepkg --printsrcinfo <span class="token operator">></span> .SRCINFO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="非官方软件仓库"><a href="#非官方软件仓库" class="headerlink" title="非官方软件仓库"></a>非官方软件仓库</h4><p>或者你可以去其他非官方的仓库，这有一大堆：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1Vub2ZmaWNpYWxfdXNlcl9yZXBvc2l0b3JpZXNfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Unofficial user repositories<i class="fa fa-external-link-alt"></i></span></p><p>中文用户人最多的是ArchlinuxCN，我猜你很熟悉这个了。</p><p>其他的还有chaotic-aur（里面的包不少，但是国内速度很慢，镜像都在国外，直接访问可能比从AUR拉下来编译还慢），arch4edu（一些教育软件和包，清华的弄得，国内速度还行），blackarch（这个包也很多，约等于arch系的kali源）</p><p>要添加到这些非官方仓库里，可以请求打包，或者跟仓库管理员py。</p><p>或者可以自建一个仓库。</p><p>可参考：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxveGFmLmNvbS8yMDIwLzA2L2J1aWxkX2F1cl93aXRoX2dpdGh1Yl9hY3Rpb25zLw==">利用 GitHub Actions 编译 AUR 包并建立自己的软件源<i class="fa fa-external-link-alt"></i></span></p><h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><h3 id="namcap"><a href="#namcap" class="headerlink" title="namcap"></a>namcap</h3><p>用来检查打包是否正确</p><h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3><p>可以干很多事情，最常用的是新建一个干净的环境用来测试你的包。</p><p>还有很多用法去看文档吧，</p><h3 id="debtap"><a href="#debtap" class="headerlink" title="debtap"></a>debtap</h3><p>大多数情况下可以快速把deb包转成aur包<br>有些deb的包或者rpm的包可以拆包然后重新手动打包一下。一般的用debtap可以解决大部分deb包，有些依赖可能没办法需要手动处理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -Syu debtap<span class="token function">sudo</span> debtap -u <span class="token comment">#同步数据库，可能比较慢</span>debtap -p XXX.deb <span class="token comment"># -p 选项生成PKGBUILD</span><span class="token comment">## 然后根据提示输入包名和协议等</span><span class="token comment">## 然后稍等一会，会比较慢</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后 <code>pacman -U XXX.tar.xz</code>可以装到你的电脑上试一下。</p><h3 id="pip2pkgbuilds"><a href="#pip2pkgbuilds" class="headerlink" title="pip2pkgbuilds"></a>pip2pkgbuilds</h3><p>将pip的包转成aur的包，这个工具很久没更新了（But it works）。这个工具有不少情况不会帮你自动处理，python的不少pip包本身也不太遵循pip的打包规范，要做不少手动检查和调整。</p><h3 id="npm-pkgbuild"><a href="#npm-pkgbuild" class="headerlink" title="npm-pkgbuild"></a>npm-pkgbuild</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FybGFjNzcvbnBtLXBrZ2J1aWxkI3JlYWRtZQ==">npm-pkgbuild<i class="fa fa-external-link-alt"></i></span> 一个将npm包转成aur的包，和上面那个类似，也是自动生成PKGBUILD。没用过不好评价。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>人肉测试每个包然后传上去给大家用是最好的，不过有的上游更新太勤测试不过来，或者一些<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1ZDU19wYWNrYWdlX2d1aWRlbGluZXNfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">用版本控制紧跟上游的包<i class="fa fa-external-link-alt"></i></span><br><del>又或者有的时候你想让用户当小白鼠</del></p><p>可以试试Travis CI、Github Action 之类的CI/CD工具，不过最好还是更新之前人肉测试一下</p><h3 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h3><p>Github Action的好处是可以白嫖（划掉</p><p>可以用Github Action自动生成PKGBUILD：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvcHVibGlzaC1hdXItcGFja2FnZQ==">publish-aur-package<i class="fa fa-external-link-alt"></i></span></p><p>鸭鸭的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0R1Y2tTb2Z0L2J1aWxkLWF1ci1hY3Rpb24=">build-aur-action<i class="fa fa-external-link-alt"></i></span>,用Github Action编译一个AUR包（有时候你不想在自己电脑上编译可以试试这个）</p><p>使用见：<span class="exturl" data-url="aHR0cHM6Ly92aWZseXRoaW5rLmNvbS9Vc2VfR2l0SHViQWN0aW9uc190b19idWlsZF9BVVIv">GitHub Actions 打造 AUR 打包下载一条龙服务<i class="fa fa-external-link-alt"></i></span></p><h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><h3 id="AUR的依赖包makepkg无法自动识别"><a href="#AUR的依赖包makepkg无法自动识别" class="headerlink" title="AUR的依赖包makepkg无法自动识别"></a>AUR的依赖包makepkg无法自动识别</h3><p>打包的时候如果依赖AUR的包，在 <code>makepkg -s</code>pacman是不会自动安装的需要手动安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: target not found: python-django-cors-headers<span class="token operator">==</span><span class="token operator">></span> ERROR: <span class="token string">'pacman'</span> failed to <span class="token function">install</span> missing dependencies.<span class="token operator">==</span><span class="token operator">></span> ERROR: Could not resolve all dependencies.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果依赖太多装不过来，可以加 <code>makepkg -d</code>参数忽略依赖，然后对生成的 <code>XXX.tar.xz</code>使用yay或者pikaur之类的AUR helper</p><h3 id="git初次commit不包含SRCINFO导致拒绝提交"><a href="#git初次commit不包含SRCINFO导致拒绝提交" class="headerlink" title="git初次commit不包含SRCINFO导致拒绝提交"></a>git初次commit不包含SRCINFO导致拒绝提交</h3><p>可以用 <code>git filter branch</code></p><p>（其实直接删了重新 <code>git init</code>可能更快）</p><h2 id="常见写法和命令"><a href="#常见写法和命令" class="headerlink" title="常见写法和命令"></a>常见写法和命令</h2><h3 id="install命令"><a href="#install命令" class="headerlink" title="install命令"></a>install命令</h3><p>用过 <code>cmake</code>等编译工具的人应该对 <code>make install</code>很熟了，它在PKGBUILD里面大概像这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">make</span> -C <span class="token string">"<span class="token variable">$pkgname</span>-<span class="token variable">$pkgver</span>"</span> <span class="token assign-left variable">DESTDIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$pkgdir</span>"</span> <span class="token function">install</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在PKGBUILD里面，还经常用它把文件安装到制定目录，并指定权限（一般不用 <code>cp</code>来干这种事）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$srcdir</span>/<span class="token variable">$pkgname</span>"</span>  <span class="token function">install</span> -vDm <span class="token number">644</span> <span class="token variable">$&#123;pkgname<span class="token operator">%</span>-git&#125;</span><span class="token punctuation">&#123;</span>,.plugin<span class="token punctuation">&#125;</span>.zsh <span class="token punctuation">\</span>    -t <span class="token string">"<span class="token variable">$&#123;pkgdir&#125;</span>/usr/share/zsh/plugins/<span class="token variable">$&#123;pkgname&#125;</span>/"</span>  <span class="token function">install</span> -Dm644 LICENSE <span class="token string">"<span class="token variable">$pkgdir</span>"</span>/usr/share/licenses/<span class="token variable">$pkgname</span>/LICENSE<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将可执行文件和LICENSE分别放到指定目录，像LICENSE或者doc权限644就好了，其他的可执行文件酌情给个755权限。</p><p>如果有需要打印详细安装信息方便调试，可以加 <code>-v</code>选项，像这样 <code>install -Dvm755</code></p><h3 id="常见写法"><a href="#常见写法" class="headerlink" title="常见写法"></a>常见写法</h3><p>获取Github Release</p><h2 id="练手推荐"><a href="#练手推荐" class="headerlink" title="练手推荐"></a>练手推荐</h2><p>上手AUR打包基本只需要一点bash脚本的知识就可以了。当然最好还要对打包的项目和所用的语言、框架、依赖比较熟悉。</p><p>反正我感觉比deb和rpm的打包简单太多了，而且由于包管理的机制，虽然容易挂，但是依赖一般不会特别麻烦（除了有些要拆包的东西）</p><p>你看看依赖问题<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MTYwNjEyOC9hbnN3ZXIvMTE5NDU5NjU5MQ==">都把隔壁deb系的老哥逼成什么样了<i class="fa fa-external-link-alt"></i></span>。</p><p>可以看这个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS96aC9hcnRpY2xlcy9sLWxvLXJwbS1idWlsZC1wYWNrYWdlLw==">Linux 中 RPM 的构建与打包<i class="fa fa-external-link-alt"></i></span>感受一下打包流程<br>（当然rpm包用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0=">fpm<i class="fa fa-external-link-alt"></i></span>之类的打包工具也没有那么麻烦）</p><p>官方的打包示例是要用到make编译c/c++包的例子，但是一些c/c++的包，运行环境和依赖会比较麻烦，而且在x86和arm等不同架构下面也会有很多问题。拿来熟悉打包流程对萌新不太友好。</p><p>练手打包建议用从自己最熟悉的项目和语言开始。如果你什么语言都不熟悉呢，推荐用一些主题或者可以用debtap之类的工具方便的转成AUR包的东西来熟悉一下打包。</p><p>有的系统主题、grub主题、输入法主题之类的包比较好打包，一般来说依赖也少，不会搞出什么大问题。而且主题的文件存放位置和PKGBUILD里面的其他东西可以找AUR里面打包好的其他主题参考，基本大同小异，上手打包不会有太太高难度和坑，不太熟悉流程的可以先用一些主题练手熟悉一下打包流程。（主要是这个依赖也少，破坏性比较小，萌新打出低质量的AUR包也不至于把装这个包的人一波带走闯下大祸）</p><p>而且他们不需要编译，也没有依赖报错，总之非常的适合熟悉一下PKGBUILD的流程</p><p>当然打包不能包揽所有工作，一些设置需要用户手动启用或者修改的（比如一些配置，又比如systemd之类的daemon），比如我这里打包了一个GRUB的Cyberpunk主题，需要用户手动修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GRUB_THEME</span><span class="token operator">=</span><span class="token string">"/usr/share/grub/themes/Cyberpunk/theme.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要用户手动修改设置来启用（基本上主题、桌面挂件之类的包都是这么做的）</p><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>暑假的时候打了十几个野包，当时水平也菜，刚洗手变成Arch玩家没多久，打的十几个包都没放到AUR上丢人。虽然现在还是真蒟蒻在群里围观各路大佬卖弱不敢说话，看到中文的打包教程这么少，决定还是写点什么。</p><p>当时搜AUR打包相关的资料，发现相关的文章、博客、资料并不多（尤其是中文的）。中文资料保守估计不到Archlinux安装教程的百分之一，也不到deb、rpm、Flatpak打包教程的百分之一。</p><p>Archlinux安装弄的这么难初衷可能是为了筛掉一部分小白和伸手党，不过网上各路保姆级安装教程（一步一步手把手教的视频演示那种）和各种一键安装脚本和 Arch based 的发行版基本上快让<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfTGludXhfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Arch的理念<i class="fa fa-external-link-alt"></i></span>流产了(特别是广为诟病的Manjaro和网上一大堆不负责任的教程，一口一个适合小白，动不动就教人添加ArchlinuxCN源，搞得很多打包者不堪骚扰)</p><p>小白倒没什么，主要是被伸手党搞怕了。</p><p>独立打一个包应该不会比独立装一个Archlinux难（不考虑Nvidia双显卡博通网卡阴间主板诡异驱动等….）。<br>如果一个用户能参照ArchWiki独立装好、配置好自己的Arch，那就应该有能力自己打包。<br>Arch没有Mac、Windows、ChromeOS那样的财大气粗的公司和掏钱买服务的客户，甚至不能跟RHEL和Ubuntu比，社区纯靠热情。而且由于deb系和rpm系用户众多，基本大部分软件如果支持Linux会给出deb或者rpm的包，有的可能会给个appimage的包，Arch的支持基本没太多上游会管，很多包都是Arch的维护者和用户自行编译打包的（不少还是deb拆包转的）。<br>伸手党太多而打包者太少，那就离凉凉不远了。<br>下次看到没有包当伸手党可不好，没有包就自己打一个吧。</p><h2 id="参考和推荐阅读"><a href="#参考和推荐阅读" class="headerlink" title="参考和推荐阅读"></a>参考和推荐阅读</h2><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0RldmVsb3Blcldpa2k6SW5kZXg=">DeveloperWiki<i class="fa fa-external-link-alt"></i></span> 里面关于打包的部分可以看看<br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfcGFja2FnZV9ndWlkZWxpbmVz">Arch package guidelines<i class="fa fa-external-link-alt"></i></span> Arch官方的打包指南<br>[PKGBUILD_(简体中文)]<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1BLR0JVSUxEXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">https://wiki.archlinux.org/index.php/PKGBUILD_(简体中文)<i class="fa fa-external-link-alt"></i></span> PKGBUILD的简要介绍<br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL01ha2Vwa2dfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Makepkg_(简体中文)<i class="fa fa-external-link-alt"></i></span> Makepkg也比较重要，有需要可以参考维基修改一下参数<br><span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGMuYXQvMjAxNy8wOC9tYWtlLWFuLWFyY2gtcGFja2FnZS1mb3ItcHl0aG9uLW1vZHVsZS8=">给 Arch 打一个包 – Python 模块篇<i class="fa fa-external-link-alt"></i></span> python的包经常没什么人愿意打（确实依赖比较麻烦，好在有肥猫，打了一大堆python包），希望多来点熟悉python的大佬<br><span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vUEtHQlVJTEQuNQ==">PKGBUILD参考手册<i class="fa fa-external-link-alt"></i></span> Arch官网的参考手册，话说Arch最近新上的<span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy8=">手册索引<i class="fa fa-external-link-alt"></i></span>挺香的（btw I use tldr）<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsdHIuY29tL2RvY3MvYnVpbGRpbmctcGFja2FnZXMtb24tYXJjaC1saW51eA==">Building Packages on Arch Linux (Including the AUR)<i class="fa fa-external-link-alt"></i></span> Vultr的教程（我也不知道Vultr怎么会有这种东西）<br><span class="exturl" data-url="aHR0cHM6Ly9qdW55dXNzaC5naXRodWIuaW8vcC9hcmNoLWxpbnV4LXBhY2thZ2UtcXVpY2stc3RhcnQv">Arch Linux 第一次打包就上手<i class="fa fa-external-link-alt"></i></span>  新手可以看看这个</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;（长期施工中，未完待续）&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="AUR" scheme="https://zhangjk98.xyz/tags/AUR/"/>
    
    <category term="Archlinux" scheme="https://zhangjk98.xyz/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>Linux新一代音视频服务Pipewire尝鲜</title>
    <link href="https://zhangjk98.xyz/pipewire/"/>
    <id>https://zhangjk98.xyz/pipewire/</id>
    <published>2020-12-03T07:58:26.000Z</published>
    <updated>2020-12-03T07:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021年9月更新：<br>听说fedora都上Pipiwire了，正好这几天有点空，那就试试吧</p><span id="more"></span><p>Pipewire是红帽造的新一代音视频轮子，主要是用来取代PulseAudio、jack还有gstreams什么的。<br><strong>据说</strong>延迟补偿还不错，<strong>据说</strong>能统一音视频框架还兼容PulseAudio和Jack，据说是朝着专业级音效去的。据说支持Wayland和平板，据说支持Flatpak之类的容器内使用，据说有类似PolKit的权限管理，不需要像PulseAudio那样新建音频用户组和添加用户了。。。。</p><blockquote><p>It provides a low-latency, graph based processing engine on top of audio and video devices that can be used to support the use cases currently handled by both pulseaudio and JACK. PipeWire was designed with a powerful security model that makes interacting with audio and video devices from containerized applications easy, with supporting Flatpak applications being the primary goal. Alongside Wayland and Flatpak we expect PipeWire to provide a core building block for the future of Linux application development.</p></blockquote><p>都是据说啊，被Wayland骗了一次之后我已经不敢信这些宣传了，先试试实际效果再说。</p><p>当然这个目前貌似只正经适配了GNOME和Fedora，不过据说兼容PulseAudio，Arch上的坑已经有人踩了好久了，现在还有点小问题，不过可以考虑上了。<br>昨天刚把Arch和笔记本的EndeavourOS更了python 3.9，除了autojump出了点小问题外一切正常。索性直接上Pipewire看看吧，反正笔记本那个全损音质也跟没有一样，换了说不定能抢救一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S pipewire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要替代PulseAudio和Jack装这两个包<code>pipewire-pulse</code>、<code>pipewire-jack-dropin</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S pipewire-jack-dropin pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后systemd设置一下（archwiki说蓝牙设备需要手动设置一下，编辑<code>/etc/pipewire/pipewire.conf</code>，我手头没蓝牙耳机就不弄了）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> --user pipewire-pulse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后退出登录或重启。</p><p>运行<code>pactl info</code>，如果看到</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token property">Server Name:</span> PulseAudio <span class="token operator">(</span>on PipeWire <span class="token number">0.3.17</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明正常。</p><h3 id="蓝牙设备"><a href="#蓝牙设备" class="headerlink" title="蓝牙设备"></a>蓝牙设备</h3><p>感谢室友赞助的一个索尼蓝牙音箱用于测试</p><p>pipewire自带了蓝牙的模块，不需要像PulseAudio那样安装<code>pulseaudio-bluetooth</code>之类的包</p><p>安装了pipewire-pulse之后编辑<code>/etc/pipewire/pipewire.conf</code>在<code>exec /usr/bin/pipewire-media-session</code>后面加上<code>-e bluez5</code>就可以使用了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> /usr/bin/pipewire-media-session -e bluez5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>换回PulseAudio或者Jack可以用这个<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vc25pcHBldHMvMTE2NA==">脚本<i class="fa fa-external-link-alt"></i></span></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib64/<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-mainloop-glib.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse-simple.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libpulse.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjack.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjacknet.so.0.999.0<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib64/libjackserver.so.0.999.0<span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用pacman包管理器装的就</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable pipewire-pulse --usersystemctl disable pipewire --useryay -Rs pipewire-pulseyay -S pulseaudio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新一点实测"><a href="#更新一点实测" class="headerlink" title="更新一点实测"></a>更新一点实测</h2><h3 id="人耳效果和使用体验"><a href="#人耳效果和使用体验" class="headerlink" title="人耳效果和使用体验"></a>人耳效果和使用体验</h3><p>昨天回到宿舍，发现笔记本的EndeavourOS更新python 3.9<br> Optimus-manager 出问题了，好在很快解决了。<br>然后在工具人室友的帮助下测试了绿联的外接声卡一块、某大法耳机一个音响一个，傻多戴显示器自带小音箱一个，均工作正常。</p><p><img src="/pipewire/1607053618.png"><br><img src="/pipewire/1607053601.png"></p><p>两种音质人耳都听不出差别，室友把两段音频放到Adobe Audition也看不出什么大区别</p><p>笔记本自带外放在KDE的设置中从其他音频播放设备切换过去之后出现没有声音的状况，经检查其实是有的，只是非常小，将声音调整到最大还是几乎要被笔记本的风扇声音盖住（这貌似不是pipewire的锅，），重启后外放音量恢复正常。<br>除了笔记本自带外放，在笔记本上音频切换KDE设置都没有出现卡死的状况，，声音也播放正常，没出现切换之后没声了的状况。</p><h3 id="面板参数"><a href="#面板参数" class="headerlink" title="面板参数"></a>面板参数</h3><p>笔记本使用原来的PulseAudio详情：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span><span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span><span class="token key atrule">Server Name</span><span class="token punctuation">:</span> pulseaudio<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> <span class="token number">14.0</span><span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> s16le 2ch 44100Hz<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> alsa_output.pci<span class="token punctuation">-</span>0000_00_1f.3<span class="token punctuation">-</span>platform<span class="token punctuation">-</span>skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> combined.monitor<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 94e6<span class="token punctuation">:</span>e6bf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更换pipewire-pulse之后：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Server String</span><span class="token punctuation">:</span> /run/user/1000/pulse/native<span class="token key atrule">Library Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Server Protocol Version</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token key atrule">Is Local</span><span class="token punctuation">:</span> yes<span class="token key atrule">Client Index</span><span class="token punctuation">:</span> <span class="token number">69</span><span class="token key atrule">Tile Size</span><span class="token punctuation">:</span> <span class="token number">65472</span><span class="token key atrule">User Name</span><span class="token punctuation">:</span> zjk<span class="token key atrule">Host Name</span><span class="token punctuation">:</span> zjk<span class="token punctuation">-</span><span class="token number">7591</span><span class="token key atrule">Server Name</span><span class="token punctuation">:</span> PulseAudio (on PipeWire 0.3.17)<span class="token key atrule">Server Version</span><span class="token punctuation">:</span> 14.0.0<span class="token key atrule">Default Sample Specification</span><span class="token punctuation">:</span> float32le 2ch 48000Hz<span class="token key atrule">Default Channel Map</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>left<span class="token punctuation">,</span>front<span class="token punctuation">-</span>right<span class="token key atrule">Default Sink</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_output.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> hw<span class="token punctuation">:</span>sofhdadsp<span class="token punctuation">,</span><span class="token key atrule">5</span><span class="token punctuation">:</span> sink<span class="token key atrule">Default Source</span><span class="token punctuation">:</span> <span class="token key atrule">alsa_input.pci-0000:00:1f.3-platform-skl_hda_dsp_generic.HiFi</span><span class="token punctuation">:</span> <span class="token key atrule">hw:sofhdadsp</span><span class="token punctuation">:</span> source<span class="token key atrule">Cookie</span><span class="token punctuation">:</span> 6242<span class="token punctuation">:</span><span class="token number">4425</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来参数是好了一点，实测听不出来。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>据说pipewire音视频延迟低了，手头没有专业设备没法测。其他的混响、均衡、采样手头没有专业设备也测不出来。</p><p>视频的话，浏览器HTML5播放器和本地VLC能正常播放。笔记本播放youtube4k视频外接4k显示器硬解没有大问题。VLC播放用N卡（笔记本的1650）解码也没有问题，驱动正常。</p><p>其他的视频方面和屏幕共享之类的功能暂时还没有测试。我也找不到熟悉视频的工具人了，等找到了再说吧，自己瞎测估计也测不出什么来。</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="音质"><a href="#音质" class="headerlink" title="音质"></a>音质</h3><p><code>pw-cli</code>显示的台式机面板参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pw-cli info <span class="token number">0</span>        id: <span class="token number">0</span>        permissions: rwxm        type: PipeWire:Interface:Core/3        cookie: <span class="token number">653542227</span>        user-name: <span class="token string">"zjk"</span>        host-name: <span class="token string">"zjk-allseries"</span>        version: <span class="token string">"0.3.17"</span>        name: <span class="token string">"pipewire-0"</span>*       properties:*               core.name <span class="token operator">=</span> <span class="token string">"pipewire-0"</span>*               context.profile.modules <span class="token operator">=</span> <span class="token string">"none"</span>*               core.daemon <span class="token operator">=</span> <span class="token string">"true"</span>*               link.max-buffers <span class="token operator">=</span> <span class="token string">"16"</span>*               default.clock.rate <span class="token operator">=</span> <span class="token string">"48000"</span>*               default.clock.quantum <span class="token operator">=</span> <span class="token string">"1024"</span>*               default.clock.min-quantum <span class="token operator">=</span> <span class="token string">"32"</span>*               default.clock.max-quantum <span class="token operator">=</span> <span class="token string">"8192"</span>*               default.video.width <span class="token operator">=</span> <span class="token string">"640"</span>*               default.video.height <span class="token operator">=</span> <span class="token string">"480"</span>*               default.video.rate.num <span class="token operator">=</span> <span class="token string">"25"</span>*               default.video.rate.denom <span class="token operator">=</span> <span class="token string">"1"</span>*               mem.allow-mlock <span class="token operator">=</span> <span class="token string">"true"</span>*               cpu.max-align <span class="token operator">=</span> <span class="token string">"32"</span>*               object.id <span class="token operator">=</span> <span class="token string">"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>教研室的Arch台式机的老声卡接耳机和外接绿联声卡接耳机看不出什么大的区别。<br>Arch开Virtualbox里的win7能用，但是音质不知道为什么变差了特别多。 </p><p>只有笔记本外放音质确实好了一点，我的笔记本外放能听出差别的那种，然而还是比win10差了不少（这个没有参考价值，我的笔记本Realtek驱动太阴间了）。<br>据说延迟低了，这个听不出来，手头上也没有专业设备。  </p><p>其他的等我的校交响乐团的工具人室友回来了再说。  </p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>目前使用的问题大概有：</p><ol><li><code>systemctl status --user pipewire-pulse</code>报错</li></ol><pre class="line-numbers language-log" data-language="log"><code class="language-log">● <span class="token domain constant">pipewire-pulse.service</span> <span class="token operator">-</span> PipeWire PulseAudio     <span class="token property">Loaded:</span> loaded <span class="token operator">(</span><span class="token file-path string">/usr/lib/systemd/user/pipewire-pulse.service</span><span class="token operator">;</span> enabled<span class="token operator">;</span> vendor preset<span class="token operator">:</span> enabled<span class="token operator">)</span>     <span class="token property">Active:</span> active <span class="token operator">(</span>running<span class="token operator">)</span> since Thu <span class="token date number">2020-12-03</span> <span class="token time number">17:10:09</span> CST<span class="token operator">;</span> <span class="token number">12min</span> ago<span class="token property">TriggeredBy:</span> ● <span class="token domain constant">pipewire-pulse.socket</span>   <span class="token property">Main PID:</span> <span class="token number">1787</span> <span class="token operator">(</span>pipewire<span class="token operator">-</span>pulse<span class="token operator">)</span>     <span class="token property">CGroup:</span> <span class="token file-path string">/user.slice/user-1000.slice/user@1000.service/app.slice/pipewire-pulse.service</span>             └─<span class="token number">1787</span> <span class="token file-path string">/usr/bin/pipewire-pulse</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:02</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> core <span class="token number">0x55fc6c39e410</span><span class="token operator">:</span> proxy <span class="token number">0x55fc6c39e410</span> id<span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> bound<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span> seq<span class="token operator">:</span><span class="token number">1272</span> res<span class="token operator">:</span><span class="token operator">-</span><span class="token number">32</span> <span class="token operator">(</span>Broken pipe<span class="token operator">)</span> msg<span class="token operator">:</span><span class="token string">"connection error"</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:25</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">42</span> <span class="token operator">(</span>FLUSH_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">168</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:25</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">41</span> <span class="token operator">(</span>CORK_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">169</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:17:26</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c30c300</span><span class="token operator">:</span> <span class="token punctuation">[</span>Google Chrome<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">41</span> <span class="token operator">(</span>CORK_PLAYBACK_STREAM<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">170</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">3</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">4</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">5</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:17</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">6</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:18</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">7</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">17:19:18</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c3deb80</span><span class="token operator">:</span> <span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">18</span> <span class="token operator">(</span>PLAY_SAMPLE<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">8</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token separator comment">***</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">18:58:02</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c37c6f0</span><span class="token operator">:</span> <span class="token punctuation">[</span>VirtualBox<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">23</span> <span class="token operator">(</span>GET_SOURCE_INFO<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">249</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span class="token number">12</span>月 <span class="token number">03</span> <span class="token time number">19:00:16</span> zjk<span class="token operator">-</span>allseries pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1787</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x55fc6c37c6f0</span><span class="token operator">:</span> <span class="token punctuation">[</span>VirtualBox<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">23</span> <span class="token operator">(</span>GET_SOURCE_INFO<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">376</span> error<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">(</span>No such file or directory<span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过貌似都不影响使用</p><ol start="2"><li>KDE调节音量的按钮换了之后经常卡死（KDE下面整个任务栏都卡死了），恢复之后调节音量无效</li></ol><p><img src="/pipewire/1606991672.png"></p><ol start="3"><li>KDE音频切换设置偶尔卡死</li></ol><p>下图这个</p><p><img src="/pipewire/1606992266.png"><br><img src="/pipewire/1606992430.png"></p><p>点终止之后整个plasma桌面都无了</p><p><img src="/pipewire/1606992508.png"></p><ol start="4"><li><p>上图中的Build-in Audio切换之后耳机没有声音</p></li><li><p>切换外放麦克风和耳机之后再切回来没声了</p></li><li><p>有几个人之前说virtualbox会冲突，我这暂时没遇到</p></li><li><p>2021.2更新后再次出问题了,<code>pw-cli info 0</code>显示</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: <span class="token string">"failed to connect: Host is down"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查了一下发现systemd daemon不知道怎么没了。</p><pre class="line-numbers language-none"><code class="language-none">Unit pipewire.service could not be found.Unit pipewire-pulse.service could not be found.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行<code>systemctl enable pipewire --user</code>后重启还是找不到</p><p><code>systemctl status pipewire-pulse --user</code></p><p>报错：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">● <span class="token domain constant">pipewire-pulse.service</span> <span class="token operator">-</span> PipeWire PulseAudio     <span class="token property">Loaded:</span> loaded <span class="token operator">(</span><span class="token file-path string">/usr/lib/systemd/user/pipewire-pulse.service</span><span class="token operator">;</span> enabled<span class="token operator">;</span> vendor preset<span class="token operator">:</span> enabled<span class="token operator">)</span>     <span class="token property">Active:</span> active <span class="token operator">(</span>running<span class="token operator">)</span> since Sun <span class="token date number">2021-02-14</span> <span class="token time number">10:03:07</span> CST<span class="token operator">;</span> <span class="token number">12min</span> ago<span class="token property">TriggeredBy:</span> ● <span class="token domain constant">pipewire-pulse.socket</span>   <span class="token property">Main PID:</span> <span class="token number">1168</span> <span class="token operator">(</span>pipewire<span class="token operator">-</span>pulse<span class="token operator">)</span>     <span class="token property">CGroup:</span> <span class="token file-path string">/user.slice/user-1000.slice/user@1000.service/app.slice/pipewire-pulse.service</span>             └─<span class="token number">1168</span> <span class="token file-path string">/usr/bin/pipewire-pulse</span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:40</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:40</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6ceab0</span><span class="token operator">:</span> <span class="token punctuation">[</span>QPulse<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">9</span> <span class="token operator">(</span>SET_CLIENT_NAME<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">1</span> error<span class="token operator">:</span><span class="token number">6</span> <span class="token operator">></span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:41</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:41</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6e1cb0</span><span class="token operator">:</span> <span class="token punctuation">[</span>QPulse<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> command<span class="token operator">:</span><span class="token number">9</span> <span class="token operator">(</span>SET_CLIENT_NAME<span class="token operator">)</span> tag<span class="token operator">:</span><span class="token number">1</span> error<span class="token operator">:</span><span class="token number">6</span> <span class="token operator">></span><span class="token number">2</span>月 <span class="token number">14</span> <span class="token time number">10:15:42</span> zjk<span class="token operator">-</span><span class="token number">7591</span> pipewire<span class="token operator">-</span>pulse<span class="token punctuation">[</span><span class="token number">1168</span><span class="token punctuation">]</span><span class="token operator">:</span> pulse<span class="token operator">-</span>server <span class="token number">0x557a2d6b64f0</span><span class="token operator">:</span> failed to connect client<span class="token operator">:</span> Host is down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退坑保平安"><a href="#退坑保平安" class="headerlink" title="退坑保平安"></a>退坑保平安</h3><p>换回PulseAudio了，不当小白鼠了，心累，好几次升级都有小问题，每次内核更新提心吊胆的。</p><p>2021.2 </p><p>最近更新了Pipewire和kernel，开机加载界面的时候只加载出壁纸，kwin慢了十秒，Pipewire daemon加载失败，不想修了，直接换回PulseAudio。</p><p>在Pipewire出1.0稳定版和正式支持KDE之前一直用PulseAudio了。</p><!-- 如果需要屏幕共享，chrome需要启用WebRTC PipWire支持`chrome://flags/#enable-webrtc-pipewire-capturer`，可能需要用`libpipewire02` --><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p><span class="exturl" data-url="aHR0cHM6Ly9waXBld2lyZS5vcmcv">https://pipewire.org/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1BpcGVXaXJl">https://wiki.archlinux.org/index.php/PipeWire<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUHVsc2VBdWRpbw==">https://zh.wikipedia.org/wiki/PulseAudio<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzczNDEwMy8=">https://lwn.net/Articles/734103/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5nbm9tZS5vcmcvdXJhZXVzLzIwMjAvMDkvMDQvcGlwZXdpcmUtbGF0ZS1zdW1tZXItdXBkYXRlLTIwMjAv">https://blogs.gnome.org/uraeus/2020/09/04/pipewire-late-summer-update-2020/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuZnJlZWRlc2t0b3Aub3JnL3BpcGV3aXJlL3BpcGV3aXJlLy0vd2lraXMvTGltaXRhdGlvbnMtaW4tMC4z">pipewire 0.3的一些局限和问题<i class="fa fa-external-link-alt"></i></span>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年9月更新：&lt;br&gt;听说fedora都上Pipiwire了，正好这几天有点空，那就试试吧&lt;/p&gt;</summary>
    
    
    
    <category term="不务正业系列" scheme="https://zhangjk98.xyz/categories/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="pipewire" scheme="https://zhangjk98.xyz/tags/pipewire/"/>
    
  </entry>
  
  <entry>
    <title>本站评论由valine更换为DisqusJS</title>
    <link href="https://zhangjk98.xyz/change-comment-to-disqusjs/"/>
    <id>https://zhangjk98.xyz/change-comment-to-disqusjs/</id>
    <published>2020-11-26T12:25:41.000Z</published>
    <updated>2020-11-26T12:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于近日不少采用valine作为评论系统网站的遭到几千个垃圾评论刷屏攻击，外加valine存在的安全隐患问题，放弃好看的valine，换用DisqusJS。<br>utteranc继续使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于近日不少采用valine作为评论系统网站的遭到几千个垃圾评论刷屏攻击，外加valine存在的安全隐患问题，放弃好看的valine，换用DisqusJS。&lt;br&gt;utteranc继续使用。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次Spring Cloud上线内存优化</title>
    <link href="https://zhangjk98.xyz/spring-cloud-performance-optimization/"/>
    <id>https://zhangjk98.xyz/spring-cloud-performance-optimization/</id>
    <published>2020-11-19T12:30:06.000Z</published>
    <updated>2020-11-19T12:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>没钱买 256G 内存的服务器的人是这样的</p><span id="more"></span><p>其实本来想说Spring Cloud上线性能优化的，想了想不是，这波，这波啊是性能反向优化（性能不性能的已经不重要了，用户量应该也不太大，先把成本压下来再说吧）。</p><h2 id="怎么回事"><a href="#怎么回事" class="headerlink" title="怎么回事"></a>怎么回事</h2><p>朋友们好啊，<br>我是浑元形意太极门掌门人马保国。<br>刚才有个朋友问我：<br>“马老师发生肾么事了？”<br>我说怎么回事。给我发了几张截图。<br>我一看！哦，原来是昨天，有两个微服务，<br>上线一天，一个内存<strong>996M</strong>，一个内存<strong>888M</strong>。<br><img src="/spring-cloud-performance-optimization/image-20201118095216036.png" alt="它也说，啊，它截图也说了"><br><del>其实是我调了一下凑出来的这两个数</del><br>它说要吃一点资源，我说可以。<br>诶，我一说它“啪”就站起来了，很快啊！<br>然后上来就是，一个虚拟机，一个Docker，一个mysql，我全部防出去，防出去了啊。<br>防出去以后，自然是，上线部署以点到为止。没有限制它内存。<br>我笑一下，准备收工，因为这时间，按传统部署的点到为止，服务器已经够用了。我收工的时间回宿舍啦。<br>它突然袭击，还有8个微服务，来打我机子，啊。我大意了啊，没有闪。<br>来，抢！来，偷吃，我DDR3的，老内存，这好吗？这不好。<br>它说它是乱占用的，它可不是乱占用的。一个996，一个888，这明显是，有备而来！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>正常的操作是加钱上大一点的内存，但是大内存VPS、杜甫它贵啊。以套路云香港为例，明晃晃的抢钱。而且16G内存及以上的版本已经无了。其他华南华北的VPS更贵一点，而且全都是1M小水管。</p><p><img src="/spring-cloud-performance-optimization/image-20201120103456546.png" alt="套路云香港"></p><p><del>服务器内存比本地台式还小是要出大问题的,上线炸内存警告</del></p><p>102网吧里面服务器是有32G内存的，然而网速…..</p><p>服务器的套餐是学校20一个月20M的普通套餐（20M是下载速度，要想对外服务，上传速度可能只有几M）同为校园网。而且你电的教育网会有各种小问题，比如逢年过节十一国庆公网IP就被信息中心收回去了、校园网出口线路很差、域名也不好搞。</p><p>加钱换校园网的套餐也没用，你电沙河主楼的网速我很少见有人跑出过100Mbps以上的。而且问题是主楼那个墙里的网线，貌似是百兆网…教研室的老交换机上面还赫然贴着一张2010年的封条。。。</p><p>VPS的话选Debian，根据我多年用128M-1G内存VPS灵车漂移的印象，占用资源最少的少的就这个了（CentOS占用&gt;Ubuntu Server&gt;Debian&gt;VSP2ARCH）</p><p><del>其实我很想VPS2ARCH再次灵车漂移，但是毕竟是要出事背锅生产环境我不敢</del></p><h2 id="考虑扔掉Docker"><a href="#考虑扔掉Docker" class="headerlink" title="考虑扔掉Docker"></a>考虑扔掉Docker</h2><p>直接裸跑吧，不要再套几层了。</p><h2 id="其他能扔的"><a href="#其他能扔的" class="headerlink" title="其他能扔的"></a>其他能扔的</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>这么点用户量没啥缓存的必要，关了</p><h3 id="NACOS"><a href="#NACOS" class="headerlink" title="NACOS"></a>NACOS</h3><p>动态注册发现之类的单机版也没必要用了，直接手动排查和维护吧。</p><p>NACOS的内存占用单机版在几百M左右（默认参数是<code>-Xms512m -Xmx512m -Xmn256m</code>，可以在startup.sh里面改，不过还是直接关掉比较清静。</p><p><img src="/spring-cloud-performance-optimization/image-20201120212626344.png" alt="NACOS内存使用情况"></p><h2 id="JDK版本"><a href="#JDK版本" class="headerlink" title="JDK版本"></a>JDK版本</h2><p>之前一直用的java8-Openjdk。</p><p>后来看到据说 Oracle JDK 和 Open JDK 有性能差异，不同版本的jdk也有性能差异，java 8 的64位版本和32位版本也有区别（据说不超过2G内存的情况下貌似32位会好一些）</p><p>那就都试试吧。在Arch上打的jar包，就在本地测试了一下，没在服务器上试。</p><h3 id="不同版本内存占用"><a href="#不同版本内存占用" class="headerlink" title="不同版本内存占用"></a>不同版本内存占用</h3><p>Arch有个脚本，可以切换OpenJDK的版本，</p><p><img src="/spring-cloud-performance-optimization/image-20201124123102440.png" alt="archlinux-java"></p><p>Oracle JDK 由于甲骨文公司不武德，跟各路开源组织（以及很多闭源福报公司）都闹僵了，Arch仓库不提供支持，得自己安装。</p><p>从AUR安装结果报错说<code>**==&gt; ERROR:** **Failure while downloading manual://jdk-8u271-linux-x64.tar.gz**    **Aborting...** error downloading sources: jdk8</code>，看了一下还得跑到<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=">Oracle<i class="fa fa-external-link-alt"></i></span>那里去注册下载然后pkgbuild</p><p>从阿里云的镜像可以不用注册下载<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGs4LTh1MjcxL3Jhdy9tYXN0ZXIvamRrLTh1MjcxLWxpbnV4LXg2NC50YXIuZ3o=">jdk8<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmFsaXl1bi5jb20va2FyL29qZGsxMS0xMS4wLjkvcmF3L21hc3Rlci9qZGstMTEuMC45X2xpbnV4LXg2NF9iaW4udGFyLmd6">jdk11<i class="fa fa-external-link-alt"></i></span>，然后扔到<code>~/Downloads</code>里面，再运行<code>yay -Syu jdk8 jdk11</code>就好了。</p><p>java8 和java11 的编译通过了，看起来Oracle JDK效果是要好一点(也只有十几兆的微弱差别，感觉区别不大)，java14和java15还没试，以后有空再说。</p><h3 id="32位和64位的差异"><a href="#32位和64位的差异" class="headerlink" title="32位和64位的差异"></a>32位和64位的差异</h3><p>试了一下java8的32位和64位，貌似有一点区别，32位是节省一点资源。大概差距也在十几兆左右，区别不太大。</p><h2 id="JVM调参"><a href="#JVM调参" class="headerlink" title="JVM调参"></a>JVM调参</h2><p>大概调了调，冲着压榨内存占用调的</p><p>几个比较重要的参数：</p><ul><li>-Xms</li><li>-Xmx</li><li></li></ul><p>暂时把参数改成这样子了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -Xms16m -Xmx32m -XX:MaxMetaspaceSize<span class="token operator">=</span>48m -XX:CompressedClassSpaceSize<span class="token operator">=</span>8m -Xss256k -Xmn300m -XX:InitialCodeCacheSize<span class="token operator">=</span>4m -XX:ReservedCodeCacheSize<span class="token operator">=</span>8m -XX:MaxDirectMemorySize<span class="token operator">=</span>16m -jar service_ucenter-0.0.1-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不太敢压榨的太狠，怕上线了OutofMemory。</p><p>现在每个jar包跑起来大概内存占用在300M以下。</p><h2 id="压缩MySQL内存占用"><a href="#压缩MySQL内存占用" class="headerlink" title="压缩MySQL内存占用"></a>压缩MySQL内存占用</h2><p>MySQL的内存占用压缩一下还是很低的，之前还在用wordpress的时候128M内存的灵车VPS跑起来没什么大问题。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>浏览器F12 可以看到，在加载首页的时候，大部分html、css、js资源在300ms内加载完成，500ms以后开始加载图床资源，一直到最4000ms以后才加载完成。</p><p><img src="/spring-cloud-performance-optimization/image-20201124170847425.png" alt="加载首页"></p><p>下图是打开首页时png图片（阿里云图床，大小 926k）的时候的加载速度，耗时最长的就是下载图片的过程。</p><p><img src="/spring-cloud-performance-optimization/image-20201124165004678.png" alt="image load speed"></p><p>主要就是压缩图片大小了，jpg和png全换成webp，今年6月份Safari14已经支持webp了，现在主流浏览器都问题不大。</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>暂时不考虑，不过上线的时候砍掉几个无关紧要的功能倒是问题不大，这样只开4个微服务就差不多能用了。</p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p>如果不跑别的东西，一个4G内存的VPS已经够用了。</p><p><img src="/spring-cloud-performance-optimization/image-20201124120817137.png" alt="首页"></p><p><img src="/spring-cloud-performance-optimization/image-20201124120944296.png" alt="全部课程页面"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLnJlZGhhdC5jb20vYmxvZy8yMDE3LzA0LzA0L29wZW5qZGstYW5kLWNvbnRhaW5lcnMv">https://developers.redhat.com/blog/2017/04/04/openjdk-and-containers/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmtlbHUub3JnL3RlY2gvMjAxOC8wNS8zMC9ydW5uaW5nLWEtanZtLWluLWEtY29udGFpbmVyLXdpdGhvdXQtZ2V0dGluZy1raWxsZWQuaHRtbA==">https://blog.kelu.org/tech/2018/05/30/running-a-jvm-in-a-container-without-getting-killed.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXR5b3Vrbm93L3AvNTYxMDIzMi5odG1s">https://www.cnblogs.com/ityouknow/p/5610232.html<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZseWxlZnQvdGlwL2Jsb2IvbWFzdGVyL2Jsb2cvc3ByaW5nYm9vdCVFNiU4MCVBNyVFOCU4MyVCRCVFOCVCMCU4MyVFNCVCQyU5OC5tZA==">https://github.com/flyleft/tip/blob/master/blog/springboot%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B5b3J0dWMvanZtLW1lbW9yeS1hbGxvY2F0aW9uLWluLWRvY2tlci1jb250YWluZXItYTI2YmJjZTNhM2Yy">https://medium.com/@yortuc/jvm-memory-allocation-in-docker-container-a26bbce3a3f2<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没钱买 256G 内存的服务器的人是这样的&lt;/p&gt;</summary>
    
    
    
    <category term="102网吧日常" scheme="https://zhangjk98.xyz/categories/102%E7%BD%91%E5%90%A7%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="jvm" scheme="https://zhangjk98.xyz/tags/jvm/"/>
    
    <category term="Spring" scheme="https://zhangjk98.xyz/tags/Spring/"/>
    
  </entry>
  
</feed>
